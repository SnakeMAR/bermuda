// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = typeof window === 'object';
// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret; return 0; } }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module['Runtime'] = Runtime;



//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;


function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if ((typeof _sbrk !== 'undefined' && !_sbrk.called) || !runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module['getMemory'] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module['AsciiToString'] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module['stringToAscii'] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module['UTF8ArrayToString'] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8, ptr);
}
Module['UTF8ToString'] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module['stringToUTF8Array'] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
}
Module['stringToUTF8'] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module['lengthBytesUTF8'] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}
Module['stringToUTF16'] = stringToUTF16;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}
Module['lengthBytesUTF16'] = lengthBytesUTF16;

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}
Module['stringToUTF32'] = stringToUTF32;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}
Module['lengthBytesUTF32'] = lengthBytesUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module['stackTrace'] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk


function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer;
buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 35232;
  /* global initializers */  __ATINIT__.push();
  

/* memory initializer */ allocate([140,39,0,0,232,86,0,0,24,0,0,0,0,0,0,0,100,39,0,0,1,87,0,0,140,39,0,0,25,87,0,0,48,0,0,0,0,0,0,0,100,39,0,0,38,87,0,0,140,39,0,0,209,87,0,0,72,0,0,0,0,0,0,0,100,39,0,0,191,87,0,0,140,39,0,0,10,97,0,0,96,0,0,0,0,0,0,0,100,39,0,0,20,97,0,0,140,39,0,0,57,117,0,0,120,0,0,0,0,0,0,0,100,39,0,0,229,117,0,0,140,39,0,0,163,120,0,0,144,0,0,0,0,0,0,0,100,39,0,0,176,120,0,0,100,39,0,0,189,120,0,0,140,39,0,0,202,120,0,0,152,0,0,0,0,0,0,0,140,39,0,0,235,120,0,0,160,0,0,0,0,0,0,0,140,39,0,0,49,121,0,0,160,0,0,0,0,0,0,0,140,39,0,0,13,121,0,0,192,0,0,0,0,0,0,0,140,39,0,0,83,121,0,0,176,0,0,0,0,0,0,0,121,0,0,0,17,0,0,0,164,0,0,0,26,0,0,0,222,0,0,0,16,0,0,0,33,0,0,0,165,0,0,0,62,2,0,0,150,0,0,0,0,0,0,0,8,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,24,0,0,0,3,0,0,0,4,0,0,0,0,0,0,0,32,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,0,0,0,0,48,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,0,0,0,0,72,0,0,0,20,0,0,0,21,0,0,0,16,0,0,0,87,95,0,0,95,95,0,0,0,0,0,0,198,108,0,0,64,95,0,0,66,95,0,0,68,95,0,0,0,0,0,0,175,94,0,0,2,0,0,0,187,94,0,0,3,0,0,0,199,94,0,0,4,0,0,0,212,94,0,0,5,0,0,0,222,94,0,0,6,0,0,0,234,94,0,0,7,0,0,0,247,94,0,0,8,0,0,0,4,95,0,0,9,0,0,0,16,95,0,0,10,0,0,0,28,95,0,0,11,0,0,0,41,95,0,0,12,0,0,0,54,95,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,0,0,0,0,96,0,0,0,32,0,0,0,33,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,34,0,0,0,0,0,0,0,100,0,0,0,35,0,0,0,0,0,0,0,244,1,0,0,36,0,0,0,0,0,0,0,254,1,0,0,37,0,0,0,0,0,0,0,76,4,0,0,38,0,0,0,0,0,0,0,196,9,0,0,39,0,0,0,0,0,0,0,184,11,0,0,40,0,0,0,0,0,0,0,194,11,0,0,41,0,0,0,0,0,0,0,234,11,0,0,42,0,0,0,0,0,0,0,28,12,0,0,43,0,0,0,0,0,0,0,33,12,0,0,44,0,0,0,0,0,0,0,38,12,0,0,45,0,0,0,0,0,0,0,78,12,0,0,46,0,0,0,0,0,0,0,228,12,0,0,47,0,0,0,0,0,0,0,238,12,0,0,48,0,0,0,0,0,0,0,72,13,0,0,49,0,0,0,0,0,0,0,82,13,0,0,50,0,0,0,0,0,0,0,172,13,0,0,51,0,0,0,0,0,0,0,182,13,0,0,52,0,0,0,0,0,0,0,16,14,0,0,53,0,0,0,0,0,0,0,116,14,0,0,54,0,0,0,0,0,0,0,126,14,0,0,55,0,0,0,0,0,0,0,14,16,0,0,56,0,0,0,0,0,0,0,112,23,0,0,57,0,0,0,0,0,0,0,100,25,0,0,58,0,0,0,0,0,0,0,88,27,0,0,59,0,0,0,0,0,0,0,76,29,0,0,60,0,0,0,0,0,0,0,52,33,0,0,61,0,0,0,0,0,0,0,16,39,0,0,62,0,0,0,0,0,0,0,32,78,0,0,63,0,0,0,0,0,0,0,42,78,0,0,64,0,0,0,0,0,0,0,168,97,0,0,65,0,0,0,0,0,0,0,48,117,0,0,66,0,0,0,0,0,0,0,33,0,0,0,184,11,0,0,67,0,0,0,0,0,0,0,28,12,0,0,68,0,0,0,0,0,0,0,38,12,0,0,69,0,0,0,0,0,0,0,48,12,0,0,70,0,0,0,0,0,0,0,58,12,0,0,71,0,0,0,0,0,0,0,128,12,0,0,72,0,0,0,0,0,0,0,228,12,0,0,73,0,0,0,0,0,0,0,72,13,0,0,74,0,0,0,0,0,0,0,82,13,0,0,75,0,0,0,0,0,0,0,102,13,0,0,76,0,0,0,0,0,0,0,112,13,0,0,77,0,0,0,0,0,0,0,132,13,0,0,78,0,0,0,0,0,0,0,152,13,0,0,79,0,0,0,0,0,0,0,172,13,0,0,80,0,0,0,0,0,0,0,202,13,0,0,81,0,0,0,0,0,0,0,212,13,0,0,82,0,0,0,0,0,0,0,232,13,0,0,83,0,0,0,0,0,0,0,252,13,0,0,84,0,0,0,0,0,0,0,160,15,0,0,85,0,0,0,0,0,0,0,4,16,0,0,86,0,0,0,0,0,0,0,104,16,0,0,87,0,0,0,0,0,0,0,136,19,0,0,88,0,0,0,0,0,0,0,236,19,0,0,89,0,0,0,0,0,0,0,246,19,0,0,90,0,0,0,0,0,0,0,248,19,0,0,91,0,0,0,0,0,0,0,250,19,0,0,92,0,0,0,0,0,0,0,80,20,0,0,93,0,0,0,0,0,0,0,180,20,0,0,94,0,0,0,0,0,0,0,24,21,0,0,95,0,0,0,0,0,0,0,124,21,0,0,96,0,0,0,0,0,0,0,112,23,0,0,97,0,0,0,0,0,0,0,212,23,0,0,98,0,0,0,0,0,0,0,88,27,0,0,99,0,0,0,0,0,0,0,98,27,0,0,100,0,0,0,0,0,0,0,188,27,0,0,101,0,0,0,0,0,0,0,198,27,0,0,102,0,0,0,0,0,0,0,32,28,0,0,103,0,0,0,0,0,0,0,132,28,0,0,104,0,0,0,0,0,0,0,64,31,0,0,105,0,0,0,0,0,0,0,16,39,0,0,106,0,0,0,0,0,0,0,248,42,0,0,107,0,0,0,0,0,0,0,32,78,0,0,108,0,0,0,0,0,0,0,42,78,0,0,109,0,0,0,0,0,0,0,168,97,0,0,110,0,0,0,0,0,0,0,48,117,0,0,111,0,0,0,0,0,0,0,58,117,0,0,112,0,0,0,0,0,0,0,46,0,0,0,0,0,0,0,104,0,0,0,113,0,0,0,114,0,0,0,115,0,0,0,116,0,0,0,117,0,0,0,118,0,0,0,119,0,0,0,120,0,0,0,121,0,0,0,122,0,0,0,123,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,128,0,0,0,129,0,0,0,130,0,0,0,131,0,0,0,132,0,0,0,133,0,0,0,0,0,0,0,120,0,0,0,134,0,0,0,135,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,0,0,0,0,150,48,7,119,44,97,14,238,186,81,9,153,25,196,109,7,143,244,106,112,53,165,99,233,163,149,100,158,50,136,219,14,164,184,220,121,30,233,213,224,136,217,210,151,43,76,182,9,189,124,177,126,7,45,184,231,145,29,191,144,100,16,183,29,242,32,176,106,72,113,185,243,222,65,190,132,125,212,218,26,235,228,221,109,81,181,212,244,199,133,211,131,86,152,108,19,192,168,107,100,122,249,98,253,236,201,101,138,79,92,1,20,217,108,6,99,99,61,15,250,245,13,8,141,200,32,110,59,94,16,105,76,228,65,96,213,114,113,103,162,209,228,3,60,71,212,4,75,253,133,13,210,107,181,10,165,250,168,181,53,108,152,178,66,214,201,187,219,64,249,188,172,227,108,216,50,117,92,223,69,207,13,214,220,89,61,209,171,172,48,217,38,58,0,222,81,128,81,215,200,22,97,208,191,181,244,180,33,35,196,179,86,153,149,186,207,15,165,189,184,158,184,2,40,8,136,5,95,178,217,12,198,36,233,11,177,135,124,111,47,17,76,104,88,171,29,97,193,61,45,102,182,144,65,220,118,6,113,219,1,188,32,210,152,42,16,213,239,137,133,177,113,31,181,182,6,165,228,191,159,51,212,184,232,162,201,7,120,52,249,0,15,142,168,9,150,24,152,14,225,187,13,106,127,45,61,109,8,151,108,100,145,1,92,99,230,244,81,107,107,98,97,108,28,216,48,101,133,78,0,98,242,237,149,6,108,123,165,1,27,193,244,8,130,87,196,15,245,198,217,176,101,80,233,183,18,234,184,190,139,124,136,185,252,223,29,221,98,73,45,218,21,243,124,211,140,101,76,212,251,88,97,178,77,206,81,181,58,116,0,188,163,226,48,187,212,65,165,223,74,215,149,216,61,109,196,209,164,251,244,214,211,106,233,105,67,252,217,110,52,70,136,103,173,208,184,96,218,115,45,4,68,229,29,3,51,95,76,10,170,201,124,13,221,60,113,5,80,170,65,2,39,16,16,11,190,134,32,12,201,37,181,104,87,179,133,111,32,9,212,102,185,159,228,97,206,14,249,222,94,152,201,217,41,34,152,208,176,180,168,215,199,23,61,179,89,129,13,180,46,59,92,189,183,173,108,186,192,32,131,184,237,182,179,191,154,12,226,182,3,154,210,177,116,57,71,213,234,175,119,210,157,21,38,219,4,131,22,220,115,18,11,99,227,132,59,100,148,62,106,109,13,168,90,106,122,11,207,14,228,157,255,9,147,39,174,0,10,177,158,7,125,68,147,15,240,210,163,8,135,104,242,1,30,254,194,6,105,93,87,98,247,203,103,101,128,113,54,108,25,231,6,107,110,118,27,212,254,224,43,211,137,90,122,218,16,204,74,221,103,111,223,185,249,249,239,190,142,67,190,183,23,213,142,176,96,232,163,214,214,126,147,209,161,196,194,216,56,82,242,223,79,241,103,187,209,103,87,188,166,221,6,181,63,75,54,178,72,218,43,13,216,76,27,10,175,246,74,3,54,96,122,4,65,195,239,96,223,85,223,103,168,239,142,110,49,121,190,105,70,140,179,97,203,26,131,102,188,160,210,111,37,54,226,104,82,149,119,12,204,3,71,11,187,185,22,2,34,47,38,5,85,190,59,186,197,40,11,189,178,146,90,180,43,4,106,179,92,167,255,215,194,49,207,208,181,139,158,217,44,29,174,222,91,176,194,100,155,38,242,99,236,156,163,106,117,10,147,109,2,169,6,9,156,63,54,14,235,133,103,7,114,19,87,0,5,130,74,191,149,20,122,184,226,174,43,177,123,56,27,182,12,155,142,210,146,13,190,213,229,183,239,220,124,33,223,219,11,212,210,211,134,66,226,212,241,248,179,221,104,110,131,218,31,205,22,190,129,91,38,185,246,225,119,176,111,119,71,183,24,230,90,8,136,112,106,15,255,202,59,6,102,92,11,1,17,255,158,101,143,105,174,98,248,211,255,107,97,69,207,108,22,120,226,10,160,238,210,13,215,84,131,4,78,194,179,3,57,97,38,103,167,247,22,96,208,77,71,105,73,219,119,110,62,74,106,209,174,220,90,214,217,102,11,223,64,240,59,216,55,83,174,188,169,197,158,187,222,127,207,178,71,233,255,181,48,28,242,189,189,138,194,186,202,48,147,179,83,166,163,180,36,5,54,208,186,147,6,215,205,41,87,222,84,191,103,217,35,46,122,102,179,184,74,97,196,2,27,104,93,148,43,111,42,55,190,11,180,161,142,12,195,27,223,5,90,141,239,2,45,0,0,0,0,65,49,27,25,130,98,54,50,195,83,45,43,4,197,108,100,69,244,119,125,134,167,90,86,199,150,65,79,8,138,217,200,73,187,194,209,138,232,239,250,203,217,244,227,12,79,181,172,77,126,174,181,142,45,131,158,207,28,152,135,81,18,194,74,16,35,217,83,211,112,244,120,146,65,239,97,85,215,174,46,20,230,181,55,215,181,152,28,150,132,131,5,89,152,27,130,24,169,0,155,219,250,45,176,154,203,54,169,93,93,119,230,28,108,108,255,223,63,65,212,158,14,90,205,162,36,132,149,227,21,159,140,32,70,178,167,97,119,169,190,166,225,232,241,231,208,243,232,36,131,222,195,101,178,197,218,170,174,93,93,235,159,70,68,40,204,107,111,105,253,112,118,174,107,49,57,239,90,42,32,44,9,7,11,109,56,28,18,243,54,70,223,178,7,93,198,113,84,112,237,48,101,107,244,247,243,42,187,182,194,49,162,117,145,28,137,52,160,7,144,251,188,159,23,186,141,132,14,121,222,169,37,56,239,178,60,255,121,243,115,190,72,232,106,125,27,197,65,60,42,222,88,5,79,121,240,68,126,98,233,135,45,79,194,198,28,84,219,1,138,21,148,64,187,14,141,131,232,35,166,194,217,56,191,13,197,160,56,76,244,187,33,143,167,150,10,206,150,141,19,9,0,204,92,72,49,215,69,139,98,250,110,202,83,225,119,84,93,187,186,21,108,160,163,214,63,141,136,151,14,150,145,80,152,215,222,17,169,204,199,210,250,225,236,147,203,250,245,92,215,98,114,29,230,121,107,222,181,84,64,159,132,79,89,88,18,14,22,25,35,21,15,218,112,56,36,155,65,35,61,167,107,253,101,230,90,230,124,37,9,203,87,100,56,208,78,163,174,145,1,226,159,138,24,33,204,167,51,96,253,188,42,175,225,36,173,238,208,63,180,45,131,18,159,108,178,9,134,171,36,72,201,234,21,83,208,41,70,126,251,104,119,101,226,246,121,63,47,183,72,36,54,116,27,9,29,53,42,18,4,242,188,83,75,179,141,72,82,112,222,101,121,49,239,126,96,254,243,230,231,191,194,253,254,124,145,208,213,61,160,203,204,250,54,138,131,187,7,145,154,120,84,188,177,57,101,167,168,75,152,131,59,10,169,152,34,201,250,181,9,136,203,174,16,79,93,239,95,14,108,244,70,205,63,217,109,140,14,194,116,67,18,90,243,2,35,65,234,193,112,108,193,128,65,119,216,71,215,54,151,6,230,45,142,197,181,0,165,132,132,27,188,26,138,65,113,91,187,90,104,152,232,119,67,217,217,108,90,30,79,45,21,95,126,54,12,156,45,27,39,221,28,0,62,18,0,152,185,83,49,131,160,144,98,174,139,209,83,181,146,22,197,244,221,87,244,239,196,148,167,194,239,213,150,217,246,233,188,7,174,168,141,28,183,107,222,49,156,42,239,42,133,237,121,107,202,172,72,112,211,111,27,93,248,46,42,70,225,225,54,222,102,160,7,197,127,99,84,232,84,34,101,243,77,229,243,178,2,164,194,169,27,103,145,132,48,38,160,159,41,184,174,197,228,249,159,222,253,58,204,243,214,123,253,232,207,188,107,169,128,253,90,178,153,62,9,159,178,127,56,132,171,176,36,28,44,241,21,7,53,50,70,42,30,115,119,49,7,180,225,112,72,245,208,107,81,54,131,70,122,119,178,93,99,78,215,250,203,15,230,225,210,204,181,204,249,141,132,215,224,74,18,150,175,11,35,141,182,200,112,160,157,137,65,187,132,70,93,35,3,7,108,56,26,196,63,21,49,133,14,14,40,66,152,79,103,3,169,84,126,192,250,121,85,129,203,98,76,31,197,56,129,94,244,35,152,157,167,14,179,220,150,21,170,27,0,84,229,90,49,79,252,153,98,98,215,216,83,121,206,23,79,225,73,86,126,250,80,149,45,215,123,212,28,204,98,19,138,141,45,82,187,150,52,145,232,187,31,208,217,160,6,236,243,126,94,173,194,101,71,110,145,72,108,47,160,83,117,232,54,18,58,169,7,9,35,106,84,36,8,43,101,63,17,228,121,167,150,165,72,188,143,102,27,145,164,39,42,138,189,224,188,203,242,161,141,208,235,98,222,253,192,35,239,230,217,189,225,188,20,252,208,167,13,63,131,138,38,126,178,145,63,185,36,208,112,248,21,203,105,59,70,230,66,122,119,253,91,181,107,101,220,244,90,126,197,55,9,83,238,118,56,72,247,177,174,9,184,240,159,18,161,51,204,63,138,114,253,36,147,0,0,0,0,55,106,194,1,110,212,132,3,89,190,70,2,220,168,9,7,235,194,203,6,178,124,141,4,133,22,79,5,184,81,19,14,143,59,209,15,214,133,151,13,225,239,85,12,100,249,26,9,83,147,216,8,10,45,158,10,61,71,92,11,112,163,38,28,71,201,228,29,30,119,162,31,41,29,96,30,172,11,47,27,155,97,237,26,194,223,171,24,245,181,105,25,200,242,53,18,255,152,247,19,166,38,177,17,145,76,115,16,20,90,60,21,35,48,254,20,122,142,184,22,77,228,122,23,224,70,77,56,215,44,143,57,142,146,201,59,185,248,11,58,60,238,68,63,11,132,134,62,82,58,192,60,101,80,2,61,88,23,94,54,111,125,156,55,54,195,218,53,1,169,24,52,132,191,87,49,179,213,149,48,234,107,211,50,221,1,17,51,144,229,107,36,167,143,169,37,254,49,239,39,201,91,45,38,76,77,98,35,123,39,160,34,34,153,230,32,21,243,36,33,40,180,120,42,31,222,186,43,70,96,252,41,113,10,62,40,244,28,113,45,195,118,179,44,154,200,245,46,173,162,55,47,192,141,154,112,247,231,88,113,174,89,30,115,153,51,220,114,28,37,147,119,43,79,81,118,114,241,23,116,69,155,213,117,120,220,137,126,79,182,75,127,22,8,13,125,33,98,207,124,164,116,128,121,147,30,66,120,202,160,4,122,253,202,198,123,176,46,188,108,135,68,126,109,222,250,56,111,233,144,250,110,108,134,181,107,91,236,119,106,2,82,49,104,53,56,243,105,8,127,175,98,63,21,109,99,102,171,43,97,81,193,233,96,212,215,166,101,227,189,100,100,186,3,34,102,141,105,224,103,32,203,215,72,23,161,21,73,78,31,83,75,121,117,145,74,252,99,222,79,203,9,28,78,146,183,90,76,165,221,152,77,152,154,196,70,175,240,6,71,246,78,64,69,193,36,130,68,68,50,205,65,115,88,15,64,42,230,73,66,29,140,139,67,80,104,241,84,103,2,51,85,62,188,117,87,9,214,183,86,140,192,248,83,187,170,58,82,226,20,124,80,213,126,190,81,232,57,226,90,223,83,32,91,134,237,102,89,177,135,164,88,52,145,235,93,3,251,41,92,90,69,111,94,109,47,173,95,128,27,53,225,183,113,247,224,238,207,177,226,217,165,115,227,92,179,60,230,107,217,254,231,50,103,184,229,5,13,122,228,56,74,38,239,15,32,228,238,86,158,162,236,97,244,96,237,228,226,47,232,211,136,237,233,138,54,171,235,189,92,105,234,240,184,19,253,199,210,209,252,158,108,151,254,169,6,85,255,44,16,26,250,27,122,216,251,66,196,158,249,117,174,92,248,72,233,0,243,127,131,194,242,38,61,132,240,17,87,70,241,148,65,9,244,163,43,203,245,250,149,141,247,205,255,79,246,96,93,120,217,87,55,186,216,14,137,252,218,57,227,62,219,188,245,113,222,139,159,179,223,210,33,245,221,229,75,55,220,216,12,107,215,239,102,169,214,182,216,239,212,129,178,45,213,4,164,98,208,51,206,160,209,106,112,230,211,93,26,36,210,16,254,94,197,39,148,156,196,126,42,218,198,73,64,24,199,204,86,87,194,251,60,149,195,162,130,211,193,149,232,17,192,168,175,77,203,159,197,143,202,198,123,201,200,241,17,11,201,116,7,68,204,67,109,134,205,26,211,192,207,45,185,2,206,64,150,175,145,119,252,109,144,46,66,43,146,25,40,233,147,156,62,166,150,171,84,100,151,242,234,34,149,197,128,224,148,248,199,188,159,207,173,126,158,150,19,56,156,161,121,250,157,36,111,181,152,19,5,119,153,74,187,49,155,125,209,243,154,48,53,137,141,7,95,75,140,94,225,13,142,105,139,207,143,236,157,128,138,219,247,66,139,130,73,4,137,181,35,198,136,136,100,154,131,191,14,88,130,230,176,30,128,209,218,220,129,84,204,147,132,99,166,81,133,58,24,23,135,13,114,213,134,160,208,226,169,151,186,32,168,206,4,102,170,249,110,164,171,124,120,235,174,75,18,41,175,18,172,111,173,37,198,173,172,24,129,241,167,47,235,51,166,118,85,117,164,65,63,183,165,196,41,248,160,243,67,58,161,170,253,124,163,157,151,190,162,208,115,196,181,231,25,6,180,190,167,64,182,137,205,130,183,12,219,205,178,59,177,15,179,98,15,73,177,85,101,139,176,104,34,215,187,95,72,21,186,6,246,83,184,49,156,145,185,180,138,222,188,131,224,28,189,218,94,90,191,237,52,152,190,0,0,0,0,101,103,188,184,139,200,9,170,238,175,181,18,87,151,98,143,50,240,222,55,220,95,107,37,185,56,215,157,239,40,180,197,138,79,8,125,100,224,189,111,1,135,1,215,184,191,214,74,221,216,106,242,51,119,223,224,86,16,99,88,159,87,25,80,250,48,165,232,20,159,16,250,113,248,172,66,200,192,123,223,173,167,199,103,67,8,114,117,38,111,206,205,112,127,173,149,21,24,17,45,251,183,164,63,158,208,24,135,39,232,207,26,66,143,115,162,172,32,198,176,201,71,122,8,62,175,50,160,91,200,142,24,181,103,59,10,208,0,135,178,105,56,80,47,12,95,236,151,226,240,89,133,135,151,229,61,209,135,134,101,180,224,58,221,90,79,143,207,63,40,51,119,134,16,228,234,227,119,88,82,13,216,237,64,104,191,81,248,161,248,43,240,196,159,151,72,42,48,34,90,79,87,158,226,246,111,73,127,147,8,245,199,125,167,64,213,24,192,252,109,78,208,159,53,43,183,35,141,197,24,150,159,160,127,42,39,25,71,253,186,124,32,65,2,146,143,244,16,247,232,72,168,61,88,20,155,88,63,168,35,182,144,29,49,211,247,161,137,106,207,118,20,15,168,202,172,225,7,127,190,132,96,195,6,210,112,160,94,183,23,28,230,89,184,169,244,60,223,21,76,133,231,194,209,224,128,126,105,14,47,203,123,107,72,119,195,162,15,13,203,199,104,177,115,41,199,4,97,76,160,184,217,245,152,111,68,144,255,211,252,126,80,102,238,27,55,218,86,77,39,185,14,40,64,5,182,198,239,176,164,163,136,12,28,26,176,219,129,127,215,103,57,145,120,210,43,244,31,110,147,3,247,38,59,102,144,154,131,136,63,47,145,237,88,147,41,84,96,68,180,49,7,248,12,223,168,77,30,186,207,241,166,236,223,146,254,137,184,46,70,103,23,155,84,2,112,39,236,187,72,240,113,222,47,76,201,48,128,249,219,85,231,69,99,156,160,63,107,249,199,131,211,23,104,54,193,114,15,138,121,203,55,93,228,174,80,225,92,64,255,84,78,37,152,232,246,115,136,139,174,22,239,55,22,248,64,130,4,157,39,62,188,36,31,233,33,65,120,85,153,175,215,224,139,202,176,92,51,59,182,89,237,94,209,229,85,176,126,80,71,213,25,236,255,108,33,59,98,9,70,135,218,231,233,50,200,130,142,142,112,212,158,237,40,177,249,81,144,95,86,228,130,58,49,88,58,131,9,143,167,230,110,51,31,8,193,134,13,109,166,58,181,164,225,64,189,193,134,252,5,47,41,73,23,74,78,245,175,243,118,34,50,150,17,158,138,120,190,43,152,29,217,151,32,75,201,244,120,46,174,72,192,192,1,253,210,165,102,65,106,28,94,150,247,121,57,42,79,151,150,159,93,242,241,35,229,5,25,107,77,96,126,215,245,142,209,98,231,235,182,222,95,82,142,9,194,55,233,181,122,217,70,0,104,188,33,188,208,234,49,223,136,143,86,99,48,97,249,214,34,4,158,106,154,189,166,189,7,216,193,1,191,54,110,180,173,83,9,8,21,154,78,114,29,255,41,206,165,17,134,123,183,116,225,199,15,205,217,16,146,168,190,172,42,70,17,25,56,35,118,165,128,117,102,198,216,16,1,122,96,254,174,207,114,155,201,115,202,34,241,164,87,71,150,24,239,169,57,173,253,204,94,17,69,6,238,77,118,99,137,241,206,141,38,68,220,232,65,248,100,81,121,47,249,52,30,147,65,218,177,38,83,191,214,154,235,233,198,249,179,140,161,69,11,98,14,240,25,7,105,76,161,190,81,155,60,219,54,39,132,53,153,146,150,80,254,46,46,153,185,84,38,252,222,232,158,18,113,93,140,119,22,225,52,206,46,54,169,171,73,138,17,69,230,63,3,32,129,131,187,118,145,224,227,19,246,92,91,253,89,233,73,152,62,85,241,33,6,130,108,68,97,62,212,170,206,139,198,207,169,55,126,56,65,127,214,93,38,195,110,179,137,118,124,214,238,202,196,111,214,29,89,10,177,161,225,228,30,20,243,129,121,168,75,215,105,203,19,178,14,119,171,92,161,194,185,57,198,126,1,128,254,169,156,229,153,21,36,11,54,160,54,110,81,28,142,167,22,102,134,194,113,218,62,44,222,111,44,73,185,211,148,240,129,4,9,149,230,184,177,123,73,13,163,30,46,177,27,72,62,210,67,45,89,110,251,195,246,219,233,166,145,103,81,31,169,176,204,122,206,12,116,148,97,185,102,241,6,5,222,0,0,0,0,119,7,48,150,238,14,97,44,153,9,81,186,7,109,196,25,112,106,244,143,233,99,165,53,158,100,149,163,14,219,136,50,121,220,184,164,224,213,233,30,151,210,217,136,9,182,76,43,126,177,124,189,231,184,45,7,144,191,29,145,29,183,16,100,106,176,32,242,243,185,113,72,132,190,65,222,26,218,212,125,109,221,228,235,244,212,181,81,131,211,133,199,19,108,152,86,100,107,168,192,253,98,249,122,138,101,201,236,20,1,92,79,99,6,108,217,250,15,61,99,141,8,13,245,59,110,32,200,76,105,16,94,213,96,65,228,162,103,113,114,60,3,228,209,75,4,212,71,210,13,133,253,165,10,181,107,53,181,168,250,66,178,152,108,219,187,201,214,172,188,249,64,50,216,108,227,69,223,92,117,220,214,13,207,171,209,61,89,38,217,48,172,81,222,0,58,200,215,81,128,191,208,97,22,33,180,244,181,86,179,196,35,207,186,149,153,184,189,165,15,40,2,184,158,95,5,136,8,198,12,217,178,177,11,233,36,47,111,124,135,88,104,76,17,193,97,29,171,182,102,45,61,118,220,65,144,1,219,113,6,152,210,32,188,239,213,16,42,113,177,133,137,6,182,181,31,159,191,228,165,232,184,212,51,120,7,201,162,15,0,249,52,150,9,168,142,225,14,152,24,127,106,13,187,8,109,61,45,145,100,108,151,230,99,92,1,107,107,81,244,28,108,97,98,133,101,48,216,242,98,0,78,108,6,149,237,27,1,165,123,130,8,244,193,245,15,196,87,101,176,217,198,18,183,233,80,139,190,184,234,252,185,136,124,98,221,29,223,21,218,45,73,140,211,124,243,251,212,76,101,77,178,97,88,58,181,81,206,163,188,0,116,212,187,48,226,74,223,165,65,61,216,149,215,164,209,196,109,211,214,244,251,67,105,233,106,52,110,217,252,173,103,136,70,218,96,184,208,68,4,45,115,51,3,29,229,170,10,76,95,221,13,124,201,80,5,113,60,39,2,65,170,190,11,16,16,201,12,32,134,87,104,181,37,32,111,133,179,185,102,212,9,206,97,228,159,94,222,249,14,41,217,201,152,176,208,152,34,199,215,168,180,89,179,61,23,46,180,13,129,183,189,92,59,192,186,108,173,237,184,131,32,154,191,179,182,3,182,226,12,116,177,210,154,234,213,71,57,157,210,119,175,4,219,38,21,115,220,22,131,227,99,11,18,148,100,59,132,13,109,106,62,122,106,90,168,228,14,207,11,147,9,255,157,10,0,174,39,125,7,158,177,240,15,147,68,135,8,163,210,30,1,242,104,105,6,194,254,247,98,87,93,128,101,103,203,25,108,54,113,110,107,6,231,254,212,27,118,137,211,43,224,16,218,122,90,103,221,74,204,249,185,223,111,142,190,239,249,23,183,190,67,96,176,142,213,214,214,163,232,161,209,147,126,56,216,194,196,79,223,242,82,209,187,103,241,166,188,87,103,63,181,6,221,72,178,54,75,216,13,43,218,175,10,27,76,54,3,74,246,65,4,122,96,223,96,239,195,168,103,223,85,49,110,142,239,70,105,190,121,203,97,179,140,188,102,131,26,37,111,210,160,82,104,226,54,204,12,119,149,187,11,71,3,34,2,22,185,85,5,38,47,197,186,59,190,178,189,11,40,43,180,90,146,92,179,106,4,194,215,255,167,181,208,207,49,44,217,158,139,91,222,174,29,155,100,194,176,236,99,242,38,117,106,163,156,2,109,147,10,156,9,6,169,235,14,54,63,114,7,103,133,5,0,87,19,149,191,74,130,226,184,122,20,123,177,43,174,12,182,27,56,146,210,142,155,229,213,190,13,124,220,239,183,11,219,223,33,134,211,210,212,241,212,226,66,104,221,179,248,31,218,131,110,129,190,22,205,246,185,38,91,111,176,119,225,24,183,71,119,136,8,90,230,255,15,106,112,102,6,59,202,17,1,11,92,143,101,158,255,248,98,174,105,97,107,255,211,22,108,207,69,160,10,226,120,215,13,210,238,78,4,131,84,57,3,179,194,167,103,38,97,208,96,22,247,73,105,71,77,62,110,119,219,174,209,106,74,217,214,90,220,64,223,11,102,55,216,59,240,169,188,174,83,222,187,158,197,71,178,207,127,48,181,255,233,189,189,242,28,202,186,194,138,83,179,147,48,36,180,163,166,186,208,54,5,205,215,6,147,84,222,87,41,35,217,103,191,179,102,122,46,196,97,74,184,93,104,27,2,42,111,43,148,180,11,190,55,195,12,142,161,90,5,223,27,45,2,239,141,0,0,0,0,25,27,49,65,50,54,98,130,43,45,83,195,100,108,197,4,125,119,244,69,86,90,167,134,79,65,150,199,200,217,138,8,209,194,187,73,250,239,232,138,227,244,217,203,172,181,79,12,181,174,126,77,158,131,45,142,135,152,28,207,74,194,18,81,83,217,35,16,120,244,112,211,97,239,65,146,46,174,215,85,55,181,230,20,28,152,181,215,5,131,132,150,130,27,152,89,155,0,169,24,176,45,250,219,169,54,203,154,230,119,93,93,255,108,108,28,212,65,63,223,205,90,14,158,149,132,36,162,140,159,21,227,167,178,70,32,190,169,119,97,241,232,225,166,232,243,208,231,195,222,131,36,218,197,178,101,93,93,174,170,68,70,159,235,111,107,204,40,118,112,253,105,57,49,107,174,32,42,90,239,11,7,9,44,18,28,56,109,223,70,54,243,198,93,7,178,237,112,84,113,244,107,101,48,187,42,243,247,162,49,194,182,137,28,145,117,144,7,160,52,23,159,188,251,14,132,141,186,37,169,222,121,60,178,239,56,115,243,121,255,106,232,72,190,65,197,27,125,88,222,42,60,240,121,79,5,233,98,126,68,194,79,45,135,219,84,28,198,148,21,138,1,141,14,187,64,166,35,232,131,191,56,217,194,56,160,197,13,33,187,244,76,10,150,167,143,19,141,150,206,92,204,0,9,69,215,49,72,110,250,98,139,119,225,83,202,186,187,93,84,163,160,108,21,136,141,63,214,145,150,14,151,222,215,152,80,199,204,169,17,236,225,250,210,245,250,203,147,114,98,215,92,107,121,230,29,64,84,181,222,89,79,132,159,22,14,18,88,15,21,35,25,36,56,112,218,61,35,65,155,101,253,107,167,124,230,90,230,87,203,9,37,78,208,56,100,1,145,174,163,24,138,159,226,51,167,204,33,42,188,253,96,173,36,225,175,180,63,208,238,159,18,131,45,134,9,178,108,201,72,36,171,208,83,21,234,251,126,70,41,226,101,119,104,47,63,121,246,54,36,72,183,29,9,27,116,4,18,42,53,75,83,188,242,82,72,141,179,121,101,222,112,96,126,239,49,231,230,243,254,254,253,194,191,213,208,145,124,204,203,160,61,131,138,54,250,154,145,7,187,177,188,84,120,168,167,101,57,59,131,152,75,34,152,169,10,9,181,250,201,16,174,203,136,95,239,93,79,70,244,108,14,109,217,63,205,116,194,14,140,243,90,18,67,234,65,35,2,193,108,112,193,216,119,65,128,151,54,215,71,142,45,230,6,165,0,181,197,188,27,132,132,113,65,138,26,104,90,187,91,67,119,232,152,90,108,217,217,21,45,79,30,12,54,126,95,39,27,45,156,62,0,28,221,185,152,0,18,160,131,49,83,139,174,98,144,146,181,83,209,221,244,197,22,196,239,244,87,239,194,167,148,246,217,150,213,174,7,188,233,183,28,141,168,156,49,222,107,133,42,239,42,202,107,121,237,211,112,72,172,248,93,27,111,225,70,42,46,102,222,54,225,127,197,7,160,84,232,84,99,77,243,101,34,2,178,243,229,27,169,194,164,48,132,145,103,41,159,160,38,228,197,174,184,253,222,159,249,214,243,204,58,207,232,253,123,128,169,107,188,153,178,90,253,178,159,9,62,171,132,56,127,44,28,36,176,53,7,21,241,30,42,70,50,7,49,119,115,72,112,225,180,81,107,208,245,122,70,131,54,99,93,178,119,203,250,215,78,210,225,230,15,249,204,181,204,224,215,132,141,175,150,18,74,182,141,35,11,157,160,112,200,132,187,65,137,3,35,93,70,26,56,108,7,49,21,63,196,40,14,14,133,103,79,152,66,126,84,169,3,85,121,250,192,76,98,203,129,129,56,197,31,152,35,244,94,179,14,167,157,170,21,150,220,229,84,0,27,252,79,49,90,215,98,98,153,206,121,83,216,73,225,79,23,80,250,126,86,123,215,45,149,98,204,28,212,45,141,138,19,52,150,187,82,31,187,232,145,6,160,217,208,94,126,243,236,71,101,194,173,108,72,145,110,117,83,160,47,58,18,54,232,35,9,7,169,8,36,84,106,17,63,101,43,150,167,121,228,143,188,72,165,164,145,27,102,189,138,42,39,242,203,188,224,235,208,141,161,192,253,222,98,217,230,239,35,20,188,225,189,13,167,208,252,38,138,131,63,63,145,178,126,112,208,36,185,105,203,21,248,66,230,70,59,91,253,119,122,220,101,107,181,197,126,90,244,238,83,9,55,247,72,56,118,184,9,174,177,161,18,159,240,138,63,204,51,147,36,253,114,0,0,0,0,1,194,106,55,3,132,212,110,2,70,190,89,7,9,168,220,6,203,194,235,4,141,124,178,5,79,22,133,14,19,81,184,15,209,59,143,13,151,133,214,12,85,239,225,9,26,249,100,8,216,147,83,10,158,45,10,11,92,71,61,28,38,163,112,29,228,201,71,31,162,119,30,30,96,29,41,27,47,11,172,26,237,97,155,24,171,223,194,25,105,181,245,18,53,242,200,19,247,152,255,17,177,38,166,16,115,76,145,21,60,90,20,20,254,48,35,22,184,142,122,23,122,228,77,56,77,70,224,57,143,44,215,59,201,146,142,58,11,248,185,63,68,238,60,62,134,132,11,60,192,58,82,61,2,80,101,54,94,23,88,55,156,125,111,53,218,195,54,52,24,169,1,49,87,191,132,48,149,213,179,50,211,107,234,51,17,1,221,36,107,229,144,37,169,143,167,39,239,49,254,38,45,91,201,35,98,77,76,34,160,39,123,32,230,153,34,33,36,243,21,42,120,180,40,43,186,222,31,41,252,96,70,40,62,10,113,45,113,28,244,44,179,118,195,46,245,200,154,47,55,162,173,112,154,141,192,113,88,231,247,115,30,89,174,114,220,51,153,119,147,37,28,118,81,79,43,116,23,241,114,117,213,155,69,126,137,220,120,127,75,182,79,125,13,8,22,124,207,98,33,121,128,116,164,120,66,30,147,122,4,160,202,123,198,202,253,108,188,46,176,109,126,68,135,111,56,250,222,110,250,144,233,107,181,134,108,106,119,236,91,104,49,82,2,105,243,56,53,98,175,127,8,99,109,21,63,97,43,171,102,96,233,193,81,101,166,215,212,100,100,189,227,102,34,3,186,103,224,105,141,72,215,203,32,73,21,161,23,75,83,31,78,74,145,117,121,79,222,99,252,78,28,9,203,76,90,183,146,77,152,221,165,70,196,154,152,71,6,240,175,69,64,78,246,68,130,36,193,65,205,50,68,64,15,88,115,66,73,230,42,67,139,140,29,84,241,104,80,85,51,2,103,87,117,188,62,86,183,214,9,83,248,192,140,82,58,170,187,80,124,20,226,81,190,126,213,90,226,57,232,91,32,83,223,89,102,237,134,88,164,135,177,93,235,145,52,92,41,251,3,94,111,69,90,95,173,47,109,225,53,27,128,224,247,113,183,226,177,207,238,227,115,165,217,230,60,179,92,231,254,217,107,229,184,103,50,228,122,13,5,239,38,74,56,238,228,32,15,236,162,158,86,237,96,244,97,232,47,226,228,233,237,136,211,235,171,54,138,234,105,92,189,253,19,184,240,252,209,210,199,254,151,108,158,255,85,6,169,250,26,16,44,251,216,122,27,249,158,196,66,248,92,174,117,243,0,233,72,242,194,131,127,240,132,61,38,241,70,87,17,244,9,65,148,245,203,43,163,247,141,149,250,246,79,255,205,217,120,93,96,216,186,55,87,218,252,137,14,219,62,227,57,222,113,245,188,223,179,159,139,221,245,33,210,220,55,75,229,215,107,12,216,214,169,102,239,212,239,216,182,213,45,178,129,208,98,164,4,209,160,206,51,211,230,112,106,210,36,26,93,197,94,254,16,196,156,148,39,198,218,42,126,199,24,64,73,194,87,86,204,195,149,60,251,193,211,130,162,192,17,232,149,203,77,175,168,202,143,197,159,200,201,123,198,201,11,17,241,204,68,7,116,205,134,109,67,207,192,211,26,206,2,185,45,145,175,150,64,144,109,252,119,146,43,66,46,147,233,40,25,150,166,62,156,151,100,84,171,149,34,234,242,148,224,128,197,159,188,199,248,158,126,173,207,156,56,19,150,157,250,121,161,152,181,111,36,153,119,5,19,155,49,187,74,154,243,209,125,141,137,53,48,140,75,95,7,142,13,225,94,143,207,139,105,138,128,157,236,139,66,247,219,137,4,73,130,136,198,35,181,131,154,100,136,130,88,14,191,128,30,176,230,129,220,218,209,132,147,204,84,133,81,166,99,135,23,24,58,134,213,114,13,169,226,208,160,168,32,186,151,170,102,4,206,171,164,110,249,174,235,120,124,175,41,18,75,173,111,172,18,172,173,198,37,167,241,129,24,166,51,235,47,164,117,85,118,165,183,63,65,160,248,41,196,161,58,67,243,163,124,253,170,162,190,151,157,181,196,115,208,180,6,25,231,182,64,167,190,183,130,205,137,178,205,219,12,179,15,177,59,177,73,15,98,176,139,101,85,187,215,34,104,186,21,72,95,184,83,246,6,185,145,156,49,188,222,138,180,189,28,224,131,191,90,94,218,190,152,52,237,0,0,0,0,184,188,103,101,170,9,200,139,18,181,175,238,143,98,151,87,55,222,240,50,37,107,95,220,157,215,56,185,197,180,40,239,125,8,79,138,111,189,224,100,215,1,135,1,74,214,191,184,242,106,216,221,224,223,119,51,88,99,16,86,80,25,87,159,232,165,48,250,250,16,159,20,66,172,248,113,223,123,192,200,103,199,167,173,117,114,8,67,205,206,111,38,149,173,127,112,45,17,24,21,63,164,183,251,135,24,208,158,26,207,232,39,162,115,143,66,176,198,32,172,8,122,71,201,160,50,175,62,24,142,200,91,10,59,103,181,178,135,0,208,47,80,56,105,151,236,95,12,133,89,240,226,61,229,151,135,101,134,135,209,221,58,224,180,207,143,79,90,119,51,40,63,234,228,16,134,82,88,119,227,64,237,216,13,248,81,191,104,240,43,248,161,72,151,159,196,90,34,48,42,226,158,87,79,127,73,111,246,199,245,8,147,213,64,167,125,109,252,192,24,53,159,208,78,141,35,183,43,159,150,24,197,39,42,127,160,186,253,71,25,2,65,32,124,16,244,143,146,168,72,232,247,155,20,88,61,35,168,63,88,49,29,144,182,137,161,247,211,20,118,207,106,172,202,168,15,190,127,7,225,6,195,96,132,94,160,112,210,230,28,23,183,244,169,184,89,76,21,223,60,209,194,231,133,105,126,128,224,123,203,47,14,195,119,72,107,203,13,15,162,115,177,104,199,97,4,199,41,217,184,160,76,68,111,152,245,252,211,255,144,238,102,80,126,86,218,55,27,14,185,39,77,182,5,64,40,164,176,239,198,28,12,136,163,129,219,176,26,57,103,215,127,43,210,120,145,147,110,31,244,59,38,247,3,131,154,144,102,145,47,63,136,41,147,88,237,180,68,96,84,12,248,7,49,30,77,168,223,166,241,207,186,254,146,223,236,70,46,184,137,84,155,23,103,236,39,112,2,113,240,72,187,201,76,47,222,219,249,128,48,99,69,231,85,107,63,160,156,211,131,199,249,193,54,104,23,121,138,15,114,228,93,55,203,92,225,80,174,78,84,255,64,246,232,152,37,174,139,136,115,22,55,239,22,4,130,64,248,188,62,39,157,33,233,31,36,153,85,120,65,139,224,215,175,51,92,176,202,237,89,182,59,85,229,209,94,71,80,126,176,255,236,25,213,98,59,33,108,218,135,70,9,200,50,233,231,112,142,142,130,40,237,158,212,144,81,249,177,130,228,86,95,58,88,49,58,167,143,9,131,31,51,110,230,13,134,193,8,181,58,166,109,189,64,225,164,5,252,134,193,23,73,41,47,175,245,78,74,50,34,118,243,138,158,17,150,152,43,190,120,32,151,217,29,120,244,201,75,192,72,174,46,210,253,1,192,106,65,102,165,247,150,94,28,79,42,57,121,93,159,150,151,229,35,241,242,77,107,25,5,245,215,126,96,231,98,209,142,95,222,182,235,194,9,142,82,122,181,233,55,104,0,70,217,208,188,33,188,136,223,49,234,48,99,86,143,34,214,249,97,154,106,158,4,7,189,166,189,191,1,193,216,173,180,110,54,21,8,9,83,29,114,78,154,165,206,41,255,183,123,134,17,15,199,225,116,146,16,217,205,42,172,190,168,56,25,17,70,128,165,118,35,216,198,102,117,96,122,1,16,114,207,174,254,202,115,201,155,87,164,241,34,239,24,150,71,253,173,57,169,69,17,94,204,118,77,238,6,206,241,137,99,220,68,38,141,100,248,65,232,249,47,121,81,65,147,30,52,83,38,177,218,235,154,214,191,179,249,198,233,11,69,161,140,25,240,14,98,161,76,105,7,60,155,81,190,132,39,54,219,150,146,153,53,46,46,254,80,38,84,185,153,158,232,222,252,140,93,113,18,52,225,22,119,169,54,46,206,17,138,73,171,3,63,230,69,187,131,129,32,227,224,145,118,91,92,246,19,73,233,89,253,241,85,62,152,108,130,6,33,212,62,97,68,198,139,206,170,126,55,169,207,214,127,65,56,110,195,38,93,124,118,137,179,196,202,238,214,89,29,214,111,225,161,177,10,243,20,30,228,75,168,121,129,19,203,105,215,171,119,14,178,185,194,161,92,1,126,198,57,156,169,254,128,36,21,153,229,54,160,54,11,142,28,81,110,134,102,22,167,62,218,113,194,44,111,222,44,148,211,185,73,9,4,129,240,177,184,230,149,163,13,73,123,27,177,46,30,67,210,62,72,251,110,89,45,233,219,246,195,81,103,145,166,204,176,169,31,116,12,206,122,102,185,97,148,222,5,6,241,136,0,0,0,0,0,0,0,128,0,0,0,137,0,0,0,138,0,0,0,139,0,0,0,0,0,0,0,0,0,0,0,176,0,0,0,140,0,0,0,141,0,0,0,142,0,0,0,143,0,0,0,144,0,0,0,145,0,0,0,146,0,0,0,147,0,0,0,0,0,0,0,224,0,0,0,140,0,0,0,148,0,0,0,142,0,0,0,143,0,0,0,144,0,0,0,149,0,0,0,150,0,0,0,151,0,0,0,0,0,0,0,0,0,0,0,80,42,0,0,80,42,0,0,192,42], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([152,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,153,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,154,0,0,0,155,0,0,0,140,131,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,153,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,156,0,0,0,155,0,0,0,132,131,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,51,0,51,0,51,0,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,0,108,0,254,0,108,0,108,0,54,0,54,0,127,0,54,0,54,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,60,0,102,0,102,0,6,0,60,0,96,0,96,0,102,0,60,0,24,0,0,0,0,0,0,0,0,0,0,0,14,6,27,3,155,1,219,0,110,0,176,3,216,6,204,6,198,6,131,3,0,0,0,0,0,0,0,0,0,0,0,0,56,0,108,0,108,0,108,0,56,0,28,0,182,0,230,0,102,0,252,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,12,0,0,0,0,0,0,0,3,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,3,0,0,0,0,0,0,0,12,0,63,0,12,0,30,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,24,0,24,0,126,0,24,0,24,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,12,0,12,0,12,0,6,0,6,0,6,0,6,0,3,0,3,0,3,0,3,0,0,0,0,0,0,0,0,0,60,0,102,0,102,0,102,0,102,0,102,0,102,0,102,0,102,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,30,0,24,0,24,0,24,0,24,0,24,0,24,0,24,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,60,0,102,0,102,0,96,0,48,0,24,0,12,0,6,0,6,0,126,0,0,0,0,0,0,0,0,0,0,0,0,0,60,0,102,0,96,0,96,0,56,0,96,0,96,0,96,0,102,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,96,0,112,0,120,0,120,0,108,0,108,0,102,0,126,0,96,0,96,0,0,0,0,0,0,0,0,0,0,0,0,0,126,0,6,0,6,0,6,0,62,0,102,0,96,0,96,0,102,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,60,0,102,0,6,0,6,0,62,0,102,0,102,0,102,0,102,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,126,0,96,0,48,0,48,0,24,0,24,0,24,0,12,0,12,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,60,0,102,0,102,0,102,0,60,0,102,0,102,0,102,0,102,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,60,0,102,0,102,0,102,0,102,0,124,0,96,0,96,0,102,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,0,0,0,0,0,0,0,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,0,0,0,0,0,0,0,0,6,0,6,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,96,0,48,0,24,0,12,0,6,0,12,0,24,0,48,0,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,126,0,0,0,0,0,126,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,12,0,24,0,48,0,96,0,48,0,24,0,12,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,60,0,102,0,102,0,96,0,48,0,24,0,24,0,0,0,24,0,24,0,0,0,0,0,0,0,0,0,0,0,224,1,56,7,12,12,204,13,102,27,102,27,54,27,182,25,182,25,108,15,12,0,56,14,224,3,0,0,0,0,0,0,0,0,24,0,24,0,60,0,60,0,36,0,102,0,102,0,126,0,195,0,195,0,0,0,0,0,0,0,0,0,0,0,0,0,254,0,134,1,134,1,134,1,254,0,134,1,134,1,134,1,134,1,254,0,0,0,0,0,0,0,0,0,0,0,0,0,120,0,204,0,134,0,6,0,6,0,6,0,6,0,134,0,204,0,120,0,0,0,0,0,0,0,0,0,0,0,0,0,126,0,198,0,134,1,134,1,134,1,134,1,134,1,134,1,198,0,126,0,0,0,0,0,0,0,0,0,0,0,0,0,254,0,6,0,6,0,6,0,126,0,6,0,6,0,6,0,6,0,254,0,0,0,0,0,0,0,0,0,0,0,0,0,254,0,6,0,6,0,6,0,126,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,248,0,140,1,6,1,6,0,6,0,230,1,134,1,134,1,140,1,120,1,0,0,0,0,0,0,0,0,0,0,0,0,134,1,134,1,134,1,134,1,254,1,134,1,134,1,134,1,134,1,134,1,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,48,0,48,0,48,0,48,0,48,0,48,0,51,0,51,0,30,0,0,0,0,0,0,0,0,0,0,0,0,0,198,0,102,0,54,0,30,0,14,0,30,0,54,0,102,0,198,0,134,1,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,254,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,14,7,14,7,158,7,158,7,246,6,246,6,102,6,102,6,0,0,0,0,0,0,0,0,0,0,0,0,134,1,142,1,158,1,158,1,182,1,182,1,230,1,230,1,198,1,134,1,0,0,0,0,0,0,0,0,0,0,0,0,120,0,204,0,134,1,134,1,134,1,134,1,134,1,134,1,204,0,120,0,0,0,0,0,0,0,0,0,0,0,0,0,254,0,134,1,134,1,134,1,134,1,254,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,120,0,204,0,134,1,134,1,134,1,134,1,134,1,230,1,204,0,248,1,0,0,0,0,0,0,0,0,0,0,0,0,254,0,134,1,134,1,134,1,134,1,254,0,134,1,134,1,134,1,6,3,0,0,0,0,0,0,0,0,0,0,0,0,124,0,198,0,198,0,6,0,28,0,112,0,192,0,198,0,198,0,124,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,24,0,24,0,24,0,24,0,24,0,24,0,24,0,24,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,134,1,134,1,134,1,134,1,134,1,134,1,134,1,134,1,204,0,120,0,0,0,0,0,0,0,0,0,0,0,0,0,195,0,195,0,102,0,102,0,102,0,36,0,60,0,60,0,24,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,195,48,195,48,195,48,230,25,230,25,44,13,60,15,24,6,24,6,24,6,0,0,0,0,0,0,0,0,0,0,0,0,131,1,131,1,198,0,108,0,56,0,56,0,108,0,198,0,131,1,131,1,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,134,1,204,0,120,0,48,0,48,0,48,0,48,0,48,0,0,0,0,0,0,0,0,0,0,0,0,0,255,1,128,1,192,0,96,0,48,0,24,0,12,0,6,0,3,0,255,1,0,0,0,0,0,0,0,0,0,0,0,0,14,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,14,0,0,0,0,0,0,0,3,0,3,0,3,0,3,0,6,0,6,0,6,0,6,0,12,0,12,0,12,0,12,0,0,0,0,0,0,0,0,0,7,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,7,0,0,0,0,0,0,0,4,0,14,0,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,14,0,12,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,0,102,0,120,0,108,0,102,0,102,0,124,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,62,0,102,0,102,0,102,0,102,0,102,0,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,0,102,0,6,0,6,0,6,0,102,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,96,0,96,0,96,0,124,0,102,0,102,0,102,0,102,0,102,0,124,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,0,102,0,126,0,6,0,6,0,102,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,6,0,6,0,15,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,124,0,102,0,102,0,102,0,102,0,102,0,124,0,96,0,102,0,60,0,0,0,0,0,0,0,6,0,6,0,6,0,62,0,102,0,102,0,102,0,102,0,102,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,3,0,0,0,0,0,0,0,6,0,6,0,6,0,102,0,54,0,30,0,14,0,30,0,54,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,3,102,6,102,6,102,6,102,6,102,6,102,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,0,102,0,102,0,102,0,102,0,102,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,0,102,0,102,0,102,0,102,0,102,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,0,102,0,102,0,102,0,102,0,102,0,62,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,124,0,102,0,102,0,102,0,102,0,102,0,124,0,96,0,96,0,96,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,14,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,0,102,0,6,0,60,0,96,0,102,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,15,0,6,0,6,0,6,0,6,0,6,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,102,0,102,0,102,0,102,0,102,0,124,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,195,0,195,0,102,0,102,0,60,0,24,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,51,3,182,1,182,1,254,1,204,0,204,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,195,0,102,0,60,0,24,0,60,0,102,0,195,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,195,0,195,0,102,0,102,0,60,0,60,0,24,0,24,0,12,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,126,0,96,0,48,0,24,0,12,0,6,0,126,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,12,0,12,0,12,0,12,0,12,0,6,0,12,0,12,0,12,0,12,0,12,0,24,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,3,0,6,0,6,0,6,0,6,0,6,0,12,0,6,0,6,0,6,0,6,0,6,0,3,0,0,0,0,0,0,0,23,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,12,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,60,0,118,0,22,0,22,0,14,0,110,0,60,0,12,0,0,0,0,0,0,0,0,0,0,0,28,0,54,0,6,0,6,0,12,0,30,0,12,0,12,0,102,0,62,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,60,0,36,0,36,0,60,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,195,0,195,0,102,0,102,0,255,0,24,0,255,0,24,0,24,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,60,0,102,0,28,0,28,0,54,0,108,0,56,0,56,0,102,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,27,0,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,0,134,1,51,3,75,3,11,3,11,3,75,3,51,3,134,1,252,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,8,0,12,0,10,0,12,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,0,54,0,27,0,54,0,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,126,0,96,0,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,0,134,1,59,3,75,3,75,3,59,3,43,3,75,3,134,1,252,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,10,0,10,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,24,0,126,0,24,0,24,0,0,0,126,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,13,0,12,0,6,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,13,0,6,0,13,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,12,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,102,0,102,0,102,0,102,0,102,0,102,0,254,0,6,0,6,0,6,0,0,0,0,0,0,0,60,0,62,0,62,0,62,0,62,0,60,0,48,0,48,0,48,0,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,24,0,14,0,0,0,0,0,0,0,6,0,7,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,10,0,10,0,10,0,14,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,0,54,0,108,0,54,0,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,6,14,3,140,1,204,0,108,0,48,3,152,3,204,2,198,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,12,6,14,3,140,1,204,0,108,0,176,1,88,3,12,3,134,1,195,3,0,0,0,0,0,0,0,0,0,0,0,0,12,6,26,3,140,1,218,0,108,0,48,3,152,3,204,2,198,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,24,0,24,0,0,0,24,0,24,0,12,0,6,0,102,0,102,0,60,0,0,0,0,0,0,0,28,0,24,0,48,0,24,0,24,0,60,0,60,0,36,0,102,0,102,0,126,0,195,0,195,0,0,0,0,0,0,0,56,0,24,0,12,0,24,0,24,0,60,0,60,0,36,0,102,0,102,0,126,0,195,0,195,0,0,0,0,0,0,0,24,0,60,0,102,0,24,0,24,0,60,0,60,0,36,0,102,0,102,0,126,0,195,0,195,0,0,0,0,0,0,0,94,0,122,0,0,0,24,0,24,0,60,0,60,0,36,0,102,0,102,0,126,0,195,0,195,0,0,0,0,0,0,0,102,0,102,0,0,0,24,0,24,0,60,0,60,0,36,0,102,0,102,0,126,0,195,0,195,0,0,0,0,0,0,0,24,0,60,0,24,0,0,0,24,0,24,0,60,0,36,0,102,0,102,0,126,0,195,0,195,0,0,0,0,0,0,0,0,0,0,0,0,0,248,15,120,0,108,0,108,0,236,7,102,0,102,0,126,0,99,0,227,15,0,0,0,0,0,0,0,0,0,0,0,0,120,0,204,0,134,0,6,0,6,0,6,0,6,0,134,0,204,0,120,0,48,0,96,0,56,0,56,0,48,0,96,0,254,0,6,0,6,0,6,0,126,0,6,0,6,0,6,0,6,0,254,0,0,0,0,0,0,0,112,0,48,0,24,0,254,0,6,0,6,0,6,0,126,0,6,0,6,0,6,0,6,0,254,0,0,0,0,0,0,0,48,0,120,0,204,0,254,0,6,0,6,0,6,0,126,0,6,0,6,0,6,0,6,0,254,0,0,0,0,0,0,0,204,0,204,0,0,0,254,0,6,0,6,0,6,0,126,0,6,0,6,0,6,0,6,0,254,0,0,0,0,0,0,0,3,0,6,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,12,0,6,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,6,0,9,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,9,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,126,0,198,0,134,1,134,1,159,1,134,1,134,1,134,1,198,0,126,0,0,0,0,0,0,0,188,0,244,0,0,0,134,1,142,1,158,1,158,1,182,1,182,1,230,1,230,1,198,1,134,1,0,0,0,0,0,0,56,0,48,0,96,0,120,0,204,0,134,1,134,1,134,1,134,1,134,1,134,1,204,0,120,0,0,0,0,0,0,0,112,0,48,0,24,0,120,0,204,0,134,1,134,1,134,1,134,1,134,1,134,1,204,0,120,0,0,0,0,0,0,0,48,0,120,0,204,0,120,0,204,0,134,1,134,1,134,1,134,1,134,1,134,1,204,0,120,0,0,0,0,0,0,0,188,0,244,0,0,0,120,0,204,0,134,1,134,1,134,1,134,1,134,1,134,1,204,0,120,0,0,0,0,0,0,0,204,0,204,0,0,0,120,0,204,0,134,1,134,1,134,1,134,1,134,1,134,1,204,0,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,60,0,24,0,60,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,1,204,0,198,1,230,1,182,1,182,1,158,1,142,1,204,0,126,0,0,0,0,0,0,0,56,0,48,0,96,0,134,1,134,1,134,1,134,1,134,1,134,1,134,1,134,1,204,0,120,0,0,0,0,0,0,0,112,0,48,0,24,0,134,1,134,1,134,1,134,1,134,1,134,1,134,1,134,1,204,0,120,0,0,0,0,0,0,0,48,0,120,0,204,0,0,0,134,1,134,1,134,1,134,1,134,1,134,1,134,1,204,0,120,0,0,0,0,0,0,0,204,0,204,0,0,0,134,1,134,1,134,1,134,1,134,1,134,1,134,1,134,1,204,0,120,0,0,0,0,0,0,0,112,0,48,0,24,0,3,3,3,3,134,1,204,0,120,0,48,0,48,0,48,0,48,0,48,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,126,0,198,0,198,0,198,0,198,0,126,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,60,0,102,0,102,0,102,0,54,0,102,0,102,0,102,0,102,0,54,0,0,0,0,0,0,0,0,0,0,0,28,0,24,0,48,0,0,0,60,0,102,0,120,0,108,0,102,0,102,0,124,0,0,0,0,0,0,0,0,0,0,0,56,0,24,0,12,0,0,0,60,0,102,0,120,0,108,0,102,0,102,0,124,0,0,0,0,0,0,0,0,0,0,0,24,0,60,0,102,0,0,0,60,0,102,0,120,0,108,0,102,0,102,0,124,0,0,0,0,0,0,0,0,0,0,0,0,0,94,0,122,0,0,0,60,0,102,0,120,0,108,0,102,0,102,0,124,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,102,0,0,0,60,0,102,0,120,0,108,0,102,0,102,0,124,0,0,0,0,0,0,0,0,0,0,0,24,0,60,0,24,0,0,0,60,0,102,0,120,0,108,0,102,0,102,0,124,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,3,102,6,248,7,108,0,102,0,102,6,252,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,0,102,0,6,0,6,0,6,0,102,0,60,0,24,0,48,0,28,0,0,0,0,0,28,0,24,0,48,0,0,0,60,0,102,0,126,0,6,0,6,0,102,0,60,0,0,0,0,0,0,0,0,0,0,0,56,0,24,0,12,0,0,0,60,0,102,0,126,0,6,0,6,0,102,0,60,0,0,0,0,0,0,0,0,0,0,0,24,0,60,0,102,0,0,0,60,0,102,0,126,0,6,0,6,0,102,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,102,0,0,0,60,0,102,0,126,0,6,0,6,0,102,0,60,0,0,0,0,0,0,0,0,0,0,0,7,0,6,0,12,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,14,0,6,0,3,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,6,0,15,0,0,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,9,0,0,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,110,0,24,0,54,0,48,0,124,0,102,0,102,0,102,0,102,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,94,0,122,0,0,0,62,0,102,0,102,0,102,0,102,0,102,0,102,0,0,0,0,0,0,0,0,0,0,0,28,0,24,0,48,0,0,0,60,0,102,0,102,0,102,0,102,0,102,0,60,0,0,0,0,0,0,0,0,0,0,0,56,0,24,0,12,0,0,0,60,0,102,0,102,0,102,0,102,0,102,0,60,0,0,0,0,0,0,0,0,0,0,0,24,0,60,0,102,0,0,0,60,0,102,0,102,0,102,0,102,0,102,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,94,0,122,0,0,0,60,0,102,0,102,0,102,0,102,0,102,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,102,0,0,0,60,0,102,0,102,0,102,0,102,0,102,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,12,0,0,0,30,0,0,0,12,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,124,0,118,0,118,0,102,0,110,0,110,0,62,0,0,0,0,0,0,0,0,0,0,0,28,0,24,0,48,0,0,0,102,0,102,0,102,0,102,0,102,0,102,0,124,0,0,0,0,0,0,0,0,0,0,0,56,0,24,0,12,0,0,0,102,0,102,0,102,0,102,0,102,0,102,0,124,0,0,0,0,0,0,0,0,0,0,0,24,0,60,0,102,0,0,0,102,0,102,0,102,0,102,0,102,0,102,0,124,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,102,0,0,0,102,0,102,0,102,0,102,0,102,0,102,0,124,0,0,0,0,0,0,0,0,0,0,0,56,0,24,0,12,0,0,0,195,0,195,0,102,0,102,0,60,0,60,0,24,0,24,0,12,0,6,0,0,0,0,0,0,0,6,0,6,0,6,0,62,0,102,0,102,0,102,0,102,0,102,0,62,0,6,0,6,0,6,0,0,0,0,0,0,0,102,0,102,0,0,0,195,0,195,0,102,0,102,0,60,0,60,0,24,0,24,0,12,0,6,0,0,0,96,7,0,0,0,8,80,0,0,8,16,0,20,8,115,0,18,7,31,0,0,8,112,0,0,8,48,0,0,9,192,0,16,7,10,0,0,8,96,0,0,8,32,0,0,9,160,0,0,8,0,0,0,8,128,0,0,8,64,0,0,9,224,0,16,7,6,0,0,8,88,0,0,8,24,0,0,9,144,0,19,7,59,0,0,8,120,0,0,8,56,0,0,9,208,0,17,7,17,0,0,8,104,0,0,8,40,0,0,9,176,0,0,8,8,0,0,8,136,0,0,8,72,0,0,9,240,0,16,7,4,0,0,8,84,0,0,8,20,0,21,8,227,0,19,7,43,0,0,8,116,0,0,8,52,0,0,9,200,0,17,7,13,0,0,8,100,0,0,8,36,0,0,9,168,0,0,8,4,0,0,8,132,0,0,8,68,0,0,9,232,0,16,7,8,0,0,8,92,0,0,8,28,0,0,9,152,0,20,7,83,0,0,8,124,0,0,8,60,0,0,9,216,0,18,7,23,0,0,8,108,0,0,8,44,0,0,9,184,0,0,8,12,0,0,8,140,0,0,8,76,0,0,9,248,0,16,7,3,0,0,8,82,0,0,8,18,0,21,8,163,0,19,7,35,0,0,8,114,0,0,8,50,0,0,9,196,0,17,7,11,0,0,8,98,0,0,8,34,0,0,9,164,0,0,8,2,0,0,8,130,0,0,8,66,0,0,9,228,0,16,7,7,0,0,8,90,0,0,8,26,0,0,9,148,0,20,7,67,0,0,8,122,0,0,8,58,0,0,9,212,0,18,7,19,0,0,8,106,0,0,8,42,0,0,9,180,0,0,8,10,0,0,8,138,0,0,8,74,0,0,9,244,0,16,7,5,0,0,8,86,0,0,8,22,0,64,8,0,0,19,7,51,0,0,8,118,0,0,8,54,0,0,9,204,0,17,7,15,0,0,8,102,0,0,8,38,0,0,9,172,0,0,8,6,0,0,8,134,0,0,8,70,0,0,9,236,0,16,7,9,0,0,8,94,0,0,8,30,0,0,9,156,0,20,7,99,0,0,8,126,0,0,8,62,0,0,9,220,0,18,7,27,0,0,8,110,0,0,8,46,0,0,9,188,0,0,8,14,0,0,8,142,0,0,8,78,0,0,9,252,0,96,7,0,0,0,8,81,0,0,8,17,0,21,8,131,0,18,7,31,0,0,8,113,0,0,8,49,0,0,9,194,0,16,7,10,0,0,8,97,0,0,8,33,0,0,9,162,0,0,8,1,0,0,8,129,0,0,8,65,0,0,9,226,0,16,7,6,0,0,8,89,0,0,8,25,0,0,9,146,0,19,7,59,0,0,8,121,0,0,8,57,0,0,9,210,0,17,7,17,0,0,8,105,0,0,8,41,0,0,9,178,0,0,8,9,0,0,8,137,0,0,8,73,0,0,9,242,0,16,7,4,0,0,8,85,0,0,8,21,0,16,8,2,1,19,7,43,0,0,8,117,0,0,8,53,0,0,9,202,0,17,7,13,0,0,8,101,0,0,8,37,0,0,9,170,0,0,8,5,0,0,8,133,0,0,8,69,0,0,9,234,0,16,7,8,0,0,8,93,0,0,8,29,0,0,9,154,0,20,7,83,0,0,8,125,0,0,8,61,0,0,9,218,0,18,7,23,0,0,8,109,0,0,8,45,0,0,9,186,0,0,8,13,0,0,8,141,0,0,8,77,0,0,9,250,0,16,7,3,0,0,8,83,0,0,8,19,0,21,8,195,0,19,7,35,0,0,8,115,0,0,8,51,0,0,9,198,0,17,7,11,0,0,8,99,0,0,8,35,0,0,9,166,0,0,8,3,0,0,8,131,0,0,8,67,0,0,9,230,0,16,7,7,0,0,8,91,0,0,8,27,0,0,9,150,0,20,7,67,0,0,8,123,0,0,8,59,0,0,9,214,0,18,7,19,0,0,8,107,0,0,8,43,0,0,9,182,0,0,8,11,0,0,8,139,0,0,8,75,0,0,9,246,0,16,7,5,0,0,8,87,0,0,8,23,0,64,8,0,0,19,7,51,0,0,8,119,0,0,8,55,0,0,9,206,0,17,7,15,0,0,8,103,0,0,8,39,0,0,9,174,0,0,8,7,0,0,8,135,0,0,8,71,0,0,9,238,0,16,7,9,0,0,8,95,0,0,8,31,0,0,9,158,0,20,7,99,0,0,8,127,0,0,8,63,0,0,9,222,0,18,7,27,0,0,8,111,0,0,8,47,0,0,9,190,0,0,8,15,0,0,8,143,0,0,8,79,0,0,9,254,0,96,7,0,0,0,8,80,0,0,8,16,0,20,8,115,0,18,7,31,0,0,8,112,0,0,8,48,0,0,9,193,0,16,7,10,0,0,8,96,0,0,8,32,0,0,9,161,0,0,8,0,0,0,8,128,0,0,8,64,0,0,9,225,0,16,7,6,0,0,8,88,0,0,8,24,0,0,9,145,0,19,7,59,0,0,8,120,0,0,8,56,0,0,9,209,0,17,7,17,0,0,8,104,0,0,8,40,0,0,9,177,0,0,8,8,0,0,8,136,0,0,8,72,0,0,9,241,0,16,7,4,0,0,8,84,0,0,8,20,0,21,8,227,0,19,7,43,0,0,8,116,0,0,8,52,0,0,9,201,0,17,7,13,0,0,8,100,0,0,8,36,0,0,9,169,0,0,8,4,0,0,8,132,0,0,8,68,0,0,9,233,0,16,7,8,0,0,8,92,0,0,8,28,0,0,9,153,0,20,7,83,0,0,8,124,0,0,8,60,0,0,9,217,0,18,7,23,0,0,8,108,0,0,8,44,0,0,9,185,0,0,8,12,0,0,8,140,0,0,8,76,0,0,9,249,0,16,7,3,0,0,8,82,0,0,8,18,0,21,8,163,0,19,7,35,0,0,8,114,0,0,8,50,0,0,9,197,0,17,7,11,0,0,8,98,0,0,8,34,0,0,9,165,0,0,8,2,0,0,8,130,0,0,8,66,0,0,9,229,0,16,7,7,0,0,8,90,0,0,8,26,0,0,9,149,0,20,7,67,0,0,8,122,0,0,8,58,0,0,9,213,0,18,7,19,0,0,8,106,0,0,8,42,0,0,9,181,0,0,8,10,0,0,8,138,0,0,8,74,0,0,9,245,0,16,7,5,0,0,8,86,0,0,8,22,0,64,8,0,0,19,7,51,0,0,8,118,0,0,8,54,0,0,9,205,0,17,7,15,0,0,8,102,0,0,8,38,0,0,9,173,0,0,8,6,0,0,8,134,0,0,8,70,0,0,9,237,0,16,7,9,0,0,8,94,0,0,8,30,0,0,9,157,0,20,7,99,0,0,8,126,0,0,8,62,0,0,9,221,0,18,7,27,0,0,8,110,0,0,8,46,0,0,9,189,0,0,8,14,0,0,8,142,0,0,8,78,0,0,9,253,0,96,7,0,0,0,8,81,0,0,8,17,0,21,8,131,0,18,7,31,0,0,8,113,0,0,8,49,0,0,9,195,0,16,7,10,0,0,8,97,0,0,8,33,0,0,9,163,0,0,8,1,0,0,8,129,0,0,8,65,0,0,9,227,0,16,7,6,0,0,8,89,0,0,8,25,0,0,9,147,0,19,7,59,0,0,8,121,0,0,8,57,0,0,9,211,0,17,7,17,0,0,8,105,0,0,8,41,0,0,9,179,0,0,8,9,0,0,8,137,0,0,8,73,0,0,9,243,0,16,7,4,0,0,8,85,0,0,8,21,0,16,8,2,1,19,7,43,0,0,8,117,0,0,8,53,0,0,9,203,0,17,7,13,0,0,8,101,0,0,8,37,0,0,9,171,0,0,8,5,0,0,8,133,0,0,8,69,0,0,9,235,0,16,7,8,0,0,8,93,0,0,8,29,0,0,9,155,0,20,7], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10748);
/* memory initializer */ allocate([83,0,0,8,125,0,0,8,61,0,0,9,219,0,18,7,23,0,0,8,109,0,0,8,45,0,0,9,187,0,0,8,13,0,0,8,141,0,0,8,77,0,0,9,251,0,16,7,3,0,0,8,83,0,0,8,19,0,21,8,195,0,19,7,35,0,0,8,115,0,0,8,51,0,0,9,199,0,17,7,11,0,0,8,99,0,0,8,35,0,0,9,167,0,0,8,3,0,0,8,131,0,0,8,67,0,0,9,231,0,16,7,7,0,0,8,91,0,0,8,27,0,0,9,151,0,20,7,67,0,0,8,123,0,0,8,59,0,0,9,215,0,18,7,19,0,0,8,107,0,0,8,43,0,0,9,183,0,0,8,11,0,0,8,139,0,0,8,75,0,0,9,247,0,16,7,5,0,0,8,87,0,0,8,23,0,64,8,0,0,19,7,51,0,0,8,119,0,0,8,55,0,0,9,207,0,17,7,15,0,0,8,103,0,0,8,39,0,0,9,175,0,0,8,7,0,0,8,135,0,0,8,71,0,0,9,239,0,16,7,9,0,0,8,95,0,0,8,31,0,0,9,159,0,20,7,99,0,0,8,127,0,0,8,63,0,0,9,223,0,18,7,27,0,0,8,111,0,0,8,47,0,0,9,191,0,0,8,15,0,0,8,143,0,0,8,79,0,0,9,255,0,16,5,1,0,23,5,1,1,19,5,17,0,27,5,1,16,17,5,5,0,25,5,1,4,21,5,65,0,29,5,1,64,16,5,3,0,24,5,1,2,20,5,33,0,28,5,1,32,18,5,9,0,26,5,1,8,22,5,129,0,64,5,0,0,16,5,2,0,23,5,129,1,19,5,25,0,27,5,1,24,17,5,7,0,25,5,1,6,21,5,97,0,29,5,1,96,16,5,4,0,24,5,1,3,20,5,49,0,28,5,1,48,18,5,13,0,26,5,1,12,22,5,193,0,64,5,0,0,16,0,17,0,18,0,0,0,8,0,7,0,9,0,6,0,10,0,5,0,11,0,4,0,12,0,3,0,13,0,2,0,14,0,1,0,15,0,1,0,2,0,3,0,4,0,5,0,7,0,9,0,13,0,17,0,25,0,33,0,49,0,65,0,97,0,129,0,193,0,1,1,129,1,1,2,1,3,1,4,1,6,1,8,1,12,1,16,1,24,1,32,1,48,1,64,1,96,0,0,0,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,13,0,15,0,17,0,19,0,23,0,27,0,31,0,35,0,43,0,51,0,59,0,67,0,83,0,99,0,115,0,131,0,163,0,195,0,227,0,2,1,0,0,0,0,16,0,16,0,16,0,16,0,17,0,17,0,18,0,18,0,19,0,19,0,20,0,20,0,21,0,21,0,22,0,22,0,23,0,23,0,24,0,24,0,25,0,25,0,26,0,26,0,27,0,27,0,28,0,28,0,29,0,29,0,64,0,64,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,17,0,17,0,17,0,17,0,18,0,18,0,18,0,18,0,19,0,19,0,19,0,19,0,20,0,20,0,20,0,20,0,21,0,21,0,21,0,21,0,16,0,72,0,78,0,73,110,118,97,108,105,100,32,99,104,101,99,107,115,117,109,44,32,101,120,112,101,99,116,101,100,32,48,120,37,88,32,103,111,116,32,48,120,37,88,10,0,49,46,50,46,56,0,71,97,109,101,58,58,114,101,100,114,97,119,68,105,97,108,111,103,117,101,84,101,120,116,115,40,41,0,115,117,98,115,116,114,105,110,103,67,111,117,110,116,32,60,32,56,0,100,105,97,108,111,103,117,101,46,99,112,112,0,114,101,100,114,97,119,68,105,97,108,111,103,117,101,84,101,120,116,115,0,46,46,92,109,105,100,105,92,115,97,100,105,97,108,111,103,46,109,105,100,0,46,46,92,119,103,112,92,102,114,97,109,101,46,115,112,114,0,71,97,109,101,58,58,108,111,97,100,68,105,97,108,111,103,117,101,83,112,114,105,116,101,40,37,100,41,0,46,46,92,119,103,112,92,107,105,115,115,46,115,112,114,0,99,111,117,110,116,32,60,61,32,49,48,53,0,108,111,97,100,68,105,97,108,111,103,117,101,83,112,114,105,116,101,0,71,97,109,101,58,58,108,111,97,100,68,105,97,108,111,103,117,101,68,97,116,97,40,37,115,41,0,71,97,109,101,58,58,104,97,110,100,108,101,68,105,97,108,111,103,117,101,40,41,0,71,97,109,101,58,58,115,101,116,117,112,68,105,97,108,111,103,40,39,37,115,39,41,0,95,100,105,97,108,111,103,117,101,67,104,111,105,99,101,67,111,117,110,116,101,114,32,60,32,78,85,77,95,68,73,65,76,79,71,95,67,72,79,73,67,69,83,0,115,101,116,117,112,68,105,97,108,111,103,0,65,100,100,32,100,105,97,108,111,103,32,99,104,111,105,99,101,32,103,111,116,111,32,37,100,32,110,101,120,116,73,100,32,37,115,32,115,112,101,101,99,104,83,111,117,110,100,70,105,108,101,32,37,115,32,116,101,120,116,32,34,37,115,34,0,71,97,109,101,58,58,114,101,100,114,97,119,68,105,97,108,111,103,117,101,66,97,99,107,103,114,111,117,110,100,40,41,0,71,97,109,101,58,58,114,101,100,114,97,119,68,105,97,108,111,103,117,101,83,112,114,105,116,101,40,37,100,41,0,71,97,109,101,58,58,117,110,108,111,97,100,68,105,97,108,111,103,117,101,68,97,116,97,40,41,32,37,100,0,50,50,77,101,109,111,114,121,77,97,112,112,101,100,70,105,108,101,95,80,79,83,73,88,0,50,49,77,101,109,111,114,121,77,97,112,112,101,100,70,105,108,101,95,105,109,112,108,0,49,48,70,105,108,101,95,115,116,100,105,111,0,57,70,105,108,101,95,105,109,112,108,0,102,105,120,101,100,80,97,116,104,32,39,37,115,39,10,0,102,105,108,101,80,97,116,104,32,39,37,115,39,10,0,37,115,47,37,115,0,112,97,116,104,32,39,37,115,39,10,0,85,110,97,98,108,101,32,116,111,32,111,112,101,110,32,39,37,115,39,0,70,105,108,101,83,121,115,116,101,109,95,105,109,112,108,58,58,102,105,110,100,70,105,108,101,80,97,116,104,32,95,102,105,108,101,67,111,117,110,116,32,37,100,32,39,37,115,39,10,0,46,46,0,83,67,78,47,0,45,114,111,109,49,102,115,45,0,98,115,46,100,97,116,0,49,53,70,105,108,101,83,121,115,116,101,109,95,105,109,112,108,0,49,54,70,105,108,101,83,121,115,116,101,109,95,80,79,83,73,88,0,85,110,97,98,108,101,32,116,111,32,102,105,110,100,32,115,116,97,114,116,117,112,32,115,99,101,110,101,32,102,105,108,101,0,45,48,48,46,83,67,78,0,68,65,84,65,47,76,79,71,79,46,65,86,73,0,68,65,84,65,47,73,78,84,82,79,46,65,86,73,0,71,97,109,101,58,58,99,108,101,97,114,83,99,101,110,101,68,97,116,97,40,37,100,41,0,83,67,78,0,115,119,105,116,99,104,32,116,111,32,115,99,101,110,101,32,39,37,115,39,0,80,73,67,52,46,83,67,78,0,69,110,100,32,111,102,32,103,97,109,101,0,83,65,86,0,65,49,54,46,83,65,86,0,69,110,100,32,111,102,32,100,101,109,111,32,105,110,116,101,114,97,99,116,105,118,101,32,112,97,114,116,0,73,103,110,111,114,105,110,103,32,115,97,118,101,115,116,97,116,101,32,108,111,97,100,32,39,37,115,39,0,108,111,97,100,32,109,111,118,32,39,37,115,39,0,95,115,99,101,110,101,79,98,106,101,99,116,115,67,111,117,110,116,32,33,61,32,48,0,103,97,109,101,46,99,112,112,0,109,97,105,110,76,111,111,112,0,70,76,89,0,46,46,92,119,103,112,92,116,105,116,108,101,37,115,46,98,109,112,0,119,103,112,0,95,109,117,115,105,99,84,114,97,99,107,32,61,61,32,48,0,112,108,97,121,77,117,115,105,99,0,46,46,92,109,105,100,105,92,0,71,97,109,101,58,58,112,108,97,121,77,117,115,105,99,40,39,37,115,39,41,0,37,115,47,116,114,97,99,107,37,48,50,100,46,111,103,103,0,112,108,97,121,77,117,115,105,99,40,39,37,115,39,41,32,116,114,97,99,107,32,37,115,0,85,110,97,98,108,101,32,116,111,32,102,105,110,100,32,109,97,112,112,105,110,103,32,102,111,114,32,109,105,100,105,32,109,117,115,105,99,32,39,37,115,39,0,71,97,109,101,58,58,117,112,100,97,116,101,75,101,121,115,80,114,101,115,115,101,100,84,97,98,108,101,40,41,0,67,117,114,114,101,110,116,32,103,97,109,101,32,115,116,97,116,101,32,115,108,111,116,32,105,115,32,37,100,0,71,97,109,101,58,58,114,117,110,79,98,106,101,99,116,115,83,99,114,105,112,116,40,41,0,95,108,111,97,100,68,97,116,97,83,116,97,116,101,32,33,61,32,51,0,114,117,110,79,98,106,101,99,116,115,83,99,114,105,112,116,0,71,97,109,101,58,58,114,117,110,79,98,106,101,99,116,115,83,99,114,105,112,116,40,41,32,99,117,114,114,101,110,116,79,98,106,101,99,116,78,117,109,61,37,100,0,97,110,105,109,32,62,61,32,48,32,38,38,32,97,110,105,109,32,60,32,95,97,110,105,109,97,116,105,111,110,115,67,111,117,110,116,0,115,116,97,116,101,109,101,110,116,32,37,100,32,99,111,110,100,105,116,105,111,110,32,37,100,32,111,112,32,37,100,0,73,110,118,97,108,105,100,32,99,111,110,100,105,116,105,111,110,32,37,100,0,115,116,97,116,101,109,101,110,116,32,37,100,32,111,112,101,114,97,116,111,114,32,37,100,32,111,112,32,37,100,0,73,110,118,97,108,105,100,32,111,112,101,114,97,116,111,114,32,37,100,0,46,46,92,109,105,100,105,92,103,97,109,101,111,118,101,114,46,109,105,100,0,68,65,84,65,47,70,73,78,65,76,46,65,86,73,0,69,78,68,46,83,67,78,0,71,97,109,101,58,58,114,101,105,110,105,116,105,97,108,105,122,101,79,98,106,101,99,116,40,37,100,41,0,71,97,109,101,58,58,117,112,100,97,116,101,79,98,106,101,99,116,115,40,41,0,115,111,45,62,102,114,97,109,101,78,117,109,80,114,101,118,32,62,61,32,48,32,38,38,32,115,111,45,62,102,114,97,109,101,78,117,109,80,114,101,118,32,60,32,95,115,99,101,110,101,79,98,106,101,99,116,70,114,97,109,101,115,67,111,117,110,116,0,117,112,100,97,116,101,79,98,106,101,99,116,115,0,115,111,45,62,102,114,97,109,101,78,117,109,32,62,61,32,48,32,38,38,32,115,111,45,62,102,114,97,109,101,78,117,109,32,60,32,95,115,99,101,110,101,79,98,106,101,99,116,70,114,97,109,101,115,67,111,117,110,116,0,115,111,45,62,109,111,116,105,111,110,78,117,109,50,32,62,61,32,48,32,38,38,32,115,111,45,62,109,111,116,105,111,110,78,117,109,50,32,60,32,95,115,99,101,110,101,79,98,106,101,99,116,77,111,116,105,111,110,115,67,111,117,110,116,0,71,97,109,101,58,58,115,116,111,112,77,117,115,105,99,40,41,0,71,97,109,101,58,58,102,105,110,100,66,97,103,79,98,106,101,99,116,66,121,78,97,109,101,40,41,0,71,97,109,101,58,58,103,101,116,79,98,106,101,99,116,84,114,97,110,115,108,97,116,101,88,80,111,115,40,37,100,44,32,37,100,44,32,37,100,44,32,37,100,41,0,71,97,109,101,58,58,103,101,116,79,98,106,101,99,116,84,114,97,110,115,108,97,116,101,89,80,111,115,40,37,100,44,32,37,100,44,32,37,100,44,32,37,100,41,0,71,97,109,101,58,58,102,105,110,100,79,98,106,101,99,116,66,121,78,97,109,101,40,41,32,108,101,110,32,61,32,37,100,0,71,97,109,101,58,58,102,105,110,100,79,98,106,101,99,116,66,121,78,97,109,101,40,41,32,110,97,109,101,32,61,32,39,37,115,39,32,108,101,110,32,61,32,37,100,0,71,97,109,101,58,58,114,101,100,114,97,119,79,98,106,101,99,116,66,111,120,101,115,40,37,100,44,32,37,100,41,0,71,97,109,101,58,58,99,104,97,110,103,101,79,98,106,101,99,116,77,111,116,105,111,110,70,114,97,109,101,40,41,0,71,97,109,101,58,58,103,101,116,79,98,106,101,99,116,84,114,97,110,115,102,111,114,109,88,80,111,115,40,37,100,41,0,71,97,109,101,58,58,103,101,116,79,98,106,101,99,116,84,114,97,110,115,102,111,114,109,89,80,111,115,40,37,100,41,0,71,97,109,101,58,58,99,111,109,112,97,114,101,80,114,101,118,79,98,106,101,99,116,84,114,97,110,115,102,111,114,109,88,80,111,115,40,37,100,41,0,71,97,109,101,58,58,99,111,109,112,97,114,101,79,98,106,101,99,116,84,114,97,110,115,102,111,114,109,88,80,111,115,40,37,100,41,0,71,97,109,101,58,58,99,111,109,112,97,114,101,80,114,101,118,79,98,106,101,99,116,84,114,97,110,115,102,111,114,109,89,80,111,115,40,37,100,41,0,71,97,109,101,58,58,99,111,109,112,97,114,101,79,98,106,101,99,116,84,114,97,110,115,102,111,114,109,89,80,111,115,40,37,100,41,0,71,97,109,101,58,58,115,101,116,117,112,79,98,106,101,99,116,80,111,115,40,37,100,41,0,105,32,62,61,32,48,32,38,38,32,105,32,60,32,95,115,99,101,110,101,79,98,106,101,99,116,70,114,97,109,101,115,67,111,117,110,116,0,100,101,114,101,102,83,99,101,110,101,79,98,106,101,99,116,70,114,97,109,101,0,105,32,62,61,32,48,32,38,38,32,105,32,60,32,78,85,77,95,66,79,88,69,83,32,38,38,32,106,32,62,61,32,48,32,38,38,32,106,32,60,32,49,48,0,100,101,114,101,102,66,111,120,0,105,32,62,61,32,48,32,38,38,32,105,32,60,32,95,115,99,101,110,101,79,98,106,101,99,116,115,67,111,117,110,116,0,100,101,114,101,102,83,99,101,110,101,79,98,106,101,99,116,0,102,108,121,97,119,97,121,46,109,105,100,0,106,117,110,103,108,101,49,46,109,105,100,0,115,97,100,105,97,108,111,103,46,109,105,100,0,99,97,118,101,115,46,109,105,100,0,106,117,110,103,108,101,50,46,109,105,100,0,100,97,114,107,99,97,118,101,46,109,105,100,0,119,97,116,101,114,100,105,118,46,109,105,100,0,109,101,114,105,97,110,49,46,109,105,100,0,116,101,108,113,117,97,100,46,109,105,100,0,103,97,109,101,111,118,101,114,46,109,105,100,0,99,111,109,112,108,101,116,101,46,109,105,100,0,109,117,115,105,107,46,109,105,100,0,49,0,50,0,51,0,66,101,114,109,117,100,97,32,83,121,110,100,114,111,109,101,0,45,48,49,46,83,67,78,0,95,48,49,46,83,67,78,0,68,65,84,65,0,77,85,83,73,67,0,100,97,116,97,112,97,116,104,61,0,115,97,118,101,112,97,116,104,61,0,109,117,115,105,99,112,97,116,104,61,0,37,115,0,66,101,114,109,117,100,97,32,83,121,110,100,114,111,109,101,10,85,115,97,103,101,58,32,98,115,32,91,79,80,84,73,79,78,83,93,46,46,46,10,32,32,45,45,100,97,116,97,112,97,116,104,61,80,65,84,72,32,32,32,80,97,116,104,32,116,111,32,100,97,116,97,32,102,105,108,101,115,32,40,100,101,102,97,117,108,116,32,39,68,65,84,65,39,41,10,32,32,45,45,115,97,118,101,112,97,116,104,61,80,65,84,72,32,32,32,80,97,116,104,32,116,111,32,115,97,118,101,32,102,105,108,101,115,32,40,100,101,102,97,117,108,116,32,39,46,39,41,10,32,32,45,45,109,117,115,105,99,112,97,116,104,61,80,65,84,72,32,32,80,97,116,104,32,116,111,32,109,117,115,105,99,32,102,105,108,101,115,32,40,100,101,102,97,117,108,116,32,39,77,85,83,73,67,39,41,10,0,77,105,120,101,114,83,68,76,58,58,115,116,111,112,65,108,108,40,41,0,77,105,120,101,114,83,68,76,58,58,115,116,111,112,83,111,117,110,100,40,41,0,77,105,120,101,114,83,68,76,58,58,112,108,97,121,83,111,117,110,100,77,117,115,105,99,40,41,32,112,97,116,104,32,39,37,115,39,0,70,97,105,108,101,100,32,116,111,32,108,111,97,100,32,109,117,115,105,99,32,39,37,115,39,44,32,37,115,0,77,105,120,101,114,83,68,76,58,58,112,108,97,121,83,111,117,110,100,40,41,32,112,97,116,104,32,39,37,115,39,0,77,105,120,95,79,112,101,110,65,117,100,105,111,32,102,97,105,108,101,100,58,32,37,115,0,56,77,105,120,101,114,83,68,76,0,53,77,105,120,101,114,0,73,110,118,97,108,105,100,32,101,118,97,108,32,111,112,32,37,100,0,116,101,115,116,69,120,112,114,32,99,109,112,32,37,100,44,37,100,0,71,97,109,101,58,58,99,111,112,95,116,114,117,101,0,71,97,109,101,58,58,99,111,112,95,105,115,73,110,82,97,110,100,111,109,82,97,110,103,101,0,71,97,109,101,58,58,99,111,112,95,105,115,75,101,121,80,114,101,115,115,101,100,0,71,97,109,101,58,58,99,111,112,95,105,115,75,101,121,78,111,116,80,114,101,115,115,101,100,0,71,97,109,101,58,58,99,111,112,95,116,101,115,116,77,111,117,115,101,66,117,116,116,111,110,115,0,71,97,109,101,58,58,99,111,112,95,105,115,79,98,106,101,99,116,73,110,83,99,101,110,101,0,71,97,109,101,58,58,99,111,112,95,116,101,115,116,79,98,106,101,99,116,80,114,101,118,83,116,97,116,101,0,71,97,109,101,58,58,99,111,112,95,116,101,115,116,79,98,106,101,99,116,83,116,97,116,101,0,71,97,109,101,58,58,99,111,112,95,105,115,79,98,106,101,99,116,73,110,82,101,99,116,0,118,97,114,49,69,32,60,61,32,118,97,114,50,48,0,111,112,99,111,100,101,115,46,99,112,112,0,99,111,112,95,105,115,79,98,106,101,99,116,73,110,82,101,99,116,0,118,97,114,50,50,32,60,61,32,118,97,114,50,52,0,71,97,109,101,58,58,99,111,112,95,116,101,115,116,80,114,101,118,79,98,106,101,99,116,84,114,97,110,115,102,111,114,109,88,80,111,115,0,71,97,109,101,58,58,99,111,112,95,116,101,115,116,79,98,106,101,99,116,84,114,97,110,115,102,111,114,109,88,80,111,115,0,71,97,109,101,58,58,99,111,112,95,116,101,115,116,80,114,101,118,79,98,106,101,99,116,84,114,97,110,115,102,111,114,109,89,80,111,115,0,71,97,109,101,58,58,99,111,112,95,116,101,115,116,79,98,106,101,99,116,84,114,97,110,115,102,111,114,109,89,80,111,115,0,71,97,109,101,58,58,99,111,112,95,116,101,115,116,79,98,106,101,99,116,80,114,101,118,70,108,105,112,0,71,97,109,101,58,58,99,111,112,95,116,101,115,116,79,98,106,101,99,116,70,108,105,112,0,71,97,109,101,58,58,99,111,112,95,116,101,115,116,79,98,106,101,99,116,80,114,101,118,70,114,97,109,101,78,117,109,0,71,97,109,101,58,58,99,111,112,95,116,101,115,116,79,98,106,101,99,116,70,114,97,109,101,78,117,109,0,71,97,109,101,58,58,99,111,112,95,116,101,115,116,80,114,101,118,77,111,116,105,111,110,78,117,109,0,71,97,109,101,58,58,99,111,112,95,116,101,115,116,77,111,116,105,111,110,78,117,109,0,71,97,109,101,58,58,99,111,112,95,116,101,115,116,79,98,106,101,99,116,86,97,114,40,41,0,99,111,112,95,116,101,115,116,79,98,106,101,99,116,86,97,114,0,71,97,109,101,58,58,99,111,112,95,116,101,115,116,79,98,106,101,99,116,65,110,100,79,98,106,101,99,116,88,80,111,115,40,41,0,71,97,109,101,58,58,99,111,112,95,116,101,115,116,79,98,106,101,99,116,65,110,100,79,98,106,101,99,116,89,80,111,115,40,41,0,71,97,109,101,58,58,99,111,112,95,116,101,115,116,79,98,106,101,99,116,77,111,116,105,111,110,89,80,111,115,40,41,0,71,97,109,101,58,58,99,111,112,95,116,101,115,116,86,97,114,40,41,0,71,97,109,101,58,58,99,111,112,95,105,115,67,117,114,114,101,110,116,66,97,103,65,99,116,105,111,110,40,41,0,71,97,109,101,58,58,99,111,112,95,105,115,79,98,106,101,99,116,73,110,66,111,120,40,41,0,71,97,109,101,58,58,99,111,112,95,105,115,79,98,106,101,99,116,78,111,116,73,110,66,111,120,40,41,0,71,97,109,101,58,58,99,111,112,95,105,115,79,98,106,101,99,116,78,111,116,73,110,116,101,114,115,101,99,116,105,110,103,66,111,120,40,41,0,71,97,109,101,58,58,99,111,112,95,105,115,67,117,114,114,101,110,116,66,97,103,79,98,106,101,99,116,0,71,97,109,101,58,58,99,111,112,95,105,115,76,105,102,101,66,97,114,68,105,115,112,108,97,121,101,100,0,71,97,109,101,58,58,99,111,112,95,105,115,76,105,102,101,66,97,114,78,111,116,68,105,115,112,108,97,121,101,100,0,71,97,109,101,58,58,99,111,112,95,116,101,115,116,76,97,115,116,68,105,97,108,111,103,117,101,0,71,97,109,101,58,58,99,111,112,95,105,115,78,101,120,116,83,99,101,110,101,0,71,97,109,101,58,58,111,111,112,95,105,110,105,116,105,97,108,105,122,101,79,98,106,101,99,116,0,71,97,109,101,58,58,111,111,112,95,101,118,97,108,67,117,114,114,101,110,116,79,98,106,101,99,116,88,40,41,0,71,97,109,101,58,58,111,111,112,95,101,118,97,108,67,117,114,114,101,110,116,79,98,106,101,99,116,89,40,41,0,71,97,109,101,58,58,111,111,112,95,101,118,97,108,79,98,106,101,99,116,88,40,41,0,71,97,109,101,58,58,111,111,112,95,101,118,97,108,79,98,106,101,99,116,89,40,41,0,71,97,109,101,58,58,111,111,112,95,101,118,97,108,79,98,106,101,99,116,90,40,41,0,71,97,109,101,58,58,111,111,112,95,115,101,116,79,98,106,101,99,116,70,108,105,112,40,41,0,71,97,109,101,58,58,111,111,112,95,97,100,106,117,115,116,79,98,106,101,99,116,80,111,115,95,118,118,48,48,48,48,40,41,0,71,97,109,101,58,58,111,111,112,95,97,100,106,117,115,116,79,98,106,101,99,116,80,111,115,95,118,118,49,118,48,48,40,41,0,71,97,109,101,58,58,111,111,112,95,97,100,106,117,115,116,79,98,106,101,99,116,80,111,115,95,118,118,49,118,49,118,40,41,0,71,97,109,101,58,58,111,111,112,95,115,101,116,117,112,79,98,106,101,99,116,80,111,115,95,49,50,49,40,41,0,71,97,109,101,58,58,111,111,112,95,115,101,116,117,112,79,98,106,101,99,116,80,111,115,95,49,50,50,40,41,0,71,97,109,101,58,58,111,111,112,95,115,101,116,117,112,79,98,106,101,99,116,80,111,115,95,49,50,51,40,41,0,71,97,109,101,58,58,111,111,112,95,97,100,106,117,115,116,79,98,106,101,99,116,80,111,115,95,49,118,48,48,48,48,40,41,0,71,97,109,101,58,58,111,111,112,95,97,100,106,117,115,116,79,98,106,101,99,116,80,111,115,95,49,118,49,118,49,118,40,41,0,71,97,109,101,58,58,111,111,112,95,115,101,116,117,112,79,98,106,101,99,116,80,111,115,95,48,50,49,40,41,0,71,97,109,101,58,58,111,111,112,95,115,101,116,117,112,79,98,106,101,99,116,80,111,115,95,48,50,50,40,41,0,71,97,109,101,58,58,111,111,112,95,115,101,116,117,112,79,98,106,101,99,116,80,111,115,95,48,50,51,40,41,0,71,97,109,101,58,58,111,111,112,95,101,118,97,108,79,98,106,101,99,116,86,97,114,40,41,0,111,111,112,95,101,118,97,108,79,98,106,101,99,116,86,97,114,0,71,97,109,101,58,58,111,111,112,95,116,114,97,110,115,108,97,116,101,79,98,106,101,99,116,88,80,111,115,40,41,0,71,97,109,101,58,58,111,111,112,95,116,114,97,110,115,108,97,116,101,79,98,106,101,99,116,89,80,111,115,40,41,0,71,97,109,101,58,58,111,111,112,95,115,101,116,79,98,106,101,99,116,77,111,100,101,40,41,0,71,97,109,101,58,58,111,111,112,95,115,101,116,79,98,106,101,99,116,73,110,105,116,80,111,115,40,41,0,71,97,109,101,58,58,111,111,112,95,115,101,116,79,98,106,101,99,116,84,114,97,110,115,102,111,114,109,73,110,105,116,80,111,115,40,41,0,71,97,109,101,58,58,111,111,112,95,101,118,97,108,79,98,106,101,99,116,88,73,110,105,116,40,41,0,71,97,109,101,58,58,111,111,112,95,101,118,97,108,79,98,106,101,99,116,89,73,110,105,116,40,41,0,71,97,109,101,58,58,111,111,112,95,101,118,97,108,79,98,106,101,99,116,90,73,110,105,116,40,41,0,71,97,109,101,58,58,111,111,112,95,115,101,116,79,98,106,101,99,116,70,108,105,112,73,110,105,116,40,41,0,71,97,109,101,58,58,111,111,112,95,115,101,116,79,98,106,101,99,116,67,101,108,40,41,0,71,97,109,101,58,58,111,111,112,95,114,101,115,101,116,79,98,106,101,99,116,67,101,108,40,41,0,71,97,109,101,58,58,111,111,112,95,101,118,97,108,86,97,114,40,41,0,118,97,114,32,62,61,32,48,32,38,38,32,118,97,114,32,60,32,78,85,77,95,86,65,82,83,0,111,111,112,95,101,118,97,108,86,97,114,0,71,97,109,101,58,58,111,111,112,95,103,101,116,83,99,101,110,101,78,117,109,98,101,114,73,110,86,97,114,40,41,0,111,111,112,95,103,101,116,83,99,101,110,101,78,117,109,98,101,114,73,110,86,97,114,0,71,97,109,101,58,58,111,111,112,95,100,105,115,97,98,108,101,66,111,120,40,41,0,71,97,109,101,58,58,111,111,112,95,101,110,97,98,108,101,66,111,120,40,41,0,71,97,109,101,58,58,111,111,112,95,101,118,97,108,66,111,120,101,115,88,80,111,115,40,41,0,71,97,109,101,58,58,111,111,112,95,101,118,97,108,66,111,120,101,115,89,80,111,115,40,41,0,71,97,109,101,58,58,111,111,112,95,115,101,116,66,111,120,84,111,79,98,106,101,99,116,40,41,0,71,97,109,101,58,58,111,111,112,95,99,108,105,112,66,111,120,101,115,40,41,0,71,97,109,101,58,58,111,111,112,95,115,97,118,101,79,98,106,101,99,116,83,116,97,116,117,115,40,41,0,71,97,109,101,58,58,111,111,112,95,97,100,100,79,98,106,101,99,116,84,111,66,97,103,40,41,0,95,98,97,103,79,98,106,101,99,116,115,67,111,117,110,116,32,60,32,78,85,77,95,66,65,71,95,79,66,74,69,67,84,83,0,111,111,112,95,97,100,100,79,98,106,101,99,116,84,111,66,97,103,0,98,111,45,62,100,97,116,97,83,105,122,101,32,61,61,32,115,105,122,101,0,71,97,109,101,58,58,111,111,112,95,114,101,109,111,118,101,79,98,106,101,99,116,70,114,111,109,66,97,103,40,41,0,71,97,109,101,58,58,111,111,112,95,112,108,97,121,83,111,117,110,100,76,111,119,101,114,69,113,117,97,108,80,114,105,111,114,105,116,121,40,41,0,110,117,109,32,62,61,32,48,32,38,38,32,110,117,109,32,60,32,95,115,111,117,110,100,66,117,102,102,101,114,115,67,111,117,110,116,0,111,111,112,95,112,108,97,121,83,111,117,110,100,76,111,119,101,114,69,113,117,97,108,80,114,105,111,114,105,116,121,0,71,97,109,101,58,58,111,111,112,95,112,108,97,121,83,111,117,110,100,76,111,119,101,114,80,114,105,111,114,105,116,121,40,41,0,111,111,112,95,112,108,97,121,83,111,117,110,100,76,111,119,101,114,80,114,105,111,114,105,116,121,0,71,97,109,101,58,58,111,111,112,95,115,116,97,114,116,68,105,97,108,111,103,117,101,40,41,0,71,97,109,101,58,58,111,111,112,95,115,119,105,116,99,104,83,99,101,110,101,67,108,101,97,114,66,111,120,101,115,40,41,0,71,97,109,101,58,58,111,111,112,95,115,119,105,116,99,104,83,99,101,110,101,67,111,112,121,66,111,120,101,115,40,41,0,105,32,62,61,32,48,32,38,38,32,105,32,60,32,78,85,77,95,83,67,69,78,69,95,79,66,74,69,67,84,95,83,84,65,84,85,83,0,46,47,103,97,109,101,46,104,0,100,101,114,101,102,83,99,101,110,101,79,98,106,101,99,116,83,116,97,116,117,115,0,108,101,110,32,62,61,32,49,0,102,101,116,99,104,78,101,120,116,83,116,114,105,110,103,0,108,101,110,32,62,61,32,49,32,38,38,32,115,116,114,91,108,101,110,32,45,32,49,93,32,61,61,32,39,92,48,39,0,98,111,120,45,62,120,49,32,60,61,32,98,111,120,45,62,120,50,32,38,38,32,98,111,120,45,62,121,49,32,60,61,32,98,111,120,45,62,121,50,0,98,111,120,73,110,82,101,99,116,0,95,100,105,97,108,111,103,117,101,67,104,111,105,99,101,83,105,122,101,32,60,32,78,85,77,95,68,73,65,76,79,71,95,69,78,84,82,73,69,83,0,112,97,114,115,101,114,95,100,108,103,46,99,112,112,0,112,97,114,115,101,68,76,71,0,71,111,116,111,0,71,97,109,101,58,58,112,97,114,115,101,83,67,78,40,41,0,0,85,110,101,120,112,101,99,116,101,100,32,116,111,107,101,110,32,37,100,0,85,110,101,120,112,101,99,116,101,100,32,116,111,107,101,110,32,37,100,32,115,116,97,116,101,32,37,100,0,0,80,97,114,115,101,32,101,114,114,111,114,32,102,111,114,32,105,110,116,101,103,101,114,32,39,37,115,39,0,98,45,62,115,116,97,114,116,67,111,108,111,114,32,43,32,98,45,62,101,110,100,67,111,108,111,114,32,60,61,32,50,53,54,0,112,97,114,115,101,114,95,115,99,110,46,99,112,112,0,112,97,114,115,101,95,66,111,120,68,101,115,99,114,105,112,116,105,111,110,0,80,97,114,115,101,32,101,114,114,111,114,32,102,111,114,32,99,111,111,114,100,32,39,37,115,39,0,112,97,114,115,101,95,79,98,106,101,99,116,0,85,110,101,120,112,101,99,116,101,100,32,109,105,114,114,111,114,32,109,111,100,101,32,37,115,0,85,110,101,120,112,101,99,116,101,100,32,105,110,105,116,32,109,111,100,101,32,37,115,0,80,97,114,115,101,32,101,114,114,111,114,32,102,111,114,32,97,114,114,97,121,32,105,110,100,101,120,32,39,37,115,39,0,103,45,62,95,115,99,101,110,101,67,111,110,100,105,116,105,111,110,115,67,111,117,110,116,32,60,32,71,97,109,101,58,58,78,85,77,95,78,69,88,84,95,83,67,69,78,69,83,0,112,97,114,115,101,95,83,99,101,110,101,67,111,110,100,105,116,105,111,110,0,103,45,62,95,98,97,103,79,98,106,101,99,116,115,67,111,117,110,116,32,60,32,71,97,109,101,58,58,78,85,77,95,66,65,71,95,79,66,74,69,67,84,83,0,112,97,114,115,101,95,66,97,103,79,98,106,101,99,116,0,118,97,114,32,62,61,32,48,32,38,38,32,118,97,114,32,60,32,71,97,109,101,58,58,78,85,77,95,86,65,82,83,0,112,97,114,115,101,84,111,107,101,110,95,71,108,111,98,97,108,77,101,109,111,114,121,0,73,110,118,97,108,105,100,32,99,111,109,112,97,114,101,32,111,112,101,114,97,116,111,114,32,37,100,0,71,108,111,98,97,108,77,101,109,111,114,121,0,83,99,101,110,101,78,117,109,98,101,114,0,61,61,0,33,61,0,60,0,60,61,0,62,0,62,61,0,45,62,0,69,110,100,0,77,111,118,105,101,115,0,83,99,101,110,101,0,83,99,114,101,101,110,0,77,105,100,105,0,78,85,76,76,0,79,98,106,101,99,116,58,0,73,102,78,101,119,79,98,106,101,99,116,58,0,66,97,103,0,66,111,120,0,66,97,103,69,110,100,0,77,111,118,105,101,115,69,110,100,0,83,99,101,110,101,69,110,100,0,79,98,106,101,99,116,69,110,100,0,66,111,120,69,110,100,0,67,108,97,115,115,0,77,101,109,111,114,121,0,67,111,111,114,100,0,65,100,100,67,111,111,114,100,88,0,65,100,100,67,111,111,114,100,89,0,67,111,111,114,100,88,0,67,111,111,114,100,89,0,68,101,112,116,104,0,77,111,118,101,0,67,101,108,0,77,105,114,114,111,114,0,78,111,0,88,0,89,0,88,89,0,73,110,105,116,0,78,111,73,110,105,116,0,83,105,109,112,108,101,0,82,97,110,100,111,109,0,80,117,116,0,76,111,97,100,83,116,97,116,117,115,0,68,105,115,97,98,108,101,0,69,110,97,98,108,101,0,77,105,120,0,83,99,101,110,101,110,78,117,109,98,101,114,0,85,110,97,98,108,101,32,116,111,32,97,108,108,111,99,97,116,101,32,116,101,109,112,111,114,97,114,121,32,100,101,99,111,100,101,32,98,117,102,102,101,114,32,40,54,53,53,51,53,32,98,121,116,101,115,41,0,85,110,97,98,108,101,32,116,111,32,97,108,108,111,99,97,116,101,32,98,105,116,109,97,112,32,98,117,102,102,101,114,32,48,32,40,37,100,32,98,121,116,101,115,41,0,85,110,97,98,108,101,32,116,111,32,97,108,108,111,99,97,116,101,32,98,105,116,109,97,112,32,98,117,102,102,101,114,32,50,32,40,37,100,32,98,121,116,101,115,41,0,46,46,92,98,101,114,109,117,100,97,46,111,118,114,0,46,46,92,98,101,114,109,117,100,97,46,119,103,112,0,85,110,97,98,108,101,32,116,111,32,97,108,108,111,99,97,116,101,32,98,97,103,32,98,105,116,109,97,112,32,98,117,102,102,101,114,32,40,37,100,32,98,121,116,101,115,41,0,46,46,92,98,101,114,109,117,100,97,46,115,112,114,0,85,110,97,98,108,101,32,116,111,32,97,108,108,111,99,97,116,101,32,98,101,114,109,117,100,97,46,115,112,114,32,98,117,102,102,101,114,32,40,37,100,32,98,121,116,101,115,41,0,71,97,109,101,58,58,108,111,97,100,70,105,108,101,40,39,37,115,39,41,0,85,110,97,98,108,101,32,116,111,32,97,108,108,111,99,97,116,101,32,98,117,102,102,101,114,32,102,111,114,32,102,105,108,101,32,108,111,97,100,105,110,103,32,40,37,100,32,98,121,116,101,115,41,0,71,97,109,101,58,58,108,111,97,100,87,71,80,40,39,37,115,39,41,0,73,110,118,97,108,105,100,32,119,103,112,32,102,111,114,109,97,116,32,37,88,0,71,97,109,101,58,58,108,111,97,100,83,80,82,40,39,37,115,39,41,0,73,110,118,97,108,105,100,32,115,112,114,32,102,111,114,109,97,116,32,37,88,0,95,115,99,101,110,101,79,98,106,101,99,116,77,111,116,105,111,110,115,67,111,117,110,116,32,60,32,78,85,77,95,83,67,69,78,69,95,77,79,84,73,79,78,83,0,114,101,115,111,117,114,99,101,46,99,112,112,0,108,111,97,100,83,80,82,0,95,115,99,101,110,101,79,98,106,101,99,116,70,114,97,109,101,115,67,111,117,110,116,32,43,32,110,117,109,32,60,61,32,78,85,77,95,83,67,69,78,69,95,79,66,74,69,67,84,95,70,82,65,77,69,83,0,85,110,97,98,108,101,32,116,111,32,97,108,108,111,99,97,116,101,32,37,100,32,98,121,116,101,115,0,71,97,109,101,58,58,108,111,97,100,77,79,86,40,39,37,115,39,41,0,73,110,118,97,108,105,100,32,109,111,118,32,102,111,114,109,97,116,32,37,88,0,95,97,110,105,109,97,116,105,111,110,115,67,111,117,110,116,32,60,32,78,85,77,95,83,67,69,78,69,95,65,78,73,77,65,84,73,79,78,83,0,108,111,97,100,77,79,86,0,115,112,101,101,100,32,37,100,32,109,115,0,95,115,111,117,110,100,66,117,102,102,101,114,115,67,111,117,110,116,32,60,32,78,85,77,95,83,79,85,78,68,95,66,85,70,70,69,82,83,0,95,115,99,101,110,101,79,98,106,101,99,116,115,67,111,117,110,116,32,60,32,78,85,77,95,83,67,69,78,69,95,79,66,74,69,67,84,83,0,68,117,112,108,105,99,97,116,101,32,111,98,106,101,99,116,32,110,97,109,101,32,37,115,0,118,97,114,32,62,61,32,48,32,38,38,32,118,97,114,32,60,32,49,48,0,48,0,119,98,0,85,110,97,98,108,101,32,116,111,32,115,97,118,101,32,103,97,109,101,32,115,116,97,116,101,32,116,111,32,102,105,108,101,32,39,37,115,39,0,115,116,114,99,104,114,40,95,99,117,114,114,101,110,116,83,99,101,110,101,83,99,110,44,32,39,92,92,39,41,32,61,61,32,48,0,115,97,118,101,108,111,97,100,46,99,112,112,0,115,97,118,101,83,116,97,116,101,0,83,97,118,101,100,32,115,116,97,116,101,32,116,111,32,115,108,111,116,32,37,100,0,114,98,0,85,110,97,98,108,101,32,116,111,32,108,111,97,100,32,103,97,109,101,32,115,116,97,116,101,32,116,111,32,102,105,108,101,32,39,37,115,39,0,40,110,32,37,32,49,48,41,32,61,61,32,48,0,108,111,97,100,83,116,97,116,101,0,76,111,97,100,101,100,32,115,116,97,116,101,32,102,114,111,109,32,115,108,111,116,32,37,100,32,115,99,101,110,101,32,39,37,115,39,0,99,111,117,110,116,32,60,61,32,71,97,109,101,58,58,78,85,77,95,66,65,71,95,79,66,74,69,67,84,83,0,108,111,97,100,95,98,97,103,79,98,106,101,99,116,115,0,116,111,116,97,108,83,105,122,101,32,60,32,48,120,70,70,70,70,0,115,97,118,101,95,98,97,103,79,98,106,101,99,116,115,0,37,115,47,98,101,114,109,117,100,97,46,37,48,51,100,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,3,6,8,7,11,8,3,4,3,6,7,3,4,3,4,7,5,7,7,7,7,7,7,7,7,3,3,7,7,7,7,13,8,9,8,9,8,8,9,9,3,6,9,8,11,9,9,9,9,10,8,8,9,8,14,9,10,9,4,4,3,5,8,5,7,7,7,7,7,4,7,7,3,3,7,3,11,7,7,7,7,5,7,4,7,8,10,8,8,7,5,3,4,5,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,7,7,7,8,3,7,5,10,4,7,7,4,10,8,4,7,4,4,5,8,6,3,5,3,4,7,11,11,11,7,8,8,8,8,8,8,12,8,8,8,8,8,3,4,4,4,9,9,9,9,9,9,9,7,9,9,9,9,9,10,8,7,7,7,7,7,7,7,11,7,7,7,7,7,4,4,4,4,7,7,7,7,7,7,7,5,7,7,7,7,7,8,7,8,13,10,0,47,47,0,49,52,83,121,115,116,101,109,83,116,117,98,95,83,68,76,0,83,121,115,116,101,109,83,116,117,98,95,83,68,76,58,58,105,110,105,116,40,41,32,85,110,97,98,108,101,32,116,111,32,97,108,108,111,99,97,116,101,32,111,102,102,115,99,114,101,101,110,32,98,117,102,102,101,114,0,110,32,60,61,32,50,53,54,0,115,121,115,116,101,109,115,116,117,98,95,115,100,108,46,99,112,112,0,115,101,116,80,97,108,101,116,116,101,0,83,121,115,116,101,109,83,116,117,98,95,83,68,76,58,58,115,116,97,114,116,65,117,100,105,111,40,41,32,85,110,97,98,108,101,32,116,111,32,111,112,101,110,32,115,111,117,110,100,32,100,101,118,105,99,101,0,49,48,83,121,115,116,101,109,83,116,117,98,0,37,115,10,0,69,82,82,79,82,58,32,37,115,33,10,0,87,65,82,78,73,78,71,58,32,37,115,33,10,0,119,105,110,49,54,95,115,110,100,80,108,97,121,83,111,117,110,100,40,41,32,37,100,0,85,110,97,98,108,101,32,116,111,32,111,112,101,110,32,119,97,118,32,102,105,108,101,32,39,37,115,39,0,85,110,104,97,110,100,108,101,100,32,111,112,32,37,100,32,105,110,32,119,105,110,49,54,95,115,110,100,80,108,97,121,83,111,117,110,100,0,119,105,110,49,54,95,115,116,114,101,116,99,104,66,105,116,115,40,41,32,37,100,44,37,100,32,37,100,44,37,100,0,115,114,99,87,105,100,116,104,32,61,61,32,100,115,116,87,105,100,116,104,32,38,38,32,115,114,99,72,101,105,103,104,116,32,61,61,32,100,115,116,72,101,105,103,104,116,0,119,105,110,49,54,46,99,112,112,0,119,105,110,49,54,95,115,116,114,101,116,99,104,66,105,116,115,0,105,110,99,111,114,114,101,99,116,32,104,101,97,100,101,114,32,99,104,101,99,107,0,117,110,107,110,111,119,110,32,99,111,109,112,114,101,115,115,105,111,110,32,109,101,116,104,111,100,0,105,110,118,97,108,105,100,32,119,105,110,100,111,119,32,115,105,122,101,0,117,110,107,110,111,119,110,32,104,101,97,100,101,114,32,102,108,97,103,115,32,115,101,116,0,104,101,97,100,101,114,32,99,114,99,32,109,105,115,109,97,116,99,104,0,105,110,118,97,108,105,100,32,98,108,111,99,107,32,116,121,112,101,0,105,110,118,97,108,105,100,32,115,116,111,114,101,100,32,98,108,111,99,107,32,108,101,110,103,116,104,115,0,116,111,111,32,109,97,110,121,32,108,101,110,103,116,104,32,111,114,32,100,105,115,116,97,110,99,101,32,115,121,109,98,111,108,115,0,105,110,118,97,108,105,100,32,99,111,100,101,32,108,101,110,103,116,104,115,32,115,101,116,0,105,110,118,97,108,105,100,32,98,105,116,32,108,101,110,103,116,104,32,114,101,112,101,97,116,0,105,110,118,97,108,105,100,32,99,111,100,101,32,45,45,32,109,105,115,115,105,110,103,32,101,110,100,45,111,102,45,98,108,111,99,107,0,105,110,118,97,108,105,100,32,108,105,116,101,114,97,108,47,108,101,110,103,116,104,115,32,115,101,116,0,105,110,118,97,108,105,100,32,100,105,115,116,97,110,99,101,115,32,115,101,116,0,105,110,99,111,114,114,101,99,116,32,100,97,116,97,32,99,104,101,99,107,0,105,110,99,111,114,114,101,99,116,32,108,101,110,103,116,104,32,99,104,101,99,107,0,105,110,118,97,108,105,100,32,100,105,115,116,97,110,99,101,32,116,111,111,32,102,97,114,32,98,97,99,107,0,105,110,118,97,108,105,100,32,100,105,115,116,97,110,99,101,32,99,111,100,101,0,105,110,118,97,108,105,100,32,108,105,116,101,114,97,108,47,108,101,110,103,116,104,32,99,111,100,101,0,83,116,57,98,97,100,95,97,108,108,111,99,0,83,116,57,101,120,99,101,112,116,105,111,110,0,83,116,57,116,121,112,101,95,105,110,102,111,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,112,116,104,114,101,97,100,95,111,110,99,101,32,102,97,105,108,117,114,101,32,105,110,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,95,102,97,115,116,40,41,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,114,101,116,117,114,110,101,100,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,116,104,114,101,119], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+20988);
/* memory initializer */ allocate([32,97,110,32,101,120,99,101,112,116,105,111,110,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,112,116,104,114,101,97,100,32,107,101,121,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,99,97,110,110,111,116,32,122,101,114,111,32,111,117,116,32,116,104,114,101,97,100,32,118,97,108,117,101,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,58,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,102,111,114,101,105,103,110,32,101,120,99,101,112,116,105,111,110,0,116,101,114,109,105,110,97,116,105,110,103,0,117,110,99,97,117,103,104,116,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,114,119,97,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,4,7,3,6,5], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+31228);
/* memory initializer */ allocate([17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,110,97,110,0,78,65,78,0,46,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+34692);





/* no memory initializer */
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


   
  Module["_i64Add"] = _i64Add;

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var fd = process.stdin.fd;
              // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
              var usingDevice = false;
              try {
                fd = fs.openSync('/dev/stdin', 'r');
                usingDevice = true;
              } catch (e) {}
  
              bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
  
      /*
      // Disabled, see https://github.com/kripken/emscripten/issues/2770
      stream = FS.getStreamFromPtr(stream);
      if (stream.stream_ops.flush) {
        stream.stream_ops.flush(stream);
      }
      */
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 0777, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullScreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullScreen();
        }
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};
  
  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;
  
  function _free() {
  }
  Module["_free"] = _free;
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  var _environ=allocate(1, "i32*", ALLOC_STATIC);var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = ENV['LOGNAME'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }
  
  function _putenv(string) {
      // int putenv(char *string);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/putenv.html
      // WARNING: According to the standard (and the glibc implementation), the
      //          string is taken by reference so future changes are reflected.
      //          We copy it instead, possibly breaking some uses.
      if (string === 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      string = Pointer_stringify(string);
      var splitPoint = string.indexOf('=')
      if (string === '' || string.indexOf('=') === -1) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      var name = string.slice(0, splitPoint);
      var value = string.slice(splitPoint + 1);
      if (!(name in ENV) || ENV[name] !== value) {
        ENV[name] = value;
        ___buildEnvironment(ENV);
      }
      return 0;
    }
  
  function _SDL_RWFromConstMem(mem, size) {
      var id = SDL.rwops.length; // TODO: recycle ids when they are null
      SDL.rwops.push({ bytes: mem, count: size });
      return id;
    }function _TTF_FontHeight(font) {
      var fontData = SDL.fonts[font];
      return fontData.size;
    }function _TTF_SizeText(font, text, w, h) {
      var fontData = SDL.fonts[font];
      if (w) {
        HEAP32[((w)>>2)]=SDL.estimateTextWidth(fontData, Pointer_stringify(text));
      }
      if (h) {
        HEAP32[((h)>>2)]=fontData.size;
      }
      return 0;
    }function _TTF_RenderText_Solid(font, text, color) {
      // XXX the font and color are ignored
      text = Pointer_stringify(text) || ' '; // if given an empty string, still return a valid surface
      var fontData = SDL.fonts[font];
      var w = SDL.estimateTextWidth(fontData, text);
      var h = fontData.size;
      var color = SDL.loadColorToCSSRGB(color); // XXX alpha breaks fonts?
      var fontString = h + 'px ' + fontData.name;
      var surf = SDL.makeSurface(w, h, 0, false, 'text:' + text); // bogus numbers..
      var surfData = SDL.surfaces[surf];
      surfData.ctx.save();
      surfData.ctx.fillStyle = color;
      surfData.ctx.font = fontString;
      surfData.ctx.textBaseline = 'top';
      surfData.ctx.fillText(text, 0, 0);
      surfData.ctx.restore();
      return surf;
    }function _Mix_HaltMusic() {
      var audio = SDL.music.audio;
      if (audio) {
        audio.src = audio.src; // rewind <media> element
        audio.currentPosition = 0; // rewind Web Audio graph playback.
        audio.pause();
      }
      SDL.music.audio = null;
      if (SDL.hookMusicFinished) {
        Runtime.dynCall('v', SDL.hookMusicFinished);
      }
      return 0;
    }function _Mix_PlayMusic(id, loops) {
      // Pause old music if it exists.
      if (SDL.music.audio) {
        if (!SDL.music.audio.paused) Module.printErr('Music is already playing. ' + SDL.music.source);
        SDL.music.audio.pause();
      }
      var info = SDL.audios[id];
      var audio;
      if (info.webAudio) { // Play via Web Audio API
        // Create an instance of the WebAudio object.
        audio = {};
        audio.resource = info; // This new webAudio object is an instance that refers to this existing resource.
        audio.paused = false;
        audio.currentPosition = 0;
        audio.play = function() { SDL.playWebAudio(this); }
        audio.pause = function() { SDL.pauseWebAudio(this); }
      } else if (info.audio) { // Play via the <audio> element
        audio = info.audio;
      }
      audio['onended'] = function() { if (SDL.music.audio == this) _Mix_HaltMusic(); } // will send callback
      audio.loop = loops != 0; // TODO: handle N loops for finite N
      audio.volume = SDL.music.volume;
      SDL.music.audio = audio;
      audio.play();
      return 0;
    }function _Mix_FreeChunk(id) {
      SDL.audios[id] = null;
    }function _Mix_LoadWAV_RW(rwopsID, freesrc) {
      var rwops = SDL.rwops[rwopsID];
  
  
      if (rwops === undefined)
        return 0;
  
      var filename = '';
      var audio;
      var webAudio;
      var bytes;
  
      if (rwops.filename !== undefined) {
        filename = PATH.resolve(rwops.filename);
        var raw = Module["preloadedAudios"][filename];
        if (!raw) {
          if (raw === null) Module.printErr('Trying to reuse preloaded audio, but freePreloadedMediaOnUse is set!');
          if (!Module.noAudioDecoding) Runtime.warnOnce('Cannot find preloaded audio ' + filename);
  
          // see if we can read the file-contents from the in-memory FS
          try {
            bytes = FS.readFile(filename);
          } catch (e) {
            Module.printErr('Couldn\'t find file for: ' + filename);
            return 0;
          }
        }
        if (Module['freePreloadedMediaOnUse']) {
          Module["preloadedAudios"][filename] = null;
        }
        audio = raw;
      }
      else if (rwops.bytes !== undefined) {
        // For Web Audio context buffer decoding, we must make a clone of the audio data, but for <media> element,
        // a view to existing data is sufficient.
        if (SDL.webAudioAvailable()) bytes = HEAPU8.buffer.slice(rwops.bytes, rwops.bytes + rwops.count);
        else bytes = HEAPU8.subarray(rwops.bytes, rwops.bytes + rwops.count);
      }
      else {
        return 0;
      }
  
      var arrayBuffer = bytes ? bytes.buffer || bytes : bytes;
  
      // To allow user code to work around browser bugs with audio playback on <audio> elements an Web Audio, enable
      // the user code to hook in a callback to decide on a file basis whether each file should use Web Audio or <audio> for decoding and playback.
      // In particular, see https://bugzilla.mozilla.org/show_bug.cgi?id=654787 and ?id=1012801 for tradeoffs.
      var canPlayWithWebAudio = Module['SDL_canPlayWithWebAudio'] === undefined || Module['SDL_canPlayWithWebAudio'](filename, arrayBuffer);
  
      if (bytes !== undefined && SDL.webAudioAvailable() && canPlayWithWebAudio) {
        audio = undefined;
        webAudio = {};
        // The audio decoding process is asynchronous, which gives trouble if user code plays the audio data back immediately
        // after loading. Therefore prepare an array of callback handlers to run when this audio decoding is complete, which
        // will then start the playback (with some delay).
        webAudio.onDecodeComplete = []; // While this member array exists, decoding hasn't finished yet.
        function onDecodeComplete(data) {
          webAudio.decodedBuffer = data;
          // Call all handlers that were waiting for this decode to finish, and clear the handler list.
          webAudio.onDecodeComplete.forEach(function(e) { e(); });
          webAudio.onDecodeComplete = undefined; // Don't allow more callback handlers since audio has finished decoding.
        }
  
        SDL.audioContext['decodeAudioData'](arrayBuffer, onDecodeComplete);
      } else if (audio === undefined && bytes) {
        // Here, we didn't find a preloaded audio but we either were passed a filepath for
        // which we loaded bytes, or we were passed some bytes
        var blob = new Blob([bytes], {type: rwops.mimetype});
        var url = URL.createObjectURL(blob);
        audio = new Audio();
        audio.src = url;
        audio.mozAudioChannelType = 'content'; // bugzilla 910340
      }
  
      var id = SDL.audios.length;
      // Keep the loaded audio in the audio arrays, ready for playback
      SDL.audios.push({
        source: filename,
        audio: audio, // Points to the <audio> element, if loaded
        webAudio: webAudio // Points to a Web Audio -specific resource object, if loaded
      });
      return id;
    }function _Mix_PlayChannel(channel, id, loops) {
      // TODO: handle fixed amount of N loops. Currently loops either 0 or infinite times.
  
      // Get the audio element associated with the ID
      var info = SDL.audios[id];
      if (!info) return -1;
      if (!info.audio && !info.webAudio) return -1;
  
      // If the user asks us to allocate a channel automatically, get the first
      // free one.
      if (channel == -1) {
        for (var i = SDL.channelMinimumNumber; i < SDL.numChannels; i++) {
          if (!SDL.channels[i].audio) {
            channel = i;
            break;
          }
        }
        if (channel == -1) {
          Module.printErr('All ' + SDL.numChannels + ' channels in use!');
          return -1;
        }
      }
      var channelInfo = SDL.channels[channel];
      var audio;
      if (info.webAudio) {
        // Create an instance of the WebAudio object.
        audio = {};
        audio.resource = info; // This new object is an instance that refers to this existing resource.
        audio.paused = false;
        audio.currentPosition = 0;
        // Make our instance look similar to the instance of a <media> to make api simple.
        audio.play = function() { SDL.playWebAudio(this); }
        audio.pause = function() { SDL.pauseWebAudio(this); }
      } else {
        // We clone the audio node to utilize the preloaded audio buffer, since
        // the browser has already preloaded the audio file.
        audio = info.audio.cloneNode(true);
        audio.numChannels = info.audio.numChannels;
        audio.frequency = info.audio.frequency;
      }
      audio['onended'] = function SDL_audio_onended() { // TODO: cache these
        if (channelInfo.audio == this) { channelInfo.audio.paused = true; channelInfo.audio = null; }
        if (SDL.channelFinished) Runtime.getFuncWrapper(SDL.channelFinished, 'vi')(channel);
      }
      channelInfo.audio = audio;
      // TODO: handle N loops. Behavior matches Mix_PlayMusic
      audio.loop = loops != 0;
      audio.volume = channelInfo.volume;
      audio.play();
      return channel;
    }function _SDL_PauseAudio(pauseOn) {
      if (!SDL.audio) {
        return;
      }
      if (pauseOn) {
        if (SDL.audio.timer !== undefined) {
          clearTimeout(SDL.audio.timer);
          SDL.audio.numAudioTimersPending = 0;
          SDL.audio.timer = undefined;
        }
      } else if (!SDL.audio.timer) {
        // Start the audio playback timer callback loop.
        SDL.audio.numAudioTimersPending = 1;
        SDL.audio.timer = Browser.safeSetTimeout(SDL.audio.caller, 1);
      }
      SDL.audio.paused = pauseOn;
    }function _SDL_CloseAudio() {
      if (SDL.audio) {
        _SDL_PauseAudio(1);
        _free(SDL.audio.buffer);
        SDL.audio = null;
        SDL.allocateChannels(0);
      }
    }function _SDL_LockSurface(surf) {
      var surfData = SDL.surfaces[surf];
  
      surfData.locked++;
      if (surfData.locked > 1) return 0;
  
      if (!surfData.buffer) {
        surfData.buffer = _malloc(surfData.width * surfData.height * 4);
        HEAP32[(((surf)+(20))>>2)]=surfData.buffer;
      }
  
      // Mark in C/C++-accessible SDL structure
      // SDL_Surface has the following fields: Uint32 flags, SDL_PixelFormat *format; int w, h; Uint16 pitch; void *pixels; ...
      // So we have fields all of the same size, and 5 of them before us.
      // TODO: Use macros like in library.js
      HEAP32[(((surf)+(20))>>2)]=surfData.buffer;
  
      if (surf == SDL.screen && Module.screenIsReadOnly && surfData.image) return 0;
  
      if (SDL.defaults.discardOnLock) {
        if (!surfData.image) {
          surfData.image = surfData.ctx.createImageData(surfData.width, surfData.height);
        }
        if (!SDL.defaults.opaqueFrontBuffer) return;
      } else {
        surfData.image = surfData.ctx.getImageData(0, 0, surfData.width, surfData.height);
      }
  
      // Emulate desktop behavior and kill alpha values on the locked surface. (very costly!) Set SDL.defaults.opaqueFrontBuffer = false
      // if you don't want this.
      if (surf == SDL.screen && SDL.defaults.opaqueFrontBuffer) {
        var data = surfData.image.data;
        var num = data.length;
        for (var i = 0; i < num/4; i++) {
          data[i*4+3] = 255; // opacity, as canvases blend alpha
        }
      }
  
      if (SDL.defaults.copyOnLock && !SDL.defaults.discardOnLock) {
        // Copy pixel data to somewhere accessible to 'C/C++'
        if (surfData.isFlagSet(0x00200000 /* SDL_HWPALETTE */)) {
          // If this is neaded then
          // we should compact the data from 32bpp to 8bpp index.
          // I think best way to implement this is use
          // additional colorMap hash (color->index).
          // Something like this:
          //
          // var size = surfData.width * surfData.height;
          // var data = '';
          // for (var i = 0; i<size; i++) {
          //   var color = SDL.translateRGBAToColor(
          //     surfData.image.data[i*4   ], 
          //     surfData.image.data[i*4 +1], 
          //     surfData.image.data[i*4 +2], 
          //     255);
          //   var index = surfData.colorMap[color];
          //   HEAP8[(((surfData.buffer)+(i))>>0)]=index;
          // }
          throw 'CopyOnLock is not supported for SDL_LockSurface with SDL_HWPALETTE flag set' + new Error().stack;
        } else {
          HEAPU8.set(surfData.image.data, surfData.buffer);
        }
      }
  
      return 0;
    }
  
  function _SDL_FreeRW(rwopsID) {
      SDL.rwops[rwopsID] = null;
      while (SDL.rwops.length > 0 && SDL.rwops[SDL.rwops.length-1] === null) {
        SDL.rwops.pop();
      }
    }function _IMG_Load_RW(rwopsID, freeSrc) {
      try {
        // stb_image integration support
        function cleanup() {
          if (rwops && freeSrc) _SDL_FreeRW(rwopsID);
        };
        function addCleanup(func) {
          var old = cleanup;
          cleanup = function added_cleanup() {
            old();
            func();
          }
        }
        function callStbImage(func, params) {
          var x = Module['_malloc'](4);
          var y = Module['_malloc'](4);
          var comp = Module['_malloc'](4);
          addCleanup(function() {
            Module['_free'](x);
            Module['_free'](y);
            Module['_free'](comp);
            if (data) Module['_stbi_image_free'](data);
          });
          var data = Module['_' + func].apply(null, params.concat([x, y, comp, 0]));
          if (!data) return null;
          return {
            rawData: true,
            data: data,
            width: HEAP32[((x)>>2)],
            height: HEAP32[((y)>>2)],
            size: HEAP32[((x)>>2)] * HEAP32[((y)>>2)] * HEAP32[((comp)>>2)],
            bpp: HEAP32[((comp)>>2)]
          };
        }
  
        var rwops = SDL.rwops[rwopsID];
        if (rwops === undefined) {
          return 0;
        }
  
        var filename = rwops.filename;
        if (filename === undefined) {
          Runtime.warnOnce('Only file names that have been preloaded are supported for IMG_Load_RW. Consider using STB_IMAGE=1 if you want synchronous image decoding (see settings.js)');
          return 0;
        }
  
        if (!raw) {
          filename = PATH.resolve(filename);
          var raw = Module["preloadedImages"][filename];
          if (!raw) {
            if (raw === null) Module.printErr('Trying to reuse preloaded image, but freePreloadedMediaOnUse is set!');
            Runtime.warnOnce('Cannot find preloaded image ' + filename);
            Runtime.warnOnce('Cannot find preloaded image ' + filename + '. Consider using STB_IMAGE=1 if you want synchronous image decoding (see settings.js)');
            return 0;
          } else if (Module['freePreloadedMediaOnUse']) {
            Module["preloadedImages"][filename] = null;
          }
        }
  
        var surf = SDL.makeSurface(raw.width, raw.height, 0, false, 'load:' + filename);
        var surfData = SDL.surfaces[surf];
        surfData.ctx.globalCompositeOperation = "copy";
        if (!raw.rawData) {
          surfData.ctx.drawImage(raw, 0, 0, raw.width, raw.height, 0, 0, raw.width, raw.height);
        } else {
          var imageData = surfData.ctx.getImageData(0, 0, surfData.width, surfData.height);
          if (raw.bpp == 4) {
            // rgba
            imageData.data.set(HEAPU8.subarray((raw.data),(raw.data+raw.size)));
          } else if (raw.bpp == 3) {
            // rgb
            var pixels = raw.size/3;
            var data = imageData.data;
            var sourcePtr = raw.data;
            var destPtr = 0;
            for (var i = 0; i < pixels; i++) {
              data[destPtr++] = HEAPU8[((sourcePtr++)>>0)];
              data[destPtr++] = HEAPU8[((sourcePtr++)>>0)];
              data[destPtr++] = HEAPU8[((sourcePtr++)>>0)];
              data[destPtr++] = 255;
            }
          } else if (raw.bpp == 1) {
            // grayscale
            var pixels = raw.size;
            var data = imageData.data;
            var sourcePtr = raw.data;
            var destPtr = 0;
            for (var i = 0; i < pixels; i++) {
              var value = HEAPU8[((sourcePtr++)>>0)];
              data[destPtr++] = value;
              data[destPtr++] = value;
              data[destPtr++] = value;
              data[destPtr++] = 255;
            }
          } else {
            Module.printErr('cannot handle bpp ' + raw.bpp);
            return 0;
          }
          surfData.ctx.putImageData(imageData, 0, 0);
        }
        surfData.ctx.globalCompositeOperation = "source-over";
        // XXX SDL does not specify that loaded images must have available pixel data, in fact
        //     there are cases where you just want to blit them, so you just need the hardware
        //     accelerated version. However, code everywhere seems to assume that the pixels
        //     are in fact available, so we retrieve it here. This does add overhead though.
        _SDL_LockSurface(surf);
        surfData.locked--; // The surface is not actually locked in this hack
        if (SDL.GL) {
          // After getting the pixel data, we can free the canvas and context if we do not need to do 2D canvas blitting
          surfData.canvas = surfData.ctx = null;
        }
        return surf;
      } finally {
        cleanup();
      }
    }
  
  function _SDL_RWFromFile(_name, mode) {
      var id = SDL.rwops.length; // TODO: recycle ids when they are null
      var name = Pointer_stringify(_name)
      SDL.rwops.push({ filename: name, mimetype: Browser.getMimetype(name) });
      return id;
    }function _IMG_Load(filename){
      var rwops = _SDL_RWFromFile(filename);
      var result = _IMG_Load_RW(rwops, 1);
      return result;
    }function _SDL_UpperBlitScaled(src, srcrect, dst, dstrect) {
      return SDL.blitSurface(src, srcrect, dst, dstrect, true);
    }function _SDL_UpperBlit(src, srcrect, dst, dstrect) {
      return SDL.blitSurface(src, srcrect, dst, dstrect, false);
    }function _SDL_GetTicks() {
      return (Date.now() - SDL.startTime)|0;
    }var SDL={defaults:{width:320,height:200,copyOnLock:true,discardOnLock:false,opaqueFrontBuffer:true},version:null,surfaces:{},canvasPool:[],events:[],fonts:[null],audios:[null],rwops:[null],music:{audio:null,volume:1},mixerFrequency:22050,mixerFormat:32784,mixerNumChannels:2,mixerChunkSize:1024,channelMinimumNumber:0,GL:false,glAttributes:{0:3,1:3,2:2,3:0,4:0,5:1,6:16,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:1,16:0,17:0,18:0},keyboardState:null,keyboardMap:{},canRequestFullscreen:false,isRequestingFullscreen:false,textInput:false,startTime:null,initFlags:0,buttonState:0,modState:0,DOMButtons:[0,0,0],DOMEventToSDLEvent:{},TOUCH_DEFAULT_ID:0,eventHandler:null,eventHandlerContext:null,eventHandlerTemp:0,keyCodes:{16:1249,17:1248,18:1250,20:1081,33:1099,34:1102,35:1101,36:1098,37:1104,38:1106,39:1103,40:1105,44:316,45:1097,46:127,91:1251,93:1125,96:1122,97:1113,98:1114,99:1115,100:1116,101:1117,102:1118,103:1119,104:1120,105:1121,106:1109,107:1111,109:1110,110:1123,111:1108,112:1082,113:1083,114:1084,115:1085,116:1086,117:1087,118:1088,119:1089,120:1090,121:1091,122:1092,123:1093,124:1128,125:1129,126:1130,127:1131,128:1132,129:1133,130:1134,131:1135,132:1136,133:1137,134:1138,135:1139,144:1107,160:94,161:33,162:34,163:35,164:36,165:37,166:38,167:95,168:40,169:41,170:42,171:43,172:124,173:45,174:123,175:125,176:126,181:127,182:129,183:128,188:44,190:46,191:47,192:96,219:91,220:92,221:93,222:39,224:1251},scanCodes:{8:42,9:43,13:40,27:41,32:44,35:204,39:53,44:54,46:55,47:56,48:39,49:30,50:31,51:32,52:33,53:34,54:35,55:36,56:37,57:38,58:203,59:51,61:46,91:47,92:49,93:48,96:52,97:4,98:5,99:6,100:7,101:8,102:9,103:10,104:11,105:12,106:13,107:14,108:15,109:16,110:17,111:18,112:19,113:20,114:21,115:22,116:23,117:24,118:25,119:26,120:27,121:28,122:29,127:76,305:224,308:226,316:70},loadRect:function (rect) {
        return {
          x: HEAP32[((rect + 0)>>2)],
          y: HEAP32[((rect + 4)>>2)],
          w: HEAP32[((rect + 8)>>2)],
          h: HEAP32[((rect + 12)>>2)]
        };
      },updateRect:function (rect, r) {
        HEAP32[((rect)>>2)]=r.x;
        HEAP32[(((rect)+(4))>>2)]=r.y;
        HEAP32[(((rect)+(8))>>2)]=r.w;
        HEAP32[(((rect)+(12))>>2)]=r.h;
      },intersectionOfRects:function (first, second) {
        var leftX = Math.max(first.x, second.x);
        var leftY = Math.max(first.y, second.y);
        var rightX = Math.min(first.x + first.w, second.x + second.w);
        var rightY = Math.min(first.y + first.h, second.y + second.h);
  
        return {
          x: leftX,
          y: leftY,
          w: Math.max(leftX, rightX) - leftX,
          h: Math.max(leftY, rightY) - leftY
        }
      },checkPixelFormat:function (fmt) {
        // Canvas screens are always RGBA.
        var format = HEAP32[((fmt)>>2)];
        if (format != -2042224636) {
          Runtime.warnOnce('Unsupported pixel format!');
        }
      },loadColorToCSSRGB:function (color) {
        var rgba = HEAP32[((color)>>2)];
        return 'rgb(' + (rgba&255) + ',' + ((rgba >> 8)&255) + ',' + ((rgba >> 16)&255) + ')';
      },loadColorToCSSRGBA:function (color) {
        var rgba = HEAP32[((color)>>2)];
        return 'rgba(' + (rgba&255) + ',' + ((rgba >> 8)&255) + ',' + ((rgba >> 16)&255) + ',' + (((rgba >> 24)&255)/255) + ')';
      },translateColorToCSSRGBA:function (rgba) {
        return 'rgba(' + (rgba&0xff) + ',' + (rgba>>8 & 0xff) + ',' + (rgba>>16 & 0xff) + ',' + (rgba>>>24)/0xff + ')';
      },translateRGBAToCSSRGBA:function (r, g, b, a) {
        return 'rgba(' + (r&0xff) + ',' + (g&0xff) + ',' + (b&0xff) + ',' + (a&0xff)/255 + ')';
      },translateRGBAToColor:function (r, g, b, a) {
        return r | g << 8 | b << 16 | a << 24;
      },makeSurface:function (width, height, flags, usePageCanvas, source, rmask, gmask, bmask, amask) {
        flags = flags || 0;
        var is_SDL_HWSURFACE = flags & 0x00000001;
        var is_SDL_HWPALETTE = flags & 0x00200000;
        var is_SDL_OPENGL = flags & 0x04000000;
  
        var surf = _malloc(60);
        var pixelFormat = _malloc(44);
        //surface with SDL_HWPALETTE flag is 8bpp surface (1 byte)
        var bpp = is_SDL_HWPALETTE ? 1 : 4;
        var buffer = 0;
  
        // preemptively initialize this for software surfaces,
        // otherwise it will be lazily initialized inside of SDL_LockSurface
        if (!is_SDL_HWSURFACE && !is_SDL_OPENGL) {
          buffer = _malloc(width * height * 4);
        }
  
        HEAP32[((surf)>>2)]=flags;
        HEAP32[(((surf)+(4))>>2)]=pixelFormat;
        HEAP32[(((surf)+(8))>>2)]=width;
        HEAP32[(((surf)+(12))>>2)]=height;
        HEAP32[(((surf)+(16))>>2)]=width * bpp;  // assuming RGBA or indexed for now,
                                                                                          // since that is what ImageData gives us in browsers
        HEAP32[(((surf)+(20))>>2)]=buffer;
  
        HEAP32[(((surf)+(36))>>2)]=0;
        HEAP32[(((surf)+(40))>>2)]=0;
        HEAP32[(((surf)+(44))>>2)]=Module["canvas"].width;
        HEAP32[(((surf)+(48))>>2)]=Module["canvas"].height;
  
        HEAP32[(((surf)+(56))>>2)]=1;
  
        HEAP32[((pixelFormat)>>2)]=-2042224636;
        HEAP32[(((pixelFormat)+(4))>>2)]=0;// TODO
        HEAP8[(((pixelFormat)+(8))>>0)]=bpp * 8;
        HEAP8[(((pixelFormat)+(9))>>0)]=bpp;
  
        HEAP32[(((pixelFormat)+(12))>>2)]=rmask || 0x000000ff;
        HEAP32[(((pixelFormat)+(16))>>2)]=gmask || 0x0000ff00;
        HEAP32[(((pixelFormat)+(20))>>2)]=bmask || 0x00ff0000;
        HEAP32[(((pixelFormat)+(24))>>2)]=amask || 0xff000000;
  
        // Decide if we want to use WebGL or not
        SDL.GL = SDL.GL || is_SDL_OPENGL;
        var canvas;
        if (!usePageCanvas) {
          if (SDL.canvasPool.length > 0) {
            canvas = SDL.canvasPool.pop();
          } else {
            canvas = document.createElement('canvas');
          }
          canvas.width = width;
          canvas.height = height;
        } else {
          canvas = Module['canvas'];
        }
  
        var webGLContextAttributes = {
          antialias: ((SDL.glAttributes[13 /*SDL_GL_MULTISAMPLEBUFFERS*/] != 0) && (SDL.glAttributes[14 /*SDL_GL_MULTISAMPLESAMPLES*/] > 1)),
          depth: (SDL.glAttributes[6 /*SDL_GL_DEPTH_SIZE*/] > 0),
          stencil: (SDL.glAttributes[7 /*SDL_GL_STENCIL_SIZE*/] > 0)
        };
        
        var ctx = Browser.createContext(canvas, is_SDL_OPENGL, usePageCanvas, webGLContextAttributes);
              
        SDL.surfaces[surf] = {
          width: width,
          height: height,
          canvas: canvas,
          ctx: ctx,
          surf: surf,
          buffer: buffer,
          pixelFormat: pixelFormat,
          alpha: 255,
          flags: flags,
          locked: 0,
          usePageCanvas: usePageCanvas,
          source: source,
  
          isFlagSet: function(flag) {
            return flags & flag;
          }
        };
  
        return surf;
      },copyIndexedColorData:function (surfData, rX, rY, rW, rH) {
        // HWPALETTE works with palette
        // setted by SDL_SetColors
        if (!surfData.colors) {
          return;
        }
        
        var fullWidth  = Module['canvas'].width;
        var fullHeight = Module['canvas'].height;
  
        var startX  = rX || 0;
        var startY  = rY || 0;
        var endX    = (rW || (fullWidth - startX)) + startX;
        var endY    = (rH || (fullHeight - startY)) + startY;
        
        var buffer  = surfData.buffer;
  
        if (!surfData.image.data32) {
          surfData.image.data32 = new Uint32Array(surfData.image.data.buffer);
        }
        var data32   = surfData.image.data32;
  
        var colors32 = surfData.colors32;
  
        for (var y = startY; y < endY; ++y) {
          var base = y * fullWidth;
          for (var x = startX; x < endX; ++x) {
            data32[base + x] = colors32[HEAPU8[((buffer + base + x)>>0)]];
          }
        }
      },freeSurface:function (surf) {
        var refcountPointer = surf + 56;
        var refcount = HEAP32[((refcountPointer)>>2)];
        if (refcount > 1) {
          HEAP32[((refcountPointer)>>2)]=refcount - 1;
          return;
        }
  
        var info = SDL.surfaces[surf];
        if (!info.usePageCanvas && info.canvas) SDL.canvasPool.push(info.canvas);
        if (info.buffer) _free(info.buffer);
        _free(info.pixelFormat);
        _free(surf);
        SDL.surfaces[surf] = null;
  
        if (surf === SDL.screen) {
          SDL.screen = null;
        }
      },blitSurface__deps:["SDL_LockSurface"],blitSurface:function (src, srcrect, dst, dstrect, scale) {
        var srcData = SDL.surfaces[src];
        var dstData = SDL.surfaces[dst];
        var sr, dr;
        if (srcrect) {
          sr = SDL.loadRect(srcrect);
        } else {
          sr = { x: 0, y: 0, w: srcData.width, h: srcData.height };
        }
        if (dstrect) {
          dr = SDL.loadRect(dstrect);
        } else {
          dr = { x: 0, y: 0, w: srcData.width, h: srcData.height };
        }
        if (dstData.clipRect) {
          var widthScale = (!scale || sr.w === 0) ? 1 : sr.w / dr.w;
          var heightScale = (!scale || sr.h === 0) ? 1 : sr.h / dr.h;
          
          dr = SDL.intersectionOfRects(dstData.clipRect, dr);
          
          sr.w = dr.w * widthScale;
          sr.h = dr.h * heightScale;
          
          if (dstrect) {
            SDL.updateRect(dstrect, dr);
          }
        }
        var blitw, blith;
        if (scale) {
          blitw = dr.w; blith = dr.h;
        } else {
          blitw = sr.w; blith = sr.h;
        }
        if (sr.w === 0 || sr.h === 0 || blitw === 0 || blith === 0) {
          return 0;
        }
        var oldAlpha = dstData.ctx.globalAlpha;
        dstData.ctx.globalAlpha = srcData.alpha/255;
        dstData.ctx.drawImage(srcData.canvas, sr.x, sr.y, sr.w, sr.h, dr.x, dr.y, blitw, blith);
        dstData.ctx.globalAlpha = oldAlpha;
        if (dst != SDL.screen) {
          // XXX As in IMG_Load, for compatibility we write out |pixels|
          Runtime.warnOnce('WARNING: copying canvas data to memory for compatibility');
          _SDL_LockSurface(dst);
          dstData.locked--; // The surface is not actually locked in this hack
        }
        return 0;
      },downFingers:{},savedKeydown:null,receiveEvent:function (event) {
        function unpressAllPressedKeys() {
          // Un-press all pressed keys: TODO
          for (var code in SDL.keyboardMap) {
            SDL.events.push({
              type: 'keyup',
              keyCode: SDL.keyboardMap[code]
            });
          }
        };
        switch(event.type) {
          case 'touchstart': case 'touchmove': {
            event.preventDefault();
  
            var touches = [];
            
            // Clear out any touchstart events that we've already processed
            if (event.type === 'touchstart') {
              for (var i = 0; i < event.touches.length; i++) {
                var touch = event.touches[i];
                if (SDL.downFingers[touch.identifier] != true) {
                  SDL.downFingers[touch.identifier] = true;
                  touches.push(touch);
                }
              }
            } else {
              touches = event.touches;
            }
            
            var firstTouch = touches[0];
            if (event.type == 'touchstart') {
              SDL.DOMButtons[0] = 1;
            }
            var mouseEventType;
            switch(event.type) {
              case 'touchstart': mouseEventType = 'mousedown'; break;
              case 'touchmove': mouseEventType = 'mousemove'; break;
            }
            var mouseEvent = {
              type: mouseEventType,
              button: 0,
              pageX: firstTouch.clientX,
              pageY: firstTouch.clientY
            };
            SDL.events.push(mouseEvent);
  
            for (var i = 0; i < touches.length; i++) {
              var touch = touches[i];
              SDL.events.push({
                type: event.type,
                touch: touch
              });
            };
            break;
          }
          case 'touchend': {
            event.preventDefault();
            
            // Remove the entry in the SDL.downFingers hash
            // because the finger is no longer down.
            for(var i = 0; i < event.changedTouches.length; i++) {
              var touch = event.changedTouches[i];
              if (SDL.downFingers[touch.identifier] === true) {
                delete SDL.downFingers[touch.identifier];
              }
            }
  
            var mouseEvent = {
              type: 'mouseup',
              button: 0,
              pageX: event.changedTouches[0].clientX,
              pageY: event.changedTouches[0].clientY
            };
            SDL.DOMButtons[0] = 0;
            SDL.events.push(mouseEvent);
            
            for (var i = 0; i < event.changedTouches.length; i++) {
              var touch = event.changedTouches[i];
              SDL.events.push({
                type: 'touchend',
                touch: touch
              });
            };
            break;
          }
          case 'DOMMouseScroll': case 'mousewheel': case 'wheel':
            var delta = -Browser.getMouseWheelDelta(event); // Flip the wheel direction to translate from browser wheel direction (+:down) to SDL direction (+:up)
            delta = (delta == 0) ? 0 : (delta > 0 ? Math.max(delta, 1) : Math.min(delta, -1)); // Quantize to integer so that minimum scroll is at least +/- 1.
  
            // Simulate old-style SDL events representing mouse wheel input as buttons
            var button = delta > 0 ? 3 /*SDL_BUTTON_WHEELUP-1*/ : 4 /*SDL_BUTTON_WHEELDOWN-1*/; // Subtract one since JS->C marshalling is defined to add one back.
            SDL.events.push({ type: 'mousedown', button: button, pageX: event.pageX, pageY: event.pageY });
            SDL.events.push({ type: 'mouseup', button: button, pageX: event.pageX, pageY: event.pageY });
  
            // Pass a delta motion event.
            SDL.events.push({ type: 'wheel', deltaX: 0, deltaY: delta });
            event.preventDefault(); // If we don't prevent this, then 'wheel' event will be sent again by the browser as 'DOMMouseScroll' and we will receive this same event the second time.
            break;
          case 'mousemove':
            if (SDL.DOMButtons[0] === 1) {
              SDL.events.push({
                type: 'touchmove',
                touch: {
                  identifier: 0,
                  deviceID: -1,
                  pageX: event.pageX,
                  pageY: event.pageY
                }
              });
            }
            if (Browser.pointerLock) {
              // workaround for firefox bug 750111
              if ('mozMovementX' in event) {
                event['movementX'] = event['mozMovementX'];
                event['movementY'] = event['mozMovementY'];
              }
              // workaround for Firefox bug 782777
              if (event['movementX'] == 0 && event['movementY'] == 0) {
                // ignore a mousemove event if it doesn't contain any movement info
                // (without pointer lock, we infer movement from pageX/pageY, so this check is unnecessary)
                event.preventDefault();
                return;
              }
            }
            // fall through
          case 'keydown': case 'keyup': case 'keypress': case 'mousedown': case 'mouseup':
            // If we preventDefault on keydown events, the subsequent keypress events
            // won't fire. However, it's fine (and in some cases necessary) to
            // preventDefault for keys that don't generate a character. Otherwise,
            // preventDefault is the right thing to do in general.
            if (event.type !== 'keydown' || (!SDL.unicode && !SDL.textInput) || (event.keyCode === 8 /* backspace */ || event.keyCode === 9 /* tab */)) {
              event.preventDefault();
            }
  
            if (event.type == 'mousedown') {
              SDL.DOMButtons[event.button] = 1;
              SDL.events.push({
                type: 'touchstart',
                touch: {
                  identifier: 0,
                  deviceID: -1,
                  pageX: event.pageX,
                  pageY: event.pageY
                }
              });
            } else if (event.type == 'mouseup') {
              // ignore extra ups, can happen if we leave the canvas while pressing down, then return,
              // since we add a mouseup in that case
              if (!SDL.DOMButtons[event.button]) {
                return;
              }
  
              SDL.events.push({
                type: 'touchend',
                touch: {
                  identifier: 0,
                  deviceID: -1,
                  pageX: event.pageX,
                  pageY: event.pageY
                }
              });
              SDL.DOMButtons[event.button] = 0;
            }
  
            // We can only request fullscreen as the result of user input.
            // Due to this limitation, we toggle a boolean on keydown which
            // SDL_WM_ToggleFullScreen will check and subsequently set another
            // flag indicating for us to request fullscreen on the following
            // keyup. This isn't perfect, but it enables SDL_WM_ToggleFullScreen
            // to work as the result of a keypress (which is an extremely
            // common use case).
            if (event.type === 'keydown' || event.type === 'mousedown') {
              SDL.canRequestFullscreen = true;
            } else if (event.type === 'keyup' || event.type === 'mouseup') {
              if (SDL.isRequestingFullscreen) {
                Module['requestFullScreen'](true, true);
                SDL.isRequestingFullscreen = false;
              }
              SDL.canRequestFullscreen = false;
            }
  
            // SDL expects a unicode character to be passed to its keydown events.
            // Unfortunately, the browser APIs only provide a charCode property on
            // keypress events, so we must backfill in keydown events with their
            // subsequent keypress event's charCode.
            if (event.type === 'keypress' && SDL.savedKeydown) {
              // charCode is read-only
              SDL.savedKeydown.keypressCharCode = event.charCode;
              SDL.savedKeydown = null;
            } else if (event.type === 'keydown') {
              SDL.savedKeydown = event;
            }
  
            // Don't push keypress events unless SDL_StartTextInput has been called.
            if (event.type !== 'keypress' || SDL.textInput) {
              SDL.events.push(event);
            }
            break;
          case 'mouseout':
            // Un-press all pressed mouse buttons, because we might miss the release outside of the canvas
            for (var i = 0; i < 3; i++) {
              if (SDL.DOMButtons[i]) {
                SDL.events.push({
                  type: 'mouseup',
                  button: i,
                  pageX: event.pageX,
                  pageY: event.pageY
                });
                SDL.DOMButtons[i] = 0;
              }
            }
            event.preventDefault();
            break;
          case 'focus':
            SDL.events.push(event);
            event.preventDefault();
            break;
          case 'blur':
            SDL.events.push(event);
            unpressAllPressedKeys();
            event.preventDefault();
            break;
          case 'visibilitychange':
            SDL.events.push({
              type: 'visibilitychange',
              visible: !document.hidden
            });
            unpressAllPressedKeys();
            event.preventDefault();
            break;
          case 'unload':
            if (Browser.mainLoop.runner) {
              SDL.events.push(event);
              // Force-run a main event loop, since otherwise this event will never be caught!
              Browser.mainLoop.runner();
            }
            return;
          case 'resize':
            SDL.events.push(event);
            // manually triggered resize event doesn't have a preventDefault member
            if (event.preventDefault) {
              event.preventDefault();
            }
            break;
        }
        if (SDL.events.length >= 10000) {
          Module.printErr('SDL event queue full, dropping events');
          SDL.events = SDL.events.slice(0, 10000);
        }
        // If we have a handler installed, this will push the events to the app
        // instead of the app polling for them.
        SDL.flushEventsToHandler();
        return;
      },lookupKeyCodeForEvent:function (event) {
          var code = event.keyCode;
          if (code >= 65 && code <= 90) {
            code += 32; // make lowercase for SDL
          } else {
            code = SDL.keyCodes[event.keyCode] || event.keyCode;
            // If this is one of the modifier keys (224 | 1<<10 - 227 | 1<<10), and the event specifies that it is
            // a right key, add 4 to get the right key SDL key code.
            if (event.location === KeyboardEvent.DOM_KEY_LOCATION_RIGHT && code >= (224 | 1<<10) && code <= (227 | 1<<10)) {
              code += 4;
            }
          }
          return code;
      },handleEvent:function (event) {
        if (event.handled) return;
        event.handled = true;
  
        switch (event.type) {
          case 'touchstart': case 'touchend': case 'touchmove': {
            Browser.calculateMouseEvent(event);
            break;
          }
          case 'keydown': case 'keyup': {
            var down = event.type === 'keydown';
            var code = SDL.lookupKeyCodeForEvent(event);
            HEAP8[(((SDL.keyboardState)+(code))>>0)]=down;
            // TODO: lmeta, rmeta, numlock, capslock, KMOD_MODE, KMOD_RESERVED
            SDL.modState = (HEAP8[(((SDL.keyboardState)+(1248))>>0)] ? 0x0040 : 0) | // KMOD_LCTRL
              (HEAP8[(((SDL.keyboardState)+(1249))>>0)] ? 0x0001 : 0) | // KMOD_LSHIFT
              (HEAP8[(((SDL.keyboardState)+(1250))>>0)] ? 0x0100 : 0) | // KMOD_LALT
              (HEAP8[(((SDL.keyboardState)+(1252))>>0)] ? 0x0080 : 0) | // KMOD_RCTRL
              (HEAP8[(((SDL.keyboardState)+(1253))>>0)] ? 0x0002 : 0) | // KMOD_RSHIFT
              (HEAP8[(((SDL.keyboardState)+(1254))>>0)] ? 0x0200 : 0); //  KMOD_RALT
            if (down) {
              SDL.keyboardMap[code] = event.keyCode; // save the DOM input, which we can use to unpress it during blur
            } else {
              delete SDL.keyboardMap[code];
            }
  
            break;
          }
          case 'mousedown': case 'mouseup':
            if (event.type == 'mousedown') {
              // SDL_BUTTON(x) is defined as (1 << ((x)-1)).  SDL buttons are 1-3,
              // and DOM buttons are 0-2, so this means that the below formula is
              // correct.
              SDL.buttonState |= 1 << event.button;
            } else if (event.type == 'mouseup') {
              SDL.buttonState &= ~(1 << event.button);
            }
            // fall through
          case 'mousemove': {
            Browser.calculateMouseEvent(event);
            break;
          }
        }
      },flushEventsToHandler:function () {
        if (!SDL.eventHandler) return;
  
        while (SDL.pollEvent(SDL.eventHandlerTemp)) {
          Runtime.dynCall('iii', SDL.eventHandler, [SDL.eventHandlerContext, SDL.eventHandlerTemp]);
        }
      },pollEvent:function (ptr) {
        if (SDL.initFlags & 0x200 && SDL.joystickEventState) {
          // If SDL_INIT_JOYSTICK was supplied AND the joystick system is configured
          // to automatically query for events, query for joystick events.
          SDL.queryJoysticks();
        }
        if (ptr) {
          while (SDL.events.length > 0) {
            if (SDL.makeCEvent(SDL.events.shift(), ptr) !== false) return 1;
          }
          return 0;
        } else {
          // XXX: somewhat risky in that we do not check if the event is real or not (makeCEvent returns false) if no pointer supplied
          return SDL.events.length > 0;
        }
      },makeCEvent:function (event, ptr) {
        if (typeof event === 'number') {
          // This is a pointer to a copy of a native C event that was SDL_PushEvent'ed
          _memcpy(ptr, event, 28);
          _free(event); // the copy is no longer needed
          return;
        }
  
        SDL.handleEvent(event);
  
        switch (event.type) {
          case 'keydown': case 'keyup': {
            var down = event.type === 'keydown';
            //Module.print('Received key event: ' + event.keyCode);
            var key = SDL.lookupKeyCodeForEvent(event);
            var scan;
            if (key >= 1024) {
              scan = key - 1024;
            } else {
              scan = SDL.scanCodes[key] || key;
            }
  
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP8[(((ptr)+(8))>>0)]=down ? 1 : 0;
            HEAP8[(((ptr)+(9))>>0)]=0; // TODO
            HEAP32[(((ptr)+(12))>>2)]=scan;
            HEAP32[(((ptr)+(16))>>2)]=key;
            HEAP16[(((ptr)+(20))>>1)]=SDL.modState;
            // some non-character keys (e.g. backspace and tab) won't have keypressCharCode set, fill in with the keyCode.
            HEAP32[(((ptr)+(24))>>2)]=event.keypressCharCode || key;
  
            break;
          }
          case 'keypress': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            // Not filling in windowID for now
            var cStr = intArrayFromString(String.fromCharCode(event.charCode));
            for (var i = 0; i < cStr.length; ++i) {
              HEAP8[(((ptr)+(8 + i))>>0)]=cStr[i];
            }
            break;
          }
          case 'mousedown': case 'mouseup': case 'mousemove': {
            if (event.type != 'mousemove') {
              var down = event.type === 'mousedown';
              HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
              HEAP32[(((ptr)+(4))>>2)]=0;
              HEAP32[(((ptr)+(8))>>2)]=0;
              HEAP32[(((ptr)+(12))>>2)]=0;
              HEAP8[(((ptr)+(16))>>0)]=event.button+1; // DOM buttons are 0-2, SDL 1-3
              HEAP8[(((ptr)+(17))>>0)]=down ? 1 : 0;
              HEAP32[(((ptr)+(20))>>2)]=Browser.mouseX;
              HEAP32[(((ptr)+(24))>>2)]=Browser.mouseY;
            } else {
              HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
              HEAP32[(((ptr)+(4))>>2)]=0;
              HEAP32[(((ptr)+(8))>>2)]=0;
              HEAP32[(((ptr)+(12))>>2)]=0;
              HEAP32[(((ptr)+(16))>>2)]=SDL.buttonState;
              HEAP32[(((ptr)+(20))>>2)]=Browser.mouseX;
              HEAP32[(((ptr)+(24))>>2)]=Browser.mouseY;
              HEAP32[(((ptr)+(28))>>2)]=Browser.mouseMovementX;
              HEAP32[(((ptr)+(32))>>2)]=Browser.mouseMovementY;
            }
            break;
          }
          case 'wheel': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(16))>>2)]=event.deltaX;
            HEAP32[(((ptr)+(20))>>2)]=event.deltaY; 
            break;       
          }
          case 'touchstart': case 'touchend': case 'touchmove': {
            var touch = event.touch;
            if (!Browser.touches[touch.identifier]) break;
            var w = Module['canvas'].width;
            var h = Module['canvas'].height;
            var x = Browser.touches[touch.identifier].x / w;
            var y = Browser.touches[touch.identifier].y / h;
            var lx = Browser.lastTouches[touch.identifier].x / w;
            var ly = Browser.lastTouches[touch.identifier].y / h;
            var dx = x - lx;
            var dy = y - ly;
            if (touch['deviceID'] === undefined) touch.deviceID = SDL.TOUCH_DEFAULT_ID;
            if (dx === 0 && dy === 0 && event.type === 'touchmove') return false; // don't send these if nothing happened
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=_SDL_GetTicks();
            (tempI64 = [touch.deviceID>>>0,(tempDouble=touch.deviceID,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((ptr)+(8))>>2)]=tempI64[0],HEAP32[(((ptr)+(12))>>2)]=tempI64[1]);
            (tempI64 = [touch.identifier>>>0,(tempDouble=touch.identifier,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((ptr)+(16))>>2)]=tempI64[0],HEAP32[(((ptr)+(20))>>2)]=tempI64[1]);
            HEAPF32[(((ptr)+(24))>>2)]=x;
            HEAPF32[(((ptr)+(28))>>2)]=y;
            HEAPF32[(((ptr)+(32))>>2)]=dx;
            HEAPF32[(((ptr)+(36))>>2)]=dy;
            if (touch.force !== undefined) {
              HEAPF32[(((ptr)+(40))>>2)]=touch.force;
            } else { // No pressure data, send a digital 0/1 pressure.
              HEAPF32[(((ptr)+(40))>>2)]=event.type == "touchend" ? 0 : 1;
            }
            break;
          }
          case 'unload': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            break;
          }
          case 'resize': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=event.w;
            HEAP32[(((ptr)+(8))>>2)]=event.h;
            break;
          }
          case 'joystick_button_up': case 'joystick_button_down': {
            var state = event.type === 'joystick_button_up' ? 0 : 1;
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP8[(((ptr)+(4))>>0)]=event.index;
            HEAP8[(((ptr)+(5))>>0)]=event.button;
            HEAP8[(((ptr)+(6))>>0)]=state;
            break;
          }
          case 'joystick_axis_motion': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP8[(((ptr)+(4))>>0)]=event.index;
            HEAP8[(((ptr)+(5))>>0)]=event.axis;
            HEAP32[(((ptr)+(8))>>2)]=SDL.joystickAxisValueConversion(event.value);
            break;
          }
          case 'focus': {
            var SDL_WINDOWEVENT_FOCUS_GAINED = 12 /* SDL_WINDOWEVENT_FOCUS_GAINED */;
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=0;
            HEAP8[(((ptr)+(8))>>0)]=SDL_WINDOWEVENT_FOCUS_GAINED;
            break;
          }
          case 'blur': {
            var SDL_WINDOWEVENT_FOCUS_LOST = 13 /* SDL_WINDOWEVENT_FOCUS_LOST */;
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=0;
            HEAP8[(((ptr)+(8))>>0)]=SDL_WINDOWEVENT_FOCUS_LOST;
            break;
          }
          case 'visibilitychange': {
            var SDL_WINDOWEVENT_SHOWN  = 1 /* SDL_WINDOWEVENT_SHOWN */;
            var SDL_WINDOWEVENT_HIDDEN = 2 /* SDL_WINDOWEVENT_HIDDEN */;
            var visibilityEventID = event.visible ? SDL_WINDOWEVENT_SHOWN : SDL_WINDOWEVENT_HIDDEN;
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=0;
            HEAP8[(((ptr)+(8))>>0)]=visibilityEventID;
            break;
          }
          default: throw 'Unhandled SDL event: ' + event.type;
        }
      },estimateTextWidth:function (fontData, text) {
        var h = fontData.size;
        var fontString = h + 'px ' + fontData.name;
        var tempCtx = SDL.ttfContext;
        assert(tempCtx, 'TTF_Init must have been called');
        tempCtx.save();
        tempCtx.font = fontString;
        var ret = tempCtx.measureText(text).width | 0;
        tempCtx.restore();
        return ret;
      },allocateChannels:function (num) { // called from Mix_AllocateChannels and init
        if (SDL.numChannels && SDL.numChannels >= num && num != 0) return;
        SDL.numChannels = num;
        SDL.channels = [];
        for (var i = 0; i < num; i++) {
          SDL.channels[i] = {
            audio: null,
            volume: 1.0
          };
        }
      },setGetVolume:function (info, volume) {
        if (!info) return 0;
        var ret = info.volume * 128; // MIX_MAX_VOLUME
        if (volume != -1) {
          info.volume = Math.min(Math.max(volume, 0), 128) / 128;
          if (info.audio) {
            try {
              info.audio.volume = info.volume; // For <audio> element
              if (info.audio.webAudioGainNode) info.audio.webAudioGainNode['gain']['value'] = info.volume; // For WebAudio playback
            } catch(e) {
              Module.printErr('setGetVolume failed to set audio volume: ' + e);
            }
          }
        }
        return ret;
      },setPannerPosition:function (info, x, y, z) {
        if (!info) return;
        if (info.audio) {
          if (info.audio.webAudioPannerNode) {
            info.audio.webAudioPannerNode['setPosition'](x, y, z);
          }
        }
      },playWebAudio:function (audio) {
        if (!audio) return;
        if (audio.webAudioNode) return; // This instance is already playing, don't start again.
        if (!SDL.webAudioAvailable()) return;
        try {
          var webAudio = audio.resource.webAudio;
          audio.paused = false;
          if (!webAudio.decodedBuffer) {
            if (webAudio.onDecodeComplete === undefined) abort("Cannot play back audio object that was not loaded");
            webAudio.onDecodeComplete.push(function() { if (!audio.paused) SDL.playWebAudio(audio); });
            return;
          }
          audio.webAudioNode = SDL.audioContext['createBufferSource']();
          audio.webAudioNode['buffer'] = webAudio.decodedBuffer;
          audio.webAudioNode['loop'] = audio.loop;
          audio.webAudioNode['onended'] = function() { audio['onended'](); } // For <media> element compatibility, route the onended signal to the instance.
  
          audio.webAudioPannerNode = SDL.audioContext['createPanner']();
          audio.webAudioPannerNode['panningModel'] = 'equalpower';
  
          // Add an intermediate gain node to control volume.
          audio.webAudioGainNode = SDL.audioContext['createGain']();
          audio.webAudioGainNode['gain']['value'] = audio.volume;
  
          audio.webAudioNode['connect'](audio.webAudioPannerNode);
          audio.webAudioPannerNode['connect'](audio.webAudioGainNode);
          audio.webAudioGainNode['connect'](SDL.audioContext['destination']);
  
          audio.webAudioNode['start'](0, audio.currentPosition);
          audio.startTime = SDL.audioContext['currentTime'] - audio.currentPosition;
        } catch(e) {
          Module.printErr('playWebAudio failed: ' + e);
        }
      },pauseWebAudio:function (audio) {
        if (!audio) return;
        if (audio.webAudioNode) {
          try {
            // Remember where we left off, so that if/when we resume, we can restart the playback at a proper place.
            audio.currentPosition = (SDL.audioContext['currentTime'] - audio.startTime) % audio.resource.webAudio.decodedBuffer.duration;
            // Important: When we reach here, the audio playback is stopped by the user. But when calling .stop() below, the Web Audio
            // graph will send the onended signal, but we don't want to process that, since pausing should not clear/destroy the audio
            // channel.
            audio.webAudioNode['onended'] = undefined;
            audio.webAudioNode.stop();
            audio.webAudioNode = undefined;
          } catch(e) {
            Module.printErr('pauseWebAudio failed: ' + e);
          }
        }
        audio.paused = true;
      },openAudioContext:function () {
        // Initialize Web Audio API if we haven't done so yet. Note: Only initialize Web Audio context ever once on the web page,
        // since initializing multiple times fails on Chrome saying 'audio resources have been exhausted'.
        if (!SDL.audioContext) {
          if (typeof(AudioContext) !== 'undefined') SDL.audioContext = new AudioContext();
          else if (typeof(webkitAudioContext) !== 'undefined') SDL.audioContext = new webkitAudioContext();
        }
      },webAudioAvailable:function () { return !!SDL.audioContext; },fillWebAudioBufferFromHeap:function (heapPtr, sizeSamplesPerChannel, dstAudioBuffer) {
        // The input audio data is interleaved across the channels, i.e. [L, R, L, R, L, R, ...] and is either 8-bit or 16-bit as
        // supported by the SDL API. The output audio wave data for Web Audio API must be in planar buffers of [-1,1]-normalized Float32 data,
        // so perform a buffer conversion for the data.
        var numChannels = SDL.audio.channels;
        for(var c = 0; c < numChannels; ++c) {
          var channelData = dstAudioBuffer['getChannelData'](c);
          if (channelData.length != sizeSamplesPerChannel) {
            throw 'Web Audio output buffer length mismatch! Destination size: ' + channelData.length + ' samples vs expected ' + sizeSamplesPerChannel + ' samples!';
          }
          if (SDL.audio.format == 0x8010 /*AUDIO_S16LSB*/) {
            for(var j = 0; j < sizeSamplesPerChannel; ++j) {
              channelData[j] = (HEAP16[(((heapPtr)+((j*numChannels + c)*2))>>1)]) / 0x8000;
            }
          } else if (SDL.audio.format == 0x0008 /*AUDIO_U8*/) {
            for(var j = 0; j < sizeSamplesPerChannel; ++j) {
              var v = (HEAP8[(((heapPtr)+(j*numChannels + c))>>0)]);
              channelData[j] = ((v >= 0) ? v-128 : v+128) /128;
            }
          }
        }
      },debugSurface:function (surfData) {
        console.log('dumping surface ' + [surfData.surf, surfData.source, surfData.width, surfData.height]);
        var image = surfData.ctx.getImageData(0, 0, surfData.width, surfData.height);
        var data = image.data;
        var num = Math.min(surfData.width, surfData.height);
        for (var i = 0; i < num; i++) {
          console.log('   diagonal ' + i + ':' + [data[i*surfData.width*4 + i*4 + 0], data[i*surfData.width*4 + i*4 + 1], data[i*surfData.width*4 + i*4 + 2], data[i*surfData.width*4 + i*4 + 3]]);
        }
      },joystickEventState:1,lastJoystickState:{},joystickNamePool:{},recordJoystickState:function (joystick, state) {
        // Standardize button state.
        var buttons = new Array(state.buttons.length);
        for (var i = 0; i < state.buttons.length; i++) {
          buttons[i] = SDL.getJoystickButtonState(state.buttons[i]);
        }
  
        SDL.lastJoystickState[joystick] = {
          buttons: buttons,
          axes: state.axes.slice(0),
          timestamp: state.timestamp,
          index: state.index,
          id: state.id
        };
      },getJoystickButtonState:function (button) {
        if (typeof button === 'object') {
          // Current gamepad API editor's draft (Firefox Nightly)
          // https://dvcs.w3.org/hg/gamepad/raw-file/default/gamepad.html#idl-def-GamepadButton
          return button.pressed;
        } else {
          // Current gamepad API working draft (Firefox / Chrome Stable)
          // http://www.w3.org/TR/2012/WD-gamepad-20120529/#gamepad-interface
          return button > 0;
        }
      },queryJoysticks:function () {
        for (var joystick in SDL.lastJoystickState) {
          var state = SDL.getGamepad(joystick - 1);
          var prevState = SDL.lastJoystickState[joystick];
          // Check only if the timestamp has differed.
          // NOTE: Timestamp is not available in Firefox.
          if (typeof state.timestamp !== 'number' || state.timestamp !== prevState.timestamp) {
            var i;
            for (i = 0; i < state.buttons.length; i++) {
              var buttonState = SDL.getJoystickButtonState(state.buttons[i]);
              // NOTE: The previous state already has a boolean representation of
              //       its button, so no need to standardize its button state here.
              if (buttonState !== prevState.buttons[i]) {
                // Insert button-press event.
                SDL.events.push({
                  type: buttonState ? 'joystick_button_down' : 'joystick_button_up',
                  joystick: joystick,
                  index: joystick - 1,
                  button: i
                });
              }
            }
            for (i = 0; i < state.axes.length; i++) {
              if (state.axes[i] !== prevState.axes[i]) {
                // Insert axes-change event.
                SDL.events.push({
                  type: 'joystick_axis_motion',
                  joystick: joystick,
                  index: joystick - 1,
                  axis: i,
                  value: state.axes[i]
                });
              }
            }
  
            SDL.recordJoystickState(joystick, state);
          }
        }
      },joystickAxisValueConversion:function (value) {
        // Ensures that 0 is 0, 1 is 32767, and -1 is 32768.
        return Math.ceil(((value+1) * 32767.5) - 32768);
      },getGamepads:function () {
        var fcn = navigator.getGamepads || navigator.webkitGamepads || navigator.mozGamepads || navigator.gamepads || navigator.webkitGetGamepads;
        if (fcn !== undefined) {
          // The function must be applied on the navigator object.
          return fcn.apply(navigator);
        } else {
          return [];
        }
      },getGamepad:function (deviceIndex) {
        var gamepads = SDL.getGamepads();
        if (gamepads.length > deviceIndex && deviceIndex >= 0) {
          return gamepads[deviceIndex];
        }
        return null;
      }};function _Mix_VolumeMusic(volume) {
      return SDL.setGetVolume(SDL.music, volume);
    }

   
  Module["_i64Subtract"] = _i64Subtract;

  function _emscripten_SDL_SetEventHandler(handler, userdata) {
      SDL.eventHandler = handler;
      SDL.eventHandlerContext = userdata;
  
      // All SDLEvents take the same amount of memory
      if (!SDL.eventHandlerTemp) SDL.eventHandlerTemp = _malloc(28);
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 85: return totalMemory / PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 79:
          return 0;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }


  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        if (info.refcount === 0) {
          if (info.destructor) {
            Runtime.dynCall('vi', info.destructor, [ptr]);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      EXCEPTIONS.clearRef(EXCEPTIONS.deAdjust(ptr)); // exception refcount should be cleared, but don't free it
      throw ptr;
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((asm["setTempRet0"](0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((asm["setTempRet0"](0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

  function _Mix_OpenAudio(frequency, format, channels, chunksize) {
      SDL.openAudioContext();
      SDL.allocateChannels(32);
      // Just record the values for a later call to Mix_QuickLoad_RAW
      SDL.mixerFrequency = frequency;
      SDL.mixerFormat = format;
      SDL.mixerNumChannels = channels;
      SDL.mixerChunkSize = chunksize;
      return 0;
    }

  var _emscripten_resume=true;

  function _Mix_Playing(channel) {
      if (channel === -1) {
        var count = 0;
        for (var i = 0; i < SDL.channels.length; i++) {
          count += _Mix_Playing(i);
        }
        return count;
      }
      var info = SDL.channels[channel];
      if (info && info.audio && !info.audio.paused) {
        return 1;
      }
      return 0;
    }

  var _emscripten_landingpad=true;

  
  var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.buffer, addr, len);
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
        ret = ret.slice(0, Math.max(0, bufsize));
        writeStringToMemory(ret, buf, true);
        return ret.length;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8, ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8, ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall192(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // mmap2
      var addr = SYSCALLS.get(), len = SYSCALLS.get(), prot = SYSCALLS.get(), flags = SYSCALLS.get(), fd = SYSCALLS.get(), off = SYSCALLS.get()
      off <<= 12; // undo pgoffset
      var ptr;
      var allocated = false;
      if (fd === -1) {
        ptr = _malloc(len);
        if (!ptr) return -ERRNO_CODES.ENOMEM;
        _memset(ptr, 0, len);
        allocated = true;
      } else {
        var info = FS.getStream(fd);
        if (!info) return -ERRNO_CODES.EBADF;
        var res = FS.mmap(info, HEAPU8, addr, len, off, prot, flags);
        ptr = res.ptr;
        allocated = res.allocated;
      }
      SYSCALLS.mappings[ptr] = { malloc: ptr, len: len, allocated: allocated, fd: fd, flags: flags };
      return ptr;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall195(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_stat64
      var path = SYSCALLS.getStr(), buf = SYSCALLS.get();
      return SYSCALLS.doStat(FS.stat, path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }function ___cxa_end_catch() {
      if (___cxa_end_catch.rethrown) {
        ___cxa_end_catch.rethrown = false;
        return;
      }
      // Clear state flag.
      asm['setThrew'](0);
      // Call destructor if one is registered then clear it.
      var ptr = EXCEPTIONS.caught.pop();
      if (ptr) {
        EXCEPTIONS.decRef(EXCEPTIONS.deAdjust(ptr));
        EXCEPTIONS.last = 0; // XXX in decRef?
      }
    }

  
  var GL={counter:1,lastError:0,buffers:[],mappedBuffers:{},programs:[],framebuffers:[],renderbuffers:[],textures:[],uniforms:[],shaders:[],vaos:[],contexts:[],currentContext:null,byteSizeByTypeRoot:5120,byteSizeByType:[1,1,2,2,4,4,4,2,3,4,8],programInfos:{},stringCache:{},packAlignment:4,unpackAlignment:4,init:function () {
        GL.miniTempBuffer = new Float32Array(GL.MINI_TEMP_BUFFER_SIZE);
        for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
          GL.miniTempBufferViews[i] = GL.miniTempBuffer.subarray(0, i+1);
        }
      },recordError:function recordError(errorCode) {
        if (!GL.lastError) {
          GL.lastError = errorCode;
        }
      },getNewId:function (table) {
        var ret = GL.counter++;
        for (var i = table.length; i < ret; i++) {
          table[i] = null;
        }
        return ret;
      },MINI_TEMP_BUFFER_SIZE:16,miniTempBuffer:null,miniTempBufferViews:[0],getSource:function (shader, count, string, length) {
        var source = '';
        for (var i = 0; i < count; ++i) {
          var frag;
          if (length) {
            var len = HEAP32[(((length)+(i*4))>>2)];
            if (len < 0) {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
            } else {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)], len);
            }
          } else {
            frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
          }
          source += frag;
        }
        return source;
      },computeImageSize:function (width, height, sizePerPixel, alignment) {
        function roundedToNextMultipleOf(x, y) {
          return Math.floor((x + y - 1) / y) * y
        }
        var plainRowSize = width * sizePerPixel;
        var alignedRowSize = roundedToNextMultipleOf(plainRowSize, alignment);
        return (height <= 0) ? 0 :
                 ((height - 1) * alignedRowSize + plainRowSize);
      },get:function (name_, p, type) {
        // Guard against user passing a null pointer.
        // Note that GLES2 spec does not say anything about how passing a null pointer should be treated.
        // Testing on desktop core GL 3, the application crashes on glGetIntegerv to a null pointer, but
        // better to report an error instead of doing anything random.
        if (!p) {
          GL.recordError(0x0501 /* GL_INVALID_VALUE */);
          return;
        }
        var ret = undefined;
        switch(name_) { // Handle a few trivial GLES values
          case 0x8DFA: // GL_SHADER_COMPILER
            ret = 1;
            break;
          case 0x8DF8: // GL_SHADER_BINARY_FORMATS
            if (type !== 'Integer') {
              GL.recordError(0x0500); // GL_INVALID_ENUM
            }
            return; // Do not write anything to the out pointer, since no binary formats are supported.
          case 0x8DF9: // GL_NUM_SHADER_BINARY_FORMATS
            ret = 0;
            break;
          case 0x86A2: // GL_NUM_COMPRESSED_TEXTURE_FORMATS
            // WebGL doesn't have GL_NUM_COMPRESSED_TEXTURE_FORMATS (it's obsolete since GL_COMPRESSED_TEXTURE_FORMATS returns a JS array that can be queried for length),
            // so implement it ourselves to allow C++ GLES2 code get the length.
            var formats = GLctx.getParameter(0x86A3 /*GL_COMPRESSED_TEXTURE_FORMATS*/);
            ret = formats.length;
            break;
          case 0x8B9A: // GL_IMPLEMENTATION_COLOR_READ_TYPE
            ret = 0x1401; // GL_UNSIGNED_BYTE
            break;
          case 0x8B9B: // GL_IMPLEMENTATION_COLOR_READ_FORMAT
            ret = 0x1908; // GL_RGBA
            break;
        }
  
        if (ret === undefined) {
          var result = GLctx.getParameter(name_);
          switch (typeof(result)) {
            case "number":
              ret = result;
              break;
            case "boolean":
              ret = result ? 1 : 0;
              break;
            case "string":
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return;
            case "object":
              if (result === null) {
                // null is a valid result for some (e.g., which buffer is bound - perhaps nothing is bound), but otherwise
                // can mean an invalid name_, which we need to report as an error
                switch(name_) {
                  case 0x8894: // ARRAY_BUFFER_BINDING
                  case 0x8B8D: // CURRENT_PROGRAM
                  case 0x8895: // ELEMENT_ARRAY_BUFFER_BINDING
                  case 0x8CA6: // FRAMEBUFFER_BINDING
                  case 0x8CA7: // RENDERBUFFER_BINDING
                  case 0x8069: // TEXTURE_BINDING_2D
                  case 0x8514: { // TEXTURE_BINDING_CUBE_MAP
                    ret = 0;
                    break;
                  }
                  default: {
                    GL.recordError(0x0500); // GL_INVALID_ENUM
                    return;
                  }
                }
              } else if (result instanceof Float32Array ||
                         result instanceof Uint32Array ||
                         result instanceof Int32Array ||
                         result instanceof Array) {
                for (var i = 0; i < result.length; ++i) {
                  switch (type) {
                    case 'Integer': HEAP32[(((p)+(i*4))>>2)]=result[i];   break;
                    case 'Float':   HEAPF32[(((p)+(i*4))>>2)]=result[i]; break;
                    case 'Boolean': HEAP8[(((p)+(i))>>0)]=result[i] ? 1 : 0;    break;
                    default: throw 'internal glGet error, bad type: ' + type;
                  }
                }
                return;
              } else if (result instanceof WebGLBuffer ||
                         result instanceof WebGLProgram ||
                         result instanceof WebGLFramebuffer ||
                         result instanceof WebGLRenderbuffer ||
                         result instanceof WebGLTexture) {
                ret = result.name | 0;
              } else {
                GL.recordError(0x0500); // GL_INVALID_ENUM
                return;
              }
              break;
            default:
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return;
          }
        }
  
        switch (type) {
          case 'Integer': HEAP32[((p)>>2)]=ret;    break;
          case 'Float':   HEAPF32[((p)>>2)]=ret;  break;
          case 'Boolean': HEAP8[((p)>>0)]=ret ? 1 : 0; break;
          default: throw 'internal glGet error, bad type: ' + type;
        }
      },getTexPixelData:function (type, format, width, height, pixels, internalFormat) {
        var sizePerPixel;
        var numChannels;
        switch(format) {
          case 0x1906 /* GL_ALPHA */:
          case 0x1909 /* GL_LUMINANCE */:
          case 0x1902 /* GL_DEPTH_COMPONENT */:
          case 0x1903 /* GL_RED */:
            numChannels = 1;
            break;
          case 0x190A /* GL_LUMINANCE_ALPHA */:
          case 0x8227 /* GL_RG */:
            numChannels = 2;
            break;
          case 0x1907 /* GL_RGB */:
            numChannels = 3;
            break;
          case 0x1908 /* GL_RGBA */:
            numChannels = 4;
            break;
          default:
            GL.recordError(0x0500); // GL_INVALID_ENUM
            return {
              pixels: null,
              internalFormat: 0x0
            };
        }
        switch (type) {
          case 0x1401 /* GL_UNSIGNED_BYTE */:
            sizePerPixel = numChannels*1;
            break;
          case 0x1403 /* GL_UNSIGNED_SHORT */:
          case 0x8D61 /* GL_HALF_FLOAT_OES */:
            sizePerPixel = numChannels*2;
            break;
          case 0x1405 /* GL_UNSIGNED_INT */:
          case 0x1406 /* GL_FLOAT */:
            sizePerPixel = numChannels*4;
            break;
          case 0x84FA /* UNSIGNED_INT_24_8_WEBGL */:
            sizePerPixel = 4;
            break;
          case 0x8363 /* GL_UNSIGNED_SHORT_5_6_5 */:
          case 0x8033 /* GL_UNSIGNED_SHORT_4_4_4_4 */:
          case 0x8034 /* GL_UNSIGNED_SHORT_5_5_5_1 */:
            sizePerPixel = 2;
            break;
          default:
            GL.recordError(0x0500); // GL_INVALID_ENUM
            return {
              pixels: null,
              internalFormat: 0x0
            };
        }
        var bytes = GL.computeImageSize(width, height, sizePerPixel, GL.unpackAlignment);
        if (type == 0x1401 /* GL_UNSIGNED_BYTE */) {
          pixels = HEAPU8.subarray((pixels),(pixels+bytes));
        } else if (type == 0x1406 /* GL_FLOAT */) {
          pixels = HEAPF32.subarray((pixels)>>2,(pixels+bytes)>>2);
        } else if (type == 0x1405 /* GL_UNSIGNED_INT */ || type == 0x84FA /* UNSIGNED_INT_24_8_WEBGL */) {
          pixels = HEAPU32.subarray((pixels)>>2,(pixels+bytes)>>2);
        } else {
          pixels = HEAPU16.subarray((pixels)>>1,(pixels+bytes)>>1);
        }
        return {
          pixels: pixels,
          internalFormat: internalFormat
        };
      },validateBufferTarget:function (target) {
        switch (target) {
          case 0x8892: // GL_ARRAY_BUFFER
          case 0x8893: // GL_ELEMENT_ARRAY_BUFFER
          case 0x8F36: // GL_COPY_READ_BUFFER
          case 0x8F37: // GL_COPY_WRITE_BUFFER
          case 0x88EB: // GL_PIXEL_PACK_BUFFER
          case 0x88EC: // GL_PIXEL_UNPACK_BUFFER
          case 0x8C2A: // GL_TEXTURE_BUFFER
          case 0x8C8E: // GL_TRANSFORM_FEEDBACK_BUFFER
          case 0x8A11: // GL_UNIFORM_BUFFER
            return true;
          default:
            return false;
        }
      },createContext:function (canvas, webGLContextAttributes) {
        if (typeof webGLContextAttributes.majorVersion === 'undefined' && typeof webGLContextAttributes.minorVersion === 'undefined') {
          webGLContextAttributes.majorVersion = 1;
          webGLContextAttributes.minorVersion = 0;
        }
        var ctx;
        var errorInfo = '?';
        function onContextCreationError(event) {
          errorInfo = event.statusMessage || errorInfo;
        }
        try {
          canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
          try {
            if (webGLContextAttributes.majorVersion == 1 && webGLContextAttributes.minorVersion == 0) {
              ctx = canvas.getContext("webgl", webGLContextAttributes) || canvas.getContext("experimental-webgl", webGLContextAttributes);
            } else if (webGLContextAttributes.majorVersion == 2 && webGLContextAttributes.minorVersion == 0) {
              ctx = canvas.getContext("webgl2", webGLContextAttributes) || canvas.getContext("experimental-webgl2", webGLContextAttributes);
            } else {
              throw 'Unsupported WebGL context version ' + majorVersion + '.' + minorVersion + '!'
            }
          } finally {
            canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e, JSON.stringify(webGLContextAttributes)]);
          return 0;
        }
        // possible GL_DEBUG entry point: ctx = wrapDebugGL(ctx);
  
        if (!ctx) return 0;
        return GL.registerContext(ctx, webGLContextAttributes);
      },registerContext:function (ctx, webGLContextAttributes) {
        var handle = GL.getNewId(GL.contexts);
        var context = {
          handle: handle,
          version: webGLContextAttributes.majorVersion,
          GLctx: ctx
        };
        // Store the created context object so that we can access the context given a canvas without having to pass the parameters again.
        if (ctx.canvas) ctx.canvas.GLctxObject = context;
        GL.contexts[handle] = context;
        if (typeof webGLContextAttributes['enableExtensionsByDefault'] === 'undefined' || webGLContextAttributes.enableExtensionsByDefault) {
          GL.initExtensions(context);
        }
        return handle;
      },makeContextCurrent:function (contextHandle) {
        var context = GL.contexts[contextHandle];
        if (!context) return false;
        GLctx = Module.ctx = context.GLctx; // Active WebGL context object.
        GL.currentContext = context; // Active Emscripten GL layer context object.
        return true;
      },getContext:function (contextHandle) {
        return GL.contexts[contextHandle];
      },deleteContext:function (contextHandle) {
        if (GL.currentContext === GL.contexts[contextHandle]) GL.currentContext = null;
        if (typeof JSEvents === 'object') JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas); // Release all JS event handlers on the DOM element that the GL context is associated with since the context is now deleted.
        if (GL.contexts[contextHandle] && GL.contexts[contextHandle].GLctx.canvas) GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined; // Make sure the canvas object no longer refers to the context object so there are no GC surprises.
        GL.contexts[contextHandle] = null;
      },initExtensions:function (context) {
  
        // If this function is called without a specific context object, init the extensions of the currently active context.
        if (!context) context = GL.currentContext;
  
        if (context.initExtensionsDone) return;
        context.initExtensionsDone = true;
  
        var GLctx = context.GLctx;
  
        context.maxVertexAttribs = GLctx.getParameter(GLctx.MAX_VERTEX_ATTRIBS);
  
        // Detect the presence of a few extensions manually, this GL interop layer itself will need to know if they exist. 
        context.compressionExt = GLctx.getExtension('WEBGL_compressed_texture_s3tc');
        context.anisotropicExt = GLctx.getExtension('EXT_texture_filter_anisotropic');
        context.floatExt = GLctx.getExtension('OES_texture_float');
  
        // Extension available from Firefox 26 and Google Chrome 30
        context.instancedArraysExt = GLctx.getExtension('ANGLE_instanced_arrays');
        
        // Extension available from Firefox 25 and WebKit
        context.vaoExt = GLctx.getExtension('OES_vertex_array_object');
  
        if (context.version === 2) {
          // drawBuffers is available in WebGL2 by default.
          context.drawBuffersExt = function(n, bufs) {
            GLctx['drawBuffers'](n, bufs);
          };
        } else {
          var ext = GLctx.getExtension('WEBGL_draw_buffers');
          if (ext) {
            context.drawBuffersExt = function(n, bufs) {
              ext.drawBuffersWEBGL(n, bufs);
            };
          }
        }
  
        // These are the 'safe' feature-enabling extensions that don't add any performance impact related to e.g. debugging, and
        // should be enabled by default so that client GLES2/GL code will not need to go through extra hoops to get its stuff working.
        // As new extensions are ratified at http://www.khronos.org/registry/webgl/extensions/ , feel free to add your new extensions
        // here, as long as they don't produce a performance impact for users that might not be using those extensions.
        // E.g. debugging-related extensions should probably be off by default.
        var automaticallyEnabledExtensions = [ "OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives",
                                               "OES_vertex_array_object", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture",
                                               "OES_element_index_uint", "EXT_texture_filter_anisotropic", "ANGLE_instanced_arrays",
                                               "OES_texture_float_linear", "OES_texture_half_float_linear", "WEBGL_compressed_texture_atc",
                                               "WEBGL_compressed_texture_pvrtc", "EXT_color_buffer_half_float", "WEBGL_color_buffer_float",
                                               "EXT_frag_depth", "EXT_sRGB", "WEBGL_draw_buffers", "WEBGL_shared_resources",
                                               "EXT_shader_texture_lod" ];
  
        function shouldEnableAutomatically(extension) {
          var ret = false;
          automaticallyEnabledExtensions.forEach(function(include) {
            if (ext.indexOf(include) != -1) {
              ret = true;
            }
          });
          return ret;
        }
  
        var exts = GLctx.getSupportedExtensions();
        if (exts && exts.length > 0) {
          GLctx.getSupportedExtensions().forEach(function(ext) {
            if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
              GLctx.getExtension(ext); // Calling .getExtension enables that extension permanently, no need to store the return value to be enabled.
            }
          });
        }
      },populateUniformTable:function (program) {
        var p = GL.programs[program];
        GL.programInfos[program] = {
          uniforms: {},
          maxUniformLength: 0, // This is eagerly computed below, since we already enumerate all uniforms anyway.
          maxAttributeLength: -1 // This is lazily computed and cached, computed when/if first asked, "-1" meaning not computed yet.
        };
  
        var ptable = GL.programInfos[program];
        var utable = ptable.uniforms;
        // A program's uniform table maps the string name of an uniform to an integer location of that uniform.
        // The global GL.uniforms map maps integer locations to WebGLUniformLocations.
        var numUniforms = GLctx.getProgramParameter(p, GLctx.ACTIVE_UNIFORMS);
        for (var i = 0; i < numUniforms; ++i) {
          var u = GLctx.getActiveUniform(p, i);
  
          var name = u.name;
          ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length+1);
  
          // Strip off any trailing array specifier we might have got, e.g. "[0]".
          if (name.indexOf(']', name.length-1) !== -1) {
            var ls = name.lastIndexOf('[');
            name = name.slice(0, ls);
          }
  
          // Optimize memory usage slightly: If we have an array of uniforms, e.g. 'vec3 colors[3];', then 
          // only store the string 'colors' in utable, and 'colors[0]', 'colors[1]' and 'colors[2]' will be parsed as 'colors'+i.
          // Note that for the GL.uniforms table, we still need to fetch the all WebGLUniformLocations for all the indices.
          var loc = GLctx.getUniformLocation(p, name);
          var id = GL.getNewId(GL.uniforms);
          utable[name] = [u.size, id];
          GL.uniforms[id] = loc;
  
          for (var j = 1; j < u.size; ++j) {
            var n = name + '['+j+']';
            loc = GLctx.getUniformLocation(p, n);
            id = GL.getNewId(GL.uniforms);
  
            GL.uniforms[id] = loc;
          }
        }
      }};function _SDL_SetVideoMode(width, height, depth, flags) {
      ['touchstart', 'touchend', 'touchmove', 'mousedown', 'mouseup', 'mousemove', 'DOMMouseScroll', 'mousewheel', 'wheel', 'mouseout'].forEach(function(event) {
        Module['canvas'].addEventListener(event, SDL.receiveEvent, true);
      });
  
      var canvas = Module['canvas'];
  
      // (0,0) means 'use fullscreen' in native; in Emscripten, use the current canvas size.
      if (width == 0 && height == 0) {
        width = canvas.width;
        height = canvas.height;
      }
  
      if (!SDL.addedResizeListener) {
        SDL.addedResizeListener = true;
        Browser.resizeListeners.push(function(w, h) {
          if (!SDL.settingVideoMode) {
            SDL.receiveEvent({
              type: 'resize',
              w: w,
              h: h
            });
          }
        });
      }
  
      if (width !== canvas.width || height !== canvas.height) {
        SDL.settingVideoMode = true; // SetVideoMode itself should not trigger resize events
        Browser.setCanvasSize(width, height);
        SDL.settingVideoMode = false;
      }
  
      // Free the old surface first if there is one
      if (SDL.screen) {
        SDL.freeSurface(SDL.screen);
        assert(!SDL.screen);
      }
  
      if (SDL.GL) flags = flags | 0x04000000; // SDL_OPENGL - if we are using GL, then later calls to SetVideoMode may not mention GL, but we do need it. Once in GL mode, we never leave it.
  
      SDL.screen = SDL.makeSurface(width, height, flags, true, 'screen');
  
      return SDL.screen;
    }


  function _Mix_AllocateChannels(num) {
      SDL.allocateChannels(num);
      return num;
    }

  function _Mix_PlayChannelTimed() {
  return _Mix_PlayChannel.apply(null, arguments)
  }

  function _Mix_FreeMusic() {
  return _Mix_FreeChunk.apply(null, arguments)
  }

  var _emscripten_postinvoke=true;


  function ___syscall91(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // munmap
      var addr = SYSCALLS.get(), len = SYSCALLS.get();
      // TODO: support unmmap'ing parts of allocations
      var info = SYSCALLS.mappings[addr];
      if (!info) return 0;
      if (len === info.len) {
        var stream = FS.getStream(info.fd);
        SYSCALLS.doMsync(addr, stream, len, info.flags)
        FS.munmap(stream);
        SYSCALLS.mappings[addr] = null;
        if (info.allocated) {
          _free(info.malloc);
        }
      }
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }


  function _SDL_GetError() {
      if (!SDL.errorMessage) {
        SDL.errorMessage = allocate(intArrayFromString("unknown SDL-emscripten error"), 'i8', ALLOC_NORMAL);
      }
      return SDL.errorMessage;
    }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _Mix_Init(flags) {
      if (!flags) return 0;
      return 8; /* MIX_INIT_OGG */
    }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  var _BDtoIHigh=true;

  function _pthread_cleanup_push(routine, arg) {
      __ATEXIT__.push(function() { Runtime.dynCall('vi', routine, [arg]) })
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function _Mix_HaltChannel(channel) {
      function halt(channel) {
        var info = SDL.channels[channel];
        if (info.audio) {
          info.audio.pause();
          info.audio = null;
        }
        if (SDL.channelFinished) {
          Runtime.getFuncWrapper(SDL.channelFinished, 'vi')(channel);
        }
      }
      if (channel != -1) {
        halt(channel);
      } else {
        for (var i = 0; i < SDL.channels.length; ++i) halt(i);
      }
      return 0;
    }

  function _pthread_cleanup_pop() {
      assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
      __ATEXIT__.pop();
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function _SDL_WM_SetCaption(title, icon) {
      if (title && typeof Module['setWindowTitle'] !== 'undefined') {
        Module['setWindowTitle'](Pointer_stringify(title));
      }
      icon = icon && Pointer_stringify(icon);
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function _Mix_Quit(){}

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

   
  Module["_memmove"] = _memmove;

  var _emscripten_preinvoke=true;

  var _BItoD=true;


  
  function _SDL_AudioQuit() {
      for (var i = 0; i < SDL.numChannels; ++i) {
        if (SDL.channels[i].audio) {
          SDL.channels[i].audio.pause();
          SDL.channels[i].audio = undefined;
        }
      }
      if (SDL.music.audio) SDL.music.audio.pause();
      SDL.music.audio = undefined;
    }function _SDL_Quit() {
      _SDL_AudioQuit();
      Module.print('SDL_Quit called (and ignored)');
    }

   
  Module["_llvm_bswap_i32"] = _llvm_bswap_i32;

  function _SDL_OpenAudio(desired, obtained) {
      try {
        SDL.audio = {
          freq: HEAPU32[((desired)>>2)],
          format: HEAPU16[(((desired)+(4))>>1)],
          channels: HEAPU8[(((desired)+(6))>>0)],
          samples: HEAPU16[(((desired)+(8))>>1)], // Samples in the CB buffer per single sound channel.
          callback: HEAPU32[(((desired)+(16))>>2)],
          userdata: HEAPU32[(((desired)+(20))>>2)],
          paused: true,
          timer: null
        };
        // The .silence field tells the constant sample value that corresponds to the safe un-skewed silence value for the wave data.
        if (SDL.audio.format == 0x0008 /*AUDIO_U8*/) {
          SDL.audio.silence = 128; // Audio ranges in [0, 255], so silence is half-way in between.
        } else if (SDL.audio.format == 0x8010 /*AUDIO_S16LSB*/) {
          SDL.audio.silence = 0; // Signed data in range [-32768, 32767], silence is 0.
        } else {
          throw 'Invalid SDL audio format ' + SDL.audio.format + '!';
        }
        // Round the desired audio frequency up to the next 'common' frequency value.
        // Web Audio API spec states 'An implementation must support sample-rates in at least the range 22050 to 96000.'
        if (SDL.audio.freq <= 0) {
          throw 'Unsupported sound frequency ' + SDL.audio.freq + '!';
        } else if (SDL.audio.freq <= 22050) {
          SDL.audio.freq = 22050; // Take it safe and clamp everything lower than 22kHz to that.
        } else if (SDL.audio.freq <= 32000) {
          SDL.audio.freq = 32000;
        } else if (SDL.audio.freq <= 44100) {
          SDL.audio.freq = 44100;
        } else if (SDL.audio.freq <= 48000) {
          SDL.audio.freq = 48000;
        } else if (SDL.audio.freq <= 96000) {
          SDL.audio.freq = 96000;
        } else {
          throw 'Unsupported sound frequency ' + SDL.audio.freq + '!';
        }
        if (SDL.audio.channels == 0) {
          SDL.audio.channels = 1; // In SDL both 0 and 1 mean mono.
        } else if (SDL.audio.channels < 0 || SDL.audio.channels > 32) {
          throw 'Unsupported number of audio channels for SDL audio: ' + SDL.audio.channels + '!';
        } else if (SDL.audio.channels != 1 && SDL.audio.channels != 2) { // Unsure what SDL audio spec supports. Web Audio spec supports up to 32 channels.
          console.log('Warning: Using untested number of audio channels ' + SDL.audio.channels);
        }
        if (SDL.audio.samples < 128 || SDL.audio.samples > 524288 /* arbitrary cap */) {
          throw 'Unsupported audio callback buffer size ' + SDL.audio.samples + '!';
        } else if ((SDL.audio.samples & (SDL.audio.samples-1)) != 0) {
          throw 'Audio callback buffer size ' + SDL.audio.samples + ' must be a power-of-two!';
        }
        
        var totalSamples = SDL.audio.samples*SDL.audio.channels;
        SDL.audio.bytesPerSample = (SDL.audio.format == 0x0008 /*AUDIO_U8*/ || SDL.audio.format == 0x8008 /*AUDIO_S8*/) ? 1 : 2;
        SDL.audio.bufferSize = totalSamples*SDL.audio.bytesPerSample;
        SDL.audio.bufferDurationSecs = SDL.audio.bufferSize / SDL.audio.bytesPerSample / SDL.audio.channels / SDL.audio.freq; // Duration of a single queued buffer in seconds.
        SDL.audio.bufferingDelay = 50 / 1000; // Audio samples are played with a constant delay of this many seconds to account for browser and jitter.
        SDL.audio.buffer = _malloc(SDL.audio.bufferSize);
        
        // To account for jittering in frametimes, always have multiple audio buffers queued up for the audio output device.
        // This helps that we won't starve that easily if a frame takes long to complete.
        SDL.audio.numSimultaneouslyQueuedBuffers = Module['SDL_numSimultaneouslyQueuedBuffers'] || 5;
  
        // Pulls and queues new audio data if appropriate. This function gets "over-called" in both requestAnimationFrames and
        // setTimeouts to ensure that we get the finest granularity possible and as many chances from the browser to fill
        // new audio data. This is because setTimeouts alone have very poor granularity for audio streaming purposes, but also
        // the application might not be using emscripten_set_main_loop to drive the main loop, so we cannot rely on that alone.
        SDL.audio.queueNewAudioData = function SDL_queueNewAudioData() {
          if (!SDL.audio) return;
  
          for(var i = 0; i < SDL.audio.numSimultaneouslyQueuedBuffers; ++i) {
            // Only queue new data if we don't have enough audio data already in queue. Otherwise skip this time slot
            // and wait to queue more in the next time the callback is run.
            var secsUntilNextPlayStart = SDL.audio.nextPlayTime - SDL.audioContext['currentTime'];
            if (secsUntilNextPlayStart >= SDL.audio.bufferingDelay + SDL.audio.bufferDurationSecs*SDL.audio.numSimultaneouslyQueuedBuffers) return;
  
            // Ask SDL audio data from the user code.
            Runtime.dynCall('viii', SDL.audio.callback, [SDL.audio.userdata, SDL.audio.buffer, SDL.audio.bufferSize]);
            // And queue it to be played after the currently playing audio stream.
            SDL.audio.pushAudio(SDL.audio.buffer, SDL.audio.bufferSize);
          }
        } 
  
  
        // Create a callback function that will be routinely called to ask more audio data from the user application.
        SDL.audio.caller = function SDL_audioCaller() {
          if (!SDL.audio) return;
  
          --SDL.audio.numAudioTimersPending;
  
          SDL.audio.queueNewAudioData();
  
          // Queue this callback function to be called again later to pull more audio data.
          var secsUntilNextPlayStart = SDL.audio.nextPlayTime - SDL.audioContext['currentTime'];
  
          // Queue the next audio frame push to be performed half-way when the previously queued buffer has finished playing.
          var preemptBufferFeedSecs = SDL.audio.bufferDurationSecs/2.0;
  
          if (SDL.audio.numAudioTimersPending < SDL.audio.numSimultaneouslyQueuedBuffers) {
            ++SDL.audio.numAudioTimersPending;
            SDL.audio.timer = Browser.safeSetTimeout(SDL.audio.caller, Math.max(0.0, 1000.0*(secsUntilNextPlayStart-preemptBufferFeedSecs)));
  
            // If we are risking starving, immediately queue an extra buffer.
            if (SDL.audio.numAudioTimersPending < SDL.audio.numSimultaneouslyQueuedBuffers) {
              ++SDL.audio.numAudioTimersPending;
              Browser.safeSetTimeout(SDL.audio.caller, 1.0);
            }
          }
        };
        
        SDL.audio.audioOutput = new Audio();
  
        // Initialize Web Audio API if we haven't done so yet. Note: Only initialize Web Audio context ever once on the web page,
        // since initializing multiple times fails on Chrome saying 'audio resources have been exhausted'.
        SDL.openAudioContext();
        if (!SDL.audioContext) throw 'Web Audio API is not available!';
        SDL.audio.nextPlayTime = 0; // Time in seconds when the next audio block is due to start.
        
        // The pushAudio function with a new audio buffer whenever there is new audio data to schedule to be played back on the device.
        SDL.audio.pushAudio=function(ptr,sizeBytes) {
          try {
            if (SDL.audio.paused) return;
  
            var sizeSamples = sizeBytes / SDL.audio.bytesPerSample; // How many samples fit in the callback buffer?
            var sizeSamplesPerChannel = sizeSamples / SDL.audio.channels; // How many samples per a single channel fit in the cb buffer?
            if (sizeSamplesPerChannel != SDL.audio.samples) {
              throw 'Received mismatching audio buffer size!';
            }
            // Allocate new sound buffer to be played.
            var source = SDL.audioContext['createBufferSource']();
            var soundBuffer = SDL.audioContext['createBuffer'](SDL.audio.channels,sizeSamplesPerChannel,SDL.audio.freq);
            source['connect'](SDL.audioContext['destination']);
  
            SDL.fillWebAudioBufferFromHeap(ptr, sizeSamplesPerChannel, soundBuffer);
            // Workaround https://bugzilla.mozilla.org/show_bug.cgi?id=883675 by setting the buffer only after filling. The order is important here!
            source['buffer'] = soundBuffer;
            
            // Schedule the generated sample buffer to be played out at the correct time right after the previously scheduled
            // sample buffer has finished.
            var curtime = SDL.audioContext['currentTime'];
            if (curtime > SDL.audio.nextPlayTime && SDL.audio.nextPlayTime != 0) {
              console.log('warning: Audio callback had starved sending audio by ' + (curtime - SDL.audio.nextPlayTime) + ' seconds.');
            }
            // Don't ever start buffer playbacks earlier from current time than a given constant 'SDL.audio.bufferingDelay', since a browser 
            // may not be able to mix that audio clip in immediately, and there may be subsequent jitter that might cause the stream to starve.
            var playtime = Math.max(curtime + SDL.audio.bufferingDelay, SDL.audio.nextPlayTime);
            if (typeof source['start'] !== 'undefined') {
              source['start'](playtime); // New Web Audio API: sound sources are started with a .start() call.
            } else if (typeof source['noteOn'] !== 'undefined') {
              source['noteOn'](playtime); // Support old Web Audio API specification which had the .noteOn() API.
            }
            /*
            // Uncomment to debug SDL buffer feed starves.
            if (SDL.audio.curBufferEnd) {
              var thisBufferStart = Math.round(playtime * SDL.audio.freq);
              if (thisBufferStart != SDL.audio.curBufferEnd) console.log('SDL starved ' + (thisBufferStart - SDL.audio.curBufferEnd) + ' samples!');
            }
            SDL.audio.curBufferEnd = Math.round(playtime * SDL.audio.freq + sizeSamplesPerChannel);
            */
            
            SDL.audio.nextPlayTime = playtime + SDL.audio.bufferDurationSecs;
          } catch(e) {
            console.log('Web Audio API error playing back audio: ' + e.toString());
          }
        }
  
        if (obtained) {
          // Report back the initialized audio parameters.
          HEAP32[((obtained)>>2)]=SDL.audio.freq;
          HEAP16[(((obtained)+(4))>>1)]=SDL.audio.format;
          HEAP8[(((obtained)+(6))>>0)]=SDL.audio.channels;
          HEAP8[(((obtained)+(7))>>0)]=SDL.audio.silence;
          HEAP16[(((obtained)+(8))>>1)]=SDL.audio.samples;
          HEAP32[(((obtained)+(16))>>2)]=SDL.audio.callback;
          HEAP32[(((obtained)+(20))>>2)]=SDL.audio.userdata;
        }
        SDL.allocateChannels(32);
  
      } catch(e) {
        console.log('Initializing SDL audio threw an exception: "' + e.toString() + '"! Continuing without audio.');
        SDL.audio = null;
        SDL.allocateChannels(0);
        if (obtained) {
          HEAP32[((obtained)>>2)]=0;
          HEAP16[(((obtained)+(4))>>1)]=0;
          HEAP8[(((obtained)+(6))>>0)]=0;
          HEAP8[(((obtained)+(7))>>0)]=0;
          HEAP16[(((obtained)+(8))>>1)]=0;
          HEAP32[(((obtained)+(16))>>2)]=0;
          HEAP32[(((obtained)+(20))>>2)]=0;
        }
      }
      if (!SDL.audio) {
        return -1;
      }
      return 0;
    }

  function _SDL_UnlockAudio() {}

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  function _SDL_MapRGB(fmt, r, g, b) {
      SDL.checkPixelFormat(fmt);
      // We assume the machine is little-endian.
      return r&0xff|(g&0xff)<<8|(b&0xff)<<16|0xff000000;
    }


   
  Module["_memset"] = _memset;

  var _BDtoILow=true;

  function ___gxx_personality_v0() {
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }

  function _SDL_LockAudio() {}

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Runtime.dynCall('v', func);
      _pthread_once.seen[ptr] = 1;
    }

  function ___lock() {}

  function ___unlock() {}

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  function _Mix_CloseAudio() {
  return _SDL_CloseAudio.apply(null, arguments)
  }

  function _SDL_PollEvent(ptr) {
      return SDL.pollEvent(ptr);
    }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  function _SDL_UpdateRect(surf, x, y, w, h) {
      // We actually do the whole screen in Unlock...
    }

  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }

  function _SDL_ShowCursor(toggle) {
      switch (toggle) {
        case 0: // SDL_DISABLE
          if (Browser.isFullScreen) { // only try to lock the pointer when in full screen mode
            Module['canvas'].requestPointerLock();
            return 0;
          } else { // else return SDL_ENABLE to indicate the failure
            return 1;
          }
          break;
        case 1: // SDL_ENABLE
          Module['canvas'].exitPointerLock();
          return 1;
          break;
        case -1: // SDL_QUERY
          return !Browser.pointerLock;
          break;
        default:
          console.log( "SDL_ShowCursor called with unknown toggle parameter value: " + toggle + "." );
          break;
      }
    }


  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function _Mix_LoadWAV(filename) {
      var rwops = _SDL_RWFromFile(filename);
      var result = _Mix_LoadWAV_RW(rwops);
      _SDL_FreeRW(rwops);
      return result;
    }

  
  function _Mix_LoadMUS_RW() {
  return _Mix_LoadWAV_RW.apply(null, arguments)
  }function _Mix_LoadMUS(filename) {
      var rwops = _SDL_RWFromFile(filename);
      var result = _Mix_LoadMUS_RW(rwops);
      _SDL_FreeRW(rwops);
      return result;
    }

  function _SDL_Delay(delay) {
      if (!ENVIRONMENT_IS_WORKER) abort('SDL_Delay called on the main thread! Potential infinite loop, quitting.');
      // horrible busy-wait, but in a worker it at least does not block rendering
      var now = Date.now();
      while (Date.now() - now < delay) {}
    }

  function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _SDL_UnlockSurface(surf) {
      assert(!SDL.GL); // in GL mode we do not keep around 2D canvases and contexts
  
      var surfData = SDL.surfaces[surf];
  
      if (!surfData.locked || --surfData.locked > 0) {
        return;
      }
  
      // Copy pixel data to image
      if (surfData.isFlagSet(0x00200000 /* SDL_HWPALETTE */)) {
        SDL.copyIndexedColorData(surfData);
      } else if (!surfData.colors) {
        var data = surfData.image.data;
        var buffer = surfData.buffer;
        assert(buffer % 4 == 0, 'Invalid buffer offset: ' + buffer);
        var src = buffer >> 2;
        var dst = 0;
        var isScreen = surf == SDL.screen;
        var num;
        if (typeof CanvasPixelArray !== 'undefined' && data instanceof CanvasPixelArray) {
          // IE10/IE11: ImageData objects are backed by the deprecated CanvasPixelArray,
          // not UInt8ClampedArray. These don't have buffers, so we need to revert
          // to copying a byte at a time. We do the undefined check because modern
          // browsers do not define CanvasPixelArray anymore.
          num = data.length;
          while (dst < num) {
            var val = HEAP32[src]; // This is optimized. Instead, we could do HEAP32[(((buffer)+(dst))>>2)];
            data[dst  ] = val & 0xff;
            data[dst+1] = (val >> 8) & 0xff;
            data[dst+2] = (val >> 16) & 0xff;
            data[dst+3] = isScreen ? 0xff : ((val >> 24) & 0xff);
            src++;
            dst += 4;
          }
        } else {
          var data32 = new Uint32Array(data.buffer);
          if (isScreen && SDL.defaults.opaqueFrontBuffer) {
            num = data32.length;
            // logically we need to do
            //      while (dst < num) {
            //          data32[dst++] = HEAP32[src++] | 0xff000000
            //      }
            // the following code is faster though, because
            // .set() is almost free - easily 10x faster due to
            // native memcpy efficiencies, and the remaining loop
            // just stores, not load + store, so it is faster
            data32.set(HEAP32.subarray(src, src + num));
            var data8 = new Uint8Array(data.buffer);
            var i = 3;
            var j = i + 4*num;
            if (num % 8 == 0) {
              // unrolling gives big speedups
              while (i < j) {
                data8[i] = 0xff;
                i = i + 4 | 0;
                data8[i] = 0xff;
                i = i + 4 | 0;
                data8[i] = 0xff;
                i = i + 4 | 0;
                data8[i] = 0xff;
                i = i + 4 | 0;
                data8[i] = 0xff;
                i = i + 4 | 0;
                data8[i] = 0xff;
                i = i + 4 | 0;
                data8[i] = 0xff;
                i = i + 4 | 0;
                data8[i] = 0xff;
                i = i + 4 | 0;
              }
             } else {
              while (i < j) {
                data8[i] = 0xff;
                i = i + 4 | 0;
              }
            }
          } else {
            data32.set(HEAP32.subarray(src, src + data32.length));
          }
        }
      } else {
        var width = Module['canvas'].width;
        var height = Module['canvas'].height;
        var s = surfData.buffer;
        var data = surfData.image.data;
        var colors = surfData.colors; // TODO: optimize using colors32
        for (var y = 0; y < height; y++) {
          var base = y*width*4;
          for (var x = 0; x < width; x++) {
            // See comment above about signs
            var val = HEAPU8[((s++)>>0)] * 4;
            var start = base + x*4;
            data[start]   = colors[val];
            data[start+1] = colors[val+1];
            data[start+2] = colors[val+2];
          }
          s += width*3;
        }
      }
      // Copy to canvas
      surfData.ctx.putImageData(surfData.image, 0, 0);
      // Note that we save the image, so future writes are fast. But, memory is not yet released
    }

  function _SDL_Init(initFlags) {
      SDL.startTime = Date.now();
      SDL.initFlags = initFlags;
  
      // capture all key events. we just keep down and up, but also capture press to prevent default actions
      if (!Module['doNotCaptureKeyboard']) {
        var keyboardListeningElement = Module['keyboardListeningElement'] || document;
        keyboardListeningElement.addEventListener("keydown", SDL.receiveEvent);
        keyboardListeningElement.addEventListener("keyup", SDL.receiveEvent);
        keyboardListeningElement.addEventListener("keypress", SDL.receiveEvent);
        window.addEventListener("focus", SDL.receiveEvent);
        window.addEventListener("blur", SDL.receiveEvent);
        document.addEventListener("visibilitychange", SDL.receiveEvent);
      }
  
      if (initFlags & 0x200) {
        // SDL_INIT_JOYSTICK
        // Firefox will not give us Joystick data unless we register this NOP
        // callback.
        // https://bugzilla.mozilla.org/show_bug.cgi?id=936104
        addEventListener("gamepadconnected", function() {});
      }
  
      window.addEventListener("unload", SDL.receiveEvent);
      SDL.keyboardState = _malloc(0x10000); // Our SDL needs 512, but 64K is safe for older SDLs
      _memset(SDL.keyboardState, 0, 0x10000);
      // Initialize this structure carefully for closure
      SDL.DOMEventToSDLEvent['keydown']    = 0x300  /* SDL_KEYDOWN */;
      SDL.DOMEventToSDLEvent['keyup']      = 0x301  /* SDL_KEYUP */;
      SDL.DOMEventToSDLEvent['keypress']   = 0x303  /* SDL_TEXTINPUT */;
      SDL.DOMEventToSDLEvent['mousedown']  = 0x401  /* SDL_MOUSEBUTTONDOWN */;
      SDL.DOMEventToSDLEvent['mouseup']    = 0x402  /* SDL_MOUSEBUTTONUP */;
      SDL.DOMEventToSDLEvent['mousemove']  = 0x400  /* SDL_MOUSEMOTION */;
      SDL.DOMEventToSDLEvent['wheel']      = 0x403  /* SDL_MOUSEWHEEL */; 
      SDL.DOMEventToSDLEvent['touchstart'] = 0x700  /* SDL_FINGERDOWN */;
      SDL.DOMEventToSDLEvent['touchend']   = 0x701  /* SDL_FINGERUP */;
      SDL.DOMEventToSDLEvent['touchmove']  = 0x702  /* SDL_FINGERMOTION */;
      SDL.DOMEventToSDLEvent['unload']     = 0x100  /* SDL_QUIT */;
      SDL.DOMEventToSDLEvent['resize']     = 0x7001 /* SDL_VIDEORESIZE/SDL_EVENT_COMPAT2 */;
      SDL.DOMEventToSDLEvent['visibilitychange'] = 0x200 /* SDL_WINDOWEVENT */;
      SDL.DOMEventToSDLEvent['focus']      = 0x200 /* SDL_WINDOWEVENT */;
      SDL.DOMEventToSDLEvent['blur']       = 0x200 /* SDL_WINDOWEVENT */;
  
      // These are not technically DOM events; the HTML gamepad API is poll-based.
      // However, we define them here, as the rest of the SDL code assumes that
      // all SDL events originate as DOM events.
      SDL.DOMEventToSDLEvent['joystick_axis_motion'] = 0x600 /* SDL_JOYAXISMOTION */;
      SDL.DOMEventToSDLEvent['joystick_button_down'] = 0x603 /* SDL_JOYBUTTONDOWN */;
      SDL.DOMEventToSDLEvent['joystick_button_up'] = 0x604 /* SDL_JOYBUTTONUP */;
      return 0; // success
    }


  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  function _pthread_self() {
      //FIXME: assumes only a single thread
      return 0;
    }

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); }
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) }
___buildEnvironment(ENV);
var GLctx; GL.init()
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    Module["dynCall_viiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };
Module.asmLibraryArg = { "abort": abort, "assert": assert, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_i": nullFunc_i, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_ii": nullFunc_ii, "nullFunc_viii": nullFunc_viii, "nullFunc_viiiiiiii": nullFunc_viiiiiiii, "nullFunc_v": nullFunc_v, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_viiii": nullFunc_viiii, "invoke_iiii": invoke_iiii, "invoke_viiiii": invoke_viiiii, "invoke_i": invoke_i, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_ii": invoke_ii, "invoke_viii": invoke_viii, "invoke_viiiiiiii": invoke_viiiiiiii, "invoke_v": invoke_v, "invoke_iiiii": invoke_iiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_iii": invoke_iii, "invoke_viiii": invoke_viiii, "___syscall221": ___syscall221, "_Mix_Playing": _Mix_Playing, "_SDL_RWFromFile": _SDL_RWFromFile, "___assert_fail": ___assert_fail, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "_Mix_AllocateChannels": _Mix_AllocateChannels, "_SDL_GetError": _SDL_GetError, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_sbrk": _sbrk, "___cxa_begin_catch": ___cxa_begin_catch, "_TTF_RenderText_Solid": _TTF_RenderText_Solid, "_sysconf": _sysconf, "_Mix_PlayMusic": _Mix_PlayMusic, "_Mix_LoadMUS_RW": _Mix_LoadMUS_RW, "_Mix_LoadWAV_RW": _Mix_LoadWAV_RW, "_SDL_WM_SetCaption": _SDL_WM_SetCaption, "_pthread_cleanup_push": _pthread_cleanup_push, "_Mix_HaltMusic": _Mix_HaltMusic, "_SDL_UpdateRect": _SDL_UpdateRect, "___syscall140": ___syscall140, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "_pthread_cleanup_pop": _pthread_cleanup_pop, "_emscripten_SDL_SetEventHandler": _emscripten_SDL_SetEventHandler, "_SDL_GetTicks": _SDL_GetTicks, "_Mix_CloseAudio": _Mix_CloseAudio, "___cxa_free_exception": ___cxa_free_exception, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "_SDL_LockAudio": _SDL_LockAudio, "_SDL_LockSurface": _SDL_LockSurface, "___setErrNo": ___setErrNo, "_SDL_OpenAudio": _SDL_OpenAudio, "___resumeException": ___resumeException, "___syscall91": ___syscall91, "_pthread_once": _pthread_once, "_SDL_MapRGB": _SDL_MapRGB, "___lock": ___lock, "_SDL_SetVideoMode": _SDL_SetVideoMode, "___syscall6": ___syscall6, "___syscall5": ___syscall5, "_time": _time, "_SDL_UpperBlitScaled": _SDL_UpperBlitScaled, "_exit": _exit, "_putenv": _putenv, "_SDL_ShowCursor": _SDL_ShowCursor, "_IMG_Load": _IMG_Load, "_TTF_FontHeight": _TTF_FontHeight, "_SDL_Delay": _SDL_Delay, "___cxa_allocate_exception": ___cxa_allocate_exception, "___buildEnvironment": ___buildEnvironment, "_Mix_FreeMusic": _Mix_FreeMusic, "_Mix_LoadWAV": _Mix_LoadWAV, "_Mix_LoadMUS": _Mix_LoadMUS, "___syscall192": ___syscall192, "_SDL_Init": _SDL_Init, "___syscall195": ___syscall195, "___cxa_end_catch": ___cxa_end_catch, "_SDL_Quit": _SDL_Quit, "_Mix_PlayChannel": _Mix_PlayChannel, "_pthread_getspecific": _pthread_getspecific, "_Mix_Init": _Mix_Init, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_getenv": _getenv, "_pthread_key_create": _pthread_key_create, "_SDL_UnlockSurface": _SDL_UnlockSurface, "_abort": _abort, "_Mix_PlayChannelTimed": _Mix_PlayChannelTimed, "_Mix_VolumeMusic": _Mix_VolumeMusic, "___cxa_pure_virtual": ___cxa_pure_virtual, "_SDL_UnlockAudio": _SDL_UnlockAudio, "_SDL_CloseAudio": _SDL_CloseAudio, "___gxx_personality_v0": ___gxx_personality_v0, "_SDL_FreeRW": _SDL_FreeRW, "_SDL_PauseAudio": _SDL_PauseAudio, "_SDL_PollEvent": _SDL_PollEvent, "_Mix_OpenAudio": _Mix_OpenAudio, "_Mix_FreeChunk": _Mix_FreeChunk, "__exit": __exit, "_IMG_Load_RW": _IMG_Load_RW, "_pthread_self": _pthread_self, "_Mix_HaltChannel": _Mix_HaltChannel, "_TTF_SizeText": _TTF_SizeText, "___syscall54": ___syscall54, "___unlock": ___unlock, "_SDL_AudioQuit": _SDL_AudioQuit, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_pthread_setspecific": _pthread_setspecific, "___cxa_throw": ___cxa_throw, "_Mix_Quit": _Mix_Quit, "_SDL_UpperBlit": _SDL_UpperBlit, "_SDL_RWFromConstMem": _SDL_RWFromConstMem, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_iiiiiii=env.nullFunc_iiiiiii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_viiiiiiii=env.nullFunc_viiiiiiii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_i=env.invoke_i;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_ii=env.invoke_ii;
  var invoke_viii=env.invoke_viii;
  var invoke_viiiiiiii=env.invoke_viiiiiiii;
  var invoke_v=env.invoke_v;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_viiii=env.invoke_viiii;
  var ___syscall221=env.___syscall221;
  var _Mix_Playing=env._Mix_Playing;
  var _SDL_RWFromFile=env._SDL_RWFromFile;
  var ___assert_fail=env.___assert_fail;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var _Mix_AllocateChannels=env._Mix_AllocateChannels;
  var _SDL_GetError=env._SDL_GetError;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _sbrk=env._sbrk;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _TTF_RenderText_Solid=env._TTF_RenderText_Solid;
  var _sysconf=env._sysconf;
  var _Mix_PlayMusic=env._Mix_PlayMusic;
  var _Mix_LoadMUS_RW=env._Mix_LoadMUS_RW;
  var _Mix_LoadWAV_RW=env._Mix_LoadWAV_RW;
  var _SDL_WM_SetCaption=env._SDL_WM_SetCaption;
  var _pthread_cleanup_push=env._pthread_cleanup_push;
  var _Mix_HaltMusic=env._Mix_HaltMusic;
  var _SDL_UpdateRect=env._SDL_UpdateRect;
  var ___syscall140=env.___syscall140;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
  var _emscripten_SDL_SetEventHandler=env._emscripten_SDL_SetEventHandler;
  var _SDL_GetTicks=env._SDL_GetTicks;
  var _Mix_CloseAudio=env._Mix_CloseAudio;
  var ___cxa_free_exception=env.___cxa_free_exception;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var _SDL_LockAudio=env._SDL_LockAudio;
  var _SDL_LockSurface=env._SDL_LockSurface;
  var ___setErrNo=env.___setErrNo;
  var _SDL_OpenAudio=env._SDL_OpenAudio;
  var ___resumeException=env.___resumeException;
  var ___syscall91=env.___syscall91;
  var _pthread_once=env._pthread_once;
  var _SDL_MapRGB=env._SDL_MapRGB;
  var ___lock=env.___lock;
  var _SDL_SetVideoMode=env._SDL_SetVideoMode;
  var ___syscall6=env.___syscall6;
  var ___syscall5=env.___syscall5;
  var _time=env._time;
  var _SDL_UpperBlitScaled=env._SDL_UpperBlitScaled;
  var _exit=env._exit;
  var _putenv=env._putenv;
  var _SDL_ShowCursor=env._SDL_ShowCursor;
  var _IMG_Load=env._IMG_Load;
  var _TTF_FontHeight=env._TTF_FontHeight;
  var _SDL_Delay=env._SDL_Delay;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var ___buildEnvironment=env.___buildEnvironment;
  var _Mix_FreeMusic=env._Mix_FreeMusic;
  var _Mix_LoadWAV=env._Mix_LoadWAV;
  var _Mix_LoadMUS=env._Mix_LoadMUS;
  var ___syscall192=env.___syscall192;
  var _SDL_Init=env._SDL_Init;
  var ___syscall195=env.___syscall195;
  var ___cxa_end_catch=env.___cxa_end_catch;
  var _SDL_Quit=env._SDL_Quit;
  var _Mix_PlayChannel=env._Mix_PlayChannel;
  var _pthread_getspecific=env._pthread_getspecific;
  var _Mix_Init=env._Mix_Init;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _getenv=env._getenv;
  var _pthread_key_create=env._pthread_key_create;
  var _SDL_UnlockSurface=env._SDL_UnlockSurface;
  var _abort=env._abort;
  var _Mix_PlayChannelTimed=env._Mix_PlayChannelTimed;
  var _Mix_VolumeMusic=env._Mix_VolumeMusic;
  var ___cxa_pure_virtual=env.___cxa_pure_virtual;
  var _SDL_UnlockAudio=env._SDL_UnlockAudio;
  var _SDL_CloseAudio=env._SDL_CloseAudio;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var _SDL_FreeRW=env._SDL_FreeRW;
  var _SDL_PauseAudio=env._SDL_PauseAudio;
  var _SDL_PollEvent=env._SDL_PollEvent;
  var _Mix_OpenAudio=env._Mix_OpenAudio;
  var _Mix_FreeChunk=env._Mix_FreeChunk;
  var __exit=env.__exit;
  var _IMG_Load_RW=env._IMG_Load_RW;
  var _pthread_self=env._pthread_self;
  var _Mix_HaltChannel=env._Mix_HaltChannel;
  var _TTF_SizeText=env._TTF_SizeText;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var _SDL_AudioQuit=env._SDL_AudioQuit;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _pthread_setspecific=env._pthread_setspecific;
  var ___cxa_throw=env.___cxa_throw;
  var _Mix_Quit=env._Mix_Quit;
  var _SDL_UpperBlit=env._SDL_UpperBlit;
  var _SDL_RWFromConstMem=env._SDL_RWFromConstMem;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function __ZN4Game13handleBagMenuEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $i1 = 0, $or$cond = 0, $or$cond3 = 0;
 var $or$cond5 = 0, $or$cond7 = 0, $xPos = 0, $xPosWnd = 0, $yPos = 0, $yPosWnd = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 104|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = (($4) + 1)|0;
 $6 = (640 - ($5))|0;
 $7 = (($6|0) / 2)&-1;
 $xPosWnd = $7;
 $8 = ((($1)) + 104|0);
 $9 = ((($8)) + 2|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10&65535;
 $12 = (($11) + 1)|0;
 $13 = (480 - ($12))|0;
 $14 = (($13|0) / 4)&-1;
 $yPosWnd = $14;
 $15 = ((($1)) + 24|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($16)) + 8|0);
 $18 = ((($17)) + 7|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&1;
 if ($20) {
  $21 = ((($1)) + 24|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($22)) + 8|0);
  $24 = ((($23)) + 7|0);
  HEAP8[$24>>0] = 0;
  $25 = ((($1)) + 24|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ((($26)) + 8|0);
  $28 = ((($27)) + 12|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $xPosWnd;
  $31 = (($29) - ($30))|0;
  $xPos = $31;
  $32 = ((($1)) + 24|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ((($33)) + 8|0);
  $35 = ((($34)) + 16|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $yPosWnd;
  $38 = (($36) - ($37))|0;
  $yPos = $38;
  $i = 0;
  while(1) {
   $39 = $i;
   $40 = ($39|0)<(3);
   if (!($40)) {
    break;
   }
   $41 = $xPos;
   $42 = $i;
   $43 = ($42*45)|0;
   $44 = (($43) + 118)|0;
   $45 = ($41|0)>=($44|0);
   if ($45) {
    $46 = $xPos;
    $47 = $i;
    $48 = ($47*45)|0;
    $49 = (($48) + 160)|0;
    $50 = ($46|0)<($49|0);
    if ($50) {
     $51 = $yPos;
     $52 = ($51|0)>=(15);
     $53 = $yPos;
     $54 = ($53|0)<(55);
     $or$cond = $52 & $54;
     if ($or$cond) {
      $55 = $i;
      $56 = ((($1)) + 4452|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($55|0)!=($57|0);
      if ($58) {
       $59 = $i;
       $60 = ((($1)) + 4452|0);
       HEAP32[$60>>2] = $59;
      }
     }
    }
   }
   $61 = $i;
   $62 = (($61) + 1)|0;
   $i = $62;
  }
  $i1 = 0;
  while(1) {
   $63 = $i1;
   $64 = ((($1)) + 79608|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = (__Z3MINIiET_S0_S0_($65,4)|0);
   $67 = ($63|0)<($66|0);
   $68 = $xPos;
   if (!($67)) {
    break;
   }
   $69 = $i1;
   $70 = $69<<5;
   $71 = (($70) + 261)|0;
   $72 = ($68|0)>=($71|0);
   do {
    if ($72) {
     $73 = $xPos;
     $74 = $i1;
     $75 = $74<<5;
     $76 = (($75) + 293)|0;
     $77 = ($73|0)<($76|0);
     if ($77) {
      $78 = $yPos;
      $79 = ($78|0)>=(4);
      $80 = $yPos;
      $81 = ($80|0)<(44);
      $or$cond3 = $79 & $81;
      if ($or$cond3) {
       $82 = $i1;
       $83 = ((($1)) + 4460|0);
       $84 = HEAP32[$83>>2]|0;
       $85 = ($82|0)!=($84|0);
       if (!($85)) {
        $86 = ((($1)) + 4452|0);
        $87 = HEAP32[$86>>2]|0;
        $88 = ($87|0)!=(3);
        if (!($88)) {
         break;
        }
       }
       $89 = $i1;
       $90 = ((($1)) + 4460|0);
       HEAP32[$90>>2] = $89;
       $91 = ((($1)) + 4452|0);
       HEAP32[$91>>2] = 3;
      }
     }
    }
   } while(0);
   $92 = $i1;
   $93 = (($92) + 1)|0;
   $i1 = $93;
  }
  $94 = ($68|0)>=(22);
  if ($94) {
   $95 = $xPos;
   $96 = ((($1)) + 660|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = (__ZL14getBitmapWidthPKh($97)|0);
   $99 = (($98) + 22)|0;
   $100 = ($95|0)<($99|0);
   $101 = $yPos;
   $102 = ($101|0)>=(22);
   $or$cond5 = $100 & $102;
   if ($or$cond5) {
    $103 = $yPos;
    $104 = ((($1)) + 660|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = (__ZL15getBitmapHeightPKh($105)|0);
    $107 = (($106) + 22)|0;
    $108 = ($103|0)<($107|0);
    if ($108) {
     $109 = ((($1)) + 3804|0);
     $110 = ((($109)) + 2|0);
     $111 = HEAP16[$110>>1]|0;
     $112 = $111 << 16 >> 16;
     $113 = ($112|0)==(1);
     if ($113) {
      $114 = ((($1)) + 3804|0);
      $115 = ((($114)) + 4|0);
      $116 = HEAP16[$115>>1]|0;
      $117 = $116 << 16 >> 16;
      $118 = ($117|0)!=(0);
      if ($118) {
       $119 = ((($1)) + 3804|0);
       $120 = ((($119)) + 4|0);
       HEAP16[$120>>1] = 1;
       $121 = ((($1)) + 3804|0);
       $122 = ((($121)) + 2|0);
       HEAP16[$122>>1] = 2;
      }
     }
    }
   }
  }
  $123 = $xPos;
  $124 = ($123|0)>=(22);
  if ($124) {
   $125 = $xPos;
   $126 = ((($1)) + 756|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = (__ZL14getBitmapWidthPKh($127)|0);
   $129 = (($128) + 22)|0;
   $130 = ($125|0)<($129|0);
   $131 = $yPos;
   $132 = ($131|0)>=(37);
   $or$cond7 = $130 & $132;
   if ($or$cond7) {
    $133 = $yPos;
    $134 = ((($1)) + 756|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = (__ZL15getBitmapHeightPKh($135)|0);
    $137 = (($136) + 37)|0;
    $138 = ($133|0)<($137|0);
    if ($138) {
     $139 = ((($1)) + 3804|0);
     $140 = ((($139)) + 4|0);
     $141 = HEAP16[$140>>1]|0;
     $142 = $141 << 16 >> 16;
     $143 = ($142|0)==(1);
     if ($143) {
      $144 = ((($1)) + 3804|0);
      $145 = ((($144)) + 2|0);
      $146 = HEAP16[$145>>1]|0;
      $147 = $146 << 16 >> 16;
      $148 = ($147|0)!=(0);
      if ($148) {
       $149 = ((($1)) + 3804|0);
       $150 = ((($149)) + 4|0);
       HEAP16[$150>>1] = 2;
       $151 = ((($1)) + 3804|0);
       $152 = ((($151)) + 2|0);
       HEAP16[$152>>1] = 1;
      }
     }
    }
   }
  }
 }
 $153 = ((($1)) + 24|0);
 $154 = HEAP32[$153>>2]|0;
 $155 = ((($154)) + 8|0);
 $156 = ((($155)) + 5|0);
 $157 = HEAP8[$156>>0]|0;
 $158 = $157&1;
 $159 = ((($1)) + 24|0);
 $160 = HEAP32[$159>>2]|0;
 $161 = ((($160)) + 8|0);
 if ($158) {
  $162 = ((($161)) + 5|0);
  HEAP8[$162>>0] = 0;
  HEAP32[$1>>2] = 1;
  STACKTOP = sp;return;
 }
 $163 = ((($161)) + 1|0);
 $164 = HEAP8[$163>>0]|0;
 $165 = $164&1;
 $166 = ((($1)) + 24|0);
 $167 = HEAP32[$166>>2]|0;
 $168 = ((($167)) + 8|0);
 if ($165) {
  $169 = ((($168)) + 1|0);
  HEAP8[$169>>0] = 0;
  HEAP32[$1>>2] = 1;
  STACKTOP = sp;return;
 }
 $170 = HEAP8[$168>>0]|0;
 $171 = $170&255;
 $172 = $171 & 4;
 $173 = ($172|0)!=(0);
 do {
  if ($173) {
   $174 = ((($1)) + 24|0);
   $175 = HEAP32[$174>>2]|0;
   $176 = ((($175)) + 8|0);
   $177 = HEAP8[$176>>0]|0;
   $178 = $177&255;
   $179 = $178 & -5;
   $180 = $179&255;
   HEAP8[$176>>0] = $180;
   $181 = ((($1)) + 4452|0);
   $182 = HEAP32[$181>>2]|0;
   $183 = ($182|0)!=(0);
   if ($183) {
    $184 = ((($1)) + 4452|0);
    $185 = HEAP32[$184>>2]|0;
    $186 = ($185|0)!=(3);
    if (!($186)) {
     $187 = ((($1)) + 4460|0);
     $188 = HEAP32[$187>>2]|0;
     $189 = ($188|0)<=(0);
     if (!($189)) {
      $193 = ((($1)) + 4460|0);
      $194 = HEAP32[$193>>2]|0;
      $195 = (($194) + -1)|0;
      HEAP32[$193>>2] = $195;
      break;
     }
    }
    $190 = ((($1)) + 4452|0);
    $191 = HEAP32[$190>>2]|0;
    $192 = (($191) + -1)|0;
    HEAP32[$190>>2] = $192;
   }
  }
 } while(0);
 $196 = ((($1)) + 24|0);
 $197 = HEAP32[$196>>2]|0;
 $198 = ((($197)) + 8|0);
 $199 = HEAP8[$198>>0]|0;
 $200 = $199&255;
 $201 = $200 & 8;
 $202 = ($201|0)!=(0);
 do {
  if ($202) {
   $203 = ((($1)) + 24|0);
   $204 = HEAP32[$203>>2]|0;
   $205 = ((($204)) + 8|0);
   $206 = HEAP8[$205>>0]|0;
   $207 = $206&255;
   $208 = $207 & -9;
   $209 = $208&255;
   HEAP8[$205>>0] = $209;
   $210 = ((($1)) + 4452|0);
   $211 = HEAP32[$210>>2]|0;
   $212 = ($211|0)==(3);
   if (!($212)) {
    $225 = ((($1)) + 4452|0);
    $226 = HEAP32[$225>>2]|0;
    $227 = (($226) + 1)|0;
    HEAP32[$225>>2] = $227;
    break;
   }
   $213 = ((($1)) + 79608|0);
   $214 = HEAP32[$213>>2]|0;
   $215 = (($214) - 1)|0;
   $216 = ((($1)) + 4460|0);
   $217 = HEAP32[$216>>2]|0;
   $218 = ($215|0)>($217|0);
   if ($218) {
    $219 = ((($1)) + 4460|0);
    $220 = HEAP32[$219>>2]|0;
    $221 = ($220|0)!=(-1);
    if ($221) {
     $222 = ((($1)) + 4460|0);
     $223 = HEAP32[$222>>2]|0;
     $224 = (($223) + 1)|0;
     HEAP32[$222>>2] = $224;
    }
   }
  }
 } while(0);
 $228 = ((($1)) + 24|0);
 $229 = HEAP32[$228>>2]|0;
 $230 = ((($229)) + 8|0);
 $231 = HEAP8[$230>>0]|0;
 $232 = $231&255;
 $233 = $232 & 2;
 $234 = ($233|0)!=(0);
 if ($234) {
  $235 = ((($1)) + 24|0);
  $236 = HEAP32[$235>>2]|0;
  $237 = ((($236)) + 8|0);
  $238 = HEAP8[$237>>0]|0;
  $239 = $238&255;
  $240 = $239 & -3;
  $241 = $240&255;
  HEAP8[$237>>0] = $241;
  $242 = ((($1)) + 3804|0);
  $243 = ((($242)) + 4|0);
  $244 = HEAP16[$243>>1]|0;
  $245 = $244 << 16 >> 16;
  $246 = ($245|0)==(1);
  if ($246) {
   $247 = ((($1)) + 3804|0);
   $248 = ((($247)) + 2|0);
   $249 = HEAP16[$248>>1]|0;
   $250 = $249 << 16 >> 16;
   $251 = ($250|0)!=(0);
   if ($251) {
    $252 = ((($1)) + 3804|0);
    $253 = ((($252)) + 4|0);
    HEAP16[$253>>1] = 2;
    $254 = ((($1)) + 3804|0);
    $255 = ((($254)) + 2|0);
    HEAP16[$255>>1] = 1;
   }
  }
 }
 $256 = ((($1)) + 24|0);
 $257 = HEAP32[$256>>2]|0;
 $258 = ((($257)) + 8|0);
 $259 = HEAP8[$258>>0]|0;
 $260 = $259&255;
 $261 = $260 & 1;
 $262 = ($261|0)!=(0);
 if ($262) {
  $263 = ((($1)) + 24|0);
  $264 = HEAP32[$263>>2]|0;
  $265 = ((($264)) + 8|0);
  $266 = HEAP8[$265>>0]|0;
  $267 = $266&255;
  $268 = $267 & -2;
  $269 = $268&255;
  HEAP8[$265>>0] = $269;
  $270 = ((($1)) + 3804|0);
  $271 = ((($270)) + 2|0);
  $272 = HEAP16[$271>>1]|0;
  $273 = $272 << 16 >> 16;
  $274 = ($273|0)==(1);
  if ($274) {
   $275 = ((($1)) + 3804|0);
   $276 = ((($275)) + 4|0);
   $277 = HEAP16[$276>>1]|0;
   $278 = $277 << 16 >> 16;
   $279 = ($278|0)!=(0);
   if ($279) {
    $280 = ((($1)) + 3804|0);
    $281 = ((($280)) + 4|0);
    HEAP16[$281>>1] = 1;
    $282 = ((($1)) + 3804|0);
    $283 = ((($282)) + 2|0);
    HEAP16[$283>>1] = 2;
   }
  }
 }
 $284 = $xPosWnd;
 $285 = $yPosWnd;
 __ZN4Game11drawBagMenuEii($1,$284,$285);
 $286 = ((($1)) + 856|0);
 $287 = HEAP32[$286>>2]|0;
 $288 = (($287) + 1)|0;
 HEAP32[$286>>2] = $288;
 $289 = ((($1)) + 856|0);
 $290 = HEAP32[$289>>2]|0;
 $291 = ($290|0)>=(12);
 if ($291) {
  $292 = ((($1)) + 856|0);
  HEAP32[$292>>2] = 0;
 }
 $293 = ((($1)) + 4460|0);
 $294 = HEAP32[$293>>2]|0;
 $295 = ($294|0)>=(0);
 if ($295) {
  $296 = ((($1)) + 4460|0);
  $297 = HEAP32[$296>>2]|0;
  $298 = ($297|0)<(4);
  if ($298) {
   $299 = ((($1)) + 4452|0);
   $300 = HEAP32[$299>>2]|0;
   $301 = ($300|0)==(3);
   if ($301) {
    $302 = ((($1)) + 79608|0);
    $303 = HEAP32[$302>>2]|0;
    $304 = ($303|0)!=(0);
    if ($304) {
     $305 = ((($1)) + 808|0);
     $306 = HEAP32[$305>>2]|0;
     $307 = (($306) + 1)|0;
     HEAP32[$305>>2] = $307;
     $308 = ((($1)) + 808|0);
     $309 = HEAP32[$308>>2]|0;
     $310 = ($309|0)>=(10);
     if ($310) {
      $311 = ((($1)) + 808|0);
      HEAP32[$311>>2] = 0;
     }
    }
   }
  }
 }
 $312 = ((($1)) + 3804|0);
 $313 = ((($312)) + 2|0);
 $314 = HEAP16[$313>>1]|0;
 $315 = $314 << 16 >> 16;
 $316 = ($315|0)==(1);
 if ($316) {
  $317 = ((($1)) + 852|0);
  $318 = HEAP32[$317>>2]|0;
  $319 = (($318) + 1)|0;
  HEAP32[$317>>2] = $319;
  $320 = ((($1)) + 852|0);
  $321 = HEAP32[$320>>2]|0;
  $322 = ($321|0)>=(10);
  if (!($322)) {
   STACKTOP = sp;return;
  }
  $323 = ((($1)) + 852|0);
  HEAP32[$323>>2] = 0;
  STACKTOP = sp;return;
 }
 $324 = ((($1)) + 3804|0);
 $325 = ((($324)) + 4|0);
 $326 = HEAP16[$325>>1]|0;
 $327 = $326 << 16 >> 16;
 $328 = ($327|0)==(1);
 if (!($328)) {
  STACKTOP = sp;return;
 }
 $329 = ((($1)) + 852|0);
 $330 = HEAP32[$329>>2]|0;
 $331 = (($330) + 1)|0;
 HEAP32[$329>>2] = $331;
 $332 = ((($1)) + 852|0);
 $333 = HEAP32[$332>>2]|0;
 $334 = ($333|0)>=(10);
 if (!($334)) {
  STACKTOP = sp;return;
 }
 $335 = ((($1)) + 852|0);
 HEAP32[$335>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN4Game11drawBagMenuEii($this,$xPosWnd,$yPosWnd) {
 $this = $this|0;
 $xPosWnd = $xPosWnd|0;
 $yPosWnd = $yPosWnd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $backup = 0, $bagObjectData = 0, $i = 0, $i6 = 0, $index = 0, $index3 = 0, $lifeBarFrame = 0, $p = 0, $p4 = 0, $p9 = 0, $size = 0, $weaponImage1 = 0, $weaponImage2 = 0, $x = 0, $x7 = 0, $y = 0, $y1 = 0, $y2 = 0, $y5 = 0, $y8 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $backup = sp + 68|0;
 $0 = $this;
 $1 = $xPosWnd;
 $2 = $yPosWnd;
 $3 = $0;
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = ($4|0)<(4);
  $6 = ((($3)) + 104|0);
  if (!($5)) {
   break;
  }
  $7 = ((($6)) + 2|0);
  $8 = HEAP16[$7>>1]|0;
  $9 = $8&65535;
  $10 = (($9) - 32)|0;
  $11 = ((($3)) + 768|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (__ZL15getBitmapHeightPKh($12)|0);
  $14 = (($10) - ($13))|0;
  $y = $14;
  $15 = ((($3)) + 8|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&1;
  $18 = $17 ? 247 : 269;
  $19 = $i;
  $20 = $19<<5;
  $21 = (($18) + ($20))|0;
  $22 = $y;
  $23 = ((($3)) + 768|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($3)) + 104|0);
  __ZN4Game10drawObjectEiiPKhP11SceneBitmap($3,$21,$22,$24,$25);
  $26 = $i;
  $27 = (($26) + 1)|0;
  $i = $27;
 }
 ;HEAP32[$backup>>2]=HEAP32[$6>>2]|0;HEAP32[$backup+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$backup+8>>2]=HEAP32[$6+8>>2]|0;
 $28 = HEAP16[$backup>>1]|0;
 $29 = $28&65535;
 $30 = (($29) + 1)|0;
 $31 = ((($backup)) + 2|0);
 $32 = HEAP16[$31>>1]|0;
 $33 = $32&65535;
 $34 = (($33) + 1)|0;
 $35 = Math_imul($30, $34)|0;
 $size = $35;
 $36 = $size;
 $37 = (_malloc($36)|0);
 $38 = ((($backup)) + 8|0);
 HEAP32[$38>>2] = $37;
 $39 = ((($backup)) + 8|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ($40|0)!=(0|0);
 if (!($41)) {
  STACKTOP = sp;return;
 }
 $42 = ((($backup)) + 8|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ((($3)) + 104|0);
 $45 = ((($44)) + 8|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = $size;
 _memcpy(($43|0),($46|0),($47|0))|0;
 $48 = ((($3)) + 3804|0);
 $49 = ((($48)) + 4|0);
 $50 = HEAP16[$49>>1]|0;
 $51 = $50 << 16 >> 16;
 $52 = ($51|0)!=(0);
 if ($52) {
  $53 = ((($3)) + 3804|0);
  $54 = ((($53)) + 8|0);
  $55 = HEAP16[$54>>1]|0;
  $56 = $55 << 16 >> 16;
  $57 = (13 - ($56))|0;
  $58 = (__Z3MINIiET_S0_S0_($57,13)|0);
  $index = $58;
  $59 = $index;
  $60 = ((($3)) + 660|0);
  $61 = (($60) + ($59<<2)|0);
  $62 = HEAP32[$61>>2]|0;
  $p = $62;
  $63 = ((($3)) + 104|0);
  $64 = ((($63)) + 2|0);
  $65 = HEAP16[$64>>1]|0;
  $66 = $65&65535;
  $67 = ((($3)) + 8|0);
  $68 = HEAP8[$67>>0]|0;
  $69 = $68&1;
  $70 = $69 ? 19 : 21;
  $71 = (($66) - ($70))|0;
  $72 = $p;
  $73 = (__ZL15getBitmapHeightPKh($72)|0);
  $74 = (($71) - ($73))|0;
  $y1 = $74;
  $75 = $y1;
  $76 = $p;
  $77 = ((($3)) + 104|0);
  __ZN4Game10drawObjectEiiPKhP11SceneBitmap($3,22,$75,$76,$77);
  $78 = ((($3)) + 3804|0);
  $79 = ((($78)) + 6|0);
  $80 = HEAP16[$79>>1]|0;
  $81 = $80 << 16 >> 16;
  $82 = ($81|0)<(5);
  if ($82) {
   $83 = ((($3)) + 3804|0);
   $84 = ((($83)) + 8|0);
   $85 = HEAP16[$84>>1]|0;
   $86 = $85 << 16 >> 16;
   $87 = ($86|0)<=(0);
   $88 = $87 ? 0 : 1;
   $index = $88;
   $89 = ((($3)) + 3804|0);
   $90 = ((($89)) + 6|0);
   $91 = HEAP16[$90>>1]|0;
   $92 = $91 << 16 >> 16;
   $93 = $index;
   $94 = ((($3)) + 716|0);
   $95 = (($94) + (($93*20)|0)|0);
   $96 = (($95) + ($92<<2)|0);
   $97 = HEAP32[$96>>2]|0;
   $p = $97;
   $98 = ((($3)) + 104|0);
   $99 = ((($98)) + 2|0);
   $100 = HEAP16[$99>>1]|0;
   $101 = $100&65535;
   $102 = ((($3)) + 8|0);
   $103 = HEAP8[$102>>0]|0;
   $104 = $103&1;
   $105 = $104 ? 29 : 31;
   $106 = (($101) - ($105))|0;
   $107 = $p;
   $108 = (__ZL15getBitmapHeightPKh($107)|0);
   $109 = (($106) - ($108))|0;
   $y1 = $109;
   $110 = $y1;
   $111 = $p;
   $112 = ((($3)) + 104|0);
   __ZN4Game10drawObjectEiiPKhP11SceneBitmap($3,33,$110,$111,$112);
  }
 }
 $113 = ((($3)) + 8|0);
 $114 = HEAP8[$113>>0]|0;
 $115 = $114&1;
 if (!($115)) {
  $116 = ((($3)) + 3804|0);
  $117 = ((($116)) + 2|0);
  $118 = HEAP16[$117>>1]|0;
  $119 = $118 << 16 >> 16;
  $120 = ($119|0)!=(0);
  if ($120) {
   $121 = ((($3)) + 104|0);
   $122 = ((($121)) + 2|0);
   $123 = HEAP16[$122>>1]|0;
   $124 = $123&65535;
   $125 = (($124) - 36)|0;
   $126 = ((($3)) + 756|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = (__ZL15getBitmapHeightPKh($127)|0);
   $129 = (($125) - ($128))|0;
   $y2 = $129;
   $130 = $y2;
   $131 = ((($3)) + 756|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = ((($3)) + 104|0);
   __ZN4Game10drawObjectEiiPKhP11SceneBitmap($3,22,$130,$132,$133);
  }
 }
 $134 = ((($3)) + 3804|0);
 $135 = HEAP16[$134>>1]|0;
 $136 = $135 << 16 >> 16;
 $137 = ($136|0)>=(10);
 if ($137) {
  $141 = 10;
 } else {
  $138 = ((($3)) + 3804|0);
  $139 = HEAP16[$138>>1]|0;
  $140 = $139 << 16 >> 16;
  $141 = $140;
 }
 $index3 = $141;
 $142 = ((($3)) + 856|0);
 $143 = HEAP32[$142>>2]|0;
 $144 = $index3;
 $145 = ((($3)) + 132|0);
 $146 = (($145) + (($144*48)|0)|0);
 $147 = (($146) + ($143<<2)|0);
 $148 = HEAP32[$147>>2]|0;
 $lifeBarFrame = $148;
 $149 = ((($3)) + 8|0);
 $150 = HEAP8[$149>>0]|0;
 $151 = $150&1;
 $152 = $151 ? 23 : 314;
 $153 = ((($3)) + 104|0);
 $154 = ((($153)) + 2|0);
 $155 = HEAP16[$154>>1]|0;
 $156 = $155&65535;
 $157 = ((($3)) + 8|0);
 $158 = HEAP8[$157>>0]|0;
 $159 = $158&1;
 $160 = $159 ? 52 : 51;
 $161 = (($156) - ($160))|0;
 $162 = $lifeBarFrame;
 $163 = (__ZL15getBitmapHeightPKh($162)|0);
 $164 = (($161) - ($163))|0;
 $165 = $lifeBarFrame;
 $166 = ((($3)) + 104|0);
 __ZN4Game10drawObjectEiiPKhP11SceneBitmap($3,$152,$164,$165,$166);
 $167 = ((($3)) + 4452|0);
 $168 = HEAP32[$167>>2]|0;
 $169 = ($168|0)<(3);
 if ($169) {
  $170 = ((($3)) + 4452|0);
  $171 = HEAP32[$170>>2]|0;
  $172 = ((($3)) + 120|0);
  $173 = (($172) + ($171<<2)|0);
  $174 = HEAP32[$173>>2]|0;
  $p4 = $174;
  $175 = ((($3)) + 104|0);
  $176 = ((($175)) + 2|0);
  $177 = HEAP16[$176>>1]|0;
  $178 = $177&65535;
  $179 = ((($3)) + 4452|0);
  $180 = HEAP32[$179>>2]|0;
  $181 = (240 + ($180<<3)|0);
  $182 = ((($181)) + 4|0);
  $183 = HEAP32[$182>>2]|0;
  $184 = (($178) - ($183))|0;
  $185 = $p4;
  $186 = (__ZL15getBitmapHeightPKh($185)|0);
  $187 = (($184) - ($186))|0;
  $y5 = $187;
  $188 = ((($3)) + 4452|0);
  $189 = HEAP32[$188>>2]|0;
  $190 = (240 + ($189<<3)|0);
  $191 = HEAP32[$190>>2]|0;
  $x = $191;
  $192 = ((($3)) + 8|0);
  $193 = HEAP8[$192>>0]|0;
  $194 = $193&1;
  if ($194) {
   $195 = $x;
   $196 = (($195) - 22)|0;
   $x = $196;
  }
  $197 = $x;
  $198 = $y5;
  $199 = $p4;
  $200 = ((($3)) + 104|0);
  __ZN4Game10drawObjectEiiPKhP11SceneBitmap($3,$197,$198,$199,$200);
 }
 $i6 = 0;
 while(1) {
  $201 = $i6;
  $202 = ((($3)) + 79608|0);
  $203 = HEAP32[$202>>2]|0;
  $204 = (__Z3MINIiET_S0_S0_($203,4)|0);
  $205 = ($201|0)<($204|0);
  if (!($205)) {
   break;
  }
  $206 = $i6;
  $207 = ((($3)) + 79048|0);
  $208 = (($207) + (($206*28)|0)|0);
  $209 = ((($208)) + 20|0);
  $210 = HEAP32[$209>>2]|0;
  $bagObjectData = $210;
  $211 = ((($3)) + 8|0);
  $212 = HEAP8[$211>>0]|0;
  $213 = $212&1;
  $214 = $213 ? 239 : 261;
  $215 = $i6;
  $216 = $215<<5;
  $217 = (($214) + ($216))|0;
  $218 = $bagObjectData;
  $219 = (__ZL14getBitmapWidthPKh($218)|0);
  $220 = (32 - ($219))|0;
  $221 = (($220|0) / 2)&-1;
  $222 = (($217) + ($221))|0;
  $x7 = $222;
  $223 = ((($3)) + 104|0);
  $224 = ((($223)) + 2|0);
  $225 = HEAP16[$224>>1]|0;
  $226 = $225&65535;
  $227 = (($226) - 3)|0;
  $228 = $bagObjectData;
  $229 = (__ZL15getBitmapHeightPKh($228)|0);
  $230 = (40 - ($229))|0;
  $231 = (($230|0) / 2)&-1;
  $232 = (($227) - ($231))|0;
  $233 = $bagObjectData;
  $234 = (__ZL15getBitmapHeightPKh($233)|0);
  $235 = (($232) - ($234))|0;
  $y8 = $235;
  $236 = $x7;
  $237 = $y8;
  $238 = $bagObjectData;
  $239 = ((($3)) + 104|0);
  __ZN4Game10drawObjectEiiPKhP11SceneBitmap($3,$236,$237,$238,$239);
  $240 = $i6;
  $241 = (($240) + 1)|0;
  $i6 = $241;
 }
 $242 = ((($3)) + 4460|0);
 $243 = HEAP32[$242>>2]|0;
 $244 = ($243|0)>=(0);
 if ($244) {
  $245 = ((($3)) + 4460|0);
  $246 = HEAP32[$245>>2]|0;
  $247 = ($246|0)<(4);
  if ($247) {
   $248 = ((($3)) + 79608|0);
   $249 = HEAP32[$248>>2]|0;
   $250 = ($249|0)!=(0);
   if ($250) {
    $251 = ((($3)) + 4452|0);
    $252 = HEAP32[$251>>2]|0;
    $253 = ($252|0)==(3);
    if ($253) {
     $254 = ((($3)) + 808|0);
     $255 = HEAP32[$254>>2]|0;
     $256 = ((($3)) + 768|0);
     $257 = (($256) + ($255<<2)|0);
     $258 = HEAP32[$257>>2]|0;
     $261 = $258;
    } else {
     $259 = ((($3)) + 768|0);
     $260 = HEAP32[$259>>2]|0;
     $261 = $260;
    }
    $p9 = $261;
    $262 = ((($3)) + 8|0);
    $263 = HEAP8[$262>>0]|0;
    $264 = $263&1;
    $265 = $264 ? 247 : 269;
    $266 = ((($3)) + 4460|0);
    $267 = HEAP32[$266>>2]|0;
    $268 = $267<<5;
    $269 = (($265) + ($268))|0;
    $270 = ((($3)) + 104|0);
    $271 = ((($270)) + 2|0);
    $272 = HEAP16[$271>>1]|0;
    $273 = $272&65535;
    $274 = (($273) - 32)|0;
    $275 = $p9;
    $276 = (__ZL15getBitmapHeightPKh($275)|0);
    $277 = (($274) - ($276))|0;
    $278 = $p9;
    $279 = ((($3)) + 104|0);
    __ZN4Game10drawObjectEiiPKhP11SceneBitmap($3,$269,$277,$278,$279);
   }
  }
 }
 $280 = ((($3)) + 8|0);
 $281 = HEAP8[$280>>0]|0;
 $282 = $281&1;
 if (!($282)) {
  $283 = ((($3)) + 3804|0);
  $284 = ((($283)) + 2|0);
  $285 = HEAP16[$284>>1]|0;
  $286 = $285 << 16 >> 16;
  $287 = ($286|0)==(1);
  if ($287) {
   $288 = ((($3)) + 852|0);
   $289 = HEAP32[$288>>2]|0;
   $290 = ((($3)) + 812|0);
   $291 = (($290) + ($289<<2)|0);
   $292 = HEAP32[$291>>2]|0;
   $295 = $292;
  } else {
   $293 = ((($3)) + 812|0);
   $294 = HEAP32[$293>>2]|0;
   $295 = $294;
  }
  $weaponImage1 = $295;
  $296 = ((($3)) + 104|0);
  $297 = ((($296)) + 2|0);
  $298 = HEAP16[$297>>1]|0;
  $299 = $298&65535;
  $300 = (($299) - 38)|0;
  $301 = $weaponImage1;
  $302 = (__ZL15getBitmapHeightPKh($301)|0);
  $303 = (($300) - ($302))|0;
  $304 = $weaponImage1;
  $305 = ((($3)) + 104|0);
  __ZN4Game10drawObjectEiiPKhP11SceneBitmap($3,87,$303,$304,$305);
  $306 = ((($3)) + 3804|0);
  $307 = ((($306)) + 4|0);
  $308 = HEAP16[$307>>1]|0;
  $309 = $308 << 16 >> 16;
  $310 = ($309|0)==(1);
  if ($310) {
   $311 = ((($3)) + 852|0);
   $312 = HEAP32[$311>>2]|0;
   $313 = ((($3)) + 812|0);
   $314 = (($313) + ($312<<2)|0);
   $315 = HEAP32[$314>>2]|0;
   $318 = $315;
  } else {
   $316 = ((($3)) + 812|0);
   $317 = HEAP32[$316>>2]|0;
   $318 = $317;
  }
  $weaponImage2 = $318;
  $319 = ((($3)) + 104|0);
  $320 = ((($319)) + 2|0);
  $321 = HEAP16[$320>>1]|0;
  $322 = $321&65535;
  $323 = (($322) - 25)|0;
  $324 = $weaponImage2;
  $325 = (__ZL15getBitmapHeightPKh($324)|0);
  $326 = (($323) - ($325))|0;
  $327 = $weaponImage2;
  $328 = ((($3)) + 104|0);
  __ZN4Game10drawObjectEiiPKhP11SceneBitmap($3,87,$326,$327,$328);
 }
 $329 = ((($3)) + 24|0);
 $330 = HEAP32[$329>>2]|0;
 $331 = HEAP32[$330>>2]|0;
 $332 = ((($331)) + 24|0);
 $333 = HEAP32[$332>>2]|0;
 $334 = $1;
 $335 = $2;
 $336 = ((($3)) + 104|0);
 $337 = HEAP16[$336>>1]|0;
 $338 = $337&65535;
 $339 = (($338) + 1)|0;
 $340 = ((($3)) + 104|0);
 $341 = ((($340)) + 2|0);
 $342 = HEAP16[$341>>1]|0;
 $343 = $342&65535;
 $344 = (($343) + 1)|0;
 $345 = ((($3)) + 104|0);
 $346 = ((($345)) + 8|0);
 $347 = HEAP32[$346>>2]|0;
 $348 = ((($3)) + 104|0);
 $349 = ((($348)) + 4|0);
 $350 = HEAP16[$349>>1]|0;
 $351 = $350&65535;
 FUNCTION_TABLE_viiiiiiii[$333 & 127]($330,$334,$335,$339,$344,$347,$351,0);
 $352 = ((($3)) + 104|0);
 $353 = ((($352)) + 8|0);
 $354 = HEAP32[$353>>2]|0;
 $355 = ((($backup)) + 8|0);
 $356 = HEAP32[$355>>2]|0;
 $357 = $size;
 _memcpy(($354|0),($356|0),($357|0))|0;
 $358 = ((($backup)) + 8|0);
 $359 = HEAP32[$358>>2]|0;
 _free($359);
 STACKTOP = sp;return;
}
function __Z3MINIiET_S0_S0_($v1,$v2) {
 $v1 = $v1|0;
 $v2 = $v2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v1;
 $1 = $v2;
 $2 = $0;
 $3 = $1;
 $4 = ($2|0)<($3|0);
 $5 = $0;
 $6 = $1;
 $7 = $4 ? $5 : $6;
 STACKTOP = sp;return ($7|0);
}
function __ZL14getBitmapWidthPKh($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 $2 = (__Z14READ_LE_UINT16PKv($1)|0);
 $3 = $2&65535;
 $4 = (($3) + 1)|0;
 STACKTOP = sp;return ($4|0);
}
function __ZL15getBitmapHeightPKh($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 $2 = ((($1)) + 2|0);
 $3 = (__Z14READ_LE_UINT16PKv($2)|0);
 $4 = $3&65535;
 $5 = (($4) + 1)|0;
 STACKTOP = sp;return ($5|0);
}
function __Z14READ_LE_UINT16PKv($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ptr;
 $1 = $0;
 $b = $1;
 $2 = $b;
 $3 = ((($2)) + 1|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $5 << 8;
 $7 = $b;
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = $6 | $9;
 $11 = $10&65535;
 STACKTOP = sp;return ($11|0);
}
function __Z10decodeLzssPKhPh($src,$dst) {
 $src = $src|0;
 $dst = $dst|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $code = 0, $compressedData = 0, $crc = 0;
 var $decodeSize = 0, $i = 0, $i1 = 0, $inputSize = 0, $offset = 0, $outputSize = 0, $size = 0, $stream = 0, $sum = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $stream = sp + 32|0;
 $1 = $src;
 $2 = $dst;
 $3 = $1;
 $4 = (__Z14READ_LE_UINT32PKv($3)|0);
 $outputSize = $4;
 $5 = $1;
 $6 = ((($5)) + 4|0);
 $1 = $6;
 $7 = $1;
 $8 = (__Z14READ_LE_UINT32PKv($7)|0);
 $inputSize = $8;
 $9 = $1;
 $10 = ((($9)) + 4|0);
 $1 = $10;
 $11 = $1;
 $compressedData = $11;
 L1: while(1) {
  $12 = $inputSize;
  $13 = ($12|0)!=(0);
  if (!($13)) {
   label = 28;
   break;
  }
  $14 = $inputSize;
  $decodeSize = $14;
  $15 = $decodeSize;
  $16 = ($15|0)>(256);
  $$ = $16 ? 256 : $14;
  $decodeSize = $$;
  $17 = $decodeSize;
  $18 = $inputSize;
  $19 = (($18) - ($17))|0;
  $inputSize = $19;
  $20 = $compressedData;
  $1 = $20;
  $21 = $1;
  $22 = (__Z14READ_LE_UINT16PKv($21)|0);
  $crc = $22;
  $23 = $1;
  $24 = ((($23)) + 2|0);
  $1 = $24;
  $sum = 0;
  $i = 0;
  while(1) {
   $25 = $i;
   $26 = $decodeSize;
   $27 = $26<<3;
   $28 = (($27) - 1)|0;
   $29 = ($25|0)<($28|0);
   $30 = $sum;
   $31 = $30&65535;
   if (!($29)) {
    break;
   }
   $32 = $31 & 1;
   $33 = $32 << 15;
   $34 = $sum;
   $35 = $34&65535;
   $36 = $35 >> 1;
   $37 = $33 | $36;
   $38 = $37&65535;
   $sum = $38;
   $39 = $1;
   $40 = (__Z14READ_LE_UINT16PKv($39)|0);
   $41 = $40&65535;
   $42 = $sum;
   $43 = $42&65535;
   $44 = $43 ^ $41;
   $45 = $44&65535;
   $sum = $45;
   $46 = $1;
   $47 = ((($46)) + 2|0);
   $1 = $47;
   $48 = $i;
   $49 = (($48) + 1)|0;
   $i = $49;
  }
  $50 = $crc;
  $51 = $50&65535;
  $52 = ($31|0)!=($51|0);
  if ($52) {
   $53 = $crc;
   $54 = $53&65535;
   $55 = $sum;
   $56 = $55&65535;
   HEAP32[$vararg_buffer>>2] = $54;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $56;
   __Z5errorPKcz(21716,$vararg_buffer);
  }
  $57 = $compressedData;
  $58 = ((($57)) + 2|0);
  $1 = $58;
  $59 = $1;
  __ZN9BitStream5resetEPKh($stream,$59);
  L11: while(1) {
   $60 = (__ZN9BitStream10getNextBitEv($stream)|0);
   if ($60) {
    $61 = (__ZN9BitStream11getNextByteEv($stream)|0);
    $62 = $2;
    $63 = ((($62)) + 1|0);
    $2 = $63;
    HEAP8[$62>>0] = $61;
    continue;
   }
   $size = 0;
   $offset = 0;
   $64 = (__ZN9BitStream10getNextBitEv($stream)|0);
   do {
    if ($64) {
     $65 = (__ZN9BitStream11getNextWordEv($stream)|0);
     $code = $65;
     $66 = $code;
     $67 = $66&65535;
     $68 = $67 >> 3;
     $69 = $68 & 7936;
     $70 = 57344 | $69;
     $71 = $code;
     $72 = $71&65535;
     $73 = $72 & 255;
     $74 = $70 | $73;
     $75 = $74&65535;
     $offset = $75;
     $76 = $code;
     $77 = $76&65535;
     $78 = $77 & 1792;
     $79 = ($78|0)!=(0);
     if ($79) {
      $80 = $code;
      $81 = $80&65535;
      $82 = $81 >> 8;
      $83 = $82 & 7;
      $84 = (($83) + 2)|0;
      $85 = $84&65535;
      $size = $85;
      break;
     }
     $86 = (__ZN9BitStream11getNextByteEv($stream)|0);
     $87 = $86&255;
     $code = $87;
     $88 = $code;
     $89 = $88&65535;
     $90 = ($89|0)==(0);
     if ($90) {
      label = 15;
      break L1;
     }
     $92 = $code;
     $93 = $92&65535;
     $94 = ($93|0)==(1);
     if ($94) {
      continue L11;
     }
     $95 = $code;
     $96 = $95&65535;
     $97 = ($96|0)==(2);
     if ($97) {
      break L11;
     }
     $98 = $code;
     $99 = $98&65535;
     $100 = (($99) + 1)|0;
     $101 = $100&65535;
     $size = $101;
    } else {
     $i1 = 0;
     while(1) {
      $102 = $i1;
      $103 = ($102|0)<(2);
      $104 = $size;
      $105 = $104&65535;
      if (!($103)) {
       break;
      }
      $106 = $105 << 1;
      $107 = $106&65535;
      $size = $107;
      $108 = (__ZN9BitStream10getNextBitEv($stream)|0);
      if ($108) {
       $109 = $size;
       $110 = $109&65535;
       $111 = $110 | 1;
       $112 = $111&65535;
       $size = $112;
      }
      $113 = $i1;
      $114 = (($113) + 1)|0;
      $i1 = $114;
     }
     $115 = (($105) + 2)|0;
     $116 = $115&65535;
     $size = $116;
     $117 = (__ZN9BitStream11getNextByteEv($stream)|0);
     $118 = $117&255;
     $119 = 65280 | $118;
     $120 = $119&65535;
     $offset = $120;
    }
   } while(0);
   while(1) {
    $121 = $size;
    $122 = (($121) + -1)<<16>>16;
    $size = $122;
    $123 = ($121<<16>>16)!=(0);
    if (!($123)) {
     continue L11;
    }
    $124 = $2;
    $125 = $offset;
    $126 = $125 << 16 >> 16;
    $127 = (($124) + ($126)|0);
    $128 = HEAP8[$127>>0]|0;
    $129 = $2;
    HEAP8[$129>>0] = $128;
    $130 = $2;
    $131 = ((($130)) + 1|0);
    $2 = $131;
   }
  }
  $132 = $compressedData;
  $133 = ((($132)) + 4096|0);
  $compressedData = $133;
 }
 if ((label|0) == 15) {
  $91 = $outputSize;
  $0 = $91;
  $135 = $0;
  STACKTOP = sp;return ($135|0);
 }
 else if ((label|0) == 28) {
  $134 = $outputSize;
  $0 = $134;
  $135 = $0;
  STACKTOP = sp;return ($135|0);
 }
 return (0)|0;
}
function __Z10decodeZlibPKhPh($src,$dst) {
 $src = $src|0;
 $dst = $dst|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $ret = 0, $s = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $s = sp + 8|0;
 $1 = $src;
 $2 = $dst;
 dest=$s; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $3 = (_inflateInit_($s,21758,56)|0);
 $ret = $3;
 $4 = $ret;
 $5 = ($4|0)==(0);
 if (!($5)) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $6 = $1;
 $7 = ((($6)) + 8|0);
 HEAP32[$s>>2] = $7;
 $8 = $1;
 $9 = (__Z14READ_LE_UINT32PKv($8)|0);
 $10 = ((($s)) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = $2;
 $12 = ((($s)) + 12|0);
 HEAP32[$12>>2] = $11;
 $13 = $1;
 $14 = ((($13)) + 4|0);
 $15 = (__Z14READ_LE_UINT32PKv($14)|0);
 $16 = ((($s)) + 16|0);
 HEAP32[$16>>2] = $15;
 $17 = (_inflate($s,0)|0);
 $18 = ($17|0)==(1);
 if ($18) {
  $19 = ((($s)) + 20|0);
  $20 = HEAP32[$19>>2]|0;
  $ret = $20;
 } else {
  $ret = 0;
 }
 (_inflateEnd($s)|0);
 $21 = $ret;
 $0 = $21;
 $22 = $0;
 STACKTOP = sp;return ($22|0);
}
function __Z14READ_LE_UINT32PKv($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $b = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ptr;
 $1 = $0;
 $b = $1;
 $2 = $b;
 $3 = ((($2)) + 3|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $5 << 24;
 $7 = $b;
 $8 = ((($7)) + 2|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $10 << 16;
 $12 = $6 | $11;
 $13 = $b;
 $14 = ((($13)) + 1|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = $16 << 8;
 $18 = $12 | $17;
 $19 = $b;
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 $22 = $18 | $21;
 STACKTOP = sp;return ($22|0);
}
function __ZN9BitStream5resetEPKh($this,$src) {
 $this = $this|0;
 $src = $src|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $src;
 $2 = $0;
 $3 = $1;
 HEAP32[$2>>2] = $3;
 $4 = ((($2)) + 4|0);
 HEAP8[$4>>0] = 0;
 $5 = HEAP32[$2>>2]|0;
 $6 = (__Z14READ_LE_UINT16PKv($5)|0);
 $7 = ((($2)) + 6|0);
 HEAP16[$7>>1] = $6;
 $8 = HEAP32[$2>>2]|0;
 $9 = ((($8)) + 2|0);
 HEAP32[$2>>2] = $9;
 $10 = ((($2)) + 8|0);
 HEAP32[$10>>2] = 16;
 STACKTOP = sp;return;
}
function __ZN9BitStream10getNextBitEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 6|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = $4 & 1;
 $6 = ($5|0)==(1);
 $7 = ((($1)) + 4|0);
 $8 = $6&1;
 HEAP8[$7>>0] = $8;
 $9 = ((($1)) + 6|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10&65535;
 $12 = $11 >> 1;
 $13 = $12&65535;
 HEAP16[$9>>1] = $13;
 $14 = ((($1)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + -1)|0;
 HEAP32[$14>>2] = $16;
 $17 = ((($1)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0);
 if (!($19)) {
  $26 = ((($1)) + 4|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $27&1;
  STACKTOP = sp;return ($28|0);
 }
 $20 = HEAP32[$1>>2]|0;
 $21 = (__Z14READ_LE_UINT16PKv($20)|0);
 $22 = ((($1)) + 6|0);
 HEAP16[$22>>1] = $21;
 $23 = HEAP32[$1>>2]|0;
 $24 = ((($23)) + 2|0);
 HEAP32[$1>>2] = $24;
 $25 = ((($1)) + 8|0);
 HEAP32[$25>>2] = 16;
 $26 = ((($1)) + 4|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27&1;
 STACKTOP = sp;return ($28|0);
}
function __ZN9BitStream11getNextByteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $b = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 1|0);
 HEAP32[$1>>2] = $3;
 $4 = HEAP8[$2>>0]|0;
 $b = $4;
 $5 = $b;
 STACKTOP = sp;return ($5|0);
}
function __ZN9BitStream11getNextWordEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (__Z14READ_LE_UINT16PKv($2)|0);
 $w = $3;
 $4 = HEAP32[$1>>2]|0;
 $5 = ((($4)) + 2|0);
 HEAP32[$1>>2] = $5;
 $6 = $w;
 STACKTOP = sp;return ($6|0);
}
function __ZN4Game19redrawDialogueTextsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $choiceColor = 0, $chr = 0, $chr3 = 0, $color = 0, $i = 0, $i1 = 0, $lastStringLen = 0, $lastWord = 0, $p = 0, $p2 = 0, $stringLen = 0, $substring = 0, $substringCount = 0, $substringOffset = 0, $textBuffer = 0, $vararg_buffer = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $substringOffset = sp + 64|0;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(16,21764,$vararg_buffer);
 $i = 0;
 L1: while(1) {
  $2 = $i;
  $3 = ((($1)) + 3120|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($2|0)<($4|0);
  if (!($5)) {
   break;
  }
  $lastWord = 0;
  $lastStringLen = 0;
  $stringLen = 0;
  $substringCount = 0;
  $6 = $i;
  $7 = ((($1)) + 3000|0);
  $8 = (($7) + ($6<<2)|0);
  $9 = HEAP32[$8>>2]|0;
  $p = $9;
  while(1) {
   $10 = $p;
   $11 = HEAP8[$10>>0]|0;
   $12 = ($11<<24>>24)!=(0);
   if (!($12)) {
    break;
   }
   $13 = $p;
   $14 = HEAP8[$13>>0]|0;
   $15 = $14&255;
   $chr = $15;
   $16 = $chr;
   $17 = (29747 + ($16)|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = $18&255;
   $20 = (($19) + 1)|0;
   $21 = $stringLen;
   $22 = (($21) + ($20))|0;
   $stringLen = $22;
   $23 = $stringLen;
   $24 = ((($1)) + 3128|0);
   $25 = ((($24)) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($23|0)>($26|0);
   if ($27) {
    $28 = $substringCount;
    $29 = ($28|0)<(8);
    if (!($29)) {
     label = 7;
     break L1;
    }
    $30 = $lastWord;
    $31 = $substringCount;
    $32 = $i;
    $33 = (($substringOffset) + ($32<<5)|0);
    $34 = (($33) + ($31<<2)|0);
    HEAP32[$34>>2] = $30;
    $35 = $substringCount;
    $36 = (($35) + 1)|0;
    $substringCount = $36;
    $37 = $lastStringLen;
    $38 = $stringLen;
    $39 = (($38) - ($37))|0;
    $stringLen = $39;
   }
   $40 = $chr;
   $41 = ($40|0)==(32);
   if ($41) {
    $42 = $p;
    $lastWord = $42;
    $43 = $stringLen;
    $lastStringLen = $43;
   }
   $44 = $p;
   $45 = ((($44)) + 1|0);
   $p = $45;
  }
  $46 = $i;
  $47 = (($46) + 1)|0;
  $i = $47;
 }
 if ((label|0) == 7) {
  ___assert_fail((21792|0),(21811|0),60,(21824|0));
  // unreachable;
 }
 $48 = ((($1)) + 3128|0);
 $49 = ((($48)) + 8|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ((($1)) + 3128|0);
 $52 = ((($51)) + 12|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = Math_imul($50, $53)|0;
 $55 = (_malloc($54)|0);
 $textBuffer = $55;
 $56 = $textBuffer;
 $57 = ($56|0)!=(0|0);
 if (!($57)) {
  STACKTOP = sp;return;
 }
 $58 = $textBuffer;
 $59 = ((($1)) + 3128|0);
 $60 = ((($59)) + 8|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = ((($1)) + 3128|0);
 $63 = ((($62)) + 12|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = Math_imul($61, $64)|0;
 _memset(($58|0),0,($65|0))|0;
 $y = 0;
 $i1 = 0;
 while(1) {
  $66 = $i1;
  $67 = ((($1)) + 3120|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = ($66|0)<($68|0);
  if (!($69)) {
   break;
  }
  $70 = ((($1)) + 2168|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = $i1;
  $73 = ($71|0)==($72|0);
  $74 = $73 ? 13301503 : 7194362;
  $color = $74;
  $75 = ((($1)) + 64|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = ((($76)) + 40|0);
  $78 = $color;
  $79 = (__ZL21findBestMatchingColorPKhi($77,$78)|0);
  $choiceColor = $79;
  $x = 0;
  $substring = 0;
  $80 = $i1;
  $81 = ((($1)) + 3000|0);
  $82 = (($81) + ($80<<2)|0);
  $83 = HEAP32[$82>>2]|0;
  $p2 = $83;
  while(1) {
   $84 = $p2;
   $85 = HEAP8[$84>>0]|0;
   $86 = ($85<<24>>24)!=(0);
   if (!($86)) {
    break;
   }
   $87 = $p2;
   $88 = $substring;
   $89 = $i1;
   $90 = (($substringOffset) + ($89<<5)|0);
   $91 = (($90) + ($88<<2)|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = ($87|0)==($92|0);
   if ($93) {
    $94 = $substring;
    $95 = (($94) + 1)|0;
    $substring = $95;
    $96 = $y;
    $97 = (($96) + 16)|0;
    $y = $97;
    $x = 0;
   } else {
    $98 = $p2;
    $99 = HEAP8[$98>>0]|0;
    $100 = $99&255;
    $chr3 = $100;
    $101 = $y;
    $102 = (($101) + 16)|0;
    $103 = ((($1)) + 3128|0);
    $104 = ((($103)) + 12|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = ($102|0)>=($105|0);
    if ($106) {
     break;
    }
    $107 = $textBuffer;
    $108 = ((($1)) + 3128|0);
    $109 = ((($108)) + 12|0);
    $110 = HEAP32[$109>>2]|0;
    $111 = (($110) - 1)|0;
    $112 = $y;
    $113 = (($111) - ($112))|0;
    $114 = ((($1)) + 3128|0);
    $115 = ((($114)) + 8|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = Math_imul($113, $116)|0;
    $118 = (($107) + ($117)|0);
    $119 = $x;
    $120 = (($118) + ($119)|0);
    $121 = ((($1)) + 3128|0);
    $122 = ((($121)) + 8|0);
    $123 = HEAP32[$122>>2]|0;
    $124 = $chr3;
    $125 = $choiceColor;
    __ZL8drawCharPhiPKtih($120,$123,11056,$124,$125);
    $126 = $chr3;
    $127 = (29747 + ($126)|0);
    $128 = HEAP8[$127>>0]|0;
    $129 = $128&255;
    $130 = (($129) + 1)|0;
    $131 = $x;
    $132 = (($131) + ($130))|0;
    $x = $132;
   }
   $133 = $p2;
   $134 = ((($133)) + 1|0);
   $p2 = $134;
  }
  $135 = $y;
  $136 = (($135) + 16)|0;
  $y = $136;
  $137 = $i1;
  $138 = (($137) + 1)|0;
  $i1 = $138;
 }
 $139 = ((($1)) + 24|0);
 $140 = HEAP32[$139>>2]|0;
 $141 = HEAP32[$140>>2]|0;
 $142 = ((($141)) + 24|0);
 $143 = HEAP32[$142>>2]|0;
 $144 = ((($1)) + 3128|0);
 $145 = HEAP32[$144>>2]|0;
 $146 = ((($1)) + 3128|0);
 $147 = ((($146)) + 4|0);
 $148 = HEAP32[$147>>2]|0;
 $149 = ((($1)) + 3128|0);
 $150 = ((($149)) + 8|0);
 $151 = HEAP32[$150>>2]|0;
 $152 = ((($1)) + 3128|0);
 $153 = ((($152)) + 12|0);
 $154 = HEAP32[$153>>2]|0;
 $155 = $textBuffer;
 $156 = ((($1)) + 3128|0);
 $157 = ((($156)) + 8|0);
 $158 = HEAP32[$157>>2]|0;
 FUNCTION_TABLE_viiiiiiii[$143 & 127]($140,$145,$148,$151,$154,$155,$158,1);
 $159 = $textBuffer;
 _free($159);
 STACKTOP = sp;return;
}
function __ZN4Game12initDialogueEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $spr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4Game9playMusicEPKc($1,21844);
 $spr = 0;
 while(1) {
  $2 = $spr;
  $3 = ($2|0)<(3);
  if (!($3)) {
   break;
  }
  $i = 0;
  while(1) {
   $4 = $i;
   $5 = ($4|0)<(105);
   if (!($5)) {
    break;
   }
   $6 = $i;
   $7 = $spr;
   $8 = ((($1)) + 908|0);
   $9 = (($8) + (($7*420)|0)|0);
   $10 = (($9) + ($6<<2)|0);
   HEAP32[$10>>2] = 0;
   $11 = $i;
   $12 = (($11) + 1)|0;
   $i = $12;
  }
  $13 = $spr;
  $14 = (($13) + 1)|0;
  $spr = $14;
 }
 $15 = (__ZN4Game8loadFileEPKcPhPj($1,21865,0,0)|0);
 $16 = ((($1)) + 3124|0);
 HEAP32[$16>>2] = $15;
 __ZN4Game18loadDialogueSpriteEi($1,0);
 __ZN4Game18loadDialogueSpriteEi($1,1);
 __ZN4Game18loadDialogueSpriteEi($1,2);
 $17 = ((($1)) + 4428|0);
 $18 = HEAP32[$17>>2]|0;
 __ZN4Game16loadDialogueDataEPKc($1,$18);
 $19 = ((($1)) + 24|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($20)) + 8|0);
 HEAP8[$21>>0] = 0;
 $22 = ((($1)) + 24|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($23)) + 8|0);
 $25 = ((($24)) + 6|0);
 HEAP8[$25>>0] = 0;
 $26 = ((($1)) + 24|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($27)) + 8|0);
 $29 = ((($28)) + 1|0);
 HEAP8[$29>>0] = 0;
 STACKTOP = sp;return;
}
function __ZN4Game18loadDialogueSpriteEi($this,$spr) {
 $this = $this|0;
 $spr = $spr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $count = 0, $fp = 0, $i = 0, $size = 0, $spriteFile = 0, $tag = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $fp = sp + 40|0;
 $0 = $this;
 $1 = $spr;
 $4 = $0;
 $5 = $1;
 HEAP32[$vararg_buffer>>2] = $5;
 __Z5debugtPKcz(16,21882,$vararg_buffer);
 $spriteFile = 21911;
 $6 = $1;
 switch ($6|0) {
 case 0:  {
  $7 = ((($4)) + 4432|0);
  $8 = HEAP32[$7>>2]|0;
  $spriteFile = $8;
  break;
 }
 case 1:  {
  $9 = ((($4)) + 4436|0);
  $10 = HEAP32[$9>>2]|0;
  $spriteFile = $10;
  break;
 }
 default: {
 }
 }
 $11 = ((($4)) + 16|0);
 $12 = $spriteFile;
 __ZN10FileHolderC2ER10FileSystemPKc($fp,$11,$12);
 __THREW__ = 0;
 $13 = (invoke_ii(157,($fp|0))|0);
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 L5: do {
  if (!($15)) {
   __THREW__ = 0;
   $16 = (invoke_ii(158,($13|0))|0);
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if (!($18)) {
    $19 = $16&65535;
    $tag = $19;
    $20 = $tag;
    $21 = ($20|0)!=(13651);
    if ($21) {
     $22 = $tag;
     __THREW__ = 0;
     HEAP32[$vararg_buffer1>>2] = $22;
     invoke_vii(159,(29021|0),($vararg_buffer1|0));
     $23 = __THREW__; __THREW__ = 0;
     $24 = $23&1;
     if ($24) {
      break;
     }
    }
    __THREW__ = 0;
    $29 = (invoke_ii(157,($fp|0))|0);
    $30 = __THREW__; __THREW__ = 0;
    $31 = $30&1;
    if (!($31)) {
     __THREW__ = 0;
     $32 = (invoke_ii(158,($29|0))|0);
     $33 = __THREW__; __THREW__ = 0;
     $34 = $33&1;
     if (!($34)) {
      $35 = $32&65535;
      $count = $35;
      $36 = $count;
      $37 = ($36|0)<=(105);
      if (!($37)) {
       __THREW__ = 0;
       invoke_viiii(161,(21927|0),(21811|0),258,(21940|0));
       $38 = __THREW__; __THREW__ = 0;
       break;
      }
      $i = 0;
      while(1) {
       $39 = $i;
       $40 = $count;
       $41 = ($39|0)<($40|0);
       if (!($41)) {
        break;
       }
       __THREW__ = 0;
       $42 = (invoke_ii(157,($fp|0))|0);
       $43 = __THREW__; __THREW__ = 0;
       $44 = $43&1;
       if ($44) {
        break L5;
       }
       __THREW__ = 0;
       $45 = (invoke_ii(158,($42|0))|0);
       $46 = __THREW__; __THREW__ = 0;
       $47 = $46&1;
       if ($47) {
        break L5;
       }
       $48 = $45&65535;
       $size = $48;
       $49 = $size;
       $50 = (($49) + 10)|0;
       __THREW__ = 0;
       $51 = (invoke_ii(162,($50|0))|0);
       $52 = __THREW__; __THREW__ = 0;
       $53 = $52&1;
       if ($53) {
        break L5;
       }
       $54 = $i;
       $55 = $1;
       $56 = ((($4)) + 908|0);
       $57 = (($56) + (($55*420)|0)|0);
       $58 = (($57) + ($54<<2)|0);
       HEAP32[$58>>2] = $51;
       $59 = $i;
       $60 = $1;
       $61 = ((($4)) + 908|0);
       $62 = (($61) + (($60*420)|0)|0);
       $63 = (($62) + ($59<<2)|0);
       $64 = HEAP32[$63>>2]|0;
       $65 = ($64|0)!=(0|0);
       if ($65) {
        __THREW__ = 0;
        $66 = (invoke_ii(157,($fp|0))|0);
        $67 = __THREW__; __THREW__ = 0;
        $68 = $67&1;
        if ($68) {
         break L5;
        }
        $69 = $i;
        $70 = $1;
        $71 = ((($4)) + 908|0);
        $72 = (($71) + (($70*420)|0)|0);
        $73 = (($72) + ($69<<2)|0);
        $74 = HEAP32[$73>>2]|0;
        $75 = $size;
        $76 = (($75) + 10)|0;
        __THREW__ = 0;
        (invoke_iiii(163,($66|0),($74|0),($76|0))|0);
        $77 = __THREW__; __THREW__ = 0;
        $78 = $77&1;
        if ($78) {
         break L5;
        }
       }
       $79 = $i;
       $80 = (($79) + 1)|0;
       $i = $80;
      }
      $81 = $count;
      $82 = $1;
      $83 = ((($4)) + 880|0);
      $84 = (($83) + ($82<<2)|0);
      HEAP32[$84>>2] = $81;
      $85 = $1;
      $86 = ((($4)) + 892|0);
      $87 = (($86) + ($85<<2)|0);
      HEAP32[$87>>2] = 0;
      __ZN10FileHolderD2Ev($fp);
      STACKTOP = sp;return;
     }
    }
   }
  }
 } while(0);
 $25 = ___cxa_find_matching_catch()|0;
 $26 = tempRet0;
 $2 = $25;
 $3 = $26;
 __THREW__ = 0;
 invoke_vi(160,($fp|0));
 $27 = __THREW__; __THREW__ = 0;
 $28 = $27&1;
 if ($28) {
  $90 = ___cxa_find_matching_catch(0|0)|0;
  $91 = tempRet0;
  ___clang_call_terminate($90);
  // unreachable;
 } else {
  $88 = $2;
  $89 = $3;
  ___resumeException($88|0);
  // unreachable;
 }
}
function __ZN4Game16loadDialogueDataEPKc($this,$filename) {
 $this = $this|0;
 $filename = $filename|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $fp = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $fp = sp + 16|0;
 $0 = $this;
 $1 = $filename;
 $4 = $0;
 $5 = $1;
 HEAP32[$vararg_buffer>>2] = $5;
 __Z5debugtPKcz(16,21959,$vararg_buffer);
 $6 = ((($4)) + 2172|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 if ($8) {
  $9 = ((($4)) + 2172|0);
  HEAP32[$9>>2] = 1;
 } else {
  __ZN4Game18unloadDialogueDataEv($4);
 }
 $10 = ((($4)) + 16|0);
 $11 = $1;
 __ZN10FileHolderC2ER10FileSystemPKc($fp,$10,$11);
 __THREW__ = 0;
 $12 = (invoke_ii(157,($fp|0))|0);
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if (!($14)) {
  __THREW__ = 0;
  $15 = (invoke_ii(164,($12|0))|0);
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if (!($17)) {
   $18 = ((($4)) + 2176|0);
   HEAP32[$18>>2] = $15;
   $19 = ((($4)) + 2176|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (($20) + 1)|0;
   __THREW__ = 0;
   $22 = (invoke_ii(162,($21|0))|0);
   $23 = __THREW__; __THREW__ = 0;
   $24 = $23&1;
   if (!($24)) {
    $25 = ((($4)) + 2180|0);
    HEAP32[$25>>2] = $22;
    $26 = ((($4)) + 2180|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($27|0)!=(0|0);
    if (!($28)) {
     __ZN10FileHolderD2Ev($fp);
     STACKTOP = sp;return;
    }
    $29 = ((($4)) + 2172|0);
    HEAP32[$29>>2] = 2;
    __THREW__ = 0;
    $30 = (invoke_ii(157,($fp|0))|0);
    $31 = __THREW__; __THREW__ = 0;
    $32 = $31&1;
    if (!($32)) {
     $33 = ((($4)) + 2180|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ((($4)) + 2176|0);
     $36 = HEAP32[$35>>2]|0;
     __THREW__ = 0;
     (invoke_iiii(163,($30|0),($34|0),($36|0))|0);
     $37 = __THREW__; __THREW__ = 0;
     $38 = $37&1;
     if (!($38)) {
      $39 = ((($4)) + 2176|0);
      $40 = HEAP32[$39>>2]|0;
      $41 = ((($4)) + 2180|0);
      $42 = HEAP32[$41>>2]|0;
      $43 = (($42) + ($40)|0);
      HEAP8[$43>>0] = 0;
      $44 = ((($4)) + 2180|0);
      $45 = HEAP32[$44>>2]|0;
      __THREW__ = 0;
      invoke_vi(165,($45|0));
      $46 = __THREW__; __THREW__ = 0;
      $47 = $46&1;
      if (!($47)) {
       __THREW__ = 0;
       invoke_vi(166,($4|0));
       $48 = __THREW__; __THREW__ = 0;
       $49 = $48&1;
       if (!($49)) {
        $50 = ((($4)) + 4424|0);
        $51 = HEAP32[$50>>2]|0;
        __THREW__ = 0;
        invoke_vii(167,($4|0),($51|0));
        $52 = __THREW__; __THREW__ = 0;
        $53 = $52&1;
        if (!($53)) {
         __ZN10FileHolderD2Ev($fp);
         STACKTOP = sp;return;
        }
       }
      }
     }
    }
   }
  }
 }
 $54 = ___cxa_find_matching_catch()|0;
 $55 = tempRet0;
 $2 = $54;
 $3 = $55;
 __THREW__ = 0;
 invoke_vi(160,($fp|0));
 $56 = __THREW__; __THREW__ = 0;
 $57 = $56&1;
 if ($57) {
  $60 = ___cxa_find_matching_catch(0|0)|0;
  $61 = tempRet0;
  ___clang_call_terminate($60);
  // unreachable;
 } else {
  $58 = $2;
  $59 = $3;
  ___resumeException($58|0);
  // unreachable;
 }
}
function __ZN4Game14handleDialogueEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $n = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(16,21986,$vararg_buffer);
 $2 = ((($1)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = $6 & 2;
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = ((($1)) + 24|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($10)) + 8|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $14 = $13 & -3;
  $15 = $14&255;
  HEAP8[$11>>0] = $15;
  $16 = ((($1)) + 904|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)==(0);
  if ($18) {
   $19 = ((($1)) + 2168|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ((($1)) + 3120|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (($22) - 1)|0;
   $24 = ($20|0)<($23|0);
   if ($24) {
    $25 = ((($1)) + 2168|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (($26) + 1)|0;
    HEAP32[$25>>2] = $27;
   }
  }
 }
 $28 = ((($1)) + 24|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($29)) + 8|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = $31&255;
 $33 = $32 & 1;
 $34 = ($33|0)!=(0);
 if ($34) {
  $35 = ((($1)) + 24|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ((($36)) + 8|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $38&255;
  $40 = $39 & -2;
  $41 = $40&255;
  HEAP8[$37>>0] = $41;
  $42 = ((($1)) + 904|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($43|0)==(0);
  if ($44) {
   $45 = ((($1)) + 2168|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)>(0);
   if ($47) {
    $48 = ((($1)) + 2168|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = (($49) + -1)|0;
    HEAP32[$48>>2] = $50;
   }
  }
 }
 $51 = ((($1)) + 24|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ((($52)) + 8|0);
 $54 = ((($53)) + 6|0);
 $55 = HEAP8[$54>>0]|0;
 $56 = $55&1;
 $57 = ((($1)) + 24|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = ((($58)) + 8|0);
 if ($56) {
  $60 = ((($59)) + 6|0);
  HEAP8[$60>>0] = 0;
  HEAP32[$1>>2] = 1;
  STACKTOP = sp;return;
 }
 $61 = ((($59)) + 1|0);
 $62 = HEAP8[$61>>0]|0;
 $63 = $62&1;
 do {
  if ($63) {
   $64 = ((($1)) + 24|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = ((($65)) + 8|0);
   $67 = ((($66)) + 1|0);
   HEAP8[$67>>0] = 0;
   $68 = ((($1)) + 3120|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = ($69|0)>(1);
   if ($70) {
    $71 = ((($1)) + 904|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ($72|0)==(0);
    if ($73) {
     $74 = ((($1)) + 2168|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = ((($1)) + 3040|0);
     $77 = (($76) + ($75<<2)|0);
     $78 = HEAP32[$77>>2]|0;
     (__ZN4Game18win16_sndPlaySoundEiPv($1,3,$78)|0);
     $79 = ((($1)) + 904|0);
     HEAP32[$79>>2] = 1;
     break;
    }
   }
   (__ZN4Game18win16_sndPlaySoundEiPv($1,6,0)|0);
  }
 } while(0);
 $80 = ((($1)) + 904|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = ($81|0)!=(0);
 do {
  if ($82) {
   $83 = (__ZN4Game18win16_sndPlaySoundEiPv($1,22,0)|0);
   $84 = ($83|0)!=(0);
   if ($84) {
    $85 = ((($1)) + 904|0);
    HEAP32[$85>>2] = 0;
    $86 = ((($1)) + 4788|0);
    $87 = ((($1)) + 2168|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = ((($1)) + 3080|0);
    $90 = (($89) + ($88<<2)|0);
    $91 = HEAP32[$90>>2]|0;
    (_strcpy($86,$91)|0);
    $92 = ((($1)) + 2168|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ((($1)) + 2988|0);
    $95 = (($94) + ($93)|0);
    $96 = HEAP8[$95>>0]|0;
    $97 = $96&1;
    if ($97) {
     $98 = ((($1)) + 2168|0);
     $99 = HEAP32[$98>>2]|0;
     $100 = ((($1)) + 3080|0);
     $101 = (($100) + ($99<<2)|0);
     $102 = HEAP32[$101>>2]|0;
     __ZN4Game11setupDialogEPKc($1,$102);
     $103 = ((($1)) + 3120|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104|0)==(0);
     if (!($105)) {
      break;
     }
     HEAP32[$1>>2] = 1;
     STACKTOP = sp;return;
    }
    $106 = ((($1)) + 4788|0);
    $107 = (_atoi($106)|0);
    $n = $107;
    $108 = $n;
    $109 = ($108|0)==(100);
    if ($109) {
     $110 = ((($1)) + 876|0);
     HEAP32[$110>>2] = 2;
     break;
    }
    $111 = ((($1)) + 872|0);
    HEAP32[$111>>2] = 1;
    $112 = ((($1)) + 4788|0);
    $113 = (_atoi($112)|0);
    $114 = ((($1)) + 868|0);
    HEAP32[$114>>2] = $113;
    STACKTOP = sp;return;
   }
  }
 } while(0);
 __ZN4Game24redrawDialogueBackgroundEv($1);
 $115 = ((($1)) + 876|0);
 $116 = HEAP32[$115>>2]|0;
 __ZN4Game20redrawDialogueSpriteEi($1,$116);
 $117 = ((($1)) + 876|0);
 $118 = HEAP32[$117>>2]|0;
 $119 = ($118|0)==(2);
 if (!($119)) {
  __ZN4Game19redrawDialogueTextsEv($1);
  STACKTOP = sp;return;
 }
 $120 = ((($1)) + 892|0);
 $121 = ((($120)) + 8|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = ($122|0)==(0);
 if (!($123)) {
  STACKTOP = sp;return;
 }
 $124 = ((($1)) + 872|0);
 HEAP32[$124>>2] = 1;
 STACKTOP = sp;return;
}
function __ZN4Game11setupDialogEPKc($this,$dialogId) {
 $this = $this|0;
 $dialogId = $dialogId|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $dialogId;
 $2 = $0;
 $3 = $1;
 HEAP32[$vararg_buffer>>2] = $3;
 __Z5debugtPKcz(16,22009,$vararg_buffer);
 $4 = $1;
 $5 = HEAP8[$4>>0]|0;
 $6 = $5 << 24 >> 24;
 $7 = ($6|0)==(74);
 if ($7) {
  label = 3;
 } else {
  $8 = $1;
  $9 = HEAP8[$8>>0]|0;
  $10 = $9 << 24 >> 24;
  $11 = ($10|0)==(106);
  if ($11) {
   label = 3;
  } else {
   $13 = ((($2)) + 876|0);
   HEAP32[$13>>2] = 1;
  }
 }
 if ((label|0) == 3) {
  $12 = ((($2)) + 876|0);
  HEAP32[$12>>2] = 0;
 }
 $14 = ((($2)) + 2168|0);
 HEAP32[$14>>2] = 0;
 $15 = ((($2)) + 3120|0);
 HEAP32[$15>>2] = 0;
 $i = 0;
 while(1) {
  $16 = $i;
  $17 = ((($2)) + 2984|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($16|0)<($18|0);
  if (!($19)) {
   break;
  }
  $20 = $i;
  $21 = ((($2)) + 2184|0);
  $22 = (($21) + (($20*20)|0)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $1;
  $25 = (_strcmp($23,$24)|0);
  $26 = ($25|0)==(0);
  if ($26) {
   $27 = ((($2)) + 3120|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ($28|0)<(10);
   if (!($29)) {
    label = 9;
    break;
   }
   $30 = $i;
   $31 = ((($2)) + 2184|0);
   $32 = (($31) + (($30*20)|0)|0);
   $33 = ((($32)) + 4|0);
   $34 = HEAP8[$33>>0]|0;
   $35 = $34&1;
   $36 = ((($2)) + 3120|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ((($2)) + 2988|0);
   $39 = (($38) + ($37)|0);
   $40 = $35&1;
   HEAP8[$39>>0] = $40;
   $41 = $i;
   $42 = ((($2)) + 2184|0);
   $43 = (($42) + (($41*20)|0)|0);
   $44 = ((($43)) + 8|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ((($2)) + 3120|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ((($2)) + 3080|0);
   $49 = (($48) + ($47<<2)|0);
   HEAP32[$49>>2] = $45;
   $50 = $i;
   $51 = ((($2)) + 2184|0);
   $52 = (($51) + (($50*20)|0)|0);
   $53 = ((($52)) + 12|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ((($2)) + 3120|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = ((($2)) + 3040|0);
   $58 = (($57) + ($56<<2)|0);
   HEAP32[$58>>2] = $54;
   $59 = $i;
   $60 = ((($2)) + 2184|0);
   $61 = (($60) + (($59*20)|0)|0);
   $62 = ((($61)) + 16|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = ((($2)) + 3120|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = ((($2)) + 3000|0);
   $67 = (($66) + ($65<<2)|0);
   HEAP32[$67>>2] = $63;
   $68 = ((($2)) + 3120|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = ((($2)) + 2988|0);
   $71 = (($70) + ($69)|0);
   $72 = HEAP8[$71>>0]|0;
   $73 = $72&1;
   $74 = $73&1;
   $75 = ((($2)) + 3120|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ((($2)) + 3080|0);
   $78 = (($77) + ($76<<2)|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = ((($2)) + 3120|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = ((($2)) + 3040|0);
   $83 = (($82) + ($81<<2)|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = ((($2)) + 3120|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = ((($2)) + 3000|0);
   $88 = (($87) + ($86<<2)|0);
   $89 = HEAP32[$88>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $74;
   $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
   HEAP32[$vararg_ptr4>>2] = $79;
   $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
   HEAP32[$vararg_ptr5>>2] = $84;
   $vararg_ptr6 = ((($vararg_buffer1)) + 12|0);
   HEAP32[$vararg_ptr6>>2] = $89;
   __Z5debugtPKcz(16,22089,$vararg_buffer1);
   $90 = ((($2)) + 3120|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = (($91) + 1)|0;
   HEAP32[$90>>2] = $92;
  }
  $93 = $i;
  $94 = (($93) + 1)|0;
  $i = $94;
 }
 if ((label|0) == 9) {
  ___assert_fail((22033|0),(21811|0),221,(22077|0));
  // unreachable;
 }
 $95 = ((($2)) + 3120|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = ($96|0)==(1);
 if (!($97)) {
  STACKTOP = sp;return;
 }
 $98 = ((($2)) + 2168|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = ((($2)) + 3040|0);
 $101 = (($100) + ($99<<2)|0);
 $102 = HEAP32[$101>>2]|0;
 (__ZN4Game18win16_sndPlaySoundEiPv($2,3,$102)|0);
 $103 = ((($2)) + 904|0);
 HEAP32[$103>>2] = 1;
 STACKTOP = sp;return;
}
function __ZN4Game24redrawDialogueBackgroundEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $i2 = 0, $previousObject = 0, $so = 0, $so3 = 0, $sof = 0, $sof4 = 0, $src = 0;
 var $vararg_buffer = 0, $y = 0, $y1 = 0, $y5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(16,22154,$vararg_buffer);
 __ZN4Game11sortObjectsEv($1);
 $previousObject = -1;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ((($1)) + 10552|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($2|0)<($4|0);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = ((($1)) + 5052|0);
  $8 = (($7) + ($6<<2)|0);
  $9 = HEAP32[$8>>2]|0;
  $so = $9;
  $10 = $so;
  $11 = ((($10)) + 42|0);
  $12 = HEAP16[$11>>1]|0;
  $13 = $12 << 16 >> 16;
  $14 = ($13|0)==(1);
  if ($14) {
   label = 5;
  } else {
   $15 = $so;
   $16 = ((($15)) + 42|0);
   $17 = HEAP16[$16>>1]|0;
   $18 = $17 << 16 >> 16;
   $19 = ($18|0)==(2);
   if ($19) {
    label = 5;
   }
  }
  do {
   if ((label|0) == 5) {
    label = 0;
    $20 = $previousObject;
    $21 = ($20|0)>=(0);
    if ($21) {
     $22 = $previousObject;
     $23 = $i;
     __ZN4Game17redrawObjectBoxesEii($1,$22,$23);
    }
    $24 = $i;
    $previousObject = $24;
    $25 = $so;
    $26 = ((($25)) + 20|0);
    $27 = HEAP16[$26>>1]|0;
    $28 = $27 << 16 >> 16;
    $29 = ((($1)) + 19044|0);
    $30 = (($29) + (($28*20)|0)|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = ((($1)) + 100|0);
    $33 = HEAP32[$32>>2]|0;
    (__Z10decodeLzssPKhPh($31,$33)|0);
    $34 = $so;
    $35 = ((($34)) + 20|0);
    $36 = HEAP16[$35>>1]|0;
    $37 = $36 << 16 >> 16;
    $38 = ((($1)) + 19044|0);
    $39 = (($38) + (($37*20)|0)|0);
    $sof = $39;
    $40 = $so;
    $41 = ((($40)) + 26|0);
    $42 = HEAP16[$41>>1]|0;
    $43 = $42 << 16 >> 16;
    $44 = ($43|0)==(2);
    $45 = ((($1)) + 68|0);
    $46 = ((($45)) + 2|0);
    $47 = HEAP16[$46>>1]|0;
    $48 = $47&65535;
    $49 = (($48) + 1)|0;
    $50 = $so;
    $51 = ((($50)) + 10|0);
    $52 = HEAP16[$51>>1]|0;
    $53 = $52 << 16 >> 16;
    $54 = (($49) - ($53))|0;
    $55 = $sof;
    $56 = ((($55)) + 4|0);
    $57 = ((($56)) + 4|0);
    $58 = HEAP16[$57>>1]|0;
    $59 = $58 << 16 >> 16;
    $60 = (($54) - ($59))|0;
    if ($44) {
     $y = $60;
     $61 = $so;
     $62 = ((($61)) + 8|0);
     $63 = HEAP16[$62>>1]|0;
     $64 = $63 << 16 >> 16;
     $65 = $y;
     $66 = ((($1)) + 100|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ((($1)) + 68|0);
     __ZN4Game22drawObjectVerticalFlipEiiPKhP11SceneBitmap($1,$64,$65,$67,$68);
     break;
    } else {
     $y1 = $60;
     $69 = $so;
     $70 = ((($69)) + 8|0);
     $71 = HEAP16[$70>>1]|0;
     $72 = $71 << 16 >> 16;
     $73 = $y1;
     $74 = ((($1)) + 100|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = ((($1)) + 68|0);
     __ZN4Game10drawObjectEiiPKhP11SceneBitmap($1,$72,$73,$75,$76);
     break;
    }
   }
  } while(0);
  $77 = $i;
  $78 = (($77) + 1)|0;
  $i = $78;
 }
 $79 = $previousObject;
 $80 = ($79|0)>=(0);
 if ($80) {
  $81 = $previousObject;
  $82 = $previousObject;
  __ZN4Game17redrawObjectBoxesEii($1,$81,$82);
 }
 $83 = ((($1)) + 68|0);
 $84 = ((($83)) + 8|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = HEAP32[(268)>>2]|0;
 $87 = ((($1)) + 68|0);
 $88 = ((($87)) + 4|0);
 $89 = HEAP16[$88>>1]|0;
 $90 = $89&65535;
 $91 = Math_imul($86, $90)|0;
 $92 = (($85) + ($91)|0);
 $93 = HEAP32[264>>2]|0;
 $94 = (($92) + ($93)|0);
 $src = $94;
 $95 = ((($1)) + 24|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = HEAP32[$96>>2]|0;
 $98 = ((($97)) + 24|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = HEAP32[264>>2]|0;
 $101 = HEAP32[(268)>>2]|0;
 $102 = HEAP32[(272)>>2]|0;
 $103 = HEAP32[(276)>>2]|0;
 $104 = $src;
 $105 = ((($1)) + 68|0);
 $106 = ((($105)) + 4|0);
 $107 = HEAP16[$106>>1]|0;
 $108 = $107&65535;
 FUNCTION_TABLE_viiiiiiii[$99 & 127]($96,$100,$101,$102,$103,$104,$108,0);
 $109 = ((($1)) + 24|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = HEAP32[$110>>2]|0;
 $112 = ((($111)) + 28|0);
 $113 = HEAP32[$112>>2]|0;
 $114 = HEAP32[264>>2]|0;
 $115 = HEAP32[(268)>>2]|0;
 $116 = HEAP32[(272)>>2]|0;
 $117 = HEAP32[(276)>>2]|0;
 FUNCTION_TABLE_viiiii[$113 & 255]($110,$114,$115,$116,$117);
 $i2 = 0;
 while(1) {
  $118 = $i2;
  $119 = ((($1)) + 10552|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = ($118|0)<($120|0);
  if (!($121)) {
   break;
  }
  $122 = $i2;
  $123 = ((($1)) + 5052|0);
  $124 = (($123) + ($122<<2)|0);
  $125 = HEAP32[$124>>2]|0;
  $so3 = $125;
  $126 = $so3;
  $127 = ((($126)) + 42|0);
  $128 = HEAP16[$127>>1]|0;
  $129 = $128 << 16 >> 16;
  $130 = ($129|0)==(1);
  if ($130) {
   $131 = $so3;
   $132 = ((($131)) + 20|0);
   $133 = HEAP16[$132>>1]|0;
   $134 = $133 << 16 >> 16;
   $135 = ((($1)) + 19044|0);
   $136 = (($135) + (($134*20)|0)|0);
   $sof4 = $136;
   $137 = ((($1)) + 68|0);
   $138 = ((($137)) + 2|0);
   $139 = HEAP16[$138>>1]|0;
   $140 = $139&65535;
   $141 = (($140) + 1)|0;
   $142 = $so3;
   $143 = ((($142)) + 10|0);
   $144 = HEAP16[$143>>1]|0;
   $145 = $144 << 16 >> 16;
   $146 = (($141) - ($145))|0;
   $147 = $sof4;
   $148 = ((($147)) + 4|0);
   $149 = ((($148)) + 4|0);
   $150 = HEAP16[$149>>1]|0;
   $151 = $150 << 16 >> 16;
   $152 = (($146) - ($151))|0;
   $y5 = $152;
   $153 = $so3;
   $154 = ((($153)) + 8|0);
   $155 = HEAP16[$154>>1]|0;
   $156 = $155 << 16 >> 16;
   $157 = $y5;
   $158 = $sof4;
   $159 = ((($158)) + 4|0);
   $160 = ((($159)) + 2|0);
   $161 = HEAP16[$160>>1]|0;
   $162 = $161 << 16 >> 16;
   $163 = $sof4;
   $164 = ((($163)) + 4|0);
   $165 = ((($164)) + 4|0);
   $166 = HEAP16[$165>>1]|0;
   $167 = $166 << 16 >> 16;
   $168 = ((($1)) + 84|0);
   $169 = ((($1)) + 68|0);
   __ZN4Game18copyBufferToBufferEiiiiP11SceneBitmapS1_($1,$156,$157,$162,$167,$168,$169);
  }
  $170 = $i2;
  $171 = (($170) + 1)|0;
  $i2 = $171;
 }
 STACKTOP = sp;return;
}
function __ZN4Game20redrawDialogueSpriteEi($this,$num) {
 $this = $this|0;
 $num = $num|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $frameX = 0, $frameY = 0, $sprX = 0, $sprY = 0, $spriteBitmap = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $num;
 $2 = $0;
 $3 = $1;
 HEAP32[$vararg_buffer>>2] = $3;
 __Z5debugtPKcz(16,22187,$vararg_buffer);
 $4 = ((($2)) + 3124|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 2|0);
 $7 = ((($2)) + 100|0);
 $8 = HEAP32[$7>>2]|0;
 (__Z10decodeLzssPKhPh($6,$8)|0);
 $9 = ((($2)) + 100|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 25000|0);
 $spriteBitmap = $11;
 $12 = $1;
 $13 = ((($2)) + 892|0);
 $14 = (($13) + ($12<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $1;
 $17 = ((($2)) + 908|0);
 $18 = (($17) + (($16*420)|0)|0);
 $19 = (($18) + ($15<<2)|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $spriteBitmap;
 (__Z10decodeLzssPKhPh($20,$21)|0);
 $22 = ((($2)) + 100|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (__ZL15getBitmapHeightPKh6($23)|0);
 $25 = $spriteBitmap;
 $26 = (__ZL15getBitmapHeightPKh6($25)|0);
 $27 = (($24) - ($26))|0;
 $sprY = $27;
 $28 = ((($2)) + 100|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (__ZL14getBitmapWidthPKh7($29)|0);
 $31 = $spriteBitmap;
 $32 = (__ZL14getBitmapWidthPKh7($31)|0);
 $33 = (($30) - ($32))|0;
 $sprX = $33;
 $frameX = 0;
 $34 = $1;
 switch ($34|0) {
 case 0:  {
  $35 = HEAP32[264>>2]|0;
  $36 = (($35) + 13)|0;
  $frameX = $36;
  $37 = $frameX;
  $38 = ((($2)) + 100|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (__ZL14getBitmapWidthPKh7($39)|0);
  $41 = (($37) + ($40))|0;
  $42 = (($41) + 10)|0;
  $43 = ((($2)) + 3128|0);
  HEAP32[$43>>2] = $42;
  break;
 }
 case 1:  {
  $44 = HEAP32[264>>2]|0;
  $45 = HEAP32[(272)>>2]|0;
  $46 = (($44) + ($45))|0;
  $47 = ((($2)) + 100|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (__ZL14getBitmapWidthPKh7($48)|0);
  $50 = (($46) - ($49))|0;
  $51 = (($50) - 13)|0;
  $frameX = $51;
  $52 = HEAP32[264>>2]|0;
  $53 = (($52) + 10)|0;
  $54 = ((($2)) + 3128|0);
  HEAP32[$54>>2] = $53;
  break;
 }
 case 2:  {
  $55 = HEAP32[264>>2]|0;
  $56 = HEAP32[(272)>>2]|0;
  $57 = ((($2)) + 100|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (__ZL14getBitmapWidthPKh7($58)|0);
  $60 = (($56) - ($59))|0;
  $61 = (($60|0) / 2)&-1;
  $62 = (($55) + ($61))|0;
  $frameX = $62;
  $63 = HEAP32[264>>2]|0;
  $64 = ((($2)) + 3128|0);
  HEAP32[$64>>2] = $63;
  break;
 }
 default: {
 }
 }
 $65 = HEAP32[(272)>>2]|0;
 $66 = (($65) - 10)|0;
 $67 = ((($2)) + 100|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = (__ZL14getBitmapWidthPKh7($68)|0);
 $70 = (($66) - ($69))|0;
 $71 = (($70) - 13)|0;
 $72 = ((($2)) + 3128|0);
 $73 = ((($72)) + 8|0);
 HEAP32[$73>>2] = $71;
 $74 = HEAP32[(268)>>2]|0;
 $75 = HEAP32[(276)>>2]|0;
 $76 = ((($2)) + 100|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = (__ZL15getBitmapHeightPKh6($77)|0);
 $79 = (($75) - ($78))|0;
 $80 = (($79|0) / 2)&-1;
 $81 = (($74) + ($80))|0;
 $frameY = $81;
 $82 = HEAP32[(268)>>2]|0;
 $83 = (($82) + 10)|0;
 $84 = ((($2)) + 3128|0);
 $85 = ((($84)) + 4|0);
 HEAP32[$85>>2] = $83;
 $86 = HEAP32[(276)>>2]|0;
 $87 = (($86) - 20)|0;
 $88 = ((($2)) + 3128|0);
 $89 = ((($88)) + 12|0);
 HEAP32[$89>>2] = $87;
 $90 = ((($2)) + 24|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = HEAP32[$91>>2]|0;
 $93 = ((($92)) + 24|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = $frameX;
 $96 = $frameY;
 $97 = ((($2)) + 100|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = (__ZL14getBitmapWidthPKh7($98)|0);
 $100 = ((($2)) + 100|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = (__ZL15getBitmapHeightPKh6($101)|0);
 $103 = ((($2)) + 100|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = (__ZL13getBitmapDataPKh($104)|0);
 $106 = ((($2)) + 100|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = (__ZL14getBitmapWidthPKh7($107)|0);
 FUNCTION_TABLE_viiiiiiii[$94 & 127]($91,$95,$96,$99,$102,$105,$108,0);
 $109 = $sprX;
 $110 = (($109|0) / 2)&-1;
 $111 = $frameX;
 $112 = (($111) + ($110))|0;
 $frameX = $112;
 $113 = $sprY;
 $114 = (($113|0) / 2)&-1;
 $115 = $frameY;
 $116 = (($115) + ($114))|0;
 $frameY = $116;
 $117 = ((($2)) + 24|0);
 $118 = HEAP32[$117>>2]|0;
 $119 = HEAP32[$118>>2]|0;
 $120 = ((($119)) + 24|0);
 $121 = HEAP32[$120>>2]|0;
 $122 = $frameX;
 $123 = $frameY;
 $124 = $spriteBitmap;
 $125 = (__ZL14getBitmapWidthPKh7($124)|0);
 $126 = $spriteBitmap;
 $127 = (__ZL15getBitmapHeightPKh6($126)|0);
 $128 = $spriteBitmap;
 $129 = (__ZL13getBitmapDataPKh($128)|0);
 $130 = $spriteBitmap;
 $131 = (__ZL14getBitmapWidthPKh7($130)|0);
 FUNCTION_TABLE_viiiiiiii[$121 & 127]($118,$122,$123,$125,$127,$129,$131,0);
 $132 = $1;
 $133 = ((($2)) + 892|0);
 $134 = (($133) + ($132<<2)|0);
 $135 = HEAP32[$134>>2]|0;
 $136 = (($135) + 1)|0;
 HEAP32[$134>>2] = $136;
 $137 = $1;
 $138 = ((($2)) + 892|0);
 $139 = (($138) + ($137<<2)|0);
 $140 = HEAP32[$139>>2]|0;
 $141 = $1;
 $142 = ((($2)) + 880|0);
 $143 = (($142) + ($141<<2)|0);
 $144 = HEAP32[$143>>2]|0;
 $145 = ($140|0)>=($144|0);
 if (!($145)) {
  STACKTOP = sp;return;
 }
 $146 = $1;
 $147 = ((($2)) + 892|0);
 $148 = (($147) + ($146<<2)|0);
 HEAP32[$148>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN4Game12finiDialogueEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $spr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4Game18unloadDialogueDataEv($1);
 $2 = ((($1)) + 3124|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = ((($1)) + 3124|0);
  $6 = HEAP32[$5>>2]|0;
  _free($6);
  $7 = ((($1)) + 3124|0);
  HEAP32[$7>>2] = 0;
 }
 $spr = 0;
 while(1) {
  $8 = $spr;
  $9 = ($8|0)<(3);
  if (!($9)) {
   break;
  }
  $i = 0;
  while(1) {
   $10 = $i;
   $11 = ($10|0)<(105);
   if (!($11)) {
    break;
   }
   $12 = $i;
   $13 = $spr;
   $14 = ((($1)) + 908|0);
   $15 = (($14) + (($13*420)|0)|0);
   $16 = (($15) + ($12<<2)|0);
   $17 = HEAP32[$16>>2]|0;
   _free($17);
   $18 = $i;
   $19 = $spr;
   $20 = ((($1)) + 908|0);
   $21 = (($20) + (($19*420)|0)|0);
   $22 = (($21) + ($18<<2)|0);
   HEAP32[$22>>2] = 0;
   $23 = $i;
   $24 = (($23) + 1)|0;
   $i = $24;
  }
  $25 = $spr;
  $26 = (($25) + 1)|0;
  $spr = $26;
 }
 $27 = ((($1)) + 4616|0);
 __ZN4Game9playMusicEPKc($1,$27);
 $28 = ((($1)) + 4478|0);
 dest=$28; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function __ZN4Game18unloadDialogueDataEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 2172|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$vararg_buffer>>2] = $3;
 __Z5debugtPKcz(16,22218,$vararg_buffer);
 $4 = ((($1)) + 2172|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(2);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = ((($1)) + 2180|0);
 $8 = HEAP32[$7>>2]|0;
 _free($8);
 $9 = ((($1)) + 2180|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($1)) + 2172|0);
 HEAP32[$10>>2] = 1;
 STACKTOP = sp;return;
}
function __ZL21findBestMatchingColorPKhi($src,$color) {
 $src = $src|0;
 $color = $color|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $bestColor = 0, $bestSum = 0, $db = 0, $dg = 0, $dr = 0, $g = 0;
 var $i = 0, $r = 0, $sum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $src;
 $1 = $color;
 $bestColor = 0;
 $bestSum = -1;
 $2 = $1;
 $3 = $2 & 255;
 $r = $3;
 $4 = $1;
 $5 = $4 >> 8;
 $6 = $5 & 255;
 $g = $6;
 $7 = $1;
 $8 = $7 >> 16;
 $9 = $8 & 255;
 $b = $9;
 $i = 0;
 while(1) {
  $10 = $i;
  $11 = ($10|0)<(256);
  if (!($11)) {
   break;
  }
  $12 = $r;
  $13 = $0;
  $14 = ((($13)) + 2|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = (($12) - ($16))|0;
  $dr = $17;
  $18 = $g;
  $19 = $0;
  $20 = ((($19)) + 1|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $23 = (($18) - ($22))|0;
  $dg = $23;
  $24 = $b;
  $25 = $0;
  $26 = HEAP8[$25>>0]|0;
  $27 = $26&255;
  $28 = (($24) - ($27))|0;
  $db = $28;
  $29 = $dr;
  $30 = $dr;
  $31 = Math_imul($29, $30)|0;
  $32 = $dg;
  $33 = $dg;
  $34 = Math_imul($32, $33)|0;
  $35 = (($31) + ($34))|0;
  $36 = $db;
  $37 = $db;
  $38 = Math_imul($36, $37)|0;
  $39 = (($35) + ($38))|0;
  $sum = $39;
  $40 = $bestSum;
  $41 = ($40|0)==(-1);
  if ($41) {
   label = 5;
  } else {
   $42 = $sum;
   $43 = $bestSum;
   $44 = ($42|0)<($43|0);
   if ($44) {
    label = 5;
   }
  }
  if ((label|0) == 5) {
   label = 0;
   $45 = $sum;
   $bestSum = $45;
   $46 = $i;
   $47 = $46&255;
   $bestColor = $47;
  }
  $48 = $0;
  $49 = ((($48)) + 4|0);
  $0 = $49;
  $50 = $i;
  $51 = (($50) + 1)|0;
  $i = $51;
 }
 $52 = $bestColor;
 STACKTOP = sp;return ($52|0);
}
function __ZL8drawCharPhiPKtih($dst,$dstPitch,$fontData,$c,$color) {
 $dst = $dst|0;
 $dstPitch = $dstPitch|0;
 $fontData = $fontData|0;
 $c = $c|0;
 $color = $color|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $chr = 0, $i = 0, $offset = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $dst;
 $1 = $dstPitch;
 $2 = $fontData;
 $3 = $c;
 $4 = $color;
 $5 = $3;
 $6 = $5<<4;
 $offset = $6;
 $i = 0;
 while(1) {
  $7 = $i;
  $8 = ($7|0)<(16);
  if (!($8)) {
   break;
  }
  $9 = $offset;
  $10 = $i;
  $11 = (($9) + ($10))|0;
  $12 = $2;
  $13 = (($12) + ($11<<1)|0);
  $14 = HEAP16[$13>>1]|0;
  $chr = $14;
  $b = 0;
  while(1) {
   $15 = $b;
   $16 = ($15|0)<(16);
   if (!($16)) {
    break;
   }
   $17 = $chr;
   $18 = $17&65535;
   $19 = $b;
   $20 = 1 << $19;
   $21 = $18 & $20;
   $22 = ($21|0)!=(0);
   if ($22) {
    $23 = $4;
    $24 = $i;
    $25 = (0 - ($24))|0;
    $26 = $1;
    $27 = Math_imul($25, $26)|0;
    $28 = $b;
    $29 = (($27) + ($28))|0;
    $30 = $0;
    $31 = (($30) + ($29)|0);
    HEAP8[$31>>0] = $23;
   }
   $32 = $b;
   $33 = (($32) + 1)|0;
   $b = $33;
  }
  $34 = $i;
  $35 = (($34) + 1)|0;
  $i = $35;
 }
 STACKTOP = sp;return;
}
function __ZN10FileHolderC2ER10FileSystemPKc($this,$fs,$path) {
 $this = $this|0;
 $fs = $fs|0;
 $path = $path|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $fs;
 $2 = $path;
 $3 = $0;
 $4 = $1;
 HEAP32[$3>>2] = $4;
 $5 = HEAP32[$3>>2]|0;
 $6 = $2;
 $7 = (__ZN10FileSystem8openFileEPKcb($5,$6,1)|0);
 $8 = ((($3)) + 4|0);
 HEAP32[$8>>2] = $7;
 STACKTOP = sp;return;
}
function __ZN10FileHolderptEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN10FileHolderD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 __ZN10FileSystem9closeFileEP4File($2,$4);
 $5 = ((($1)) + 4|0);
 HEAP32[$5>>2] = 0;
 STACKTOP = sp;return;
}
function ___clang_call_terminate($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___cxa_begin_catch(($0|0))|0);
 __ZSt9terminatev();
 // unreachable;
}
function __ZL15getBitmapHeightPKh6($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 $2 = ((($1)) + 2|0);
 $3 = (__Z14READ_LE_UINT16PKv($2)|0);
 $4 = $3&65535;
 $5 = (($4) + 1)|0;
 STACKTOP = sp;return ($5|0);
}
function __ZL14getBitmapWidthPKh7($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 $2 = (__Z14READ_LE_UINT16PKv($1)|0);
 $3 = $2&65535;
 $4 = (($3) + 1)|0;
 STACKTOP = sp;return ($4|0);
}
function __ZL13getBitmapDataPKh($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 STACKTOP = sp;return ($2|0);
}
function __Z15FileImpl_createv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = (__Znwj(20)|0);
 __THREW__ = 0;
 invoke_vi(168,($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch()|0;
  $6 = tempRet0;
  $0 = $5;
  $1 = $6;
  __ZdlPv($2);
  $7 = $0;
  $8 = $1;
  ___resumeException($7|0);
  // unreachable;
 } else {
  STACKTOP = sp;return ($2|0);
 }
 return (0)|0;
}
function __Z15FileImpl_createjj($offset,$size) {
 $offset = $offset|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $offset;
 $1 = $size;
 $4 = (__Znwj(20)|0);
 $5 = $0;
 $6 = $1;
 __THREW__ = 0;
 invoke_viii(169,($4|0),($5|0),($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  $2 = $9;
  $3 = $10;
  __ZdlPv($4);
  $11 = $2;
  $12 = $3;
  ___resumeException($11|0);
  // unreachable;
 } else {
  STACKTOP = sp;return ($4|0);
 }
 return (0)|0;
}
function __ZN4FileC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 $2 = (__Z15FileImpl_createv()|0);
 $3 = ((($1)) + 4|0);
 HEAP32[$3>>2] = $2;
 STACKTOP = sp;return;
}
function __ZN4FileC2EP9File_impl($this,$impl) {
 $this = $this|0;
 $impl = $impl|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $impl;
 $2 = $0;
 HEAP32[$2>>2] = 0;
 $3 = ((($2)) + 4|0);
 $4 = $1;
 HEAP32[$3>>2] = $4;
 STACKTOP = sp;return;
}
function __ZN4FileD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 _free($2);
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 FUNCTION_TABLE_vi[$7 & 255]($4);
 $8 = ((($1)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  STACKTOP = sp;return;
 }
 $11 = HEAP32[$9>>2]|0;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 FUNCTION_TABLE_vi[$13 & 255]($9);
 STACKTOP = sp;return;
}
function __ZN4File4openEPKcS1_($this,$path,$mode) {
 $this = $this|0;
 $path = $path|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $path;
 $2 = $mode;
 $3 = $0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 FUNCTION_TABLE_vi[$8 & 255]($5);
 $9 = HEAP32[$3>>2]|0;
 _free($9);
 $10 = $1;
 $11 = (___strdup($10)|0);
 HEAP32[$3>>2] = $11;
 $12 = ((($3)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $1;
 $18 = $2;
 $19 = (FUNCTION_TABLE_iiii[$16 & 255]($13,$17,$18)|0);
 STACKTOP = sp;return ($19|0);
}
function __ZN4File5closeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 FUNCTION_TABLE_vi[$6 & 255]($3);
 STACKTOP = sp;return;
}
function __ZNK4File5ioErrEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&1;
 STACKTOP = sp;return ($6|0);
}
function __ZN4File4sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_ii[$6 & 255]($3)|0);
 STACKTOP = sp;return ($7|0);
}
function __ZN4File4seekEii($this,$offs,$origin) {
 $this = $this|0;
 $offs = $offs|0;
 $origin = $origin|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $offs;
 $2 = $origin;
 $3 = $0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $1;
 $10 = $2;
 FUNCTION_TABLE_viii[$8 & 255]($5,$9,$10);
 STACKTOP = sp;return;
}
function __ZN4File4readEPvj($this,$ptr,$len) {
 $this = $this|0;
 $ptr = $ptr|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $ptr;
 $2 = $len;
 $3 = $0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 28|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $1;
 $10 = $2;
 $11 = (FUNCTION_TABLE_iiii[$8 & 255]($5,$9,$10)|0);
 STACKTOP = sp;return ($11|0);
}
function __ZN4File8readByteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $b = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = sp + 4|0;
 $0 = $this;
 $1 = $0;
 (__ZN4File4readEPvj($1,$b,1)|0);
 $2 = HEAP8[$b>>0]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZN4File12readUint16LEEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $b = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = sp + 4|0;
 $0 = $this;
 $1 = $0;
 (__ZN4File4readEPvj($1,$b,2)|0);
 $2 = (__Z14READ_LE_UINT16PKv($b)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN4File12readUint32LEEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $b = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = sp + 4|0;
 $0 = $this;
 $1 = $0;
 (__ZN4File4readEPvj($1,$b,4)|0);
 $2 = (__Z14READ_LE_UINT32PKv($b)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN4File5writeEPvj($this,$ptr,$len) {
 $this = $this|0;
 $ptr = $ptr|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $ptr;
 $2 = $len;
 $3 = $0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $1;
 $10 = $2;
 FUNCTION_TABLE_viii[$8 & 255]($5,$9,$10);
 STACKTOP = sp;return;
}
function __ZN4File9writeByteEh($this,$b) {
 $this = $this|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 4|0;
 $0 = $this;
 HEAP8[$1>>0] = $b;
 $2 = $0;
 __ZN4File5writeEPvj($2,$1,1);
 STACKTOP = sp;return;
}
function __ZN4File13writeUint16LEEt($this,$n) {
 $this = $this|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $n;
 $2 = $0;
 $3 = $1;
 $4 = $3&65535;
 $5 = $4 & 255;
 $6 = $5&255;
 __ZN4File9writeByteEh($2,$6);
 $7 = $1;
 $8 = $7&65535;
 $9 = $8 >> 8;
 $10 = $9&255;
 __ZN4File9writeByteEh($2,$10);
 STACKTOP = sp;return;
}
function __ZN4File13writeUint32LEEj($this,$n) {
 $this = $this|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $n;
 $2 = $0;
 $3 = $1;
 $4 = $3 & 65535;
 $5 = $4&65535;
 __ZN4File13writeUint16LEEt($2,$5);
 $6 = $1;
 $7 = $6 >>> 16;
 $8 = $7&65535;
 __ZN4File13writeUint16LEEt($2,$8);
 STACKTOP = sp;return;
}
function __ZN21MemoryMappedFile_impl6createEPKc($path) {
 $path = $path|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $path;
 $3 = (__Znwj(16)|0);
 $4 = $0;
 __THREW__ = 0;
 invoke_vii(170,($3|0),($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $7 = ___cxa_find_matching_catch()|0;
  $8 = tempRet0;
  $1 = $7;
  $2 = $8;
  __ZdlPv($3);
  $9 = $1;
  $10 = $2;
  ___resumeException($9|0);
  // unreachable;
 } else {
  STACKTOP = sp;return ($3|0);
 }
 return (0)|0;
}
function __ZN16MemoryMappedFile5closeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = HEAP32[$1>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = HEAP32[$4>>2]|0;
  $7 = ((($6)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  FUNCTION_TABLE_vi[$8 & 255]($4);
 }
 HEAP32[$1>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN16MemoryMappedFile4openEPKcS1_($this,$path,$mode) {
 $this = $this|0;
 $path = $path|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $path;
 $2 = $mode;
 $3 = $0;
 __ZN16MemoryMappedFile5closeEv($3);
 $4 = $1;
 $5 = (__ZN21MemoryMappedFile_impl6createEPKc($4)|0);
 HEAP32[$3>>2] = $5;
 $6 = HEAP32[$3>>2]|0;
 $7 = ($6|0)!=(0|0);
 STACKTOP = sp;return ($7|0);
}
function __ZN16MemoryMappedFile6getPtrEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  $7 = 0;
  STACKTOP = sp;return ($7|0);
 }
 $4 = HEAP32[$1>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6;
 STACKTOP = sp;return ($7|0);
}
function __ZN10File_stdioC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN9File_implC2Ev($1);
 $2 = 320;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 8|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($1)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($1)) + 16|0);
 HEAP32[$5>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN10File_stdioC2Ejj($this,$offset,$size) {
 $this = $this|0;
 $offset = $offset|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $offset;
 $2 = $size;
 $3 = $0;
 __ZN9File_implC2Ev($3);
 $4 = 320;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 8|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($3)) + 12|0);
 $7 = $1;
 HEAP32[$6>>2] = $7;
 $8 = ((($3)) + 16|0);
 $9 = $2;
 HEAP32[$8>>2] = $9;
 STACKTOP = sp;return;
}
function __ZN22MemoryMappedFile_POSIXC2EPKc($this,$path) {
 $this = $this|0;
 $path = $path|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $addr = 0, $st = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $st = sp + 8|0;
 $0 = $this;
 $1 = $path;
 $4 = $0;
 $5 = $1;
 __ZN21MemoryMappedFile_implC2EPKc($4,$5);
 $6 = 288;
 HEAP32[$4>>2] = $6;
 $7 = ((($4)) + 12|0);
 HEAP32[$7>>2] = -1;
 $8 = $1;
 __THREW__ = 0;
 $9 = (invoke_iiii(171,($8|0),0,($vararg_buffer|0))|0);
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if (!($11)) {
  $12 = ((($4)) + 12|0);
  HEAP32[$12>>2] = $9;
  $13 = ((($4)) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)!=(-1);
  if (!($15)) {
   STACKTOP = sp;return;
  }
  $16 = $1;
  __THREW__ = 0;
  $17 = (invoke_iii(172,($16|0),($st|0))|0);
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if (!($19)) {
   $20 = ($17|0)==(0);
   if (!($20)) {
    STACKTOP = sp;return;
   }
   $21 = ((($st)) + 36|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ((($4)) + 12|0);
   $24 = HEAP32[$23>>2]|0;
   __THREW__ = 0;
   $25 = (invoke_iiiiiii(173,(0|0),($22|0),1,2,($24|0),0)|0);
   $26 = __THREW__; __THREW__ = 0;
   $27 = $26&1;
   if (!($27)) {
    $addr = $25;
    $28 = $addr;
    $29 = ($28|0)!=((-1)|0);
    if (!($29)) {
     STACKTOP = sp;return;
    }
    $30 = $addr;
    $31 = ((($4)) + 4|0);
    HEAP32[$31>>2] = $30;
    $32 = ((($st)) + 36|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = ((($4)) + 8|0);
    HEAP32[$34>>2] = $33;
    STACKTOP = sp;return;
   }
  }
 }
 $35 = ___cxa_find_matching_catch()|0;
 $36 = tempRet0;
 $2 = $35;
 $3 = $36;
 __THREW__ = 0;
 invoke_vi(3,($4|0));
 $37 = __THREW__; __THREW__ = 0;
 $38 = $37&1;
 if ($38) {
  $41 = ___cxa_find_matching_catch(0|0)|0;
  $42 = tempRet0;
  ___clang_call_terminate($41);
  // unreachable;
 } else {
  $39 = $2;
  $40 = $3;
  ___resumeException($39|0);
  // unreachable;
 }
}
function __ZN21MemoryMappedFile_implC2EPKc($this,$path) {
 $this = $this|0;
 $path = $path|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $path;
 $2 = $0;
 $3 = 304;
 HEAP32[$2>>2] = $3;
 $4 = ((($2)) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($2)) + 8|0);
 HEAP32[$5>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN21MemoryMappedFile_implD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN22MemoryMappedFile_POSIXD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 288;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = ((($3)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($3)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  __THREW__ = 0;
  (invoke_iii(174,($9|0),($11|0))|0);
  $12 = __THREW__; __THREW__ = 0;
  $13 = $12&1;
  if (!($13)) {
   $14 = ((($3)) + 4|0);
   HEAP32[$14>>2] = 0;
   $15 = ((($3)) + 8|0);
   HEAP32[$15>>2] = 0;
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $20 = ((($3)) + 12|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)!=(-1);
  if (!($22)) {
   __ZN21MemoryMappedFile_implD2Ev($3);
   STACKTOP = sp;return;
  }
  $23 = ((($3)) + 12|0);
  $24 = HEAP32[$23>>2]|0;
  __THREW__ = 0;
  (invoke_ii(175,($24|0))|0);
  $25 = __THREW__; __THREW__ = 0;
  $26 = $25&1;
  if (!($26)) {
   $27 = ((($3)) + 12|0);
   HEAP32[$27>>2] = -1;
   __ZN21MemoryMappedFile_implD2Ev($3);
   STACKTOP = sp;return;
  }
 }
 $16 = ___cxa_find_matching_catch()|0;
 $17 = tempRet0;
 $1 = $16;
 $2 = $17;
 __THREW__ = 0;
 invoke_vi(3,($3|0));
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $30 = ___cxa_find_matching_catch(0|0)|0;
  $31 = tempRet0;
  ___clang_call_terminate($30);
  // unreachable;
 } else {
  $28 = $1;
  $29 = $2;
  ___resumeException($28|0);
  // unreachable;
 }
}
function __ZN22MemoryMappedFile_POSIXD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(1,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN21MemoryMappedFile_implD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(3,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN9File_implC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 364;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 HEAP8[$3>>0] = 0;
 STACKTOP = sp;return;
}
function __ZN10File_stdioD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN9File_implD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN10File_stdioD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(5,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN10File_stdio4openEPKcS1_($this,$path,$mode) {
 $this = $this|0;
 $path = $path|0;
 $mode = $mode|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 12|0;
 $1 = $this;
 $2 = $path;
 $3 = $mode;
 $4 = $1;
 $5 = ((($4)) + 4|0);
 HEAP8[$5>>0] = 0;
 $6 = $2;
 $7 = $3;
 $8 = (_fopen($6,$7)|0);
 $9 = ((($4)) + 8|0);
 HEAP32[$9>>2] = $8;
 $10 = ((($4)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  $$expand_i1_val2 = 0;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $20 = $$pre_trunc&1;
  STACKTOP = sp;return ($20|0);
 }
 $13 = ((($4)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = ((($4)) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($4)) + 12|0);
  $19 = HEAP32[$18>>2]|0;
  (_fseek($17,$19,0)|0);
 }
 $$expand_i1_val = 1;
 HEAP8[$0>>0] = $$expand_i1_val;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $20 = $$pre_trunc&1;
 STACKTOP = sp;return ($20|0);
}
function __ZN10File_stdio5closeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 (_fclose($6)|0);
 $7 = ((($1)) + 8|0);
 HEAP32[$7>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN10File_stdio4sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0);
 if ($5) {
  $6 = ((($2)) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  $0 = $7;
  $25 = $0;
  STACKTOP = sp;return ($25|0);
 }
 $8 = ((($2)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = ((($2)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (_ftell($12)|0);
  $pos = $13;
  $14 = ((($2)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  (_fseek($15,0,2)|0);
  $16 = ((($2)) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (_ftell($17)|0);
  $19 = ((($2)) + 16|0);
  HEAP32[$19>>2] = $18;
  $20 = ((($2)) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $pos;
  (_fseek($21,$22,0)|0);
 }
 $23 = ((($2)) + 16|0);
 $24 = HEAP32[$23>>2]|0;
 $0 = $24;
 $25 = $0;
 STACKTOP = sp;return ($25|0);
}
function __ZN10File_stdio4tellEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $pos = 0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  $11 = $pos;
  STACKTOP = sp;return ($11|0);
 }
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_ftell($6)|0);
 $8 = ((($1)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) - ($9))|0;
 $pos = $10;
 $11 = $pos;
 STACKTOP = sp;return ($11|0);
}
function __ZN10File_stdio4seekEii($this,$offs,$origin) {
 $this = $this|0;
 $offs = $offs|0;
 $origin = $origin|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $offs;
 $2 = $origin;
 $3 = $0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = ((($3)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($3)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $1;
 $12 = (($10) + ($11))|0;
 $13 = $2;
 (_fseek($8,$12,$13)|0);
 STACKTOP = sp;return;
}
function __ZN10File_stdio4readEPvj($this,$ptr,$len) {
 $this = $this|0;
 $ptr = $ptr|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $ptr;
 $2 = $len;
 $3 = $0;
 $r = 0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $1;
  $8 = $2;
  $9 = ((($3)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (_fread($7,1,$8,$10)|0);
  $r = $11;
  $12 = $r;
  $13 = $2;
  $14 = ($12|0)!=($13|0);
  if ($14) {
   $15 = ((($3)) + 4|0);
   HEAP8[$15>>0] = 1;
  }
 }
 $16 = $r;
 STACKTOP = sp;return ($16|0);
}
function __ZN10File_stdio5writeEPvj($this,$ptr,$len) {
 $this = $this|0;
 $ptr = $ptr|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $ptr;
 $2 = $len;
 $3 = $0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = $1;
 $8 = $2;
 $9 = ((($3)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_fwrite($7,1,$8,$10)|0);
 $r = $11;
 $12 = $r;
 $13 = $2;
 $14 = ($12|0)!=($13|0);
 if (!($14)) {
  STACKTOP = sp;return;
 }
 $15 = ((($3)) + 4|0);
 HEAP8[$15>>0] = 1;
 STACKTOP = sp;return;
}
function __ZN9File_implD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN9File_implD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(14,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN15FileSystem_impl6createEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = (__Znwj(20)|0);
 __THREW__ = 0;
 invoke_vi(176,($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch()|0;
  $6 = tempRet0;
  $0 = $5;
  $1 = $6;
  __ZdlPv($2);
  $7 = $0;
  $8 = $1;
  ___resumeException($7|0);
  // unreachable;
 } else {
  STACKTOP = sp;return ($2|0);
 }
 return (0)|0;
}
function __ZN10FileSystemC2EPKc($this,$rootDir) {
 $this = $this|0;
 $rootDir = $rootDir|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $rootDir;
 $2 = $0;
 HEAP32[$2>>2] = 0;
 __ZN16FileSystem_romfs4openEPKc(400,22456);
 $3 = (__ZNK16FileSystem_romfs6isOpenEv(400)|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = (__ZN15FileSystem_impl6createEv()|0);
 HEAP32[$2>>2] = $4;
 $5 = HEAP32[$2>>2]|0;
 $6 = $1;
 __ZN15FileSystem_impl16setDataDirectoryEPKc($5,$6);
 STACKTOP = sp;return;
}
function __ZN10FileSystemD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = HEAP32[$2>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 FUNCTION_TABLE_vi[$6 & 255]($2);
 STACKTOP = sp;return;
}
function __ZN10FileSystem8openFileEPKcb($this,$path,$errorIfNotFound) {
 $this = $this|0;
 $path = $path|0;
 $errorIfNotFound = $errorIfNotFound|0;
 var $$not = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f = 0;
 var $filePath = 0, $fileSystemPath = 0, $fixedPath = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer12 = sp + 32|0;
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $fileSystemPath = sp + 64|0;
 $0 = $this;
 $1 = $path;
 $5 = $errorIfNotFound&1;
 $2 = $5;
 $6 = $0;
 $f = 0;
 $7 = $1;
 $8 = (__ZL7fixPathPKc($7)|0);
 $fixedPath = $8;
 $9 = HEAP32[10172>>2]|0;
 $10 = $fixedPath;
 HEAP32[$vararg_buffer>>2] = $10;
 (_fprintf($9,22321,$vararg_buffer)|0);
 $11 = $fixedPath;
 $12 = ($11|0)!=(0|0);
 if ($12) {
  $13 = (__ZNK16FileSystem_romfs6isOpenEv(400)|0);
  if ($13) {
   $14 = $fixedPath;
   $15 = (__ZN16FileSystem_romfs8openFileEPKci(400,$14,0)|0);
   $f = $15;
   $16 = $f;
   $17 = (__ZN4File4openEPKcS1_($16,22456,29546)|0);
   if (!($17)) {
    $18 = $f;
    $19 = ($18|0)==(0|0);
    do {
     if (!($19)) {
      __THREW__ = 0;
      invoke_vi(177,($18|0));
      $20 = __THREW__; __THREW__ = 0;
      $21 = $20&1;
      if (!($21)) {
       __ZdlPv($18);
       break;
      }
      $22 = ___cxa_find_matching_catch()|0;
      $23 = tempRet0;
      $3 = $22;
      $4 = $23;
      __ZdlPv($18);
      $56 = $3;
      $57 = $4;
      ___resumeException($56|0);
      // unreachable;
     }
    } while(0);
    $f = 0;
   }
  } else {
   $24 = HEAP32[$6>>2]|0;
   $25 = $fixedPath;
   $26 = (__ZN15FileSystem_impl12findFilePathEPKc($24,$25)|0);
   $filePath = $26;
   $27 = HEAP32[10172>>2]|0;
   $28 = $filePath;
   HEAP32[$vararg_buffer2>>2] = $28;
   (_fprintf($27,22337,$vararg_buffer2)|0);
   $29 = $filePath;
   $30 = ($29|0)!=(0|0);
   if ($30) {
    $31 = (__Znwj(8)|0);
    __THREW__ = 0;
    invoke_vi(178,($31|0));
    $32 = __THREW__; __THREW__ = 0;
    $33 = $32&1;
    if ($33) {
     $45 = ___cxa_find_matching_catch()|0;
     $46 = tempRet0;
     $3 = $45;
     $4 = $46;
     __ZdlPv($31);
     $56 = $3;
     $57 = $4;
     ___resumeException($56|0);
     // unreachable;
    }
    $f = $31;
    $34 = HEAP32[$6>>2]|0;
    $35 = ((($34)) + 4|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = $filePath;
    HEAP32[$vararg_buffer5>>2] = $36;
    $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
    HEAP32[$vararg_ptr8>>2] = $37;
    (_snprintf($fileSystemPath,4096,22352,$vararg_buffer5)|0);
    $38 = HEAP32[10172>>2]|0;
    HEAP32[$vararg_buffer9>>2] = $fileSystemPath;
    (_fprintf($38,22358,$vararg_buffer9)|0);
    $39 = $f;
    $40 = (__ZN4File4openEPKcS1_($39,$fileSystemPath,29546)|0);
    if (!($40)) {
     $41 = $f;
     $42 = ($41|0)==(0|0);
     do {
      if (!($42)) {
       __THREW__ = 0;
       invoke_vi(177,($41|0));
       $43 = __THREW__; __THREW__ = 0;
       $44 = $43&1;
       if (!($44)) {
        __ZdlPv($41);
        break;
       }
       $47 = ___cxa_find_matching_catch()|0;
       $48 = tempRet0;
       $3 = $47;
       $4 = $48;
       __ZdlPv($41);
       $56 = $3;
       $57 = $4;
       ___resumeException($56|0);
       // unreachable;
      }
     } while(0);
     $f = 0;
    }
   }
  }
  $49 = $fixedPath;
  _free($49);
 }
 $50 = $2;
 $51 = $50&1;
 $$not = $51 ^ 1;
 $52 = $f;
 $53 = ($52|0)!=(0|0);
 $or$cond = $$not | $53;
 if ($or$cond) {
  $55 = $f;
  STACKTOP = sp;return ($55|0);
 }
 $54 = $1;
 HEAP32[$vararg_buffer12>>2] = $54;
 __Z5errorPKcz(22369,$vararg_buffer12);
 $55 = $f;
 STACKTOP = sp;return ($55|0);
}
function __ZN10FileSystem9closeFileEP4File($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $f;
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $1;
 __ZN4File5closeEv($6);
 $7 = $1;
 $8 = ($7|0)==(0|0);
 if ($8) {
  STACKTOP = sp;return;
 }
 __THREW__ = 0;
 invoke_vi(177,($7|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $11 = ___cxa_find_matching_catch()|0;
  $12 = tempRet0;
  $2 = $11;
  $3 = $12;
  __ZdlPv($7);
  $13 = $2;
  $14 = $3;
  ___resumeException($13|0);
  // unreachable;
 }
 __ZdlPv($7);
 STACKTOP = sp;return;
}
function __ZN10FileSystem9existFileEPKc($this,$path) {
 $this = $this|0;
 $path = $path|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $exists = 0, $f = 0, $fixedPath = 0, $path1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $path1 = sp + 40|0;
 $4 = sp + 8|0;
 $0 = $this;
 $1 = $path;
 $5 = $0;
 $exists = 0;
 $6 = $1;
 $7 = (__ZL7fixPathPKc($6)|0);
 $fixedPath = $7;
 $8 = $fixedPath;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  $35 = $exists;
  $36 = $35&1;
  STACKTOP = sp;return ($36|0);
 }
 $10 = (__ZNK16FileSystem_romfs6isOpenEv(400)|0);
 do {
  if ($10) {
   $11 = $fixedPath;
   $12 = (__ZN16FileSystem_romfs8openFileEPKci(400,$11,0)|0);
   $f = $12;
   $13 = $f;
   $14 = ($13|0)!=(0|0);
   $15 = $14&1;
   $exists = $15;
   $16 = $f;
   $17 = ($16|0)==(0|0);
   if (!($17)) {
    __THREW__ = 0;
    invoke_vi(177,($16|0));
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if (!($19)) {
     __ZdlPv($16);
     break;
    }
    $20 = ___cxa_find_matching_catch()|0;
    $21 = tempRet0;
    $2 = $20;
    $3 = $21;
    __ZdlPv($16);
    $37 = $2;
    $38 = $3;
    ___resumeException($37|0);
    // unreachable;
   }
  } else {
   $22 = HEAP32[$5>>2]|0;
   $23 = ((($22)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $fixedPath;
   HEAP32[$vararg_buffer>>2] = $24;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $25;
   (_snprintf($path1,4096,22352,$vararg_buffer)|0);
   __ZN4FileC2Ev($4);
   __THREW__ = 0;
   $26 = (invoke_iiii(179,($4|0),($path1|0),(29546|0))|0);
   $27 = __THREW__; __THREW__ = 0;
   $28 = $27&1;
   if (!($28)) {
    $29 = $26&1;
    $exists = $29;
    __ZN4FileD2Ev($4);
    break;
   }
   $30 = ___cxa_find_matching_catch()|0;
   $31 = tempRet0;
   $2 = $30;
   $3 = $31;
   __THREW__ = 0;
   invoke_vi(177,($4|0));
   $32 = __THREW__; __THREW__ = 0;
   $33 = $32&1;
   if ($33) {
    $39 = ___cxa_find_matching_catch(0|0)|0;
    $40 = tempRet0;
    ___clang_call_terminate($39);
    // unreachable;
   } else {
    $37 = $2;
    $38 = $3;
    ___resumeException($37|0);
    // unreachable;
   }
  }
 } while(0);
 $34 = $fixedPath;
 _free($34);
 $35 = $exists;
 $36 = $35&1;
 STACKTOP = sp;return ($36|0);
}
function __ZN16FileSystem_POSIXC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN15FileSystem_implC2Ev($1);
 $2 = 424;
 HEAP32[$1>>2] = $2;
 STACKTOP = sp;return;
}
function __ZN16FileSystem_romfs4openEPKc($this,$filePath) {
 $this = $this|0;
 $filePath = $filePath|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $filePath;
 $2 = $0;
 $3 = ((($2)) + 12|0);
 $4 = $1;
 $5 = (__ZN16MemoryMappedFile4openEPKcS1_($3,$4,29546)|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = ((($2)) + 12|0);
 $7 = (__ZN16MemoryMappedFile6getPtrEv($6)|0);
 $8 = ((($2)) + 4|0);
 HEAP32[$8>>2] = $7;
 $9 = ((($2)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = ((($2)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (_memcmp($13,22447,8)|0);
 $15 = ($14|0)==(0);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = ((($2)) + 8|0);
 HEAP32[$16>>2] = 16;
 __ZN16FileSystem_romfs10readStringEPc($2,0);
 $17 = ((($2)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 HEAP32[$2>>2] = $18;
 STACKTOP = sp;return;
}
function __ZNK16FileSystem_romfs6isOpenEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0);
 STACKTOP = sp;return ($3|0);
}
function __ZN15FileSystem_impl16setDataDirectoryEPKc($this,$dir) {
 $this = $this|0;
 $dir = $dir|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $dir;
 $2 = $0;
 $3 = $1;
 $4 = (___strdup($3)|0);
 $5 = ((($2)) + 4|0);
 HEAP32[$5>>2] = $4;
 $6 = $1;
 $7 = (_strlen($6)|0);
 $8 = (($7) + 1)|0;
 $9 = ((($2)) + 16|0);
 HEAP32[$9>>2] = $8;
 $10 = HEAP32[$2>>2]|0;
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $1;
 FUNCTION_TABLE_vii[$12 & 255]($2,$13);
 STACKTOP = sp;return;
}
function __ZL7fixPathPKc($src) {
 $src = $src|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dst = 0, $path = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $src;
 $1 = $0;
 $2 = (_strlen($1)|0);
 $3 = (($2) + 4)|0;
 $4 = (($3) + 1)|0;
 $5 = (_malloc($4)|0);
 $path = $5;
 $6 = $path;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  $32 = $path;
  STACKTOP = sp;return ($32|0);
 }
 $8 = $path;
 $dst = $8;
 $9 = $0;
 $10 = (_strncmp($9,22439,2)|0);
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = $0;
  $13 = ((($12)) + 3|0);
  $0 = $13;
 } else {
  $14 = $dst;
  (_strcpy($14,22442)|0);
  $15 = $dst;
  $16 = ((($15)) + 4|0);
  $dst = $16;
 }
 while(1) {
  $17 = $0;
  $18 = HEAP8[$17>>0]|0;
  $19 = $18 << 24 >> 24;
  $20 = ($19|0)==(92);
  if ($20) {
   $21 = $dst;
   HEAP8[$21>>0] = 47;
  } else {
   $22 = $0;
   $23 = HEAP8[$22>>0]|0;
   $24 = $dst;
   HEAP8[$24>>0] = $23;
  }
  $25 = $dst;
  $26 = ((($25)) + 1|0);
  $dst = $26;
  $27 = $0;
  $28 = ((($27)) + 1|0);
  $0 = $28;
  $29 = HEAP8[$27>>0]|0;
  $30 = ($29<<24>>24)!=(0);
  if (!($30)) {
   break;
  }
 }
 $31 = $path;
 __Z17stringToUpperCasePc($31);
 $32 = $path;
 STACKTOP = sp;return ($32|0);
}
function __ZN16FileSystem_romfs8openFileEPKci($this,$path,$level) {
 $this = $this|0;
 $path = $path|0;
 $level = $level|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $dataSize = 0, $fi = 0, $name = 0, $nextOffset = 0, $sep = 0, $specInfo = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $name = sp + 48|0;
 $1 = $this;
 $2 = $path;
 $3 = $level;
 $6 = $1;
 $7 = $3;
 $8 = ($7|0)==(0);
 if ($8) {
  $9 = HEAP32[$6>>2]|0;
  $10 = ((($6)) + 8|0);
  HEAP32[$10>>2] = $9;
 }
 $11 = $2;
 $12 = (_strchr($11,47)|0);
 $sep = $12;
 L4: while(1) {
  $13 = (__ZN16FileSystem_romfs8readLongEv($6)|0);
  $nextOffset = $13;
  $14 = (__ZN16FileSystem_romfs8readLongEv($6)|0);
  $specInfo = $14;
  $15 = (__ZN16FileSystem_romfs8readLongEv($6)|0);
  $dataSize = $15;
  $16 = ((($6)) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) + 4)|0;
  HEAP32[$16>>2] = $18;
  __ZN16FileSystem_romfs10readStringEPc($6,$name);
  $19 = $nextOffset;
  $20 = $19 & 7;
  switch ($20|0) {
  case 1:  {
   $21 = $sep;
   $22 = ($21|0)!=(0|0);
   if ($22) {
    $23 = $2;
    $24 = $sep;
    $25 = $2;
    $26 = $24;
    $27 = $25;
    $28 = (($26) - ($27))|0;
    $29 = (_strncasecmp($name,$23,$28)|0);
    $30 = ($29|0)==(0);
    if ($30) {
     label = 7;
     break L4;
    }
   }
   break;
  }
  case 2:  {
   $38 = $2;
   $39 = (_strcasecmp($name,$38)|0);
   $40 = ($39|0)==(0);
   if ($40) {
    label = 9;
    break L4;
   }
   break;
  }
  default: {
  }
  }
  $53 = $nextOffset;
  $54 = $53 & -16;
  $55 = ((($6)) + 8|0);
  HEAP32[$55>>2] = $54;
  $56 = ((($6)) + 8|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = ($57|0)!=(0);
  if (!($58)) {
   label = 13;
   break;
  }
 }
 if ((label|0) == 7) {
  $31 = $specInfo;
  $32 = ((($6)) + 8|0);
  HEAP32[$32>>2] = $31;
  $33 = $sep;
  $34 = ((($33)) + 1|0);
  $35 = $3;
  $36 = (($35) + 1)|0;
  $37 = (__ZN16FileSystem_romfs8openFileEPKci($6,$34,$36)|0);
  $0 = $37;
  $59 = $0;
  STACKTOP = sp;return ($59|0);
 }
 else if ((label|0) == 9) {
  $41 = ((($6)) + 8|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $dataSize;
  $44 = (__Z15FileImpl_createjj($42,$43)|0);
  $fi = $44;
  $45 = (__Znwj(8)|0);
  $46 = $fi;
  __THREW__ = 0;
  invoke_vii(180,($45|0),($46|0));
  $47 = __THREW__; __THREW__ = 0;
  $48 = $47&1;
  if ($48) {
   $49 = ___cxa_find_matching_catch()|0;
   $50 = tempRet0;
   $4 = $49;
   $5 = $50;
   __ZdlPv($45);
   $51 = $4;
   $52 = $5;
   ___resumeException($51|0);
   // unreachable;
  }
  $0 = $45;
  $59 = $0;
  STACKTOP = sp;return ($59|0);
 }
 else if ((label|0) == 13) {
  $0 = 0;
  $59 = $0;
  STACKTOP = sp;return ($59|0);
 }
 return (0)|0;
}
function __ZN15FileSystem_impl12findFilePathEPKc($this,$file) {
 $this = $this|0;
 $file = $file|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $this;
 $2 = $file;
 $3 = $1;
 $4 = HEAP32[10172>>2]|0;
 $5 = ((($3)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $2;
 HEAP32[$vararg_buffer>>2] = $6;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $7;
 (_fprintf($4,22389,$vararg_buffer)|0);
 $8 = ((($3)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if ($10) {
  $11 = $2;
  $0 = $11;
  $30 = $0;
  STACKTOP = sp;return ($30|0);
 }
 $i = 0;
 while(1) {
  $12 = $i;
  $13 = ((($3)) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($12|0)<($14|0);
  if (!($15)) {
   label = 8;
   break;
  }
  $16 = $i;
  $17 = ((($3)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + ($16<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $2;
  $22 = (_strcasecmp($20,$21)|0);
  $23 = ($22|0)==(0);
  $24 = $i;
  if ($23) {
   label = 6;
   break;
  }
  $29 = (($24) + 1)|0;
  $i = $29;
 }
 if ((label|0) == 6) {
  $25 = ((($3)) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) + ($24<<2)|0);
  $28 = HEAP32[$27>>2]|0;
  $0 = $28;
  $30 = $0;
  STACKTOP = sp;return ($30|0);
 }
 else if ((label|0) == 8) {
  $0 = 0;
  $30 = $0;
  STACKTOP = sp;return ($30|0);
 }
 return (0)|0;
}
function __ZN16FileSystem_romfs8readLongEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $l = 0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  $14 = $l;
  STACKTOP = sp;return ($14|0);
 }
 $5 = ((($1)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($1)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + ($8)|0);
 $10 = (__Z14READ_BE_UINT32PKv($9)|0);
 $l = $10;
 $11 = ((($1)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + 4)|0;
 HEAP32[$11>>2] = $13;
 $14 = $l;
 STACKTOP = sp;return ($14|0);
}
function __ZN16FileSystem_romfs10readStringEPc($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $len = 0, $src = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $s;
 $2 = $0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = ((($2)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($2)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) + ($9)|0);
 $src = $10;
 $11 = $1;
 $12 = ($11|0)!=(0|0);
 if ($12) {
  $13 = $1;
  $14 = $src;
  (_strcpy($13,$14)|0);
 }
 $15 = $src;
 $16 = (_strlen($15)|0);
 $17 = (($16) + 15)|0;
 $18 = $17 & -16;
 $len = $18;
 $19 = $len;
 $20 = ((($2)) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) + ($19))|0;
 HEAP32[$20>>2] = $22;
 STACKTOP = sp;return;
}
function __Z14READ_BE_UINT32PKv($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $b = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ptr;
 $1 = $0;
 $b = $1;
 $2 = $b;
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = $4 << 24;
 $6 = $b;
 $7 = ((($6)) + 1|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = $9 << 16;
 $11 = $5 | $10;
 $12 = $b;
 $13 = ((($12)) + 2|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $15 << 8;
 $17 = $11 | $16;
 $18 = $b;
 $19 = ((($18)) + 3|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 $22 = $17 | $21;
 STACKTOP = sp;return ($22|0);
}
function __ZN15FileSystem_implC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 444;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($1)) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($1)) + 12|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($1)) + 16|0);
 HEAP32[$6>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN16FileSystem_POSIXD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN15FileSystem_implD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN16FileSystem_POSIXD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(17,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN16FileSystem_POSIX26buildFileListFromDirectoryEPKc($this,$dir) {
 $this = $this|0;
 $dir = $dir|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $dir;
 STACKTOP = sp;return;
}
function __ZN15FileSystem_implD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 444;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 _free($4);
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = ((($1)) + 12|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($5|0)<($7|0);
  if (!($8)) {
   break;
  }
  $9 = $i;
  $10 = ((($1)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + ($9<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  _free($13);
  $14 = $i;
  $15 = (($14) + 1)|0;
  $i = $15;
 }
 $16 = ((($1)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 _free($17);
 STACKTOP = sp;return;
}
function __ZN15FileSystem_implD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(20,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN4GameC2EP10SystemStubPKcS3_S3_($this,$stub,$dataPath,$savePath,$musicPath) {
 $this = $this|0;
 $stub = $stub|0;
 $dataPath = $dataPath|0;
 $savePath = $savePath|0;
 $musicPath = $musicPath|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $stub;
 $2 = $dataPath;
 $3 = $savePath;
 $4 = $musicPath;
 $7 = $0;
 $8 = ((($7)) + 16|0);
 $9 = $2;
 __ZN10FileSystemC2EPKc($8,$9);
 $10 = ((($7)) + 20|0);
 __THREW__ = 0;
 invoke_vi(181,($10|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if (!($12)) {
  $13 = ((($7)) + 24|0);
  $14 = $1;
  HEAP32[$13>>2] = $14;
  $15 = ((($7)) + 32|0);
  $16 = $2;
  HEAP32[$15>>2] = $16;
  $17 = ((($7)) + 36|0);
  $18 = $3;
  HEAP32[$17>>2] = $18;
  $19 = ((($7)) + 40|0);
  $20 = $4;
  HEAP32[$19>>2] = $20;
  HEAP32[$7>>2] = -1;
  $21 = ((($7)) + 4|0);
  HEAP32[$21>>2] = -1;
  $22 = ((($7)) + 24|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($24)) + 80|0);
  $26 = HEAP32[$25>>2]|0;
  __THREW__ = 0;
  $27 = (invoke_ii($26|0,($23|0))|0);
  $28 = __THREW__; __THREW__ = 0;
  $29 = $28&1;
  if (!($29)) {
   $30 = ((($7)) + 28|0);
   HEAP32[$30>>2] = $27;
   $31 = ((($7)) + 44|0);
   HEAP32[$31>>2] = 1;
   __THREW__ = 0;
   invoke_vi(182,($7|0));
   $32 = __THREW__; __THREW__ = 0;
   $33 = $32&1;
   if (!($33)) {
    STACKTOP = sp;return;
   }
  }
 }
 $34 = ___cxa_find_matching_catch()|0;
 $35 = tempRet0;
 $5 = $34;
 $6 = $35;
 __THREW__ = 0;
 invoke_vi(183,($8|0));
 $36 = __THREW__; __THREW__ = 0;
 $37 = $36&1;
 if ($37) {
  $40 = ___cxa_find_matching_catch(0|0)|0;
  $41 = tempRet0;
  ___clang_call_terminate($40);
  // unreachable;
 } else {
  $38 = $5;
  $39 = $6;
  ___resumeException($38|0);
  // unreachable;
 }
}
function __ZN4Game13detectVersionEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 12|0);
 HEAP32[$2>>2] = 0;
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = (456 + ($3<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)!=(0|0);
  if (!($6)) {
   break;
  }
  $7 = ((($1)) + 16|0);
  $8 = $i;
  $9 = (456 + ($8<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (__ZN10FileSystem9existFileEPKc($7,$10)|0);
  $12 = $i;
  if ($11) {
   label = 4;
   break;
  }
  $16 = (($12) + 1)|0;
  $i = $16;
 }
 if ((label|0) == 4) {
  $13 = (456 + ($12<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($1)) + 12|0);
  HEAP32[$15>>2] = $14;
 }
 $17 = ((($1)) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)!=(0|0);
 if (!($19)) {
  __Z5errorPKcz(22500,$vararg_buffer);
 }
 $20 = ((($1)) + 16|0);
 $21 = (__ZN10FileSystem9existFileEPKc($20,22534)|0);
 $22 = ((($1)) + 8|0);
 $23 = $21&1;
 HEAP8[$22>>0] = $23;
 STACKTOP = sp;return;
}
function __ZN4Game7restartEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 FUNCTION_TABLE_vi[$6 & 255]($3);
 $7 = ((($1)) + 48|0);
 HEAP32[$7>>2] = -1;
 $8 = ((($1)) + 52|0);
 HEAP32[$8>>2] = -1;
 $9 = ((($1)) + 856|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($1)) + 808|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($1)) + 852|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($1)) + 868|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($1)) + 872|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($1)) + 3184|0);
 _memset(($14|0),0,620)|0;
 $15 = ((($1)) + 3804|0);
 _memset(($15|0),0,620)|0;
 $16 = ((($1)) + 4424|0);
 HEAP32[$16>>2] = 0;
 $17 = ((($1)) + 4428|0);
 HEAP32[$17>>2] = 0;
 $18 = ((($1)) + 4432|0);
 HEAP32[$18>>2] = 0;
 $19 = ((($1)) + 4436|0);
 HEAP32[$19>>2] = 0;
 $20 = ((($1)) + 4440|0);
 HEAP8[$20>>0] = 1;
 $21 = ((($1)) + 4441|0);
 HEAP8[$21>>0] = 0;
 $22 = ((($1)) + 4442|0);
 HEAP8[$22>>0] = 0;
 $23 = ((($1)) + 4443|0);
 HEAP8[$23>>0] = 0;
 $24 = ((($1)) + 4444|0);
 HEAP8[$24>>0] = 0;
 $25 = ((($1)) + 4448|0);
 HEAP32[$25>>2] = 0;
 $26 = ((($1)) + 4452|0);
 HEAP32[$26>>2] = 0;
 $27 = ((($1)) + 4456|0);
 HEAP32[$27>>2] = 0;
 $28 = ((($1)) + 4460|0);
 HEAP32[$28>>2] = -1;
 $29 = ((($1)) + 4464|0);
 HEAP32[$29>>2] = -1;
 $30 = ((($1)) + 4472|0);
 HEAP32[$30>>2] = 0;
 $31 = ((($1)) + 4476|0);
 HEAP8[$31>>0] = 0;
 $32 = ((($1)) + 4477|0);
 HEAP8[$32>>0] = 0;
 $33 = ((($1)) + 4478|0);
 dest=$33; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $34 = ((($1)) + 4612|0);
 HEAP32[$34>>2] = 0;
 $35 = ((($1)) + 4616|0);
 HEAP8[$35>>0] = 0;
 $36 = ((($1)) + 4656|0);
 HEAP32[$36>>2] = 0;
 $37 = ((($1)) + 4660|0);
 HEAP8[$37>>0] = 0;
 $38 = ((($1)) + 4788|0);
 HEAP8[$38>>0] = 0;
 $39 = ((($1)) + 4916|0);
 HEAP8[$39>>0] = 0;
 $40 = ((($1)) + 5044|0);
 HEAP32[$40>>2] = 585;
 $41 = ((($1)) + 5048|0);
 HEAP32[$41>>2] = 23;
 $42 = ((($1)) + 5052|0);
 _memset(($42|0),0,200)|0;
 $43 = ((($1)) + 5252|0);
 _memset(($43|0),0,5300)|0;
 $44 = ((($1)) + 10552|0);
 HEAP32[$44>>2] = 0;
 $45 = ((($1)) + 10556|0);
 _memset(($45|0),0,2000)|0;
 $46 = ((($1)) + 12556|0);
 HEAP32[$46>>2] = 0;
 $47 = ((($1)) + 12560|0);
 _memset(($47|0),0,3200)|0;
 $48 = ((($1)) + 15760|0);
 HEAP32[$48>>2] = 0;
 $49 = ((($1)) + 15764|0);
 _memset(($49|0),0,3200)|0;
 $50 = ((($1)) + 18964|0);
 dest=$50; stop=dest+80|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $51 = ((($1)) + 19044|0);
 _memset(($51|0),0,60000)|0;
 $52 = ((($1)) + 79044|0);
 HEAP32[$52>>2] = 0;
 $53 = ((($1)) + 79048|0);
 _memset(($53|0),0,560)|0;
 $54 = ((($1)) + 79608|0);
 HEAP32[$54>>2] = 0;
 $55 = ((($1)) + 79612|0);
 _memset(($55|0),0,1800)|0;
 $56 = ((($1)) + 81412|0);
 HEAP32[$56>>2] = 0;
 $57 = ((($1)) + 81416|0);
 _memset(($57|0),0,440)|0;
 $58 = ((($1)) + 81856|0);
 HEAP32[$58>>2] = 0;
 $59 = ((($1)) + 81860|0);
 _memset(($59|0),0,2400)|0;
 $60 = ((($1)) + 84260|0);
 HEAP32[$60>>2] = 0;
 $61 = ((($1)) + 4788|0);
 $62 = ((($1)) + 12|0);
 $63 = HEAP32[$62>>2]|0;
 (_strcpy($61,$63)|0);
 STACKTOP = sp;return;
}
function __ZN4Game4initEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 FUNCTION_TABLE_viiii[$6 & 255]($3,24390,640,480);
 __ZN4Game14allocateTablesEv($1);
 __ZN4Game17loadCommonSpritesEv($1);
 __ZN4Game7restartEv($1);
 $7 = ((($1)) + 8|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&1;
 if ($9) {
  $10 = ((($1)) + 60|0);
  HEAP32[$10>>2] = 0;
  HEAP32[$1>>2] = 4;
 } else {
  __ZN4Game9playVideoEPKc($1,22542);
  __ZN4Game9playVideoEPKc($1,22556);
  HEAP32[$1>>2] = 1;
 }
 $11 = ((($1)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 56|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (FUNCTION_TABLE_ii[$15 & 255]($12)|0);
 $17 = ((($1)) + 56|0);
 HEAP32[$17>>2] = $16;
 STACKTOP = sp;return;
}
function __ZN4Game9playVideoEPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $name;
 STACKTOP = sp;return;
}
function __ZN4Game14clearSceneDataEi($this,$anim) {
 $this = $this|0;
 $anim = $anim|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $i1 = 0;
 var $i3 = 0, $i4 = 0, $sa = 0, $sa2 = 0, $so = 0, $sof = 0, $som = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $anim;
 $2 = $0;
 $3 = $1;
 HEAP32[$vararg_buffer>>2] = $3;
 __Z5debugtPKcz(2,22571,$vararg_buffer);
 $4 = $1;
 $5 = ($4|0)==(-1);
 if ($5) {
  $6 = ((($2)) + 81856|0);
  HEAP32[$6>>2] = 0;
  $7 = ((($2)) + 15760|0);
  HEAP32[$7>>2] = 0;
  $8 = ((($2)) + 12556|0);
  HEAP32[$8>>2] = 0;
  $9 = ((($2)) + 10552|0);
  HEAP32[$9>>2] = 0;
  $10 = ((($2)) + 81412|0);
  HEAP32[$10>>2] = 0;
  $11 = ((($2)) + 79044|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($2)) + 4448|0);
  HEAP32[$12>>2] = 0;
 } else {
  $13 = $1;
  $14 = (($13) + 1)|0;
  $15 = ((($2)) + 12556|0);
  HEAP32[$15>>2] = $14;
  $16 = $1;
  $17 = ((($2)) + 10556|0);
  $18 = (($17) + (($16*40)|0)|0);
  $sa = $18;
  $19 = $sa;
  $20 = ((($19)) + 20|0);
  $21 = HEAP16[$20>>1]|0;
  $22 = $21 << 16 >> 16;
  $23 = $sa;
  $24 = ((($23)) + 22|0);
  $25 = HEAP16[$24>>1]|0;
  $26 = $25 << 16 >> 16;
  $27 = (($22) + ($26))|0;
  $28 = ((($2)) + 81412|0);
  HEAP32[$28>>2] = $27;
  $29 = ((($2)) + 81412|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) - 1)|0;
  $32 = ((($2)) + 79612|0);
  $33 = (($32) + (($31*6)|0)|0);
  $som = $33;
  $34 = $som;
  $35 = HEAP16[$34>>1]|0;
  $36 = $35 << 16 >> 16;
  $37 = $som;
  $38 = ((($37)) + 2|0);
  $39 = HEAP16[$38>>1]|0;
  $40 = $39 << 16 >> 16;
  $41 = (($36) + ($40))|0;
  $42 = ((($2)) + 79044|0);
  HEAP32[$42>>2] = $41;
  $43 = $sa;
  $44 = ((($43)) + 24|0);
  $45 = HEAP16[$44>>1]|0;
  $46 = $45 << 16 >> 16;
  $47 = $sa;
  $48 = ((($47)) + 26|0);
  $49 = HEAP16[$48>>1]|0;
  $50 = $49 << 16 >> 16;
  $51 = (($46) + ($50))|0;
  $52 = ((($2)) + 10552|0);
  HEAP32[$52>>2] = $51;
  $53 = $sa;
  $54 = ((($53)) + 28|0);
  $55 = HEAP16[$54>>1]|0;
  $56 = $55 << 16 >> 16;
  $57 = $sa;
  $58 = ((($57)) + 30|0);
  $59 = HEAP16[$58>>1]|0;
  $60 = $59 << 16 >> 16;
  $61 = (($56) + ($60))|0;
  $62 = ((($2)) + 15760|0);
  HEAP32[$62>>2] = $61;
  $63 = ((($2)) + 81856|0);
  HEAP32[$63>>2] = 0;
  $64 = ((($2)) + 4448|0);
  HEAP32[$64>>2] = 2;
 }
 (__ZN4Game18win16_sndPlaySoundEiPv($2,7,0)|0);
 $65 = ((($2)) + 79044|0);
 $66 = HEAP32[$65>>2]|0;
 $i = $66;
 while(1) {
  $67 = $i;
  $68 = ($67|0)<(3000);
  if (!($68)) {
   break;
  }
  $69 = $i;
  $70 = ((($2)) + 19044|0);
  $71 = (($70) + (($69*20)|0)|0);
  $sof = $71;
  $72 = $sof;
  $73 = HEAP32[$72>>2]|0;
  $74 = ($73|0)!=(0|0);
  if ($74) {
   $75 = $sof;
   $76 = HEAP32[$75>>2]|0;
   _free($76);
   $77 = $sof;
   HEAP32[$77>>2] = 0;
  }
  $78 = $i;
  $79 = (($78) + 1)|0;
  $i = $79;
 }
 $80 = ((($2)) + 12556|0);
 $81 = HEAP32[$80>>2]|0;
 $i1 = $81;
 while(1) {
  $82 = $i1;
  $83 = ($82|0)<(50);
  if (!($83)) {
   break;
  }
  $84 = $i1;
  $85 = ((($2)) + 10556|0);
  $86 = (($85) + (($84*40)|0)|0);
  $sa2 = $86;
  $87 = $sa2;
  $88 = ((($87)) + 32|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = ($89|0)!=(0|0);
  if ($90) {
   $91 = $sa2;
   $92 = ((($91)) + 32|0);
   $93 = HEAP32[$92>>2]|0;
   _free($93);
   $94 = $sa2;
   $95 = ((($94)) + 32|0);
   HEAP32[$95>>2] = 0;
  }
  $96 = $i1;
  $97 = (($96) + 1)|0;
  $i1 = $97;
 }
 $98 = ((($2)) + 10552|0);
 $99 = HEAP32[$98>>2]|0;
 $i3 = $99;
 while(1) {
  $100 = $i3;
  $101 = ($100|0)<(50);
  if (!($101)) {
   break;
  }
  $102 = $i3;
  $103 = ((($2)) + 5252|0);
  $104 = (($103) + (($102*106)|0)|0);
  $so = $104;
  $105 = $so;
  $106 = ((($105)) + 44|0);
  HEAP16[$106>>1] = 0;
  $107 = $so;
  $108 = ((($107)) + 86|0);
  dest=$108; stop=dest+20|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
  $109 = $i3;
  $110 = (($109) + 1)|0;
  $i3 = $110;
 }
 $i4 = 0;
 while(1) {
  $111 = $i4;
  $112 = ($111|0)<(10);
  if (!($112)) {
   break;
  }
  $113 = $i4;
  $114 = ((($2)) + 18964|0);
  $115 = (($114) + ($113<<2)|0);
  HEAP32[$115>>2] = 0;
  $116 = $i4;
  $117 = (($116) + 1)|0;
  $i4 = $117;
 }
 STACKTOP = sp;return;
}
function __ZN4Game8mainLoopEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)!=($4|0);
 L1: do {
  if ($5) {
   $6 = ((($1)) + 4|0);
   $7 = HEAP32[$6>>2]|0;
   $cond = ($7|0)==(3);
   if ($cond) {
    __ZN4Game12finiDialogueEv($1);
   }
   $8 = HEAP32[$1>>2]|0;
   $9 = ((($1)) + 4|0);
   HEAP32[$9>>2] = $8;
   $10 = ((($1)) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   switch ($11|0) {
   case 4:  {
    $12 = ((($1)) + 60|0);
    $13 = HEAP32[$12>>2]|0;
    __ZN4Game22drawBitmapSequenceDemoEi($1,$13);
    break L1;
    break;
   }
   case 3:  {
    __ZN4Game12initDialogueEv($1);
    break L1;
    break;
   }
   default: {
    break L1;
   }
   }
  }
 } while(0);
 $14 = ((($1)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 L10: do {
  switch ($15|0) {
  case 1:  {
   L11: while(1) {
    $16 = ((($1)) + 4440|0);
    $17 = HEAP8[$16>>0]|0;
    $18 = $17&1;
    if (!($18)) {
     break;
    }
    $19 = ((($1)) + 4440|0);
    HEAP8[$19>>0] = 0;
    $20 = ((($1)) + 4788|0);
    $21 = (__Z14stringEndsWithPKcS0_($20,22596)|0);
    do {
     if ($21) {
      (__ZN4Game18win16_sndPlaySoundEiPv($1,6,0)|0);
      $22 = ((($1)) + 4788|0);
      HEAP32[$vararg_buffer>>2] = $22;
      __Z5debugtPKcz(2,22600,$vararg_buffer);
      $23 = ((($1)) + 4788|0);
      $24 = (_strcmp($23,22621)|0);
      $25 = ($24|0)==(0);
      if ($25) {
       label = 11;
       break L11;
      }
      $26 = ((($1)) + 4916|0);
      $27 = ((($1)) + 4788|0);
      (_strcpy($26,$27)|0);
      $28 = ((($1)) + 4788|0);
      __ZN4Game8parseSCNEPKc($1,$28);
     } else {
      $29 = ((($1)) + 4788|0);
      $30 = (__Z14stringEndsWithPKcS0_($29,22642)|0);
      if (!($30)) {
       $38 = ((($1)) + 4788|0);
       HEAP32[$vararg_buffer8>>2] = $38;
       __Z5debugtPKcz(2,22712,$vararg_buffer8);
       $39 = ((($1)) + 4788|0);
       __ZN4Game7loadMOVEPKc($1,$39);
       break;
      }
      $31 = ((($1)) + 8|0);
      $32 = HEAP8[$31>>0]|0;
      $33 = $32&1;
      if ($33) {
       $34 = ((($1)) + 4788|0);
       $35 = (_strcmp($34,22646)|0);
       $36 = ($35|0)==(0);
       if ($36) {
        label = 16;
        break L11;
       }
      }
      $37 = ((($1)) + 4788|0);
      HEAP32[$vararg_buffer5>>2] = $37;
      __Z7warningPKcz(22683,$vararg_buffer5);
     }
    } while(0);
    $40 = ((($1)) + 4442|0);
    $41 = HEAP8[$40>>0]|0;
    $42 = $41&1;
    if ($42) {
     $43 = ((($1)) + 4442|0);
     HEAP8[$43>>0] = 0;
     $44 = ((($1)) + 44|0);
     $45 = HEAP32[$44>>2]|0;
     __ZN4Game9loadStateEib($1,$45,0);
     $46 = ((($1)) + 4616|0);
     __ZN4Game9playMusicEPKc($1,$46);
     $47 = ((($1)) + 4478|0);
     dest=$47; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
    }
    $48 = ((($1)) + 10552|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = ($49|0)!=(0);
    if (!($50)) {
     label = 22;
     break;
    }
    $51 = ((($1)) + 4460|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = ($52|0)==(-1);
    if ($53) {
     $54 = ((($1)) + 79608|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = (($55) - 1)|0;
     $57 = ((($1)) + 4460|0);
     HEAP32[$57>>2] = $56;
     $58 = ((($1)) + 4460|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = ($59|0)>(0);
     if ($60) {
      $61 = ((($1)) + 4460|0);
      HEAP32[$61>>2] = 0;
     }
    }
    $62 = ((($1)) + 4448|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = ($63|0)!=(0);
    if ($64) {
     $65 = ((($1)) + 64|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = ((($66)) + 40|0);
     __ZN4Game18setupScreenPaletteEPKh($1,$67);
    }
    $68 = ((($1)) + 4444|0);
    HEAP8[$68>>0] = 0;
    $69 = ((($1)) + 4916|0);
    $70 = (_strncmp($69,22768,3)|0);
    $71 = ($70|0)==(0);
    $72 = ((($1)) + 4468|0);
    $73 = $71&1;
    HEAP8[$72>>0] = $73;
   }
   if ((label|0) == 11) {
    __Z5debugtPKcz(1,22630,$vararg_buffer1);
   }
   else if ((label|0) == 16) {
    __Z5debugtPKcz(2,22654,$vararg_buffer3);
    HEAP32[$1>>2] = 4;
   }
   else if ((label|0) == 22) {
    ___assert_fail((22726|0),(22750|0),189,(22759|0));
    // unreachable;
   }
   __ZN4Game22updateKeysPressedTableEv($1);
   __ZN4Game25updateMouseButtonsPressedEv($1);
   __ZN4Game16runObjectsScriptEv($1);
   $74 = ((($1)) + 4441|0);
   $75 = HEAP8[$74>>0]|0;
   $76 = $75&1;
   if ($76) {
    $77 = ((($1)) + 4441|0);
    HEAP8[$77>>0] = 0;
    HEAP32[$1>>2] = 3;
   }
   break;
  }
  case 2:  {
   __ZN4Game13handleBagMenuEv($1);
   break;
  }
  case 3:  {
   __ZN4Game14handleDialogueEv($1);
   $78 = ((($1)) + 872|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = ($79|0)!=(0);
   if ($80) {
    HEAP32[$1>>2] = 1;
   }
   break;
  }
  case 4:  {
   $81 = ((($1)) + 24|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = ((($82)) + 8|0);
   $84 = ((($83)) + 1|0);
   $85 = HEAP8[$84>>0]|0;
   $86 = $85&1;
   if ($86) {
    $87 = ((($1)) + 24|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = ((($88)) + 8|0);
    $90 = ((($89)) + 1|0);
    HEAP8[$90>>0] = 0;
    $91 = ((($1)) + 60|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = (($92) + 1)|0;
    HEAP32[$91>>2] = $93;
    $94 = ((($1)) + 60|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ($95|0)==(3);
    if ($96) {
     HEAP32[$1>>2] = 1;
     break L10;
    }
    $97 = ((($1)) + 60|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($98|0)==(4);
    if ($99) {
     __ZN4Game7restartEv($1);
     HEAP32[$1>>2] = 1;
     break L10;
    } else {
     $100 = ((($1)) + 60|0);
     $101 = HEAP32[$100>>2]|0;
     __ZN4Game22drawBitmapSequenceDemoEi($1,$101);
     break L10;
    }
   }
   break;
  }
  default: {
  }
  }
 } while(0);
 $102 = ((($1)) + 24|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = HEAP32[$103>>2]|0;
 $105 = ((($104)) + 32|0);
 $106 = HEAP32[$105>>2]|0;
 FUNCTION_TABLE_vi[$106 & 255]($103);
 $107 = ((($1)) + 24|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = HEAP32[$108>>2]|0;
 $110 = ((($109)) + 56|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = (FUNCTION_TABLE_ii[$111 & 255]($108)|0);
 $113 = ((($1)) + 56|0);
 HEAP32[$113>>2] = $112;
 STACKTOP = sp;return;
}
function __ZN4Game22drawBitmapSequenceDemoEi($this,$num) {
 $this = $this|0;
 $num = $num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $filename = 0, $p = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $filename = sp + 16|0;
 $0 = $this;
 $1 = $num;
 $2 = $0;
 $3 = $1;
 $4 = (468 + ($3<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$vararg_buffer>>2] = $5;
 (_snprintf($filename,32,22772,$vararg_buffer)|0);
 $6 = ((($2)) + 16|0);
 $7 = (__ZN10FileSystem9existFileEPKc($6,$filename)|0);
 if (!($7)) {
  $8 = (_strrchr($filename,46)|0);
  $p = $8;
  $9 = $p;
  $10 = ($9|0)!=(0|0);
  if ($10) {
   $11 = $p;
   $12 = ((($11)) + 1|0);
   (_strcpy($12,22791)|0);
  }
 }
 __ZN4Game7loadWGPEPKc($2,$filename);
 $13 = ((($2)) + 24|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($2)) + 64|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($19)) + 40|0);
 FUNCTION_TABLE_viii[$17 & 255]($14,$20,256);
 $21 = ((($2)) + 24|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($23)) + 24|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($2)) + 68|0);
 $27 = ((($26)) + 8|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($2)) + 68|0);
 $30 = ((($29)) + 4|0);
 $31 = HEAP16[$30>>1]|0;
 $32 = $31&65535;
 FUNCTION_TABLE_viiiiiiii[$25 & 127]($22,0,0,640,480,$28,$32,0);
 STACKTOP = sp;return;
}
function __ZN4Game9playMusicEPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $f = 0, $f1 = 0, $filePath = 0, $i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr4 = 0;
 var $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 576|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $filePath = sp + 56|0;
 $0 = $this;
 $1 = $name;
 $4 = $0;
 $5 = ((($4)) + 4612|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if (!($7)) {
  ___assert_fail((22795|0),(22750|0),998,(22812|0));
  // unreachable;
 }
 $8 = $1;
 $9 = HEAP8[$8>>0]|0;
 $10 = $9 << 24 >> 24;
 $11 = ($10|0)==(0);
 if ($11) {
  STACKTOP = sp;return;
 }
 $12 = $1;
 $13 = (_strncmp($12,22822,8)|0);
 $14 = ($13|0)!=(0);
 if ($14) {
  STACKTOP = sp;return;
 }
 $15 = $1;
 HEAP32[$vararg_buffer>>2] = $15;
 __Z5debugtPKcz(2,22831,$vararg_buffer);
 __ZN4Game9stopMusicEv($4);
 $i = 0;
 while(1) {
  $16 = $i;
  $17 = ($16>>>0)<(12);
  if (!($17)) {
   label = 17;
   break;
  }
  $18 = $i;
  $19 = (488 + ($18<<3)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $1;
  $22 = ((($21)) + 8|0);
  $23 = (_strcasecmp($20,$22)|0);
  $24 = ($23|0)==(0);
  if ($24) {
   break;
  }
  $52 = $i;
  $53 = (($52) + 1)|0;
  $i = $53;
 }
 if ((label|0) == 17) {
  $54 = ((($4)) + 16|0);
  $55 = $1;
  $56 = (__ZN10FileSystem8openFileEPKcb($54,$55,0)|0);
  $f1 = $56;
  $57 = $f1;
  $58 = ($57|0)!=(0|0);
  if ($58) {
   $59 = ((($4)) + 28|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = HEAP32[$60>>2]|0;
   $62 = ((($61)) + 20|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $f1;
   $65 = ((($4)) + 52|0);
   FUNCTION_TABLE_viii[$63 & 255]($60,$64,$65);
   $66 = ((($4)) + 16|0);
   $67 = $f1;
   __ZN10FileSystem9closeFileEP4File($66,$67);
   STACKTOP = sp;return;
  } else {
   $68 = $1;
   HEAP32[$vararg_buffer9>>2] = $68;
   __Z7warningPKcz(22895,$vararg_buffer9);
   STACKTOP = sp;return;
  }
 }
 $25 = ((($4)) + 40|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $i;
 $28 = (488 + ($27<<3)|0);
 $29 = ((($28)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 HEAP32[$vararg_buffer1>>2] = $26;
 $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
 HEAP32[$vararg_ptr4>>2] = $30;
 (_snprintf($filePath,512,22853,$vararg_buffer1)|0);
 $31 = $1;
 HEAP32[$vararg_buffer5>>2] = $31;
 $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
 HEAP32[$vararg_ptr8>>2] = $filePath;
 __Z5debugtPKcz(2,22870,$vararg_buffer5);
 $32 = (__Znwj(8)|0);
 __THREW__ = 0;
 invoke_vi(178,($32|0));
 $33 = __THREW__; __THREW__ = 0;
 $34 = $33&1;
 if ($34) {
  $44 = ___cxa_find_matching_catch()|0;
  $45 = tempRet0;
  $2 = $44;
  $3 = $45;
  __ZdlPv($32);
  $69 = $2;
  $70 = $3;
  ___resumeException($69|0);
  // unreachable;
 }
 $f = $32;
 $35 = $f;
 $36 = (__ZN4File4openEPKcS1_($35,$filePath,29546)|0);
 if ($36) {
  $37 = ((($4)) + 28|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = HEAP32[$38>>2]|0;
  $40 = ((($39)) + 20|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $f;
  $43 = ((($4)) + 52|0);
  FUNCTION_TABLE_viii[$41 & 255]($38,$42,$43);
  STACKTOP = sp;return;
 }
 $46 = $f;
 $47 = ($46|0)==(0|0);
 if ($47) {
  STACKTOP = sp;return;
 }
 __THREW__ = 0;
 invoke_vi(177,($46|0));
 $48 = __THREW__; __THREW__ = 0;
 $49 = $48&1;
 if ($49) {
  $50 = ___cxa_find_matching_catch()|0;
  $51 = tempRet0;
  $2 = $50;
  $3 = $51;
  __ZdlPv($46);
  $69 = $2;
  $70 = $3;
  ___resumeException($69|0);
  // unreachable;
 } else {
  __ZdlPv($46);
  STACKTOP = sp;return;
 }
}
function __ZN4Game18setupScreenPaletteEPKh($this,$src) {
 $this = $this|0;
 $src = $src|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $src;
 $2 = $0;
 $3 = ((($2)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $1;
 FUNCTION_TABLE_viii[$7 & 255]($4,$8,256);
 STACKTOP = sp;return;
}
function __ZN4Game22updateKeysPressedTableEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $or$cond = 0, $slot = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(2,22938,$vararg_buffer);
 $2 = ((($1)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 8|0);
 $5 = ((($4)) + 1|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&1;
 $8 = $7 ? 1 : 0;
 $9 = $8&255;
 $10 = ((($1)) + 4478|0);
 $11 = ((($10)) + 13|0);
 HEAP8[$11>>0] = $9;
 $12 = ((($1)) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 8|0);
 $15 = ((($14)) + 3|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&1;
 $18 = $17 ? 1 : 0;
 $19 = $18&255;
 $20 = ((($1)) + 4478|0);
 $21 = ((($20)) + 16|0);
 HEAP8[$21>>0] = $19;
 $22 = ((($1)) + 24|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($23)) + 8|0);
 $25 = ((($24)) + 2|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&1;
 $28 = $27 ? 1 : 0;
 $29 = $28&255;
 $30 = ((($1)) + 4478|0);
 $31 = ((($30)) + 32|0);
 HEAP8[$31>>0] = $29;
 $32 = ((($1)) + 24|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ((($33)) + 8|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = $35&255;
 $37 = $36 & 4;
 $38 = ($37|0)!=(0);
 $39 = $38 ? 1 : 0;
 $40 = $39&255;
 $41 = ((($1)) + 4478|0);
 $42 = ((($41)) + 37|0);
 HEAP8[$42>>0] = $40;
 $43 = ((($1)) + 24|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ((($44)) + 8|0);
 $46 = HEAP8[$45>>0]|0;
 $47 = $46&255;
 $48 = $47 & 1;
 $49 = ($48|0)!=(0);
 $50 = $49 ? 1 : 0;
 $51 = $50&255;
 $52 = ((($1)) + 4478|0);
 $53 = ((($52)) + 38|0);
 HEAP8[$53>>0] = $51;
 $54 = ((($1)) + 24|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ((($55)) + 8|0);
 $57 = HEAP8[$56>>0]|0;
 $58 = $57&255;
 $59 = $58 & 8;
 $60 = ($59|0)!=(0);
 $61 = $60 ? 1 : 0;
 $62 = $61&255;
 $63 = ((($1)) + 4478|0);
 $64 = ((($63)) + 39|0);
 HEAP8[$64>>0] = $62;
 $65 = ((($1)) + 24|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = ((($66)) + 8|0);
 $68 = HEAP8[$67>>0]|0;
 $69 = $68&255;
 $70 = $69 & 2;
 $71 = ($70|0)!=(0);
 $72 = $71 ? 1 : 0;
 $73 = $72&255;
 $74 = ((($1)) + 4478|0);
 $75 = ((($74)) + 40|0);
 HEAP8[$75>>0] = $73;
 $76 = ((($1)) + 24|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = ((($77)) + 8|0);
 $79 = ((($78)) + 5|0);
 $80 = HEAP8[$79>>0]|0;
 $81 = $80&1;
 if ($81) {
  $82 = ((($1)) + 24|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = ((($83)) + 8|0);
  $85 = ((($84)) + 5|0);
  HEAP8[$85>>0] = 0;
  $86 = ((($1)) + 3804|0);
  $87 = HEAP16[$86>>1]|0;
  $88 = $87 << 16 >> 16;
  $89 = ($88|0)<(10);
  if ($89) {
   $90 = ((($1)) + 4448|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = ($91|0)==(2);
   if ($92) {
    $93 = ((($1)) + 4656|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($94|0)!=(-1000);
    if ($95) {
     HEAP32[$1>>2] = 2;
    }
   }
  }
 }
 $96 = ((($1)) + 24|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = ((($97)) + 8|0);
 $99 = ((($98)) + 4|0);
 $100 = HEAP8[$99>>0]|0;
 $101 = $100&1;
 if ($101) {
  $102 = ((($1)) + 24|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = ((($103)) + 8|0);
  $105 = ((($104)) + 4|0);
  HEAP8[$105>>0] = 0;
  $106 = ((($1)) + 4476|0);
  $107 = HEAP8[$106>>0]|0;
  $108 = $107&1;
  $109 = $108 ^ 1;
  $110 = ((($1)) + 4476|0);
  $111 = $109&1;
  HEAP8[$110>>0] = $111;
 }
 $112 = ((($1)) + 24|0);
 $113 = HEAP32[$112>>2]|0;
 $114 = ((($113)) + 8|0);
 $115 = ((($114)) + 24|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = ($116|0)!=(0);
 if ($117) {
  $118 = ((($1)) + 44|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = ((($1)) + 24|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = ((($121)) + 8|0);
  $123 = ((($122)) + 24|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = (($119) + ($124))|0;
  $slot = $125;
  $126 = $slot;
  $127 = ($126|0)>=(1);
  $128 = $slot;
  $129 = ($128|0)<=(999);
  $or$cond = $127 & $129;
  if ($or$cond) {
   $130 = $slot;
   $131 = ((($1)) + 44|0);
   HEAP32[$131>>2] = $130;
   $132 = ((($1)) + 44|0);
   $133 = HEAP32[$132>>2]|0;
   HEAP32[$vararg_buffer2>>2] = $133;
   __Z5debugtPKcz(1,22969,$vararg_buffer2);
  }
  $134 = ((($1)) + 24|0);
  $135 = HEAP32[$134>>2]|0;
  $136 = ((($135)) + 8|0);
  $137 = ((($136)) + 24|0);
  HEAP32[$137>>2] = 0;
 }
 $138 = ((($1)) + 24|0);
 $139 = HEAP32[$138>>2]|0;
 $140 = ((($139)) + 8|0);
 $141 = ((($140)) + 21|0);
 $142 = HEAP8[$141>>0]|0;
 $143 = $142&1;
 if ($143) {
  $144 = ((($1)) + 24|0);
  $145 = HEAP32[$144>>2]|0;
  $146 = ((($145)) + 8|0);
  $147 = ((($146)) + 21|0);
  HEAP8[$147>>0] = 0;
  $148 = ((($1)) + 44|0);
  $149 = HEAP32[$148>>2]|0;
  __ZN4Game9loadStateEib($1,$149,1);
  $150 = ((($1)) + 4440|0);
  $151 = HEAP8[$150>>0]|0;
  $152 = $151&1;
  $153 = ((($1)) + 4442|0);
  $154 = $152&1;
  HEAP8[$153>>0] = $154;
 }
 $155 = ((($1)) + 24|0);
 $156 = HEAP32[$155>>2]|0;
 $157 = ((($156)) + 8|0);
 $158 = ((($157)) + 20|0);
 $159 = HEAP8[$158>>0]|0;
 $160 = $159&1;
 if ($160) {
  $161 = ((($1)) + 24|0);
  $162 = HEAP32[$161>>2]|0;
  $163 = ((($162)) + 8|0);
  $164 = ((($163)) + 20|0);
  HEAP8[$164>>0] = 0;
  $165 = ((($1)) + 44|0);
  $166 = HEAP32[$165>>2]|0;
  __ZN4Game9saveStateEi($1,$166);
 }
 $167 = ((($1)) + 4444|0);
 $168 = HEAP8[$167>>0]|0;
 $169 = $168&1;
 if (!($169)) {
  STACKTOP = sp;return;
 }
 $170 = ((($1)) + 24|0);
 $171 = HEAP32[$170>>2]|0;
 $172 = ((($171)) + 8|0);
 $173 = ((($172)) + 1|0);
 $174 = HEAP8[$173>>0]|0;
 $175 = $174&1;
 if (!($175)) {
  STACKTOP = sp;return;
 }
 $176 = ((($1)) + 24|0);
 $177 = HEAP32[$176>>2]|0;
 $178 = ((($177)) + 8|0);
 $179 = ((($178)) + 1|0);
 HEAP8[$179>>0] = 0;
 __ZN4Game7restartEv($1);
 STACKTOP = sp;return;
}
function __ZN4Game25updateMouseButtonsPressedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4608|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 8|0);
 $6 = ((($5)) + 7|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&1;
 if ($8) {
  $9 = ((($1)) + 24|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($10)) + 8|0);
  $12 = ((($11)) + 7|0);
  HEAP8[$12>>0] = 0;
  $13 = ((($1)) + 4608|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $14 | 1;
  HEAP32[$13>>2] = $15;
 }
 $16 = ((($1)) + 24|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($17)) + 8|0);
 $19 = ((($18)) + 8|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&1;
 if (!($21)) {
  STACKTOP = sp;return;
 }
 $22 = ((($1)) + 24|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($23)) + 8|0);
 $25 = ((($24)) + 8|0);
 HEAP8[$25>>0] = 0;
 $26 = ((($1)) + 4608|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $27 | 2;
 HEAP32[$26>>2] = $28;
 STACKTOP = sp;return;
}
function __ZN4Game16runObjectsScriptEv($this) {
 $this = $this|0;
 var $$field = 0, $$field20 = 0, $$field23 = 0, $$field26 = 0, $$index19 = 0, $$index25 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $anim = 0, $cop = 0, $endOfDataOffset = 0, $endOfStatementDataOffset = 0, $i = 0, $i2 = 0, $loop = 0, $oop = 0, $op = 0, $op1 = 0;
 var $so = 0, $start = 0, $statement = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer16 = 0, $vararg_buffer3 = 0, $vararg_buffer8 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer16 = sp + 56|0;
 $vararg_buffer11 = sp + 40|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(2,22999,$vararg_buffer);
 $2 = ((($1)) + 3152|0);
 $3 = ((($2)) + 24|0);
 HEAP32[$3>>2] = -1;
 $4 = ((($1)) + 4448|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(3);
 if (!($6)) {
  ___assert_fail((23024|0),(22750|0),434,(23044|0));
  // unreachable;
 }
 $7 = ((($1)) + 3804|0);
 $8 = ((($7)) + 618|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = ($9<<16>>16)!=(0);
 if ($10) {
  $11 = ((($1)) + 4478|0);
  dest=$11; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 }
 $12 = ((($1)) + 4448|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(2);
 do {
  if ($14) {
   $15 = ((($1)) + 4468|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = $16&1;
   $18 = $17 ? 1 : 0;
   $start = $18;
   $19 = ((($1)) + 4468|0);
   HEAP8[$19>>0] = 0;
   $20 = $start;
   $i = $20;
   L9: while(1) {
    $21 = $i;
    $22 = ((($1)) + 10552|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ($21|0)<($23|0);
    if (!($24)) {
     label = 36;
     break;
    }
    $25 = $i;
    $26 = ((($1)) + 5252|0);
    $27 = (($26) + (($25*106)|0)|0);
    $so = $27;
    $28 = $so;
    $29 = ((($28)) + 42|0);
    $30 = HEAP16[$29>>1]|0;
    $31 = $30 << 16 >> 16;
    $32 = ($31|0)==(0);
    L12: do {
     if (!($32)) {
      $33 = $so;
      $34 = ((($33)) + 42|0);
      $35 = HEAP16[$34>>1]|0;
      $36 = $35 << 16 >> 16;
      $37 = ($36|0)==(-1);
      if (!($37)) {
       $38 = $i;
       HEAP32[$vararg_buffer1>>2] = $38;
       __Z5debugtPKcz(2,23061,$vararg_buffer1);
       $39 = $i;
       $40 = ((($1)) + 3152|0);
       $41 = ((($40)) + 12|0);
       HEAP32[$41>>2] = $39;
       $42 = $so;
       $43 = ((($42)) + 32|0);
       $44 = HEAP16[$43>>1]|0;
       $45 = $44 << 16 >> 16;
       $46 = ((($1)) + 79612|0);
       $47 = (($46) + (($45*6)|0)|0);
       $48 = ((($47)) + 4|0);
       $49 = HEAP16[$48>>1]|0;
       $50 = $49 << 16 >> 16;
       $anim = $50;
       $51 = $anim;
       $52 = ($51|0)>=(0);
       if (!($52)) {
        label = 12;
        break L9;
       }
       $53 = $anim;
       $54 = ((($1)) + 12556|0);
       $55 = HEAP32[$54>>2]|0;
       $56 = ($53|0)<($55|0);
       if (!($56)) {
        label = 12;
        break L9;
       }
       $57 = $anim;
       $58 = ((($1)) + 10556|0);
       $59 = (($58) + (($57*40)|0)|0);
       $60 = ((($59)) + 32|0);
       $61 = HEAP32[$60>>2]|0;
       $62 = ((($1)) + 3152|0);
       HEAP32[$62>>2] = $61;
       $63 = $anim;
       $64 = ((($1)) + 10556|0);
       $65 = (($64) + (($63*40)|0)|0);
       $66 = ((($65)) + 36|0);
       $67 = HEAP16[$66>>1]|0;
       $68 = $67&65535;
       $endOfDataOffset = $68;
       $69 = ((($1)) + 3152|0);
       $70 = ((($69)) + 4|0);
       HEAP32[$70>>2] = 0;
       $statement = 0;
       while(1) {
        $71 = ((($1)) + 3152|0);
        $72 = ((($71)) + 4|0);
        $73 = HEAP32[$72>>2]|0;
        $74 = $endOfDataOffset;
        $75 = ($73|0)<($74|0);
        if (!($75)) {
         break L12;
        }
        $76 = $statement;
        $77 = ((($1)) + 3152|0);
        $78 = ((($77)) + 28|0);
        HEAP32[$78>>2] = $76;
        $79 = ((($1)) + 3152|0);
        $80 = (__ZN6Script13fetchNextWordEv($79)|0);
        $81 = $80 << 16 >> 16;
        $endOfStatementDataOffset = $81;
        $82 = ((($1)) + 3152|0);
        $83 = ((($82)) + 20|0);
        HEAP32[$83>>2] = -1;
        $84 = $endOfStatementDataOffset;
        $85 = ((($1)) + 3152|0);
        $86 = ((($85)) + 8|0);
        HEAP32[$86>>2] = $84;
        $loop = 1;
        while(1) {
         $87 = $loop;
         $88 = $87&1;
         if (!($88)) {
          break;
         }
         $89 = ((($1)) + 3152|0);
         $90 = (__ZN6Script13fetchNextWordEv($89)|0);
         $91 = $90 << 16 >> 16;
         $op = $91;
         $92 = $statement;
         $93 = $i;
         $94 = $op;
         HEAP32[$vararg_buffer3>>2] = $92;
         $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
         HEAP32[$vararg_ptr6>>2] = $93;
         $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
         HEAP32[$vararg_ptr7>>2] = $94;
         __Z5debugtPKcz(4,23143,$vararg_buffer3);
         $95 = $op;
         $96 = ($95|0)==(0);
         if ($96) {
          break;
         }
         $97 = $op;
         $98 = (__ZNK4Game19findConditionOpcodeEi($1,$97)|0);
         $cop = $98;
         $99 = $cop;
         $100 = ($99|0)!=(0|0);
         if (!($100)) {
          $101 = $op;
          HEAP32[$vararg_buffer8>>2] = $101;
          __Z5errorPKcz(23175,$vararg_buffer8);
         }
         $102 = $cop;
         $103 = ((($102)) + 4|0);
         $$field = HEAP32[$103>>2]|0;
         $$index19 = ((($103)) + 4|0);
         $$field20 = HEAP32[$$index19>>2]|0;
         $104 = $$field20 >> 1;
         $105 = (($1) + ($104)|0);
         $106 = $$field20 & 1;
         $107 = ($106|0)!=(0);
         if ($107) {
          $108 = HEAP32[$105>>2]|0;
          $109 = (($108) + ($$field)|0);
          $110 = HEAP32[$109>>2]|0;
          $112 = $110;
         } else {
          $111 = $$field;
          $112 = $111;
         }
         $113 = (FUNCTION_TABLE_ii[$112 & 255]($105)|0);
         $114 = $113&1;
         $loop = $114;
        }
        $115 = $loop;
        $116 = $115&1;
        L32: do {
         if ($116) {
          while(1) {
           $117 = ((($1)) + 3152|0);
           $118 = ((($117)) + 4|0);
           $119 = HEAP32[$118>>2]|0;
           $120 = $endOfStatementDataOffset;
           $121 = ($119|0)<($120|0);
           if (!($121)) {
            break L32;
           }
           $122 = ((($1)) + 3152|0);
           $123 = (__ZN6Script13fetchNextWordEv($122)|0);
           $124 = $123 << 16 >> 16;
           $op1 = $124;
           $125 = $statement;
           $126 = $i;
           $127 = $op1;
           HEAP32[$vararg_buffer11>>2] = $125;
           $vararg_ptr14 = ((($vararg_buffer11)) + 4|0);
           HEAP32[$vararg_ptr14>>2] = $126;
           $vararg_ptr15 = ((($vararg_buffer11)) + 8|0);
           HEAP32[$vararg_ptr15>>2] = $127;
           __Z5debugtPKcz(4,23196,$vararg_buffer11);
           $128 = $op1;
           $129 = ($128|0)==(100);
           if ($129) {
            break;
           }
           $133 = $op1;
           $134 = (__ZNK4Game18findOperatorOpcodeEi($1,$133)|0);
           $oop = $134;
           $135 = $oop;
           $136 = ($135|0)!=(0|0);
           if (!($136)) {
            $137 = $op1;
            HEAP32[$vararg_buffer16>>2] = $137;
            __Z5errorPKcz(23227,$vararg_buffer16);
           }
           $138 = $oop;
           $139 = ((($138)) + 4|0);
           $$field23 = HEAP32[$139>>2]|0;
           $$index25 = ((($139)) + 4|0);
           $$field26 = HEAP32[$$index25>>2]|0;
           $140 = $$field26 >> 1;
           $141 = (($1) + ($140)|0);
           $142 = $$field26 & 1;
           $143 = ($142|0)!=(0);
           if ($143) {
            $144 = HEAP32[$141>>2]|0;
            $145 = (($144) + ($$field23)|0);
            $146 = HEAP32[$145>>2]|0;
            $148 = $146;
           } else {
            $147 = $$field23;
            $148 = $147;
           }
           FUNCTION_TABLE_vi[$148 & 255]($141);
          }
          $130 = $endOfDataOffset;
          $131 = ((($1)) + 3152|0);
          $132 = ((($131)) + 4|0);
          HEAP32[$132>>2] = $130;
          $endOfStatementDataOffset = $130;
         }
        } while(0);
        $149 = $endOfStatementDataOffset;
        $150 = ((($1)) + 3152|0);
        $151 = ((($150)) + 4|0);
        HEAP32[$151>>2] = $149;
        $152 = $statement;
        $153 = (($152) + 1)|0;
        $statement = $153;
       }
      }
     }
    } while(0);
    $154 = $i;
    $155 = (($154) + 1)|0;
    $i = $155;
   }
   if ((label|0) == 12) {
    ___assert_fail((23106|0),(22750|0),449,(23044|0));
    // unreachable;
   }
   else if ((label|0) == 36) {
    $156 = ((($1)) + 872|0);
    HEAP32[$156>>2] = 0;
    $157 = ((($1)) + 3152|0);
    $158 = ((($157)) + 24|0);
    $159 = HEAP32[$158>>2]|0;
    $160 = ($159|0)!=(-1);
    if ($160) {
     $161 = ((($1)) + 3152|0);
     $162 = ((($161)) + 24|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = ((($1)) + 81856|0);
     $165 = HEAP32[$164>>2]|0;
     $166 = ($163|0)<($165|0);
     if ($166) {
      $167 = ((($1)) + 4788|0);
      $168 = ((($1)) + 3152|0);
      $169 = ((($168)) + 24|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ((($1)) + 81416|0);
      $172 = (($171) + (($170*22)|0)|0);
      $173 = ((($172)) + 2|0);
      (_strcpy($167,$173)|0);
      $174 = ((($1)) + 4440|0);
      HEAP8[$174>>0] = 1;
     }
    }
    $i2 = 0;
    while(1) {
     $175 = $i2;
     $176 = ((($1)) + 10552|0);
     $177 = HEAP32[$176>>2]|0;
     $178 = ($175|0)<($177|0);
     if (!($178)) {
      break;
     }
     $179 = $i2;
     __ZN4Game18reinitializeObjectEi($1,$179);
     $180 = $i2;
     $181 = (($180) + 1)|0;
     $i2 = $181;
    }
    $182 = ((($1)) + 3804|0);
    $183 = HEAP16[$182>>1]|0;
    $184 = $183 << 16 >> 16;
    $185 = ($184|0)>=(10);
    if ($185) {
     $186 = ((($1)) + 4444|0);
     $187 = HEAP8[$186>>0]|0;
     $188 = $187&1;
     if (!($188)) {
      $189 = ((($1)) + 4616|0);
      (_strcpy($189,23247)|0);
      $190 = ((($1)) + 4616|0);
      __ZN4Game9playMusicEPKc($1,$190);
      $191 = ((($1)) + 4444|0);
      HEAP8[$191>>0] = 1;
     }
    }
    $192 = ((($1)) + 4448|0);
    $193 = HEAP32[$192>>2]|0;
    $194 = ($193|0)==(2);
    if (!($194)) {
     break;
    }
    __ZN4Game13updateObjectsEv($1);
    break;
   }
  }
 } while(0);
 $195 = ((($1)) + 3804|0);
 $196 = ((($195)) + 482|0);
 $197 = HEAP16[$196>>1]|0;
 $198 = $197 << 16 >> 16;
 $199 = ($198|0)==(1);
 if (!($199)) {
  STACKTOP = sp;return;
 }
 __ZN4Game9stopMusicEv($1);
 __ZN4Game14clearSceneDataEi($1,-1);
 $200 = ((($1)) + 3804|0);
 $201 = ((($200)) + 482|0);
 HEAP16[$201>>1] = 2;
 __ZN4Game9playVideoEPKc($1,23268);
 $202 = ((($1)) + 4788|0);
 (_strcpy($202,23283)|0);
 $203 = ((($1)) + 4440|0);
 HEAP8[$203>>0] = 1;
 STACKTOP = sp;return;
}
function __ZN4Game18reinitializeObjectEi($this,$object) {
 $this = $this|0;
 $object = $object|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $rnd = 0, $so = 0;
 var $state = 0, $t = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $object;
 $2 = $0;
 $3 = $1;
 HEAP32[$vararg_buffer>>2] = $3;
 __Z5debugtPKcz(2,23291,$vararg_buffer);
 $4 = $1;
 $5 = (__ZN4Game16derefSceneObjectEi($2,$4)|0);
 $so = $5;
 $6 = $so;
 $7 = ((($6)) + 44|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8 << 16 >> 16;
 $10 = ($9|0)!=(1);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = $so;
 $12 = ((($11)) + 44|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = $13 << 16 >> 16;
 $15 = ($14|0)!=(2);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $state = 0;
 $16 = $so;
 $17 = ((($16)) + 38|0);
 $18 = HEAP16[$17>>1]|0;
 $19 = $18 << 16 >> 16;
 switch ($19|0) {
 case 1:  {
  $state = 1;
  break;
 }
 case 2:  {
  $20 = ((($2)) + 20|0);
  $21 = (__ZN15RandomGenerator9getNumberEv($20)|0);
  $rnd = $21;
  $22 = $rnd;
  $23 = $22 << 16 >> 16;
  $24 = $so;
  $25 = ((($24)) + 40|0);
  $26 = HEAP16[$25>>1]|0;
  $27 = $26 << 16 >> 16;
  $28 = Math_imul($23, $27)|0;
  $29 = (($28|0) / 32768)&-1;
  $t = $29;
  $30 = $t;
  $31 = $30 & 65535;
  $32 = ($31|0)==(0);
  if ($32) {
   $state = 1;
  }
  break;
 }
 case 3:  {
  $state = 2;
  break;
 }
 default: {
 }
 }
 $33 = $state;
 $34 = $33 << 16 >> 16;
 $35 = ($34|0)!=(0);
 if (!($35)) {
  STACKTOP = sp;return;
 }
 $36 = $so;
 $37 = HEAP16[$36>>1]|0;
 $38 = $so;
 $39 = ((($38)) + 4|0);
 HEAP16[$39>>1] = $37;
 $40 = $so;
 $41 = ((($40)) + 2|0);
 $42 = HEAP16[$41>>1]|0;
 $43 = $so;
 $44 = ((($43)) + 6|0);
 HEAP16[$44>>1] = $42;
 $45 = $so;
 $46 = ((($45)) + 12|0);
 $47 = HEAP16[$46>>1]|0;
 $48 = $so;
 $49 = ((($48)) + 16|0);
 HEAP16[$49>>1] = $47;
 $50 = $so;
 $51 = ((($50)) + 14|0);
 HEAP16[$51>>1] = $47;
 $52 = $so;
 $53 = ((($52)) + 22|0);
 $54 = HEAP16[$53>>1]|0;
 $55 = $so;
 $56 = ((($55)) + 24|0);
 HEAP16[$56>>1] = $54;
 $57 = $so;
 $58 = ((($57)) + 26|0);
 HEAP16[$58>>1] = $54;
 $59 = $so;
 $60 = ((($59)) + 28|0);
 $61 = HEAP16[$60>>1]|0;
 $62 = $61 << 16 >> 16;
 $63 = $so;
 $64 = ((($63)) + 30|0);
 $65 = HEAP16[$64>>1]|0;
 $66 = $65 << 16 >> 16;
 $67 = (($62) + ($66))|0;
 $68 = $67&65535;
 $69 = $so;
 $70 = ((($69)) + 34|0);
 HEAP16[$70>>1] = $68;
 $71 = $so;
 $72 = ((($71)) + 32|0);
 HEAP16[$72>>1] = $68;
 $73 = $so;
 $74 = ((($73)) + 34|0);
 $75 = HEAP16[$74>>1]|0;
 $76 = $75 << 16 >> 16;
 $77 = ((($2)) + 79612|0);
 $78 = (($77) + (($76*6)|0)|0);
 $79 = HEAP16[$78>>1]|0;
 $80 = $79 << 16 >> 16;
 $81 = $so;
 $82 = ((($81)) + 36|0);
 $83 = HEAP16[$82>>1]|0;
 $84 = $83 << 16 >> 16;
 $85 = (($80) + ($84))|0;
 $86 = $85&65535;
 $87 = $so;
 $88 = ((($87)) + 18|0);
 HEAP16[$88>>1] = $86;
 $89 = $so;
 $90 = ((($89)) + 24|0);
 $91 = HEAP16[$90>>1]|0;
 $92 = $91 << 16 >> 16;
 $93 = ($92|0)==(2);
 if ($93) {
  $94 = $so;
  $95 = ((($94)) + 18|0);
  $96 = HEAP16[$95>>1]|0;
  $97 = $96 << 16 >> 16;
  $98 = ((($2)) + 19044|0);
  $99 = (($98) + (($97*20)|0)|0);
  $100 = ((($99)) + 4|0);
  $101 = ((($100)) + 2|0);
  $102 = HEAP16[$101>>1]|0;
  $103 = $102 << 16 >> 16;
  $104 = (($103) - 1)|0;
  $105 = $so;
  $106 = ((($105)) + 4|0);
  $107 = HEAP16[$106>>1]|0;
  $108 = $107 << 16 >> 16;
  $109 = (($108) - ($104))|0;
  $110 = $109&65535;
  HEAP16[$106>>1] = $110;
 }
 $111 = $so;
 $112 = ((($111)) + 24|0);
 $113 = HEAP16[$112>>1]|0;
 $114 = $113 << 16 >> 16;
 $115 = ($114|0)==(1);
 if ($115) {
  $116 = $so;
  $117 = ((($116)) + 18|0);
  $118 = HEAP16[$117>>1]|0;
  $119 = $118 << 16 >> 16;
  $120 = ((($2)) + 19044|0);
  $121 = (($120) + (($119*20)|0)|0);
  $122 = ((($121)) + 4|0);
  $123 = ((($122)) + 4|0);
  $124 = HEAP16[$123>>1]|0;
  $125 = $124 << 16 >> 16;
  $126 = (($125) - 1)|0;
  $127 = $so;
  $128 = ((($127)) + 6|0);
  $129 = HEAP16[$128>>1]|0;
  $130 = $129 << 16 >> 16;
  $131 = (($130) - ($126))|0;
  $132 = $131&65535;
  HEAP16[$128>>1] = $132;
 }
 $133 = $so;
 $134 = ((($133)) + 44|0);
 $135 = HEAP16[$134>>1]|0;
 $136 = $135 << 16 >> 16;
 $137 = ($136|0)==(0);
 if ($137) {
  $138 = $so;
  $139 = ((($138)) + 4|0);
  $140 = HEAP16[$139>>1]|0;
  $141 = $so;
  $142 = ((($141)) + 8|0);
  HEAP16[$142>>1] = $140;
  $143 = $so;
  $144 = ((($143)) + 6|0);
  $145 = HEAP16[$144>>1]|0;
  $146 = $so;
  $147 = ((($146)) + 10|0);
  HEAP16[$147>>1] = $145;
  $148 = $so;
  $149 = ((($148)) + 18|0);
  $150 = HEAP16[$149>>1]|0;
  $151 = $so;
  $152 = ((($151)) + 20|0);
  HEAP16[$152>>1] = $150;
 }
 $153 = $state;
 $154 = $so;
 $155 = ((($154)) + 42|0);
 HEAP16[$155>>1] = $153;
 $156 = $so;
 $157 = ((($156)) + 44|0);
 HEAP16[$157>>1] = $153;
 STACKTOP = sp;return;
}
function __ZN4Game13updateObjectsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ds = 0, $dx = 0, $dy = 0, $i = 0, $i1 = 0;
 var $so = 0, $so2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(2,23320,$vararg_buffer);
 __ZN4Game13redrawObjectsEv($1);
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ((($1)) + 10552|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($2|0)<($4|0);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = ((($1)) + 5252|0);
  $8 = (($7) + (($6*106)|0)|0);
  $so = $8;
  $9 = $so;
  $10 = ((($9)) + 44|0);
  $11 = HEAP16[$10>>1]|0;
  $12 = $11 << 16 >> 16;
  $13 = ($12|0)==(-1);
  if ($13) {
   $14 = $so;
   $15 = ((($14)) + 44|0);
   HEAP16[$15>>1] = 0;
  }
  $16 = $i;
  $17 = (($16) + 1)|0;
  $i = $17;
 }
 $i1 = 0;
 while(1) {
  $18 = $i1;
  $19 = ((($1)) + 10552|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($18|0)<($20|0);
  if (!($21)) {
   label = 23;
   break;
  }
  $22 = $i1;
  $23 = ((($1)) + 5252|0);
  $24 = (($23) + (($22*106)|0)|0);
  $so2 = $24;
  $25 = $so2;
  $26 = ((($25)) + 44|0);
  $27 = HEAP16[$26>>1]|0;
  $28 = $so2;
  $29 = ((($28)) + 42|0);
  HEAP16[$29>>1] = $27;
  $30 = $so2;
  $31 = ((($30)) + 44|0);
  $32 = HEAP16[$31>>1]|0;
  $33 = $32 << 16 >> 16;
  $34 = ($33|0)==(1);
  if ($34) {
   $35 = $so2;
   $36 = ((($35)) + 34|0);
   $37 = HEAP16[$36>>1]|0;
   $38 = $so2;
   $39 = ((($38)) + 32|0);
   HEAP16[$39>>1] = $37;
   $40 = $so2;
   $41 = ((($40)) + 24|0);
   $42 = HEAP16[$41>>1]|0;
   $43 = $so2;
   $44 = ((($43)) + 26|0);
   HEAP16[$44>>1] = $42;
   $45 = $so2;
   $46 = ((($45)) + 16|0);
   $47 = HEAP16[$46>>1]|0;
   $48 = $so2;
   $49 = ((($48)) + 14|0);
   HEAP16[$49>>1] = $47;
   $50 = $so2;
   $51 = ((($50)) + 4|0);
   $52 = HEAP16[$51>>1]|0;
   $53 = $so2;
   $54 = ((($53)) + 8|0);
   HEAP16[$54>>1] = $52;
   $55 = $so2;
   $56 = ((($55)) + 6|0);
   $57 = HEAP16[$56>>1]|0;
   $58 = $so2;
   $59 = ((($58)) + 10|0);
   HEAP16[$59>>1] = $57;
   $60 = $so2;
   $61 = ((($60)) + 18|0);
   $62 = HEAP16[$61>>1]|0;
   $63 = $so2;
   $64 = ((($63)) + 20|0);
   HEAP16[$64>>1] = $62;
   $65 = $so2;
   $66 = ((($65)) + 20|0);
   $67 = HEAP16[$66>>1]|0;
   $68 = $67 << 16 >> 16;
   $69 = ($68|0)>=(0);
   if (!($69)) {
    label = 11;
    break;
   }
   $70 = $so2;
   $71 = ((($70)) + 20|0);
   $72 = HEAP16[$71>>1]|0;
   $73 = $72 << 16 >> 16;
   $74 = ((($1)) + 79044|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = ($73|0)<($75|0);
   if (!($76)) {
    label = 11;
    break;
   }
   $77 = $so2;
   $78 = ((($77)) + 18|0);
   $79 = HEAP16[$78>>1]|0;
   $80 = $79 << 16 >> 16;
   $81 = ($80|0)>=(0);
   if (!($81)) {
    label = 14;
    break;
   }
   $82 = $so2;
   $83 = ((($82)) + 18|0);
   $84 = HEAP16[$83>>1]|0;
   $85 = $84 << 16 >> 16;
   $86 = ((($1)) + 79044|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = ($85|0)<($87|0);
   if (!($88)) {
    label = 14;
    break;
   }
   $89 = $so2;
   $90 = ((($89)) + 34|0);
   $91 = HEAP16[$90>>1]|0;
   $92 = $91 << 16 >> 16;
   $93 = ($92|0)>=(0);
   if (!($93)) {
    label = 17;
    break;
   }
   $94 = $so2;
   $95 = ((($94)) + 34|0);
   $96 = HEAP16[$95>>1]|0;
   $97 = $96 << 16 >> 16;
   $98 = ((($1)) + 81412|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = ($97|0)<($99|0);
   if (!($100)) {
    label = 17;
    break;
   }
   $101 = $so2;
   $102 = ((($101)) + 20|0);
   $103 = HEAP16[$102>>1]|0;
   $104 = $103 << 16 >> 16;
   $105 = ((($1)) + 19044|0);
   $106 = (($105) + (($104*20)|0)|0);
   $107 = ((($106)) + 4|0);
   $108 = HEAP16[$107>>1]|0;
   $109 = $108 << 16 >> 16;
   $110 = $so2;
   $111 = ((($110)) + 34|0);
   $112 = HEAP16[$111>>1]|0;
   $113 = $112 << 16 >> 16;
   $114 = ((($1)) + 79612|0);
   $115 = (($114) + (($113*6)|0)|0);
   $116 = HEAP16[$115>>1]|0;
   $117 = $116 << 16 >> 16;
   $118 = (($109) + ($117))|0;
   $119 = $118&65535;
   $120 = $so2;
   $121 = ((($120)) + 18|0);
   HEAP16[$121>>1] = $119;
   $122 = $so2;
   $123 = ((($122)) + 20|0);
   $124 = HEAP16[$123>>1]|0;
   $125 = $124 << 16 >> 16;
   $126 = ((($1)) + 19044|0);
   $127 = (($126) + (($125*20)|0)|0);
   $128 = ((($127)) + 4|0);
   $129 = ((($128)) + 6|0);
   $130 = HEAP16[$129>>1]|0;
   $131 = $130 << 16 >> 16;
   $132 = $so2;
   $133 = ((($132)) + 18|0);
   $134 = HEAP16[$133>>1]|0;
   $135 = $134 << 16 >> 16;
   $136 = ((($1)) + 19044|0);
   $137 = (($136) + (($135*20)|0)|0);
   $138 = ((($137)) + 4|0);
   $139 = ((($138)) + 6|0);
   $140 = HEAP16[$139>>1]|0;
   $141 = $140 << 16 >> 16;
   $142 = (($131) - ($141))|0;
   $dx = $142;
   $143 = $so2;
   $144 = ((($143)) + 20|0);
   $145 = HEAP16[$144>>1]|0;
   $146 = $145 << 16 >> 16;
   $147 = ((($1)) + 19044|0);
   $148 = (($147) + (($146*20)|0)|0);
   $149 = ((($148)) + 4|0);
   $150 = ((($149)) + 8|0);
   $151 = HEAP16[$150>>1]|0;
   $152 = $151 << 16 >> 16;
   $153 = $so2;
   $154 = ((($153)) + 18|0);
   $155 = HEAP16[$154>>1]|0;
   $156 = $155 << 16 >> 16;
   $157 = ((($1)) + 19044|0);
   $158 = (($157) + (($156*20)|0)|0);
   $159 = ((($158)) + 4|0);
   $160 = ((($159)) + 8|0);
   $161 = HEAP16[$160>>1]|0;
   $162 = $161 << 16 >> 16;
   $163 = (($152) - ($162))|0;
   $dy = $163;
   $164 = $so2;
   $165 = ((($164)) + 24|0);
   $166 = HEAP16[$165>>1]|0;
   $167 = $166 << 16 >> 16;
   $168 = ($167|0)==(2);
   if ($168) {
    $169 = $so2;
    $170 = ((($169)) + 20|0);
    $171 = HEAP16[$170>>1]|0;
    $172 = $171 << 16 >> 16;
    $173 = ((($1)) + 19044|0);
    $174 = (($173) + (($172*20)|0)|0);
    $175 = ((($174)) + 4|0);
    $176 = ((($175)) + 2|0);
    $177 = HEAP16[$176>>1]|0;
    $178 = $177 << 16 >> 16;
    $179 = $so2;
    $180 = ((($179)) + 18|0);
    $181 = HEAP16[$180>>1]|0;
    $182 = $181 << 16 >> 16;
    $183 = ((($1)) + 19044|0);
    $184 = (($183) + (($182*20)|0)|0);
    $185 = ((($184)) + 4|0);
    $186 = ((($185)) + 2|0);
    $187 = HEAP16[$186>>1]|0;
    $188 = $187 << 16 >> 16;
    $189 = (($178) - ($188))|0;
    $ds = $189;
    $190 = $dx;
    $191 = $ds;
    $192 = (($190) + ($191))|0;
    $193 = $so2;
    $194 = ((($193)) + 4|0);
    $195 = HEAP16[$194>>1]|0;
    $196 = $195 << 16 >> 16;
    $197 = (($196) + ($192))|0;
    $198 = $197&65535;
    HEAP16[$194>>1] = $198;
   } else {
    $199 = $dx;
    $200 = $so2;
    $201 = ((($200)) + 4|0);
    $202 = HEAP16[$201>>1]|0;
    $203 = $202 << 16 >> 16;
    $204 = (($203) - ($199))|0;
    $205 = $204&65535;
    HEAP16[$201>>1] = $205;
   }
   $206 = $dy;
   $207 = $so2;
   $208 = ((($207)) + 6|0);
   $209 = HEAP16[$208>>1]|0;
   $210 = $209 << 16 >> 16;
   $211 = (($210) - ($206))|0;
   $212 = $211&65535;
   HEAP16[$208>>1] = $212;
  }
  $213 = $i1;
  $214 = (($213) + 1)|0;
  $i1 = $214;
 }
 if ((label|0) == 11) {
  ___assert_fail((23342|0),(22750|0),414,(23410|0));
  // unreachable;
 }
 else if ((label|0) == 14) {
  ___assert_fail((23424|0),(22750|0),415,(23410|0));
  // unreachable;
 }
 else if ((label|0) == 17) {
  ___assert_fail((23484|0),(22750|0),416,(23410|0));
  // unreachable;
 }
 else if ((label|0) == 23) {
  STACKTOP = sp;return;
 }
}
function __ZN4Game13redrawObjectsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $bagObjH = 0, $bagObjW = 0, $i = 0, $index = 0, $index3 = 0, $invH = 0, $invW = 0, $lifeBarFrame = 0, $or$cond = 0, $p = 0, $previousObject = 0, $so = 0, $x = 0, $y = 0, $y1 = 0, $y2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4Game11sortObjectsEv($1);
 $previousObject = -1;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ((($1)) + 10552|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($2|0)<($4|0);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = ((($1)) + 5052|0);
  $8 = (($7) + ($6<<2)|0);
  $9 = HEAP32[$8>>2]|0;
  $so = $9;
  $10 = $so;
  $11 = ((($10)) + 44|0);
  $12 = HEAP16[$11>>1]|0;
  $13 = $12 << 16 >> 16;
  $14 = ($13|0)==(1);
  if ($14) {
   label = 5;
  } else {
   $15 = $so;
   $16 = ((($15)) + 44|0);
   $17 = HEAP16[$16>>1]|0;
   $18 = $17 << 16 >> 16;
   $19 = ($18|0)==(2);
   if ($19) {
    label = 5;
   }
  }
  do {
   if ((label|0) == 5) {
    label = 0;
    $20 = $previousObject;
    $21 = ($20|0)>=(0);
    if ($21) {
     $22 = $previousObject;
     $23 = $i;
     __ZN4Game17redrawObjectBoxesEii($1,$22,$23);
    }
    $24 = $i;
    $previousObject = $24;
    $25 = $so;
    $26 = ((($25)) + 18|0);
    $27 = HEAP16[$26>>1]|0;
    $28 = $27 << 16 >> 16;
    $29 = ((($1)) + 19044|0);
    $30 = (($29) + (($28*20)|0)|0);
    $31 = ((($30)) + 16|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $so;
    $34 = ((($33)) + 18|0);
    $35 = HEAP16[$34>>1]|0;
    $36 = $35 << 16 >> 16;
    $37 = ((($1)) + 19044|0);
    $38 = (($37) + (($36*20)|0)|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = ((($1)) + 100|0);
    $41 = HEAP32[$40>>2]|0;
    (FUNCTION_TABLE_iii[$32 & 255]($39,$41)|0);
    $42 = ((($1)) + 8|0);
    $43 = HEAP8[$42>>0]|0;
    $44 = $43&1;
    if ($44) {
     $45 = ((($1)) + 4656|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = ($46|0)==(1);
     $48 = $i;
     $49 = ($48|0)==(14);
     $or$cond = $47 & $49;
     if ($or$cond) {
      break;
     }
    }
    $50 = $so;
    $51 = ((($50)) + 24|0);
    $52 = HEAP16[$51>>1]|0;
    $53 = $52 << 16 >> 16;
    $54 = ($53|0)==(2);
    $55 = ((($1)) + 68|0);
    $56 = ((($55)) + 2|0);
    $57 = HEAP16[$56>>1]|0;
    $58 = $57&65535;
    $59 = (($58) + 1)|0;
    $60 = $so;
    $61 = ((($60)) + 6|0);
    $62 = HEAP16[$61>>1]|0;
    $63 = $62 << 16 >> 16;
    $64 = (($59) - ($63))|0;
    $65 = $so;
    $66 = ((($65)) + 18|0);
    $67 = HEAP16[$66>>1]|0;
    $68 = $67 << 16 >> 16;
    $69 = ((($1)) + 19044|0);
    $70 = (($69) + (($68*20)|0)|0);
    $71 = ((($70)) + 4|0);
    $72 = ((($71)) + 4|0);
    $73 = HEAP16[$72>>1]|0;
    $74 = $73 << 16 >> 16;
    $75 = (($64) - ($74))|0;
    $76 = $75&65535;
    if ($54) {
     $y = $76;
     $77 = $so;
     $78 = ((($77)) + 4|0);
     $79 = HEAP16[$78>>1]|0;
     $80 = $79 << 16 >> 16;
     $81 = $y;
     $82 = $81 << 16 >> 16;
     $83 = ((($1)) + 100|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = ((($1)) + 68|0);
     __ZN4Game22drawObjectVerticalFlipEiiPKhP11SceneBitmap($1,$80,$82,$84,$85);
     break;
    } else {
     $y1 = $76;
     $86 = $so;
     $87 = ((($86)) + 4|0);
     $88 = HEAP16[$87>>1]|0;
     $89 = $88 << 16 >> 16;
     $90 = $y1;
     $91 = $90 << 16 >> 16;
     $92 = ((($1)) + 100|0);
     $93 = HEAP32[$92>>2]|0;
     $94 = ((($1)) + 68|0);
     __ZN4Game10drawObjectEiiPKhP11SceneBitmap($1,$89,$91,$93,$94);
     break;
    }
   }
  } while(0);
  $95 = $i;
  $96 = (($95) + 1)|0;
  $i = $96;
 }
 $97 = $previousObject;
 $98 = ($97|0)>=(0);
 if ($98) {
  $99 = $previousObject;
  $100 = $previousObject;
  __ZN4Game17redrawObjectBoxesEii($1,$99,$100);
 }
 $101 = ((($1)) + 4656|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = ($102|0)!=(-1000);
 if ($103) {
  $104 = ((($1)) + 10552|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = ($105|0)!=(0);
  if ($106) {
   $107 = ((($1)) + 8|0);
   $108 = HEAP8[$107>>0]|0;
   $109 = $108&1;
   if (!($109)) {
    $110 = ((($1)) + 4444|0);
    $111 = HEAP8[$110>>0]|0;
    $112 = $111&1;
    if ($112) {
     $113 = ((($1)) + 96|0);
     $114 = HEAP32[$113>>2]|0;
     $115 = ((($114)) + 2|0);
     $116 = ((($1)) + 100|0);
     $117 = HEAP32[$116>>2]|0;
     (__Z10decodeLzssPKhPh($115,$117)|0);
     $118 = ((($1)) + 68|0);
     $119 = ((($118)) + 2|0);
     $120 = HEAP16[$119>>1]|0;
     $121 = $120&65535;
     $122 = (($121) - 230)|0;
     $123 = ((($1)) + 100|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = ((($1)) + 68|0);
     __ZN4Game10drawObjectEiiPKhP11SceneBitmap($1,93,$122,$124,$125);
    }
   }
   $126 = ((($1)) + 4460|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = ($127|0)>=(0);
   if ($128) {
    $129 = ((($1)) + 4460|0);
    $130 = HEAP32[$129>>2]|0;
    $131 = ((($1)) + 79608|0);
    $132 = HEAP32[$131>>2]|0;
    $133 = ($130|0)<($132|0);
    if ($133) {
     $134 = ((($1)) + 4452|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = ($135|0)==(3);
     if ($136) {
      $137 = ((($1)) + 5044|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ((($1)) + 68|0);
      $140 = ((($139)) + 2|0);
      $141 = HEAP16[$140>>1]|0;
      $142 = $141&65535;
      $143 = (($142) + 1)|0;
      $144 = ((($1)) + 5048|0);
      $145 = HEAP32[$144>>2]|0;
      $146 = (($143) - ($145))|0;
      $147 = ((($1)) + 760|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = (__ZL15getBitmapHeightPKh58($148)|0);
      $150 = (($146) - ($149))|0;
      $151 = ((($1)) + 760|0);
      $152 = HEAP32[$151>>2]|0;
      $153 = ((($1)) + 68|0);
      __ZN4Game10drawObjectEiiPKhP11SceneBitmap($1,$138,$150,$152,$153);
      $154 = ((($1)) + 760|0);
      $155 = HEAP32[$154>>2]|0;
      $156 = (__ZL14getBitmapWidthPKh59($155)|0);
      $invW = $156;
      $157 = ((($1)) + 760|0);
      $158 = HEAP32[$157>>2]|0;
      $159 = (__ZL15getBitmapHeightPKh58($158)|0);
      $invH = $159;
      $160 = ((($1)) + 4460|0);
      $161 = HEAP32[$160>>2]|0;
      $162 = ((($1)) + 79048|0);
      $163 = (($162) + (($161*28)|0)|0);
      $164 = ((($163)) + 20|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = (__ZL14getBitmapWidthPKh59($165)|0);
      $bagObjW = $166;
      $167 = ((($1)) + 4460|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ((($1)) + 79048|0);
      $170 = (($169) + (($168*28)|0)|0);
      $171 = ((($170)) + 20|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = (__ZL15getBitmapHeightPKh58($172)|0);
      $bagObjH = $173;
      $174 = ((($1)) + 68|0);
      $175 = ((($174)) + 2|0);
      $176 = HEAP16[$175>>1]|0;
      $177 = $176&65535;
      $178 = (($177) + 1)|0;
      $179 = ((($1)) + 5048|0);
      $180 = HEAP32[$179>>2]|0;
      $181 = (($178) - ($180))|0;
      $182 = $invH;
      $183 = $bagObjH;
      $184 = (($182) - ($183))|0;
      $185 = (($184|0) / 2)&-1;
      $186 = (($181) - ($185))|0;
      $187 = $bagObjH;
      $188 = (($186) - ($187))|0;
      $y2 = $188;
      $189 = ((($1)) + 5044|0);
      $190 = HEAP32[$189>>2]|0;
      $191 = $invW;
      $192 = $bagObjW;
      $193 = (($191) - ($192))|0;
      $194 = (($193|0) / 2)&-1;
      $195 = (($190) + ($194))|0;
      $x = $195;
      $196 = $x;
      $197 = $y2;
      $198 = ((($1)) + 4460|0);
      $199 = HEAP32[$198>>2]|0;
      $200 = ((($1)) + 79048|0);
      $201 = (($200) + (($199*28)|0)|0);
      $202 = ((($201)) + 20|0);
      $203 = HEAP32[$202>>2]|0;
      $204 = ((($1)) + 68|0);
      __ZN4Game10drawObjectEiiPKhP11SceneBitmap($1,$196,$197,$203,$204);
     }
    }
   }
   $205 = ((($1)) + 4476|0);
   $206 = HEAP8[$205>>0]|0;
   $207 = $206&1;
   if ($207) {
    $208 = ((($1)) + 68|0);
    $209 = ((($208)) + 2|0);
    $210 = HEAP16[$209>>1]|0;
    $211 = $210&65535;
    $212 = (($211) - 18)|0;
    $213 = ((($1)) + 764|0);
    $214 = HEAP32[$213>>2]|0;
    $215 = (__ZL15getBitmapHeightPKh58($214)|0);
    $216 = (($212) - ($215))|0;
    $217 = ((($1)) + 764|0);
    $218 = HEAP32[$217>>2]|0;
    $219 = ((($1)) + 68|0);
    __ZN4Game10drawObjectEiiPKhP11SceneBitmap($1,386,$216,$218,$219);
    $220 = ((($1)) + 3804|0);
    $221 = ((($220)) + 2|0);
    $222 = HEAP16[$221>>1]|0;
    $223 = $222 << 16 >> 16;
    $224 = ($223|0)==(1);
    if ($224) {
     $225 = ((($1)) + 68|0);
     $226 = ((($225)) + 2|0);
     $227 = HEAP16[$226>>1]|0;
     $228 = $227&65535;
     $229 = (($228) - 18)|0;
     $230 = ((($1)) + 764|0);
     $231 = HEAP32[$230>>2]|0;
     $232 = (__ZL15getBitmapHeightPKh58($231)|0);
     $233 = (($229) - ($232))|0;
     $234 = ((($1)) + 764|0);
     $235 = HEAP32[$234>>2]|0;
     $236 = ((($1)) + 68|0);
     __ZN4Game10drawObjectEiiPKhP11SceneBitmap($1,150,$233,$235,$236);
     $237 = ((($1)) + 756|0);
     $238 = HEAP32[$237>>2]|0;
     $239 = ($238|0)!=(0|0);
     if ($239) {
      $240 = ((($1)) + 68|0);
      $241 = ((($240)) + 2|0);
      $242 = HEAP16[$241>>1]|0;
      $243 = $242&65535;
      $244 = (($243) - 18)|0;
      $245 = ((($1)) + 756|0);
      $246 = HEAP32[$245>>2]|0;
      $247 = (__ZL15getBitmapHeightPKh58($246)|0);
      $248 = (($244) - ($247))|0;
      $249 = ((($1)) + 756|0);
      $250 = HEAP32[$249>>2]|0;
      $251 = ((($1)) + 68|0);
      __ZN4Game10drawObjectEiiPKhP11SceneBitmap($1,173,$248,$250,$251);
     }
    } else {
     $252 = ((($1)) + 3804|0);
     $253 = ((($252)) + 4|0);
     $254 = HEAP16[$253>>1]|0;
     $255 = $254 << 16 >> 16;
     $256 = ($255|0)==(1);
     if ($256) {
      $257 = ((($1)) + 68|0);
      $258 = ((($257)) + 2|0);
      $259 = HEAP16[$258>>1]|0;
      $260 = $259&65535;
      $261 = (($260) - 18)|0;
      $262 = ((($1)) + 764|0);
      $263 = HEAP32[$262>>2]|0;
      $264 = (__ZL15getBitmapHeightPKh58($263)|0);
      $265 = (($261) - ($264))|0;
      $266 = ((($1)) + 764|0);
      $267 = HEAP32[$266>>2]|0;
      $268 = ((($1)) + 68|0);
      __ZN4Game10drawObjectEiiPKhP11SceneBitmap($1,150,$265,$267,$268);
      $269 = ((($1)) + 3804|0);
      $270 = ((($269)) + 8|0);
      $271 = HEAP16[$270>>1]|0;
      $272 = $271 << 16 >> 16;
      $273 = (13 - ($272))|0;
      $274 = (__Z3MINIiET_S0_S0_(13,$273)|0);
      $index = $274;
      $275 = ((($1)) + 68|0);
      $276 = ((($275)) + 2|0);
      $277 = HEAP16[$276>>1]|0;
      $278 = $277&65535;
      $279 = (($278) - 31)|0;
      $280 = $index;
      $281 = ((($1)) + 660|0);
      $282 = (($281) + ($280<<2)|0);
      $283 = HEAP32[$282>>2]|0;
      $284 = (__ZL15getBitmapHeightPKh58($283)|0);
      $285 = (($279) - ($284))|0;
      $286 = $index;
      $287 = ((($1)) + 660|0);
      $288 = (($287) + ($286<<2)|0);
      $289 = HEAP32[$288>>2]|0;
      $290 = ((($1)) + 68|0);
      __ZN4Game10drawObjectEiiPKhP11SceneBitmap($1,173,$285,$289,$290);
      $291 = ((($1)) + 3804|0);
      $292 = ((($291)) + 6|0);
      $293 = HEAP16[$292>>1]|0;
      $294 = $293 << 16 >> 16;
      $295 = ($294|0)<(5);
      if ($295) {
       $296 = ((($1)) + 3804|0);
       $297 = ((($296)) + 8|0);
       $298 = HEAP16[$297>>1]|0;
       $299 = $298 << 16 >> 16;
       $300 = ($299|0)<=(0);
       $301 = $300 ? 0 : 1;
       $index = $301;
       $302 = ((($1)) + 3804|0);
       $303 = ((($302)) + 6|0);
       $304 = HEAP16[$303>>1]|0;
       $305 = $304 << 16 >> 16;
       $306 = $index;
       $307 = ((($1)) + 716|0);
       $308 = (($307) + (($306*20)|0)|0);
       $309 = (($308) + ($305<<2)|0);
       $310 = HEAP32[$309>>2]|0;
       $p = $310;
       $311 = ((($1)) + 68|0);
       $312 = ((($311)) + 2|0);
       $313 = HEAP16[$312>>1]|0;
       $314 = $313&65535;
       $315 = (($314) - 41)|0;
       $316 = $p;
       $317 = (__ZL15getBitmapHeightPKh58($316)|0);
       $318 = (($315) - ($317))|0;
       $319 = $p;
       $320 = ((($1)) + 68|0);
       __ZN4Game10drawObjectEiiPKhP11SceneBitmap($1,184,$318,$319,$320);
      }
     }
    }
    $321 = ((($1)) + 3804|0);
    $322 = HEAP16[$321>>1]|0;
    $323 = $322 << 16 >> 16;
    $324 = ($323|0)>=(10);
    if ($324) {
     $328 = 10;
    } else {
     $325 = ((($1)) + 3804|0);
     $326 = HEAP16[$325>>1]|0;
     $327 = $326 << 16 >> 16;
     $328 = $327;
    }
    $index3 = $328;
    $329 = ((($1)) + 856|0);
    $330 = HEAP32[$329>>2]|0;
    $331 = $index3;
    $332 = ((($1)) + 132|0);
    $333 = (($332) + (($331*48)|0)|0);
    $334 = (($333) + ($330<<2)|0);
    $335 = HEAP32[$334>>2]|0;
    $lifeBarFrame = $335;
    $336 = ((($1)) + 68|0);
    $337 = ((($336)) + 2|0);
    $338 = HEAP16[$337>>1]|0;
    $339 = $338&65535;
    $340 = (($339) - 36)|0;
    $341 = $lifeBarFrame;
    $342 = (__ZL15getBitmapHeightPKh58($341)|0);
    $343 = (($340) - ($342))|0;
    $344 = $lifeBarFrame;
    $345 = ((($1)) + 68|0);
    __ZN4Game10drawObjectEiiPKhP11SceneBitmap($1,409,$343,$344,$345);
    $346 = ((($1)) + 856|0);
    $347 = HEAP32[$346>>2]|0;
    $348 = (($347) + 1)|0;
    HEAP32[$346>>2] = $348;
    $349 = ((($1)) + 856|0);
    $350 = HEAP32[$349>>2]|0;
    $351 = ($350|0)>=(12);
    if ($351) {
     $352 = ((($1)) + 856|0);
     HEAP32[$352>>2] = 0;
    }
   }
  }
 }
 $353 = ((($1)) + 68|0);
 $354 = ((($1)) + 68|0);
 $355 = ((($354)) + 2|0);
 $356 = HEAP16[$355>>1]|0;
 $357 = $356&65535;
 $358 = (($357) + 1)|0;
 $359 = ((($1)) + 68|0);
 $360 = HEAP16[$359>>1]|0;
 $361 = $360&65535;
 $362 = (($361) + 1)|0;
 $363 = ((($1)) + 68|0);
 $364 = ((($363)) + 2|0);
 $365 = HEAP16[$364>>1]|0;
 $366 = $365&65535;
 $367 = (($366) + 1)|0;
 $368 = ((($1)) + 68|0);
 $369 = HEAP16[$368>>1]|0;
 $370 = $369&65535;
 $371 = (($370) + 1)|0;
 __ZN4Game17win16_stretchBitsEP11SceneBitmapiiiiiiii($1,$353,$358,$362,0,0,$367,$371,0,0);
 $372 = ((($1)) + 68|0);
 $373 = ((($372)) + 8|0);
 $374 = HEAP32[$373>>2]|0;
 $375 = ((($1)) + 84|0);
 $376 = ((($375)) + 8|0);
 $377 = HEAP32[$376>>2]|0;
 _memcpy(($374|0),($377|0),307200)|0;
 $378 = ((($1)) + 4476|0);
 $379 = HEAP8[$378>>0]|0;
 $380 = $379&1;
 if (!($380)) {
  $417 = ((($1)) + 4452|0);
  $418 = HEAP32[$417>>2]|0;
  $419 = ((($1)) + 4456|0);
  HEAP32[$419>>2] = $418;
  STACKTOP = sp;return;
 }
 $381 = ((($1)) + 68|0);
 $382 = ((($381)) + 2|0);
 $383 = HEAP16[$382>>1]|0;
 $384 = $383&65535;
 $385 = (($384) + 1)|0;
 $386 = (($385) - 19)|0;
 $387 = ((($1)) + 764|0);
 $388 = HEAP32[$387>>2]|0;
 $389 = (__ZL15getBitmapHeightPKh58($388)|0);
 $390 = (($386) - ($389))|0;
 $391 = ((($1)) + 764|0);
 $392 = HEAP32[$391>>2]|0;
 $393 = (__ZL14getBitmapWidthPKh59($392)|0);
 $394 = ((($1)) + 764|0);
 $395 = HEAP32[$394>>2]|0;
 $396 = (__ZL15getBitmapHeightPKh58($395)|0);
 $397 = ((($1)) + 84|0);
 $398 = ((($1)) + 68|0);
 __ZN4Game18copyBufferToBufferEiiiiP11SceneBitmapS1_($1,386,$390,$393,$396,$397,$398);
 $399 = ((($1)) + 68|0);
 $400 = ((($399)) + 2|0);
 $401 = HEAP16[$400>>1]|0;
 $402 = $401&65535;
 $403 = (($402) + 1)|0;
 $404 = (($403) - 19)|0;
 $405 = ((($1)) + 764|0);
 $406 = HEAP32[$405>>2]|0;
 $407 = (__ZL15getBitmapHeightPKh58($406)|0);
 $408 = (($404) - ($407))|0;
 $409 = ((($1)) + 764|0);
 $410 = HEAP32[$409>>2]|0;
 $411 = (__ZL14getBitmapWidthPKh59($410)|0);
 $412 = ((($1)) + 764|0);
 $413 = HEAP32[$412>>2]|0;
 $414 = (__ZL15getBitmapHeightPKh58($413)|0);
 $415 = ((($1)) + 84|0);
 $416 = ((($1)) + 68|0);
 __ZN4Game18copyBufferToBufferEiiiiP11SceneBitmapS1_($1,150,$408,$411,$414,$415,$416);
 $417 = ((($1)) + 4452|0);
 $418 = HEAP32[$417>>2]|0;
 $419 = ((($1)) + 4456|0);
 HEAP32[$419>>2] = $418;
 STACKTOP = sp;return;
}
function __ZN4Game9stopMusicEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(2,23549,$vararg_buffer);
 $2 = ((($1)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($1)) + 52|0);
 $8 = HEAP32[$7>>2]|0;
 FUNCTION_TABLE_vii[$6 & 255]($3,$8);
 STACKTOP = sp;return;
}
function __ZNK4Game19findBagObjectByNameEPKc($this,$objectName) {
 $this = $this|0;
 $objectName = $objectName|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $index = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $objectName;
 $2 = $0;
 $3 = $1;
 HEAP32[$vararg_buffer>>2] = $3;
 __Z5debugtPKcz(2,23567,$vararg_buffer);
 $index = -1;
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = ((($2)) + 79608|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($4|0)<($6|0);
  if (!($7)) {
   label = 6;
   break;
  }
  $8 = $i;
  $9 = ((($2)) + 79048|0);
  $10 = (($9) + (($8*28)|0)|0);
  $11 = $1;
  $12 = (_strcasecmp($10,$11)|0);
  $13 = ($12|0)==(0);
  $14 = $i;
  if ($13) {
   break;
  }
  $15 = (($14) + 1)|0;
  $i = $15;
 }
 if ((label|0) == 6) {
  $16 = $index;
  STACKTOP = sp;return ($16|0);
 }
 $index = $14;
 $16 = $index;
 STACKTOP = sp;return ($16|0);
}
function __ZN4Game22getObjectTranslateXPosEiiii($this,$object,$dx1,$div,$dx2) {
 $this = $this|0;
 $object = $object|0;
 $dx1 = $dx1|0;
 $div = $div|0;
 $dx2 = $dx2|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_ax = 0, $_di = 0, $_dx = 0, $_si = 0, $so = 0, $vararg_buffer = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $object;
 $2 = $dx1;
 $3 = $div;
 $4 = $dx2;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 HEAP32[$vararg_buffer>>2] = $6;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $7;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $8;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $9;
 __Z5debugtPKcz(2,23595,$vararg_buffer);
 $10 = $1;
 $11 = (__ZN4Game16derefSceneObjectEi($5,$10)|0);
 $so = $11;
 $12 = $so;
 $13 = ((($12)) + 28|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 $16 = $so;
 $17 = ((($16)) + 30|0);
 $18 = HEAP16[$17>>1]|0;
 $19 = $18 << 16 >> 16;
 $20 = (($15) + ($19))|0;
 $21 = ((($5)) + 79612|0);
 $22 = (($21) + (($20*6)|0)|0);
 $23 = HEAP16[$22>>1]|0;
 $24 = $23 << 16 >> 16;
 $25 = $so;
 $26 = ((($25)) + 36|0);
 $27 = HEAP16[$26>>1]|0;
 $28 = $27 << 16 >> 16;
 $29 = (($24) + ($28))|0;
 $30 = $29&65535;
 $_di = $30;
 $31 = $so;
 $32 = ((($31)) + 24|0);
 $33 = HEAP16[$32>>1]|0;
 $34 = $33 << 16 >> 16;
 $35 = ($34|0)==(2);
 if ($35) {
  $36 = $_di;
  $37 = $36 << 16 >> 16;
  $38 = ((($5)) + 19044|0);
  $39 = (($38) + (($37*20)|0)|0);
  $40 = ((($39)) + 4|0);
  $41 = ((($40)) + 6|0);
  $42 = HEAP16[$41>>1]|0;
  $43 = $42 << 16 >> 16;
  $44 = $so;
  $45 = ((($44)) + 18|0);
  $46 = HEAP16[$45>>1]|0;
  $47 = $46 << 16 >> 16;
  $48 = ((($5)) + 19044|0);
  $49 = (($48) + (($47*20)|0)|0);
  $50 = ((($49)) + 4|0);
  $51 = ((($50)) + 6|0);
  $52 = HEAP16[$51>>1]|0;
  $53 = $52 << 16 >> 16;
  $54 = (($43) - ($53))|0;
  $55 = $54&65535;
  $_ax = $55;
  $56 = $_di;
  $57 = $56 << 16 >> 16;
  $58 = ((($5)) + 19044|0);
  $59 = (($58) + (($57*20)|0)|0);
  $60 = ((($59)) + 4|0);
  $61 = ((($60)) + 2|0);
  $62 = HEAP16[$61>>1]|0;
  $63 = $62 << 16 >> 16;
  $64 = $so;
  $65 = ((($64)) + 18|0);
  $66 = HEAP16[$65>>1]|0;
  $67 = $66 << 16 >> 16;
  $68 = ((($5)) + 19044|0);
  $69 = (($68) + (($67*20)|0)|0);
  $70 = ((($69)) + 4|0);
  $71 = ((($70)) + 2|0);
  $72 = HEAP16[$71>>1]|0;
  $73 = $72 << 16 >> 16;
  $74 = (($63) - ($73))|0;
  $75 = $_ax;
  $76 = $75 << 16 >> 16;
  $77 = (($76) + ($74))|0;
  $78 = $77&65535;
  $_ax = $78;
  $79 = $2;
  $80 = $_ax;
  $81 = $80 << 16 >> 16;
  $82 = (($81) + ($79))|0;
  $83 = $82&65535;
  $_ax = $83;
 } else {
  $84 = $so;
  $85 = ((($84)) + 18|0);
  $86 = HEAP16[$85>>1]|0;
  $87 = $86 << 16 >> 16;
  $88 = ((($5)) + 19044|0);
  $89 = (($88) + (($87*20)|0)|0);
  $90 = ((($89)) + 4|0);
  $91 = ((($90)) + 6|0);
  $92 = HEAP16[$91>>1]|0;
  $93 = $92 << 16 >> 16;
  $94 = $_di;
  $95 = $94 << 16 >> 16;
  $96 = ((($5)) + 19044|0);
  $97 = (($96) + (($95*20)|0)|0);
  $98 = ((($97)) + 4|0);
  $99 = ((($98)) + 6|0);
  $100 = HEAP16[$99>>1]|0;
  $101 = $100 << 16 >> 16;
  $102 = (($93) - ($101))|0;
  $103 = $102&65535;
  $_ax = $103;
 }
 $104 = $so;
 $105 = ((($104)) + 22|0);
 $106 = HEAP16[$105>>1]|0;
 $107 = $106 << 16 >> 16;
 $108 = ($107|0)==(2);
 if ($108) {
  $109 = $_di;
  $110 = $109 << 16 >> 16;
  $111 = ((($5)) + 19044|0);
  $112 = (($111) + (($110*20)|0)|0);
  $113 = ((($112)) + 4|0);
  $114 = ((($113)) + 2|0);
  $115 = HEAP16[$114>>1]|0;
  $116 = $115 << 16 >> 16;
  $117 = (1 - ($116))|0;
  $118 = $2;
  $119 = (($117) - ($118))|0;
  $120 = $119&65535;
  $_dx = $120;
 } else {
  $_dx = 0;
 }
 $121 = $so;
 $122 = ((($121)) + 4|0);
 $123 = HEAP16[$122>>1]|0;
 $124 = $123 << 16 >> 16;
 $125 = $so;
 $126 = HEAP16[$125>>1]|0;
 $127 = $126 << 16 >> 16;
 $128 = (($124) - ($127))|0;
 $129 = $_dx;
 $130 = $129 << 16 >> 16;
 $131 = (($128) - ($130))|0;
 $132 = $_ax;
 $133 = $132 << 16 >> 16;
 $134 = (($131) - ($133))|0;
 $135 = $4;
 $136 = (($134) - ($135))|0;
 $137 = $136&65535;
 $_ax = $137;
 $138 = $_ax;
 $139 = $138 << 16 >> 16;
 $140 = $3;
 $141 = (($139|0) % ($140|0))&-1;
 $142 = $141&65535;
 $_si = $142;
 $143 = $_si;
 $144 = $143 << 16 >> 16;
 $145 = ($144|0)<(0);
 if (!($145)) {
  $151 = $_si;
  $152 = $151 << 16 >> 16;
  STACKTOP = sp;return ($152|0);
 }
 $146 = $3;
 $147 = $_si;
 $148 = $147 << 16 >> 16;
 $149 = (($148) + ($146))|0;
 $150 = $149&65535;
 $_si = $150;
 $151 = $_si;
 $152 = $151 << 16 >> 16;
 STACKTOP = sp;return ($152|0);
}
function __ZN4Game22getObjectTranslateYPosEiiii($this,$object,$dy1,$div,$dy2) {
 $this = $this|0;
 $object = $object|0;
 $dy1 = $dy1|0;
 $div = $div|0;
 $dy2 = $dy2|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_ax = 0, $_di = 0, $_dx = 0, $_si = 0, $so = 0, $vararg_buffer = 0;
 var $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $object;
 $2 = $dy1;
 $3 = $div;
 $4 = $dy2;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 HEAP32[$vararg_buffer>>2] = $6;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $7;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $8;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $9;
 __Z5debugtPKcz(2,23640,$vararg_buffer);
 $10 = $1;
 $11 = (__ZN4Game16derefSceneObjectEi($5,$10)|0);
 $so = $11;
 $12 = $so;
 $13 = ((($12)) + 28|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 $16 = $so;
 $17 = ((($16)) + 30|0);
 $18 = HEAP16[$17>>1]|0;
 $19 = $18 << 16 >> 16;
 $20 = (($15) + ($19))|0;
 $21 = ((($5)) + 79612|0);
 $22 = (($21) + (($20*6)|0)|0);
 $23 = HEAP16[$22>>1]|0;
 $24 = $23 << 16 >> 16;
 $25 = $so;
 $26 = ((($25)) + 36|0);
 $27 = HEAP16[$26>>1]|0;
 $28 = $27 << 16 >> 16;
 $29 = (($24) + ($28))|0;
 $30 = $29&65535;
 $_di = $30;
 $31 = $so;
 $32 = ((($31)) + 24|0);
 $33 = HEAP16[$32>>1]|0;
 $34 = $33 << 16 >> 16;
 $35 = ($34|0)==(1);
 if ($35) {
  $36 = $_di;
  $37 = $36 << 16 >> 16;
  $38 = ((($5)) + 19044|0);
  $39 = (($38) + (($37*20)|0)|0);
  $40 = ((($39)) + 4|0);
  $41 = ((($40)) + 8|0);
  $42 = HEAP16[$41>>1]|0;
  $43 = $42 << 16 >> 16;
  $44 = $so;
  $45 = ((($44)) + 18|0);
  $46 = HEAP16[$45>>1]|0;
  $47 = $46 << 16 >> 16;
  $48 = ((($5)) + 19044|0);
  $49 = (($48) + (($47*20)|0)|0);
  $50 = ((($49)) + 4|0);
  $51 = ((($50)) + 8|0);
  $52 = HEAP16[$51>>1]|0;
  $53 = $52 << 16 >> 16;
  $54 = (($43) - ($53))|0;
  $55 = $54&65535;
  $_ax = $55;
  $56 = $_di;
  $57 = $56 << 16 >> 16;
  $58 = ((($5)) + 19044|0);
  $59 = (($58) + (($57*20)|0)|0);
  $60 = ((($59)) + 4|0);
  $61 = ((($60)) + 4|0);
  $62 = HEAP16[$61>>1]|0;
  $63 = $62 << 16 >> 16;
  $64 = $so;
  $65 = ((($64)) + 18|0);
  $66 = HEAP16[$65>>1]|0;
  $67 = $66 << 16 >> 16;
  $68 = ((($5)) + 19044|0);
  $69 = (($68) + (($67*20)|0)|0);
  $70 = ((($69)) + 4|0);
  $71 = ((($70)) + 4|0);
  $72 = HEAP16[$71>>1]|0;
  $73 = $72 << 16 >> 16;
  $74 = (($63) - ($73))|0;
  $75 = $_ax;
  $76 = $75 << 16 >> 16;
  $77 = (($76) + ($74))|0;
  $78 = $77&65535;
  $_ax = $78;
  $79 = $2;
  $80 = $_ax;
  $81 = $80 << 16 >> 16;
  $82 = (($81) + ($79))|0;
  $83 = $82&65535;
  $_ax = $83;
 } else {
  $84 = $so;
  $85 = ((($84)) + 18|0);
  $86 = HEAP16[$85>>1]|0;
  $87 = $86 << 16 >> 16;
  $88 = ((($5)) + 19044|0);
  $89 = (($88) + (($87*20)|0)|0);
  $90 = ((($89)) + 4|0);
  $91 = ((($90)) + 8|0);
  $92 = HEAP16[$91>>1]|0;
  $93 = $92 << 16 >> 16;
  $94 = $_di;
  $95 = $94 << 16 >> 16;
  $96 = ((($5)) + 19044|0);
  $97 = (($96) + (($95*20)|0)|0);
  $98 = ((($97)) + 4|0);
  $99 = ((($98)) + 8|0);
  $100 = HEAP16[$99>>1]|0;
  $101 = $100 << 16 >> 16;
  $102 = (($93) - ($101))|0;
  $103 = $102&65535;
  $_ax = $103;
 }
 $104 = $so;
 $105 = ((($104)) + 22|0);
 $106 = HEAP16[$105>>1]|0;
 $107 = $106 << 16 >> 16;
 $108 = ($107|0)==(1);
 if ($108) {
  $109 = $_di;
  $110 = $109 << 16 >> 16;
  $111 = ((($5)) + 19044|0);
  $112 = (($111) + (($110*20)|0)|0);
  $113 = ((($112)) + 4|0);
  $114 = ((($113)) + 4|0);
  $115 = HEAP16[$114>>1]|0;
  $116 = $115 << 16 >> 16;
  $117 = (1 - ($116))|0;
  $118 = $2;
  $119 = (($117) - ($118))|0;
  $120 = $119&65535;
  $_dx = $120;
 } else {
  $_dx = 0;
 }
 $121 = $so;
 $122 = ((($121)) + 6|0);
 $123 = HEAP16[$122>>1]|0;
 $124 = $123 << 16 >> 16;
 $125 = $so;
 $126 = ((($125)) + 2|0);
 $127 = HEAP16[$126>>1]|0;
 $128 = $127 << 16 >> 16;
 $129 = (($124) - ($128))|0;
 $130 = $_dx;
 $131 = $130 << 16 >> 16;
 $132 = (($129) - ($131))|0;
 $133 = $_ax;
 $134 = $133 << 16 >> 16;
 $135 = (($132) - ($134))|0;
 $136 = $4;
 $137 = (($135) - ($136))|0;
 $138 = $137&65535;
 $_ax = $138;
 $139 = $_ax;
 $140 = $139 << 16 >> 16;
 $141 = $3;
 $142 = (($140|0) % ($141|0))&-1;
 $143 = $142&65535;
 $_si = $143;
 $144 = $_si;
 $145 = $144 << 16 >> 16;
 $146 = ($145|0)<(0);
 if (!($146)) {
  $152 = $_si;
  $153 = $152 << 16 >> 16;
  STACKTOP = sp;return ($153|0);
 }
 $147 = $3;
 $148 = $_si;
 $149 = $148 << 16 >> 16;
 $150 = (($149) + ($147))|0;
 $151 = $150&65535;
 $_si = $151;
 $152 = $_si;
 $153 = $152 << 16 >> 16;
 STACKTOP = sp;return ($153|0);
}
function __ZN4Game16findObjectByNameEiiPb($this,$currentObjectNum,$defaultObjectNum,$objectFlag) {
 $this = $this|0;
 $currentObjectNum = $currentObjectNum|0;
 $defaultObjectNum = $defaultObjectNum|0;
 $objectFlag = $objectFlag|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $index = 0, $len = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $currentObjectNum;
 $2 = $defaultObjectNum;
 $3 = $objectFlag;
 $4 = $0;
 $index = -1;
 $5 = $3;
 HEAP8[$5>>0] = 1;
 $6 = ((($4)) + 3152|0);
 $7 = (__ZN6Script13fetchNextWordEv($6)|0);
 $len = $7;
 $8 = $len;
 $9 = $8 << 16 >> 16;
 HEAP32[$vararg_buffer>>2] = $9;
 __Z5debugtPKcz(2,23685,$vararg_buffer);
 $10 = $len;
 $11 = $10 << 16 >> 16;
 $12 = ($11|0)==(-1);
 if ($12) {
  $13 = $2;
  $index = $13;
  $43 = $index;
  STACKTOP = sp;return ($43|0);
 }
 $14 = $len;
 $15 = $14 << 16 >> 16;
 $16 = ($15|0)==(0);
 if ($16) {
  $17 = $3;
  HEAP8[$17>>0] = 0;
  $18 = $1;
  $index = $18;
  $43 = $index;
  STACKTOP = sp;return ($43|0);
 }
 $19 = ((($4)) + 3152|0);
 $20 = (__ZN6Script9getStringEv($19)|0);
 $21 = $len;
 $22 = $21 << 16 >> 16;
 HEAP32[$vararg_buffer1>>2] = $20;
 $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
 HEAP32[$vararg_ptr4>>2] = $22;
 __Z5debugtPKcz(2,23719,$vararg_buffer1);
 $i = 0;
 while(1) {
  $23 = $i;
  $24 = ((($4)) + 10552|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($23|0)<($25|0);
  if (!($26)) {
   break;
  }
  $27 = $i;
  $28 = ((($4)) + 5252|0);
  $29 = (($28) + (($27*106)|0)|0);
  $30 = ((($29)) + 46|0);
  $31 = ((($4)) + 3152|0);
  $32 = (__ZN6Script9getStringEv($31)|0);
  $33 = (_strcmp($30,$32)|0);
  $34 = ($33|0)==(0);
  $35 = $i;
  if ($34) {
   label = 8;
   break;
  }
  $36 = (($35) + 1)|0;
  $i = $36;
 }
 if ((label|0) == 8) {
  $index = $35;
 }
 $37 = $len;
 $38 = $37 << 16 >> 16;
 $39 = ((($4)) + 3152|0);
 $40 = ((($39)) + 4|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($41) + ($38))|0;
 HEAP32[$40>>2] = $42;
 $43 = $index;
 STACKTOP = sp;return ($43|0);
}
function __ZN4Game11sortObjectsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i = 0, $i1 = 0, $j = 0, $k = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ((($1)) + 10552|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($2|0)<($4|0);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = ((($1)) + 5252|0);
  $8 = (($7) + (($6*106)|0)|0);
  $9 = $i;
  $10 = ((($1)) + 5052|0);
  $11 = (($10) + ($9<<2)|0);
  HEAP32[$11>>2] = $8;
  $12 = $i;
  $13 = (($12) + 1)|0;
  $i = $13;
 }
 $14 = ((($1)) + 10552|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15|0) / 2)&-1;
 $i1 = $16;
 while(1) {
  $17 = $i1;
  $18 = ($17|0)>(0);
  if (!($18)) {
   break;
  }
  $19 = $i1;
  $j = $19;
  while(1) {
   $20 = $j;
   $21 = ((($1)) + 10552|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($20|0)<($22|0);
   if (!($23)) {
    break;
   }
   $24 = $j;
   $25 = $i1;
   $26 = (($24) - ($25))|0;
   $k = $26;
   while(1) {
    $27 = $k;
    $28 = ($27|0)>=(0);
    if (!($28)) {
     break;
    }
    $29 = $k;
    $30 = ((($1)) + 5052|0);
    $31 = (($30) + ($29<<2)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = ((($32)) + 16|0);
    $34 = HEAP16[$33>>1]|0;
    $35 = $34 << 16 >> 16;
    $36 = $k;
    $37 = $i1;
    $38 = (($36) + ($37))|0;
    $39 = ((($1)) + 5052|0);
    $40 = (($39) + ($38<<2)|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = ((($41)) + 16|0);
    $43 = HEAP16[$42>>1]|0;
    $44 = $43 << 16 >> 16;
    $45 = ($35|0)>=($44|0);
    if ($45) {
     break;
    }
    $46 = $k;
    $47 = ((($1)) + 5052|0);
    $48 = (($47) + ($46<<2)|0);
    $49 = $k;
    $50 = $i1;
    $51 = (($49) + ($50))|0;
    $52 = ((($1)) + 5052|0);
    $53 = (($52) + ($51<<2)|0);
    __Z4SWAPIP11SceneObjectEvRT_S3_($48,$53);
    $54 = $i1;
    $55 = $k;
    $56 = (($55) - ($54))|0;
    $k = $56;
   }
   $57 = $j;
   $58 = (($57) + 1)|0;
   $j = $58;
  }
  $59 = $i1;
  $60 = (($59|0) / 2)&-1;
  $i1 = $60;
 }
 STACKTOP = sp;return;
}
function __ZN4Game18copyBufferToBufferEiiiiP11SceneBitmapS1_($this,$x,$y,$w,$h,$src,$dst) {
 $this = $this|0;
 $x = $x|0;
 $y = $y|0;
 $w = $w|0;
 $h = $h|0;
 $src = $src|0;
 $dst = $dst|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $p_dst = 0, $p_src = 0, $x2 = 0, $y2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $x;
 $2 = $y;
 $3 = $w;
 $4 = $h;
 $5 = $src;
 $6 = $dst;
 $7 = $5;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $p_src = $9;
 $10 = $5;
 $11 = HEAP16[$10>>1]|0;
 $12 = $6;
 $13 = HEAP16[$12>>1]|0;
 $14 = (__Z3MINItET_S0_S0_($11,$13)|0);
 $15 = $14&65535;
 $x2 = $15;
 $16 = $3;
 $17 = ($16|0)<=(0);
 if ($17) {
  STACKTOP = sp;return;
 }
 $18 = $1;
 $19 = $x2;
 $20 = ($18|0)>($19|0);
 if ($20) {
  STACKTOP = sp;return;
 }
 $21 = $1;
 $22 = $3;
 $23 = (($21) + ($22))|0;
 $24 = ($23|0)<=(0);
 if ($24) {
  STACKTOP = sp;return;
 }
 $25 = $1;
 $26 = ($25|0)<(0);
 if ($26) {
  $27 = $1;
  $28 = $3;
  $29 = (($28) + ($27))|0;
  $3 = $29;
  $30 = $1;
  $31 = $p_src;
  $32 = (0 - ($30))|0;
  $33 = (($31) + ($32)|0);
  $p_src = $33;
  $1 = 0;
 }
 $34 = $1;
 $35 = $3;
 $36 = (($34) + ($35))|0;
 $37 = $x2;
 $38 = ($36|0)>($37|0);
 if ($38) {
  $39 = $x2;
  $40 = (($39) + 1)|0;
  $41 = $1;
  $42 = (($40) - ($41))|0;
  $3 = $42;
 }
 $43 = $5;
 $44 = ((($43)) + 2|0);
 $45 = HEAP16[$44>>1]|0;
 $46 = $6;
 $47 = ((($46)) + 2|0);
 $48 = HEAP16[$47>>1]|0;
 $49 = (__Z3MINItET_S0_S0_($45,$48)|0);
 $50 = $49&65535;
 $y2 = $50;
 $51 = $4;
 $52 = ($51|0)<=(0);
 if ($52) {
  STACKTOP = sp;return;
 }
 $53 = $2;
 $54 = $y2;
 $55 = ($53|0)>=($54|0);
 if ($55) {
  STACKTOP = sp;return;
 }
 $56 = $2;
 $57 = $4;
 $58 = (($56) + ($57))|0;
 $59 = ($58|0)<=(0);
 if ($59) {
  STACKTOP = sp;return;
 }
 $60 = $2;
 $61 = ($60|0)<(0);
 if ($61) {
  $62 = $2;
  $63 = $4;
  $64 = (($63) + ($62))|0;
  $4 = $64;
  $65 = $2;
  $66 = $5;
  $67 = ((($66)) + 4|0);
  $68 = HEAP16[$67>>1]|0;
  $69 = $68&65535;
  $70 = Math_imul($65, $69)|0;
  $71 = $p_src;
  $72 = (0 - ($70))|0;
  $73 = (($71) + ($72)|0);
  $p_src = $73;
  $2 = 0;
 }
 $74 = $2;
 $75 = $4;
 $76 = (($74) + ($75))|0;
 $77 = $y2;
 $78 = ($76|0)>($77|0);
 if ($78) {
  $79 = $y2;
  $80 = (($79) + 1)|0;
  $81 = $2;
  $82 = (($80) - ($81))|0;
  $4 = $82;
 }
 $83 = $2;
 $84 = $5;
 $85 = ((($84)) + 4|0);
 $86 = HEAP16[$85>>1]|0;
 $87 = $86&65535;
 $88 = Math_imul($83, $87)|0;
 $89 = $1;
 $90 = (($88) + ($89))|0;
 $91 = $p_src;
 $92 = (($91) + ($90)|0);
 $p_src = $92;
 $93 = $6;
 $94 = ((($93)) + 8|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = $2;
 $97 = $6;
 $98 = ((($97)) + 4|0);
 $99 = HEAP16[$98>>1]|0;
 $100 = $99&65535;
 $101 = Math_imul($96, $100)|0;
 $102 = (($95) + ($101)|0);
 $103 = $1;
 $104 = (($102) + ($103)|0);
 $p_dst = $104;
 while(1) {
  $105 = $4;
  $106 = (($105) + -1)|0;
  $4 = $106;
  $107 = ($105|0)!=(0);
  if (!($107)) {
   break;
  }
  $108 = $p_dst;
  $109 = $p_src;
  $110 = $3;
  _memcpy(($108|0),($109|0),($110|0))|0;
  $111 = $6;
  $112 = ((($111)) + 4|0);
  $113 = HEAP16[$112>>1]|0;
  $114 = $113&65535;
  $115 = $p_dst;
  $116 = (($115) + ($114)|0);
  $p_dst = $116;
  $117 = $5;
  $118 = ((($117)) + 4|0);
  $119 = HEAP16[$118>>1]|0;
  $120 = $119&65535;
  $121 = $p_src;
  $122 = (($121) + ($120)|0);
  $p_src = $122;
 }
 STACKTOP = sp;return;
}
function __ZN4Game7drawBoxEiiiiP11SceneBitmapS1_ii($this,$x,$y,$w,$h,$src,$dst,$startColor,$endColor) {
 $this = $this|0;
 $x = $x|0;
 $y = $y|0;
 $w = $w|0;
 $h = $h|0;
 $src = $src|0;
 $dst = $dst|0;
 $startColor = $startColor|0;
 $endColor = $endColor|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $p_dst = 0, $p_src = 0, $x2 = 0, $y2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $x;
 $2 = $y;
 $3 = $w;
 $4 = $h;
 $5 = $src;
 $6 = $dst;
 $7 = $startColor;
 $8 = $endColor;
 $9 = $5;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $p_src = $11;
 $12 = $5;
 $13 = HEAP16[$12>>1]|0;
 $14 = $6;
 $15 = HEAP16[$14>>1]|0;
 $16 = (__Z3MINItET_S0_S0_($13,$15)|0);
 $17 = $16&65535;
 $x2 = $17;
 $18 = $3;
 $19 = ($18|0)<=(0);
 if ($19) {
  STACKTOP = sp;return;
 }
 $20 = $1;
 $21 = $x2;
 $22 = ($20|0)>($21|0);
 if ($22) {
  STACKTOP = sp;return;
 }
 $23 = $1;
 $24 = $3;
 $25 = (($23) + ($24))|0;
 $26 = ($25|0)<=(0);
 if ($26) {
  STACKTOP = sp;return;
 }
 $27 = $1;
 $28 = ($27|0)<(0);
 if ($28) {
  $29 = $1;
  $30 = $3;
  $31 = (($30) + ($29))|0;
  $3 = $31;
  $32 = $1;
  $33 = $p_src;
  $34 = (0 - ($32))|0;
  $35 = (($33) + ($34)|0);
  $p_src = $35;
  $1 = 0;
 }
 $36 = $1;
 $37 = $3;
 $38 = (($36) + ($37))|0;
 $39 = $x2;
 $40 = ($38|0)>($39|0);
 if ($40) {
  $41 = $x2;
  $42 = (($41) + 1)|0;
  $43 = $1;
  $44 = (($42) - ($43))|0;
  $3 = $44;
 }
 $45 = $5;
 $46 = ((($45)) + 2|0);
 $47 = HEAP16[$46>>1]|0;
 $48 = $6;
 $49 = ((($48)) + 2|0);
 $50 = HEAP16[$49>>1]|0;
 $51 = (__Z3MINItET_S0_S0_($47,$50)|0);
 $52 = $51&65535;
 $y2 = $52;
 $53 = $4;
 $54 = ($53|0)<=(0);
 if ($54) {
  STACKTOP = sp;return;
 }
 $55 = $2;
 $56 = $y2;
 $57 = ($55|0)>=($56|0);
 if ($57) {
  STACKTOP = sp;return;
 }
 $58 = $2;
 $59 = $4;
 $60 = (($58) + ($59))|0;
 $61 = ($60|0)<=(0);
 if ($61) {
  STACKTOP = sp;return;
 }
 $62 = $2;
 $63 = ($62|0)<(0);
 if ($63) {
  $64 = $2;
  $65 = $4;
  $66 = (($65) + ($64))|0;
  $4 = $66;
  $67 = $2;
  $68 = $5;
  $69 = ((($68)) + 4|0);
  $70 = HEAP16[$69>>1]|0;
  $71 = $70&65535;
  $72 = Math_imul($67, $71)|0;
  $73 = $p_src;
  $74 = (0 - ($72))|0;
  $75 = (($73) + ($74)|0);
  $p_src = $75;
  $2 = 0;
 }
 $76 = $2;
 $77 = $4;
 $78 = (($76) + ($77))|0;
 $79 = $y2;
 $80 = ($78|0)>($79|0);
 if ($80) {
  $81 = $y2;
  $82 = (($81) + 1)|0;
  $83 = $2;
  $84 = (($82) - ($83))|0;
  $4 = $84;
 }
 $85 = $2;
 $86 = $5;
 $87 = ((($86)) + 4|0);
 $88 = HEAP16[$87>>1]|0;
 $89 = $88&65535;
 $90 = Math_imul($85, $89)|0;
 $91 = $1;
 $92 = (($90) + ($91))|0;
 $93 = $p_src;
 $94 = (($93) + ($92)|0);
 $p_src = $94;
 $95 = $6;
 $96 = ((($95)) + 8|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = $2;
 $99 = $6;
 $100 = ((($99)) + 4|0);
 $101 = HEAP16[$100>>1]|0;
 $102 = $101&65535;
 $103 = Math_imul($98, $102)|0;
 $104 = (($97) + ($103)|0);
 $105 = $1;
 $106 = (($104) + ($105)|0);
 $p_dst = $106;
 while(1) {
  $107 = $4;
  $108 = (($107) + -1)|0;
  $4 = $108;
  $109 = ($107|0)!=(0);
  if (!($109)) {
   break;
  }
  $i = 0;
  while(1) {
   $110 = $i;
   $111 = $3;
   $112 = ($110|0)<($111|0);
   if (!($112)) {
    break;
   }
   $113 = $7;
   $114 = $i;
   $115 = $p_src;
   $116 = (($115) + ($114)|0);
   $117 = HEAP8[$116>>0]|0;
   $118 = $117&255;
   $119 = ($113|0)>($118|0);
   if ($119) {
    label = 21;
   } else {
    $120 = $8;
    $121 = $i;
    $122 = $p_src;
    $123 = (($122) + ($121)|0);
    $124 = HEAP8[$123>>0]|0;
    $125 = $124&255;
    $126 = ($120|0)<=($125|0);
    if ($126) {
     label = 21;
    }
   }
   if ((label|0) == 21) {
    label = 0;
    $127 = $i;
    $128 = $p_src;
    $129 = (($128) + ($127)|0);
    $130 = HEAP8[$129>>0]|0;
    $131 = $i;
    $132 = $p_dst;
    $133 = (($132) + ($131)|0);
    HEAP8[$133>>0] = $130;
   }
   $134 = $i;
   $135 = (($134) + 1)|0;
   $i = $135;
  }
  $136 = $5;
  $137 = ((($136)) + 4|0);
  $138 = HEAP16[$137>>1]|0;
  $139 = $138&65535;
  $140 = $p_src;
  $141 = (($140) + ($139)|0);
  $p_src = $141;
  $142 = $6;
  $143 = ((($142)) + 4|0);
  $144 = HEAP16[$143>>1]|0;
  $145 = $144&65535;
  $146 = $p_dst;
  $147 = (($146) + ($145)|0);
  $p_dst = $147;
 }
 STACKTOP = sp;return;
}
function __ZN4Game10drawObjectEiiPKhP11SceneBitmap($this,$x,$y,$src,$dst) {
 $this = $this|0;
 $x = $x|0;
 $y = $y|0;
 $src = $src|0;
 $dst = $dst|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $clippedH = 0, $clippedW = 0, $h = 0, $i = 0, $j = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $x;
 $2 = $y;
 $3 = $src;
 $4 = $dst;
 $5 = $3;
 $6 = (__Z14READ_LE_UINT16PKv($5)|0);
 $7 = $6&65535;
 $8 = (($7) + 1)|0;
 $w = $8;
 $9 = $3;
 $10 = ((($9)) + 2|0);
 $3 = $10;
 $11 = $3;
 $12 = (__Z14READ_LE_UINT16PKv($11)|0);
 $13 = $12&65535;
 $14 = (($13) + 1)|0;
 $h = $14;
 $15 = $3;
 $16 = ((($15)) + 2|0);
 $3 = $16;
 $17 = $w;
 $clippedW = $17;
 $18 = $1;
 $19 = $4;
 $20 = HEAP16[$19>>1]|0;
 $21 = $20&65535;
 $22 = ($18|0)>($21|0);
 if ($22) {
  STACKTOP = sp;return;
 }
 $23 = $1;
 $24 = $clippedW;
 $25 = (($23) + ($24))|0;
 $26 = ($25|0)<=(0);
 if ($26) {
  STACKTOP = sp;return;
 }
 $27 = $1;
 $28 = ($27|0)<(0);
 if ($28) {
  $29 = $1;
  $30 = $clippedW;
  $31 = (($30) + ($29))|0;
  $clippedW = $31;
  $32 = $1;
  $33 = $3;
  $34 = (0 - ($32))|0;
  $35 = (($33) + ($34)|0);
  $3 = $35;
  $1 = 0;
 }
 $36 = $1;
 $37 = $clippedW;
 $38 = (($36) + ($37))|0;
 $39 = $4;
 $40 = HEAP16[$39>>1]|0;
 $41 = $40&65535;
 $42 = ($38|0)>($41|0);
 if ($42) {
  $43 = $4;
  $44 = HEAP16[$43>>1]|0;
  $45 = $44&65535;
  $46 = (($45) + 1)|0;
  $47 = $1;
  $48 = (($46) - ($47))|0;
  $clippedW = $48;
 }
 $49 = $h;
 $clippedH = $49;
 $50 = $2;
 $51 = $4;
 $52 = ((($51)) + 2|0);
 $53 = HEAP16[$52>>1]|0;
 $54 = $53&65535;
 $55 = ($50|0)>($54|0);
 if ($55) {
  STACKTOP = sp;return;
 }
 $56 = $2;
 $57 = $clippedH;
 $58 = (($56) + ($57))|0;
 $59 = ($58|0)<=(0);
 if ($59) {
  STACKTOP = sp;return;
 }
 $60 = $2;
 $61 = ($60|0)<(0);
 if ($61) {
  $62 = $2;
  $63 = $clippedH;
  $64 = (($63) + ($62))|0;
  $clippedH = $64;
  $65 = $2;
  $66 = $w;
  $67 = Math_imul($65, $66)|0;
  $68 = $3;
  $69 = (0 - ($67))|0;
  $70 = (($68) + ($69)|0);
  $3 = $70;
  $2 = 0;
 }
 $71 = $2;
 $72 = $clippedH;
 $73 = (($71) + ($72))|0;
 $74 = $4;
 $75 = ((($74)) + 2|0);
 $76 = HEAP16[$75>>1]|0;
 $77 = $76&65535;
 $78 = ($73|0)>($77|0);
 if ($78) {
  $79 = $4;
  $80 = ((($79)) + 2|0);
  $81 = HEAP16[$80>>1]|0;
  $82 = $81&65535;
  $83 = (($82) + 1)|0;
  $84 = $2;
  $85 = (($83) - ($84))|0;
  $clippedH = $85;
 }
 $j = 0;
 while(1) {
  $86 = $j;
  $87 = $clippedH;
  $88 = ($86|0)<($87|0);
  if (!($88)) {
   break;
  }
  $i = 0;
  while(1) {
   $89 = $i;
   $90 = $clippedW;
   $91 = ($89|0)<($90|0);
   if (!($91)) {
    break;
   }
   $92 = $i;
   $93 = $3;
   $94 = (($93) + ($92)|0);
   $95 = HEAP8[$94>>0]|0;
   $96 = ($95<<24>>24)!=(0);
   if ($96) {
    $97 = $i;
    $98 = $3;
    $99 = (($98) + ($97)|0);
    $100 = HEAP8[$99>>0]|0;
    $101 = $4;
    $102 = ((($101)) + 4|0);
    $103 = HEAP16[$102>>1]|0;
    $104 = $103&65535;
    $105 = $2;
    $106 = $j;
    $107 = (($105) + ($106))|0;
    $108 = Math_imul($104, $107)|0;
    $109 = $1;
    $110 = $i;
    $111 = (($109) + ($110))|0;
    $112 = (($108) + ($111))|0;
    $113 = $4;
    $114 = ((($113)) + 8|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = (($115) + ($112)|0);
    HEAP8[$116>>0] = $100;
   }
   $117 = $i;
   $118 = (($117) + 1)|0;
   $i = $118;
  }
  $119 = $w;
  $120 = $3;
  $121 = (($120) + ($119)|0);
  $3 = $121;
  $122 = $j;
  $123 = (($122) + 1)|0;
  $j = $123;
 }
 STACKTOP = sp;return;
}
function __ZN4Game22drawObjectVerticalFlipEiiPKhP11SceneBitmap($this,$x,$y,$src,$dst) {
 $this = $this|0;
 $x = $x|0;
 $y = $y|0;
 $src = $src|0;
 $dst = $dst|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $clippedH = 0, $clippedW = 0, $h = 0, $i = 0, $j = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $x;
 $2 = $y;
 $3 = $src;
 $4 = $dst;
 $5 = $3;
 $6 = (__Z14READ_LE_UINT16PKv($5)|0);
 $7 = $6&65535;
 $8 = (($7) + 1)|0;
 $w = $8;
 $9 = $3;
 $10 = ((($9)) + 2|0);
 $3 = $10;
 $11 = $3;
 $12 = (__Z14READ_LE_UINT16PKv($11)|0);
 $13 = $12&65535;
 $14 = (($13) + 1)|0;
 $h = $14;
 $15 = $3;
 $16 = ((($15)) + 2|0);
 $3 = $16;
 $17 = $w;
 $18 = (($17) - 1)|0;
 $19 = $3;
 $20 = (($19) + ($18)|0);
 $3 = $20;
 $21 = $w;
 $clippedW = $21;
 $22 = $1;
 $23 = $4;
 $24 = HEAP16[$23>>1]|0;
 $25 = $24&65535;
 $26 = ($22|0)>($25|0);
 if ($26) {
  STACKTOP = sp;return;
 }
 $27 = $1;
 $28 = $clippedW;
 $29 = (($27) + ($28))|0;
 $30 = ($29|0)<=(0);
 if ($30) {
  STACKTOP = sp;return;
 }
 $31 = $1;
 $32 = ($31|0)<(0);
 if ($32) {
  $33 = $1;
  $34 = $clippedW;
  $35 = (($34) + ($33))|0;
  $clippedW = $35;
  $36 = $1;
  $37 = $3;
  $38 = (($37) + ($36)|0);
  $3 = $38;
  $1 = 0;
 }
 $39 = $1;
 $40 = $clippedW;
 $41 = (($39) + ($40))|0;
 $42 = $4;
 $43 = HEAP16[$42>>1]|0;
 $44 = $43&65535;
 $45 = ($41|0)>($44|0);
 if ($45) {
  $46 = $4;
  $47 = HEAP16[$46>>1]|0;
  $48 = $47&65535;
  $49 = (($48) + 1)|0;
  $50 = $1;
  $51 = (($49) - ($50))|0;
  $clippedW = $51;
 }
 $52 = $h;
 $clippedH = $52;
 $53 = $2;
 $54 = $4;
 $55 = ((($54)) + 2|0);
 $56 = HEAP16[$55>>1]|0;
 $57 = $56&65535;
 $58 = ($53|0)>($57|0);
 if ($58) {
  STACKTOP = sp;return;
 }
 $59 = $2;
 $60 = $clippedH;
 $61 = (($59) + ($60))|0;
 $62 = ($61|0)<=(0);
 if ($62) {
  STACKTOP = sp;return;
 }
 $63 = $2;
 $64 = ($63|0)<(0);
 if ($64) {
  $65 = $2;
  $66 = $clippedH;
  $67 = (($66) + ($65))|0;
  $clippedH = $67;
  $68 = $2;
  $69 = $w;
  $70 = Math_imul($68, $69)|0;
  $71 = $3;
  $72 = (0 - ($70))|0;
  $73 = (($71) + ($72)|0);
  $3 = $73;
  $2 = 0;
 }
 $74 = $2;
 $75 = $clippedH;
 $76 = (($74) + ($75))|0;
 $77 = $4;
 $78 = ((($77)) + 2|0);
 $79 = HEAP16[$78>>1]|0;
 $80 = $79&65535;
 $81 = ($76|0)>($80|0);
 if ($81) {
  $82 = $4;
  $83 = ((($82)) + 2|0);
  $84 = HEAP16[$83>>1]|0;
  $85 = $84&65535;
  $86 = (($85) + 1)|0;
  $87 = $2;
  $88 = (($86) - ($87))|0;
  $clippedH = $88;
 }
 $j = 0;
 while(1) {
  $89 = $j;
  $90 = $clippedH;
  $91 = ($89|0)<($90|0);
  if (!($91)) {
   break;
  }
  $i = 0;
  while(1) {
   $92 = $i;
   $93 = $clippedW;
   $94 = ($92|0)<($93|0);
   if (!($94)) {
    break;
   }
   $95 = $i;
   $96 = (0 - ($95))|0;
   $97 = $3;
   $98 = (($97) + ($96)|0);
   $99 = HEAP8[$98>>0]|0;
   $100 = ($99<<24>>24)!=(0);
   if ($100) {
    $101 = $i;
    $102 = (0 - ($101))|0;
    $103 = $3;
    $104 = (($103) + ($102)|0);
    $105 = HEAP8[$104>>0]|0;
    $106 = $4;
    $107 = ((($106)) + 4|0);
    $108 = HEAP16[$107>>1]|0;
    $109 = $108&65535;
    $110 = $2;
    $111 = $j;
    $112 = (($110) + ($111))|0;
    $113 = Math_imul($109, $112)|0;
    $114 = $1;
    $115 = $i;
    $116 = (($114) + ($115))|0;
    $117 = (($113) + ($116))|0;
    $118 = $4;
    $119 = ((($118)) + 8|0);
    $120 = HEAP32[$119>>2]|0;
    $121 = (($120) + ($117)|0);
    HEAP8[$121>>0] = $105;
   }
   $122 = $i;
   $123 = (($122) + 1)|0;
   $i = $123;
  }
  $124 = $w;
  $125 = $3;
  $126 = (($125) + ($124)|0);
  $3 = $126;
  $127 = $j;
  $128 = (($127) + 1)|0;
  $j = $128;
 }
 STACKTOP = sp;return;
}
function __ZN4Game17redrawObjectBoxesEii($this,$previousObject,$currentObject) {
 $this = $this|0;
 $previousObject = $previousObject|0;
 $currentObject = $currentObject|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b = 0, $box = 0, $h = 0, $i = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $w = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $previousObject;
 $2 = $currentObject;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 HEAP32[$vararg_buffer>>2] = $4;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $5;
 __Z5debugtPKcz(2,23765,$vararg_buffer);
 $b = 0;
 while(1) {
  $6 = $b;
  $7 = ($6|0)<(10);
  if (!($7)) {
   break;
  }
  $i = 0;
  while(1) {
   $8 = $i;
   $9 = $b;
   $10 = ((($3)) + 18964|0);
   $11 = (($10) + ($9<<2)|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($8|0)<($12|0);
   $14 = $b;
   if (!($13)) {
    break;
   }
   $15 = $i;
   $16 = (__ZN4Game8derefBoxEii($3,$14,$15)|0);
   $box = $16;
   $17 = $box;
   $18 = ((($17)) + 8|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = $19&255;
   $21 = ($20|0)==(2);
   do {
    if ($21) {
     $22 = $box;
     $23 = ((($22)) + 10|0);
     $24 = HEAP16[$23>>1]|0;
     $25 = $24 << 16 >> 16;
     $26 = $1;
     $27 = ((($3)) + 5052|0);
     $28 = (($27) + ($26<<2)|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = ((($29)) + 16|0);
     $31 = HEAP16[$30>>1]|0;
     $32 = $31 << 16 >> 16;
     $33 = ($25|0)<=($32|0);
     if ($33) {
      $34 = $box;
      $35 = ((($34)) + 2|0);
      $36 = HEAP16[$35>>1]|0;
      $37 = $36 << 16 >> 16;
      $38 = $box;
      $39 = HEAP16[$38>>1]|0;
      $40 = $39 << 16 >> 16;
      $41 = (($37) - ($40))|0;
      $42 = (($41) + 1)|0;
      $w = $42;
      $43 = $box;
      $44 = ((($43)) + 6|0);
      $45 = HEAP16[$44>>1]|0;
      $46 = $45 << 16 >> 16;
      $47 = $box;
      $48 = ((($47)) + 4|0);
      $49 = HEAP16[$48>>1]|0;
      $50 = $49 << 16 >> 16;
      $51 = (($46) - ($50))|0;
      $52 = (($51) + 1)|0;
      $h = $52;
      $53 = $box;
      $54 = HEAP16[$53>>1]|0;
      $55 = $54 << 16 >> 16;
      $x = $55;
      $56 = ((($3)) + 68|0);
      $57 = ((($56)) + 2|0);
      $58 = HEAP16[$57>>1]|0;
      $59 = $58&65535;
      $60 = (($59) + 1)|0;
      $61 = $box;
      $62 = ((($61)) + 6|0);
      $63 = HEAP16[$62>>1]|0;
      $64 = $63 << 16 >> 16;
      $65 = (($60) - ($64))|0;
      $y = $65;
      $66 = $1;
      $67 = $2;
      $68 = ($66|0)==($67|0);
      if (!($68)) {
       $69 = $box;
       $70 = ((($69)) + 10|0);
       $71 = HEAP16[$70>>1]|0;
       $72 = $71 << 16 >> 16;
       $73 = $2;
       $74 = ((($3)) + 5052|0);
       $75 = (($74) + ($73<<2)|0);
       $76 = HEAP32[$75>>2]|0;
       $77 = ((($76)) + 16|0);
       $78 = HEAP16[$77>>1]|0;
       $79 = $78 << 16 >> 16;
       $80 = ($72|0)>($79|0);
       if (!($80)) {
        break;
       }
      }
      $81 = $box;
      $82 = ((($81)) + 14|0);
      $83 = HEAP16[$82>>1]|0;
      $84 = $83 << 16 >> 16;
      $85 = ($84|0)!=(0);
      $86 = $x;
      $87 = $y;
      $88 = $w;
      $89 = $h;
      $90 = ((($3)) + 84|0);
      $91 = ((($3)) + 68|0);
      if ($85) {
       $92 = $box;
       $93 = ((($92)) + 12|0);
       $94 = HEAP16[$93>>1]|0;
       $95 = $94 << 16 >> 16;
       $96 = $box;
       $97 = ((($96)) + 12|0);
       $98 = HEAP16[$97>>1]|0;
       $99 = $98 << 16 >> 16;
       $100 = $box;
       $101 = ((($100)) + 14|0);
       $102 = HEAP16[$101>>1]|0;
       $103 = $102 << 16 >> 16;
       $104 = (($99) + ($103))|0;
       $105 = (($104) - 1)|0;
       __ZN4Game7drawBoxEiiiiP11SceneBitmapS1_ii($3,$86,$87,$88,$89,$90,$91,$95,$105);
       break;
      } else {
       __ZN4Game18copyBufferToBufferEiiiiP11SceneBitmapS1_($3,$86,$87,$88,$89,$90,$91);
       break;
      }
     }
    }
   } while(0);
   $106 = $i;
   $107 = (($106) + 1)|0;
   $i = $107;
  }
  $108 = (($14) + 1)|0;
  $b = $108;
 }
 STACKTOP = sp;return;
}
function __ZN4Game23changeObjectMotionFrameEiiiiiiiii($this,$object,$object2,$useObject2,$count1,$count2,$useDx,$dx,$useDy,$dy) {
 $this = $this|0;
 $object = $object|0;
 $object2 = $object2|0;
 $useObject2 = $useObject2|0;
 $count1 = $count1|0;
 $count2 = $count2|0;
 $useDx = $useDx|0;
 $dx = $dx|0;
 $useDy = $useDy|0;
 $dy = $dy|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $num = 0, $so = 0, $vararg_buffer = 0, $x = 0, $x1 = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $object;
 $2 = $object2;
 $3 = $useObject2;
 $4 = $count1;
 $5 = $count2;
 $6 = $useDx;
 $7 = $dx;
 $8 = $useDy;
 $9 = $dy;
 $10 = $0;
 __Z5debugtPKcz(2,23797,$vararg_buffer);
 $11 = $1;
 $12 = (__ZN4Game16derefSceneObjectEi($10,$11)|0);
 $so = $12;
 $13 = $so;
 $14 = ((($13)) + 42|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = $15 << 16 >> 16;
 $17 = ($16|0)!=(0);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = $3;
 $19 = ($18|0)!=(0);
 if ($19) {
  $20 = $2;
  $21 = (__ZN4Game16derefSceneObjectEi($10,$20)|0);
  $22 = ((($21)) + 30|0);
  $23 = HEAP16[$22>>1]|0;
  $24 = $23 << 16 >> 16;
  $num = $24;
 } else {
  $25 = $so;
  $26 = ((($25)) + 32|0);
  $27 = HEAP16[$26>>1]|0;
  $28 = $27 << 16 >> 16;
  $29 = ((($10)) + 79612|0);
  $30 = (($29) + (($28*6)|0)|0);
  $31 = ((($30)) + 4|0);
  $32 = HEAP16[$31>>1]|0;
  $33 = $32 << 16 >> 16;
  $34 = ((($10)) + 10556|0);
  $35 = (($34) + (($33*40)|0)|0);
  $36 = ((($35)) + 20|0);
  $37 = HEAP16[$36>>1]|0;
  $38 = $37 << 16 >> 16;
  $num = $38;
 }
 $39 = $num;
 $40 = $5;
 $41 = (($39) + ($40))|0;
 $42 = (($41) - 1)|0;
 $43 = $42&65535;
 $44 = $so;
 $45 = ((($44)) + 34|0);
 HEAP16[$45>>1] = $43;
 $46 = $so;
 $47 = ((($46)) + 34|0);
 $48 = HEAP16[$47>>1]|0;
 $49 = $48 << 16 >> 16;
 $50 = ((($10)) + 79612|0);
 $51 = (($50) + (($49*6)|0)|0);
 $52 = HEAP16[$51>>1]|0;
 $53 = $52 << 16 >> 16;
 $54 = $4;
 $55 = (($53) + ($54))|0;
 $56 = (($55) - 1)|0;
 $57 = $56&65535;
 $58 = $so;
 $59 = ((($58)) + 18|0);
 HEAP16[$59>>1] = $57;
 $60 = $so;
 $61 = ((($60)) + 26|0);
 $62 = HEAP16[$61>>1]|0;
 $63 = $62 << 16 >> 16;
 $64 = ($63|0)==(2);
 $65 = $so;
 $66 = ((($65)) + 8|0);
 $67 = HEAP16[$66>>1]|0;
 $68 = $67 << 16 >> 16;
 $69 = $so;
 $70 = ((($69)) + 20|0);
 $71 = HEAP16[$70>>1]|0;
 $72 = $71 << 16 >> 16;
 $73 = ((($10)) + 19044|0);
 $74 = (($73) + (($72*20)|0)|0);
 $75 = ((($74)) + 4|0);
 $76 = ((($75)) + 6|0);
 $77 = HEAP16[$76>>1]|0;
 $78 = $77 << 16 >> 16;
 if ($64) {
  $79 = (($68) + ($78))|0;
  $x = $79;
  $80 = $6;
  $81 = ($80|0)!=(0);
  if ($81) {
   $82 = $7;
   $83 = $x;
   $84 = (($83) - ($82))|0;
   $x = $84;
  } else {
   $85 = $so;
   $86 = ((($85)) + 18|0);
   $87 = HEAP16[$86>>1]|0;
   $88 = $87 << 16 >> 16;
   $89 = ((($10)) + 19044|0);
   $90 = (($89) + (($88*20)|0)|0);
   $91 = ((($90)) + 4|0);
   $92 = ((($91)) + 6|0);
   $93 = HEAP16[$92>>1]|0;
   $94 = $93 << 16 >> 16;
   $95 = $x;
   $96 = (($95) - ($94))|0;
   $x = $96;
  }
  $97 = $x;
  $98 = $so;
  $99 = ((($98)) + 20|0);
  $100 = HEAP16[$99>>1]|0;
  $101 = $100 << 16 >> 16;
  $102 = ((($10)) + 19044|0);
  $103 = (($102) + (($101*20)|0)|0);
  $104 = ((($103)) + 4|0);
  $105 = ((($104)) + 2|0);
  $106 = HEAP16[$105>>1]|0;
  $107 = $106 << 16 >> 16;
  $108 = (($97) + ($107))|0;
  $109 = $so;
  $110 = ((($109)) + 18|0);
  $111 = HEAP16[$110>>1]|0;
  $112 = $111 << 16 >> 16;
  $113 = ((($10)) + 19044|0);
  $114 = (($113) + (($112*20)|0)|0);
  $115 = ((($114)) + 4|0);
  $116 = ((($115)) + 2|0);
  $117 = HEAP16[$116>>1]|0;
  $118 = $117 << 16 >> 16;
  $119 = (($108) - ($118))|0;
  $120 = $119&65535;
  $121 = $so;
  $122 = ((($121)) + 4|0);
  HEAP16[$122>>1] = $120;
 } else {
  $123 = (($68) - ($78))|0;
  $x1 = $123;
  $124 = $6;
  $125 = ($124|0)!=(0);
  if ($125) {
   $126 = $7;
   $127 = $x1;
   $128 = (($127) + ($126))|0;
   $x1 = $128;
  } else {
   $129 = $so;
   $130 = ((($129)) + 18|0);
   $131 = HEAP16[$130>>1]|0;
   $132 = $131 << 16 >> 16;
   $133 = ((($10)) + 19044|0);
   $134 = (($133) + (($132*20)|0)|0);
   $135 = ((($134)) + 4|0);
   $136 = ((($135)) + 6|0);
   $137 = HEAP16[$136>>1]|0;
   $138 = $137 << 16 >> 16;
   $139 = $x1;
   $140 = (($139) + ($138))|0;
   $x1 = $140;
  }
  $141 = $x1;
  $142 = $141&65535;
  $143 = $so;
  $144 = ((($143)) + 4|0);
  HEAP16[$144>>1] = $142;
 }
 $145 = $so;
 $146 = ((($145)) + 10|0);
 $147 = HEAP16[$146>>1]|0;
 $148 = $147 << 16 >> 16;
 $149 = $so;
 $150 = ((($149)) + 20|0);
 $151 = HEAP16[$150>>1]|0;
 $152 = $151 << 16 >> 16;
 $153 = ((($10)) + 19044|0);
 $154 = (($153) + (($152*20)|0)|0);
 $155 = ((($154)) + 4|0);
 $156 = ((($155)) + 8|0);
 $157 = HEAP16[$156>>1]|0;
 $158 = $157 << 16 >> 16;
 $159 = (($148) - ($158))|0;
 $y = $159;
 $160 = $8;
 $161 = ($160|0)!=(0);
 if ($161) {
  $162 = $9;
  $163 = $y;
  $164 = (($163) + ($162))|0;
  $y = $164;
 } else {
  $165 = $so;
  $166 = ((($165)) + 18|0);
  $167 = HEAP16[$166>>1]|0;
  $168 = $167 << 16 >> 16;
  $169 = ((($10)) + 19044|0);
  $170 = (($169) + (($168*20)|0)|0);
  $171 = ((($170)) + 4|0);
  $172 = ((($171)) + 8|0);
  $173 = HEAP16[$172>>1]|0;
  $174 = $173 << 16 >> 16;
  $175 = $y;
  $176 = (($175) + ($174))|0;
  $y = $176;
 }
 $177 = $y;
 $178 = $177&65535;
 $179 = $so;
 $180 = ((($179)) + 6|0);
 HEAP16[$180>>1] = $178;
 STACKTOP = sp;return;
}
function __ZN4Game22getObjectTransformXPosEi($this,$object) {
 $this = $this|0;
 $object = $object|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a0 = 0, $a2 = 0, $a4 = 0, $dx = 0, $so = 0, $vararg_buffer = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $object;
 $2 = $0;
 $3 = $1;
 HEAP32[$vararg_buffer>>2] = $3;
 __Z5debugtPKcz(2,23829,$vararg_buffer);
 $4 = $1;
 $5 = (__ZN4Game16derefSceneObjectEi($2,$4)|0);
 $so = $5;
 $6 = $so;
 $7 = ((($6)) + 20|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8 << 16 >> 16;
 $10 = (__ZN4Game21derefSceneObjectFrameEi($2,$9)|0);
 $11 = ((($10)) + 4|0);
 $12 = ((($11)) + 2|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = $13 << 16 >> 16;
 $w = $14;
 $15 = ((($2)) + 3152|0);
 $16 = (__ZN6Script13fetchNextWordEv($15)|0);
 $a0 = $16;
 $17 = ((($2)) + 3152|0);
 $18 = (__ZN6Script13fetchNextWordEv($17)|0);
 $a2 = $18;
 $19 = ((($2)) + 3152|0);
 $20 = (__ZN6Script13fetchNextWordEv($19)|0);
 $a4 = $20;
 $21 = $a0;
 $22 = $21 << 16 >> 16;
 $23 = $w;
 $24 = Math_imul($22, $23)|0;
 $25 = $a2;
 $26 = $25 << 16 >> 16;
 $27 = (($24|0) / ($26|0))&-1;
 $28 = $a4;
 $29 = $28 << 16 >> 16;
 $30 = (($27) + ($29))|0;
 $31 = $30&65535;
 $dx = $31;
 $32 = $so;
 $33 = ((($32)) + 26|0);
 $34 = HEAP16[$33>>1]|0;
 $35 = $34 << 16 >> 16;
 $36 = ($35|0)==(2);
 if (!($36)) {
  $43 = $so;
  $44 = ((($43)) + 8|0);
  $45 = HEAP16[$44>>1]|0;
  $46 = $45 << 16 >> 16;
  $47 = $dx;
  $48 = $47 << 16 >> 16;
  $49 = (($46) + ($48))|0;
  $50 = $49&65535;
  STACKTOP = sp;return ($50|0);
 }
 $37 = $w;
 $38 = $dx;
 $39 = $38 << 16 >> 16;
 $40 = (($37) - ($39))|0;
 $41 = (($40) - 1)|0;
 $42 = $41&65535;
 $dx = $42;
 $43 = $so;
 $44 = ((($43)) + 8|0);
 $45 = HEAP16[$44>>1]|0;
 $46 = $45 << 16 >> 16;
 $47 = $dx;
 $48 = $47 << 16 >> 16;
 $49 = (($46) + ($48))|0;
 $50 = $49&65535;
 STACKTOP = sp;return ($50|0);
}
function __ZN4Game22getObjectTransformYPosEi($this,$object) {
 $this = $this|0;
 $object = $object|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a0 = 0, $a2 = 0, $a4 = 0, $dy = 0, $h = 0, $so = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $object;
 $2 = $0;
 $3 = $1;
 HEAP32[$vararg_buffer>>2] = $3;
 __Z5debugtPKcz(2,23862,$vararg_buffer);
 $4 = $1;
 $5 = (__ZN4Game16derefSceneObjectEi($2,$4)|0);
 $so = $5;
 $6 = $so;
 $7 = ((($6)) + 20|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8 << 16 >> 16;
 $10 = (__ZN4Game21derefSceneObjectFrameEi($2,$9)|0);
 $11 = ((($10)) + 4|0);
 $12 = ((($11)) + 4|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = $13 << 16 >> 16;
 $h = $14;
 $15 = ((($2)) + 3152|0);
 $16 = (__ZN6Script13fetchNextWordEv($15)|0);
 $a0 = $16;
 $17 = ((($2)) + 3152|0);
 $18 = (__ZN6Script13fetchNextWordEv($17)|0);
 $a2 = $18;
 $19 = ((($2)) + 3152|0);
 $20 = (__ZN6Script13fetchNextWordEv($19)|0);
 $a4 = $20;
 $21 = $a0;
 $22 = $21 << 16 >> 16;
 $23 = $h;
 $24 = Math_imul($22, $23)|0;
 $25 = $a2;
 $26 = $25 << 16 >> 16;
 $27 = (($24|0) / ($26|0))&-1;
 $28 = $a4;
 $29 = $28 << 16 >> 16;
 $30 = (($27) + ($29))|0;
 $31 = $30&65535;
 $dy = $31;
 $32 = $so;
 $33 = ((($32)) + 26|0);
 $34 = HEAP16[$33>>1]|0;
 $35 = $34 << 16 >> 16;
 $36 = ($35|0)==(1);
 if (!($36)) {
  $43 = $so;
  $44 = ((($43)) + 10|0);
  $45 = HEAP16[$44>>1]|0;
  $46 = $45 << 16 >> 16;
  $47 = $dy;
  $48 = $47 << 16 >> 16;
  $49 = (($46) + ($48))|0;
  $50 = $49&65535;
  STACKTOP = sp;return ($50|0);
 }
 $37 = $h;
 $38 = $dy;
 $39 = $38 << 16 >> 16;
 $40 = (($37) - ($39))|0;
 $41 = (($40) - 1)|0;
 $42 = $41&65535;
 $dy = $42;
 $43 = $so;
 $44 = ((($43)) + 10|0);
 $45 = HEAP16[$44>>1]|0;
 $46 = $45 << 16 >> 16;
 $47 = $dy;
 $48 = $47 << 16 >> 16;
 $49 = (($46) + ($48))|0;
 $50 = $49&65535;
 STACKTOP = sp;return ($50|0);
}
function __ZN4Game30comparePrevObjectTransformXPosEibi($this,$object,$fetchCmp,$cmpX) {
 $this = $this|0;
 $object = $object|0;
 $fetchCmp = $fetchCmp|0;
 $cmpX = $cmpX|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $a0 = 0, $a2 = 0, $a4 = 0, $a6 = 0, $a8 = 0, $aA = 0, $so = 0, $vararg_buffer = 0, $w = 0, $xmax = 0, $xmin = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $xmin = sp + 26|0;
 $xmax = sp + 24|0;
 $0 = $this;
 $1 = $object;
 $4 = $fetchCmp&1;
 $2 = $4;
 $3 = $cmpX;
 $5 = $0;
 $6 = $1;
 HEAP32[$vararg_buffer>>2] = $6;
 __Z5debugtPKcz(2,23895,$vararg_buffer);
 $7 = $1;
 $8 = (__ZN4Game16derefSceneObjectEi($5,$7)|0);
 $so = $8;
 $9 = $so;
 $10 = ((($9)) + 20|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11 << 16 >> 16;
 $13 = (__ZN4Game21derefSceneObjectFrameEi($5,$12)|0);
 $14 = ((($13)) + 4|0);
 $15 = ((($14)) + 2|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = $16 << 16 >> 16;
 $w = $17;
 $18 = ((($5)) + 3152|0);
 $19 = (__ZN6Script13fetchNextWordEv($18)|0);
 $a0 = $19;
 $20 = ((($5)) + 3152|0);
 $21 = (__ZN6Script13fetchNextWordEv($20)|0);
 $a2 = $21;
 $22 = ((($5)) + 3152|0);
 $23 = (__ZN6Script13fetchNextWordEv($22)|0);
 $a4 = $23;
 $24 = ((($5)) + 3152|0);
 $25 = (__ZN6Script13fetchNextWordEv($24)|0);
 $a6 = $25;
 $26 = ((($5)) + 3152|0);
 $27 = (__ZN6Script13fetchNextWordEv($26)|0);
 $a8 = $27;
 $28 = ((($5)) + 3152|0);
 $29 = (__ZN6Script13fetchNextWordEv($28)|0);
 $aA = $29;
 $30 = $2;
 $31 = $30&1;
 if ($31) {
  $32 = ((($5)) + 3152|0);
  $33 = (__ZN6Script13fetchNextWordEv($32)|0);
  $34 = $33 << 16 >> 16;
  $3 = $34;
 }
 $35 = $a0;
 $36 = $35 << 16 >> 16;
 $37 = $w;
 $38 = Math_imul($36, $37)|0;
 $39 = $a2;
 $40 = $39 << 16 >> 16;
 $41 = (($38|0) / ($40|0))&-1;
 $42 = $a4;
 $43 = $42 << 16 >> 16;
 $44 = (($41) + ($43))|0;
 $45 = $44&65535;
 HEAP16[$xmin>>1] = $45;
 $46 = $a6;
 $47 = $46 << 16 >> 16;
 $48 = $w;
 $49 = Math_imul($47, $48)|0;
 $50 = $a8;
 $51 = $50 << 16 >> 16;
 $52 = (($49|0) / ($51|0))&-1;
 $53 = $aA;
 $54 = $53 << 16 >> 16;
 $55 = (($52) + ($54))|0;
 $56 = $55&65535;
 HEAP16[$xmax>>1] = $56;
 $57 = $so;
 $58 = ((($57)) + 26|0);
 $59 = HEAP16[$58>>1]|0;
 $60 = $59 << 16 >> 16;
 $61 = ($60|0)==(2);
 if ($61) {
  $62 = $w;
  $63 = HEAP16[$xmin>>1]|0;
  $64 = $63 << 16 >> 16;
  $65 = (($62) - ($64))|0;
  $66 = $65&65535;
  HEAP16[$xmin>>1] = $66;
  $67 = $w;
  $68 = HEAP16[$xmax>>1]|0;
  $69 = $68 << 16 >> 16;
  $70 = (($67) - ($69))|0;
  $71 = $70&65535;
  HEAP16[$xmax>>1] = $71;
 }
 $72 = HEAP16[$xmax>>1]|0;
 $73 = $72 << 16 >> 16;
 $74 = HEAP16[$xmin>>1]|0;
 $75 = $74 << 16 >> 16;
 $76 = ($73|0)<($75|0);
 if ($76) {
  __Z4SWAPIsEvRT_S1_($xmax,$xmin);
 }
 $77 = $so;
 $78 = ((($77)) + 42|0);
 $79 = HEAP16[$78>>1]|0;
 $80 = $79 << 16 >> 16;
 $81 = ($80|0)!=(0);
 if (!($81)) {
  $100 = 0;
  STACKTOP = sp;return ($100|0);
 }
 $82 = $so;
 $83 = ((($82)) + 8|0);
 $84 = HEAP16[$83>>1]|0;
 $85 = $84 << 16 >> 16;
 $86 = HEAP16[$xmin>>1]|0;
 $87 = $86 << 16 >> 16;
 $88 = (($85) + ($87))|0;
 $89 = $3;
 $90 = ($88|0)<=($89|0);
 if (!($90)) {
  $100 = 0;
  STACKTOP = sp;return ($100|0);
 }
 $91 = $so;
 $92 = ((($91)) + 8|0);
 $93 = HEAP16[$92>>1]|0;
 $94 = $93 << 16 >> 16;
 $95 = HEAP16[$xmax>>1]|0;
 $96 = $95 << 16 >> 16;
 $97 = (($94) + ($96))|0;
 $98 = $3;
 $99 = ($97|0)>=($98|0);
 $100 = $99;
 STACKTOP = sp;return ($100|0);
}
function __ZN4Game26compareObjectTransformXPosEibi($this,$object,$fetchCmp,$cmpX) {
 $this = $this|0;
 $object = $object|0;
 $fetchCmp = $fetchCmp|0;
 $cmpX = $cmpX|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $a0 = 0, $a2 = 0, $a4 = 0, $a6 = 0, $a8 = 0, $aA = 0, $so = 0, $vararg_buffer = 0, $w = 0, $xmax = 0, $xmin = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $xmin = sp + 26|0;
 $xmax = sp + 24|0;
 $0 = $this;
 $1 = $object;
 $4 = $fetchCmp&1;
 $2 = $4;
 $3 = $cmpX;
 $5 = $0;
 $6 = $1;
 HEAP32[$vararg_buffer>>2] = $6;
 __Z5debugtPKcz(2,23936,$vararg_buffer);
 $7 = $1;
 $8 = (__ZN4Game16derefSceneObjectEi($5,$7)|0);
 $so = $8;
 $9 = $so;
 $10 = ((($9)) + 18|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11 << 16 >> 16;
 $13 = (__ZN4Game21derefSceneObjectFrameEi($5,$12)|0);
 $14 = ((($13)) + 4|0);
 $15 = ((($14)) + 2|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = $16 << 16 >> 16;
 $w = $17;
 $18 = ((($5)) + 3152|0);
 $19 = (__ZN6Script13fetchNextWordEv($18)|0);
 $a0 = $19;
 $20 = ((($5)) + 3152|0);
 $21 = (__ZN6Script13fetchNextWordEv($20)|0);
 $a2 = $21;
 $22 = ((($5)) + 3152|0);
 $23 = (__ZN6Script13fetchNextWordEv($22)|0);
 $a4 = $23;
 $24 = ((($5)) + 3152|0);
 $25 = (__ZN6Script13fetchNextWordEv($24)|0);
 $a6 = $25;
 $26 = ((($5)) + 3152|0);
 $27 = (__ZN6Script13fetchNextWordEv($26)|0);
 $a8 = $27;
 $28 = ((($5)) + 3152|0);
 $29 = (__ZN6Script13fetchNextWordEv($28)|0);
 $aA = $29;
 $30 = $2;
 $31 = $30&1;
 if ($31) {
  $32 = ((($5)) + 3152|0);
  $33 = (__ZN6Script13fetchNextWordEv($32)|0);
  $34 = $33 << 16 >> 16;
  $3 = $34;
 }
 $35 = $a0;
 $36 = $35 << 16 >> 16;
 $37 = $w;
 $38 = Math_imul($36, $37)|0;
 $39 = $a2;
 $40 = $39 << 16 >> 16;
 $41 = (($38|0) / ($40|0))&-1;
 $42 = $a4;
 $43 = $42 << 16 >> 16;
 $44 = (($41) + ($43))|0;
 $45 = $44&65535;
 HEAP16[$xmin>>1] = $45;
 $46 = $a6;
 $47 = $46 << 16 >> 16;
 $48 = $w;
 $49 = Math_imul($47, $48)|0;
 $50 = $a8;
 $51 = $50 << 16 >> 16;
 $52 = (($49|0) / ($51|0))&-1;
 $53 = $aA;
 $54 = $53 << 16 >> 16;
 $55 = (($52) + ($54))|0;
 $56 = $55&65535;
 HEAP16[$xmax>>1] = $56;
 $57 = $so;
 $58 = ((($57)) + 24|0);
 $59 = HEAP16[$58>>1]|0;
 $60 = $59 << 16 >> 16;
 $61 = ($60|0)==(2);
 if ($61) {
  $62 = $w;
  $63 = HEAP16[$xmin>>1]|0;
  $64 = $63 << 16 >> 16;
  $65 = (($62) - ($64))|0;
  $66 = $65&65535;
  HEAP16[$xmin>>1] = $66;
  $67 = $w;
  $68 = HEAP16[$xmax>>1]|0;
  $69 = $68 << 16 >> 16;
  $70 = (($67) - ($69))|0;
  $71 = $70&65535;
  HEAP16[$xmax>>1] = $71;
 }
 $72 = HEAP16[$xmax>>1]|0;
 $73 = $72 << 16 >> 16;
 $74 = HEAP16[$xmin>>1]|0;
 $75 = $74 << 16 >> 16;
 $76 = ($73|0)<($75|0);
 if ($76) {
  __Z4SWAPIsEvRT_S1_($xmax,$xmin);
 }
 $77 = $so;
 $78 = ((($77)) + 44|0);
 $79 = HEAP16[$78>>1]|0;
 $80 = $79 << 16 >> 16;
 $81 = ($80|0)!=(0);
 if (!($81)) {
  $100 = 0;
  STACKTOP = sp;return ($100|0);
 }
 $82 = $so;
 $83 = ((($82)) + 4|0);
 $84 = HEAP16[$83>>1]|0;
 $85 = $84 << 16 >> 16;
 $86 = HEAP16[$xmin>>1]|0;
 $87 = $86 << 16 >> 16;
 $88 = (($85) + ($87))|0;
 $89 = $3;
 $90 = ($88|0)<=($89|0);
 if (!($90)) {
  $100 = 0;
  STACKTOP = sp;return ($100|0);
 }
 $91 = $so;
 $92 = ((($91)) + 4|0);
 $93 = HEAP16[$92>>1]|0;
 $94 = $93 << 16 >> 16;
 $95 = HEAP16[$xmax>>1]|0;
 $96 = $95 << 16 >> 16;
 $97 = (($94) + ($96))|0;
 $98 = $3;
 $99 = ($97|0)>=($98|0);
 $100 = $99;
 STACKTOP = sp;return ($100|0);
}
function __ZN4Game30comparePrevObjectTransformYPosEibi($this,$object,$fetchCmp,$cmpY) {
 $this = $this|0;
 $object = $object|0;
 $fetchCmp = $fetchCmp|0;
 $cmpY = $cmpY|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $a0 = 0, $a2 = 0, $a4 = 0, $a6 = 0, $a8 = 0, $aA = 0, $h = 0, $so = 0, $vararg_buffer = 0, $ymax = 0, $ymin = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ymin = sp + 26|0;
 $ymax = sp + 24|0;
 $0 = $this;
 $1 = $object;
 $4 = $fetchCmp&1;
 $2 = $4;
 $3 = $cmpY;
 $5 = $0;
 $6 = $1;
 HEAP32[$vararg_buffer>>2] = $6;
 __Z5debugtPKcz(2,23973,$vararg_buffer);
 $7 = $1;
 $8 = (__ZN4Game16derefSceneObjectEi($5,$7)|0);
 $so = $8;
 $9 = $so;
 $10 = ((($9)) + 20|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11 << 16 >> 16;
 $13 = (__ZN4Game21derefSceneObjectFrameEi($5,$12)|0);
 $14 = ((($13)) + 4|0);
 $15 = ((($14)) + 4|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = $16 << 16 >> 16;
 $h = $17;
 $18 = ((($5)) + 3152|0);
 $19 = (__ZN6Script13fetchNextWordEv($18)|0);
 $a0 = $19;
 $20 = ((($5)) + 3152|0);
 $21 = (__ZN6Script13fetchNextWordEv($20)|0);
 $a2 = $21;
 $22 = ((($5)) + 3152|0);
 $23 = (__ZN6Script13fetchNextWordEv($22)|0);
 $a4 = $23;
 $24 = ((($5)) + 3152|0);
 $25 = (__ZN6Script13fetchNextWordEv($24)|0);
 $a6 = $25;
 $26 = ((($5)) + 3152|0);
 $27 = (__ZN6Script13fetchNextWordEv($26)|0);
 $a8 = $27;
 $28 = ((($5)) + 3152|0);
 $29 = (__ZN6Script13fetchNextWordEv($28)|0);
 $aA = $29;
 $30 = $2;
 $31 = $30&1;
 if ($31) {
  $32 = ((($5)) + 3152|0);
  $33 = (__ZN6Script13fetchNextWordEv($32)|0);
  $34 = $33 << 16 >> 16;
  $3 = $34;
 }
 $35 = $a0;
 $36 = $35 << 16 >> 16;
 $37 = $h;
 $38 = Math_imul($36, $37)|0;
 $39 = $a2;
 $40 = $39 << 16 >> 16;
 $41 = (($38|0) / ($40|0))&-1;
 $42 = $a4;
 $43 = $42 << 16 >> 16;
 $44 = (($41) + ($43))|0;
 $45 = $44&65535;
 HEAP16[$ymin>>1] = $45;
 $46 = $a6;
 $47 = $46 << 16 >> 16;
 $48 = $h;
 $49 = Math_imul($47, $48)|0;
 $50 = $a8;
 $51 = $50 << 16 >> 16;
 $52 = (($49|0) / ($51|0))&-1;
 $53 = $aA;
 $54 = $53 << 16 >> 16;
 $55 = (($52) + ($54))|0;
 $56 = $55&65535;
 HEAP16[$ymax>>1] = $56;
 $57 = $so;
 $58 = ((($57)) + 26|0);
 $59 = HEAP16[$58>>1]|0;
 $60 = $59 << 16 >> 16;
 $61 = ($60|0)==(1);
 if ($61) {
  $62 = $h;
  $63 = HEAP16[$ymin>>1]|0;
  $64 = $63 << 16 >> 16;
  $65 = (($62) - ($64))|0;
  $66 = $65&65535;
  HEAP16[$ymin>>1] = $66;
  $67 = $h;
  $68 = HEAP16[$ymax>>1]|0;
  $69 = $68 << 16 >> 16;
  $70 = (($67) - ($69))|0;
  $71 = $70&65535;
  HEAP16[$ymax>>1] = $71;
 }
 $72 = HEAP16[$ymax>>1]|0;
 $73 = $72 << 16 >> 16;
 $74 = HEAP16[$ymin>>1]|0;
 $75 = $74 << 16 >> 16;
 $76 = ($73|0)<($75|0);
 if ($76) {
  __Z4SWAPIsEvRT_S1_($ymax,$ymin);
 }
 $77 = $so;
 $78 = ((($77)) + 42|0);
 $79 = HEAP16[$78>>1]|0;
 $80 = $79 << 16 >> 16;
 $81 = ($80|0)!=(0);
 if (!($81)) {
  $100 = 0;
  STACKTOP = sp;return ($100|0);
 }
 $82 = $so;
 $83 = ((($82)) + 10|0);
 $84 = HEAP16[$83>>1]|0;
 $85 = $84 << 16 >> 16;
 $86 = HEAP16[$ymin>>1]|0;
 $87 = $86 << 16 >> 16;
 $88 = (($85) + ($87))|0;
 $89 = $3;
 $90 = ($88|0)<=($89|0);
 if (!($90)) {
  $100 = 0;
  STACKTOP = sp;return ($100|0);
 }
 $91 = $so;
 $92 = ((($91)) + 10|0);
 $93 = HEAP16[$92>>1]|0;
 $94 = $93 << 16 >> 16;
 $95 = HEAP16[$ymax>>1]|0;
 $96 = $95 << 16 >> 16;
 $97 = (($94) + ($96))|0;
 $98 = $3;
 $99 = ($97|0)>=($98|0);
 $100 = $99;
 STACKTOP = sp;return ($100|0);
}
function __ZN4Game26compareObjectTransformYPosEibi($this,$object,$fetchCmp,$cmpY) {
 $this = $this|0;
 $object = $object|0;
 $fetchCmp = $fetchCmp|0;
 $cmpY = $cmpY|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $a0 = 0, $a2 = 0, $a4 = 0, $a6 = 0, $a8 = 0, $aA = 0, $h = 0, $so = 0, $vararg_buffer = 0, $ymax = 0, $ymin = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ymin = sp + 26|0;
 $ymax = sp + 24|0;
 $0 = $this;
 $1 = $object;
 $4 = $fetchCmp&1;
 $2 = $4;
 $3 = $cmpY;
 $5 = $0;
 $6 = $1;
 HEAP32[$vararg_buffer>>2] = $6;
 __Z5debugtPKcz(2,24014,$vararg_buffer);
 $7 = $1;
 $8 = (__ZN4Game16derefSceneObjectEi($5,$7)|0);
 $so = $8;
 $9 = $so;
 $10 = ((($9)) + 18|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11 << 16 >> 16;
 $13 = (__ZN4Game21derefSceneObjectFrameEi($5,$12)|0);
 $14 = ((($13)) + 4|0);
 $15 = ((($14)) + 4|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = $16 << 16 >> 16;
 $h = $17;
 $18 = ((($5)) + 3152|0);
 $19 = (__ZN6Script13fetchNextWordEv($18)|0);
 $a0 = $19;
 $20 = ((($5)) + 3152|0);
 $21 = (__ZN6Script13fetchNextWordEv($20)|0);
 $a2 = $21;
 $22 = ((($5)) + 3152|0);
 $23 = (__ZN6Script13fetchNextWordEv($22)|0);
 $a4 = $23;
 $24 = ((($5)) + 3152|0);
 $25 = (__ZN6Script13fetchNextWordEv($24)|0);
 $a6 = $25;
 $26 = ((($5)) + 3152|0);
 $27 = (__ZN6Script13fetchNextWordEv($26)|0);
 $a8 = $27;
 $28 = ((($5)) + 3152|0);
 $29 = (__ZN6Script13fetchNextWordEv($28)|0);
 $aA = $29;
 $30 = $2;
 $31 = $30&1;
 if ($31) {
  $32 = ((($5)) + 3152|0);
  $33 = (__ZN6Script13fetchNextWordEv($32)|0);
  $34 = $33 << 16 >> 16;
  $3 = $34;
 }
 $35 = $a0;
 $36 = $35 << 16 >> 16;
 $37 = $h;
 $38 = Math_imul($36, $37)|0;
 $39 = $a2;
 $40 = $39 << 16 >> 16;
 $41 = (($38|0) / ($40|0))&-1;
 $42 = $a4;
 $43 = $42 << 16 >> 16;
 $44 = (($41) + ($43))|0;
 $45 = $44&65535;
 HEAP16[$ymin>>1] = $45;
 $46 = $a6;
 $47 = $46 << 16 >> 16;
 $48 = $h;
 $49 = Math_imul($47, $48)|0;
 $50 = $a8;
 $51 = $50 << 16 >> 16;
 $52 = (($49|0) / ($51|0))&-1;
 $53 = $aA;
 $54 = $53 << 16 >> 16;
 $55 = (($52) + ($54))|0;
 $56 = $55&65535;
 HEAP16[$ymax>>1] = $56;
 $57 = $so;
 $58 = ((($57)) + 24|0);
 $59 = HEAP16[$58>>1]|0;
 $60 = $59 << 16 >> 16;
 $61 = ($60|0)==(1);
 if ($61) {
  $62 = $h;
  $63 = HEAP16[$ymin>>1]|0;
  $64 = $63 << 16 >> 16;
  $65 = (($62) - ($64))|0;
  $66 = $65&65535;
  HEAP16[$ymin>>1] = $66;
  $67 = $h;
  $68 = HEAP16[$ymax>>1]|0;
  $69 = $68 << 16 >> 16;
  $70 = (($67) - ($69))|0;
  $71 = $70&65535;
  HEAP16[$ymax>>1] = $71;
 }
 $72 = HEAP16[$ymax>>1]|0;
 $73 = $72 << 16 >> 16;
 $74 = HEAP16[$ymin>>1]|0;
 $75 = $74 << 16 >> 16;
 $76 = ($73|0)<($75|0);
 if ($76) {
  __Z4SWAPIsEvRT_S1_($ymax,$ymin);
 }
 $77 = $so;
 $78 = ((($77)) + 44|0);
 $79 = HEAP16[$78>>1]|0;
 $80 = $79 << 16 >> 16;
 $81 = ($80|0)!=(0);
 if (!($81)) {
  $100 = 0;
  STACKTOP = sp;return ($100|0);
 }
 $82 = $so;
 $83 = ((($82)) + 6|0);
 $84 = HEAP16[$83>>1]|0;
 $85 = $84 << 16 >> 16;
 $86 = HEAP16[$ymin>>1]|0;
 $87 = $86 << 16 >> 16;
 $88 = (($85) + ($87))|0;
 $89 = $3;
 $90 = ($88|0)<=($89|0);
 if (!($90)) {
  $100 = 0;
  STACKTOP = sp;return ($100|0);
 }
 $91 = $so;
 $92 = ((($91)) + 6|0);
 $93 = HEAP16[$92>>1]|0;
 $94 = $93 << 16 >> 16;
 $95 = HEAP16[$ymax>>1]|0;
 $96 = $95 << 16 >> 16;
 $97 = (($94) + ($96))|0;
 $98 = $3;
 $99 = ($97|0)>=($98|0);
 $100 = $99;
 STACKTOP = sp;return ($100|0);
}
function __ZN4Game14setupObjectPosEiiiiii($this,$object,$object2,$useObject2,$useData,$type1,$type2) {
 $this = $this|0;
 $object = $object|0;
 $object2 = $object2|0;
 $useObject2 = $useObject2|0;
 $useData = $useData|0;
 $type1 = $type1|0;
 $type2 = $type2|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $_ax = 0, $_di = 0, $_si = 0, $a0 = 0, $a2 = 0, $a4 = 0, $dx = 0, $dy = 0, $so = 0, $sof = 0, $vararg_buffer = 0, $xmax = 0, $xmin = 0, $ymax = 0, $ymin = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $xmin = sp + 52|0;
 $xmax = sp + 50|0;
 $ymin = sp + 48|0;
 $ymax = sp + 46|0;
 $0 = $this;
 $1 = $object;
 $2 = $object2;
 $3 = $useObject2;
 $4 = $useData;
 $5 = $type1;
 $6 = $type2;
 $7 = $0;
 $8 = $1;
 HEAP32[$vararg_buffer>>2] = $8;
 __Z5debugtPKcz(2,24051,$vararg_buffer);
 $9 = $1;
 $10 = (__ZN4Game16derefSceneObjectEi($7,$9)|0);
 $so = $10;
 $11 = $so;
 $12 = ((($11)) + 20|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = $13 << 16 >> 16;
 $15 = (__ZN4Game21derefSceneObjectFrameEi($7,$14)|0);
 $sof = $15;
 $dy = 0;
 $dx = 0;
 HEAP16[$xmin>>1] = 0;
 HEAP16[$ymin>>1] = 0;
 $16 = $so;
 $17 = ((($16)) + 42|0);
 $18 = HEAP16[$17>>1]|0;
 $19 = $18 << 16 >> 16;
 $20 = ($19|0)!=(0);
 if (!($20)) {
  STACKTOP = sp;return;
 }
 $21 = $5;
 $22 = ($21|0)==(2);
 if ($22) {
  $23 = ((($7)) + 3152|0);
  $24 = (__ZN6Script13fetchNextWordEv($23)|0);
  $a0 = $24;
  $25 = ((($7)) + 3152|0);
  $26 = (__ZN6Script13fetchNextWordEv($25)|0);
  $a2 = $26;
  $27 = ((($7)) + 3152|0);
  $28 = (__ZN6Script13fetchNextWordEv($27)|0);
  $a4 = $28;
  $29 = $a0;
  $30 = $29 << 16 >> 16;
  $31 = $sof;
  $32 = ((($31)) + 4|0);
  $33 = ((($32)) + 2|0);
  $34 = HEAP16[$33>>1]|0;
  $35 = $34 << 16 >> 16;
  $36 = Math_imul($30, $35)|0;
  $37 = $a2;
  $38 = $37 << 16 >> 16;
  $39 = (($36|0) / ($38|0))&-1;
  $40 = $a4;
  $41 = $40 << 16 >> 16;
  $42 = (($39) + ($41))|0;
  $43 = $42&65535;
  HEAP16[$xmin>>1] = $43;
  $44 = ((($7)) + 3152|0);
  $45 = (__ZN6Script13fetchNextWordEv($44)|0);
  $a0 = $45;
  $46 = ((($7)) + 3152|0);
  $47 = (__ZN6Script13fetchNextWordEv($46)|0);
  $a2 = $47;
  $48 = ((($7)) + 3152|0);
  $49 = (__ZN6Script13fetchNextWordEv($48)|0);
  $a4 = $49;
  $50 = $a0;
  $51 = $50 << 16 >> 16;
  $52 = $sof;
  $53 = ((($52)) + 4|0);
  $54 = ((($53)) + 2|0);
  $55 = HEAP16[$54>>1]|0;
  $56 = $55 << 16 >> 16;
  $57 = Math_imul($51, $56)|0;
  $58 = $a2;
  $59 = $58 << 16 >> 16;
  $60 = (($57|0) / ($59|0))&-1;
  $61 = $a4;
  $62 = $61 << 16 >> 16;
  $63 = (($60) + ($62))|0;
  $64 = $63&65535;
  HEAP16[$xmax>>1] = $64;
  $65 = HEAP16[$xmax>>1]|0;
  $66 = $65 << 16 >> 16;
  $67 = HEAP16[$xmin>>1]|0;
  $68 = $67 << 16 >> 16;
  $69 = ($66|0)<($68|0);
  if ($69) {
   __Z4SWAPIsEvRT_S1_($xmin,$xmax);
  }
  $70 = HEAP16[$xmax>>1]|0;
  $71 = $70 << 16 >> 16;
  $72 = HEAP16[$xmin>>1]|0;
  $73 = $72 << 16 >> 16;
  $74 = (($71) - ($73))|0;
  $75 = $74&65535;
  $dx = $75;
 }
 $76 = $6;
 $77 = ($76|0)==(2);
 if ($77) {
  $78 = ((($7)) + 3152|0);
  $79 = (__ZN6Script13fetchNextWordEv($78)|0);
  $a0 = $79;
  $80 = ((($7)) + 3152|0);
  $81 = (__ZN6Script13fetchNextWordEv($80)|0);
  $a2 = $81;
  $82 = ((($7)) + 3152|0);
  $83 = (__ZN6Script13fetchNextWordEv($82)|0);
  $a4 = $83;
  $84 = $a0;
  $85 = $84 << 16 >> 16;
  $86 = $sof;
  $87 = ((($86)) + 4|0);
  $88 = ((($87)) + 4|0);
  $89 = HEAP16[$88>>1]|0;
  $90 = $89 << 16 >> 16;
  $91 = Math_imul($85, $90)|0;
  $92 = $a2;
  $93 = $92 << 16 >> 16;
  $94 = (($91|0) / ($93|0))&-1;
  $95 = $a4;
  $96 = $95 << 16 >> 16;
  $97 = (($94) + ($96))|0;
  $98 = $97&65535;
  HEAP16[$ymin>>1] = $98;
  $99 = ((($7)) + 3152|0);
  $100 = (__ZN6Script13fetchNextWordEv($99)|0);
  $a0 = $100;
  $101 = ((($7)) + 3152|0);
  $102 = (__ZN6Script13fetchNextWordEv($101)|0);
  $a2 = $102;
  $103 = ((($7)) + 3152|0);
  $104 = (__ZN6Script13fetchNextWordEv($103)|0);
  $a4 = $104;
  $105 = $a0;
  $106 = $105 << 16 >> 16;
  $107 = $sof;
  $108 = ((($107)) + 4|0);
  $109 = ((($108)) + 4|0);
  $110 = HEAP16[$109>>1]|0;
  $111 = $110 << 16 >> 16;
  $112 = Math_imul($106, $111)|0;
  $113 = $a2;
  $114 = $113 << 16 >> 16;
  $115 = (($112|0) / ($114|0))&-1;
  $116 = $a4;
  $117 = $116 << 16 >> 16;
  $118 = (($115) + ($117))|0;
  $119 = $118&65535;
  HEAP16[$ymax>>1] = $119;
  $120 = HEAP16[$ymax>>1]|0;
  $121 = $120 << 16 >> 16;
  $122 = HEAP16[$ymin>>1]|0;
  $123 = $122 << 16 >> 16;
  $124 = ($121|0)<($123|0);
  if ($124) {
   __Z4SWAPIsEvRT_S1_($ymin,$ymax);
  }
  $125 = HEAP16[$ymax>>1]|0;
  $126 = $125 << 16 >> 16;
  $127 = HEAP16[$ymin>>1]|0;
  $128 = $127 << 16 >> 16;
  $129 = (($126) - ($128))|0;
  $130 = $129&65535;
  $dy = $130;
 }
 $131 = $3;
 $132 = ($131|0)==(0);
 if ($132) {
  $133 = $so;
  $134 = ((($133)) + 32|0);
  $135 = HEAP16[$134>>1]|0;
  $136 = $135 << 16 >> 16;
  $137 = ((($7)) + 79612|0);
  $138 = (($137) + (($136*6)|0)|0);
  $139 = ((($138)) + 4|0);
  $140 = HEAP16[$139>>1]|0;
  $141 = $140 << 16 >> 16;
  $142 = ((($7)) + 10556|0);
  $143 = (($142) + (($141*40)|0)|0);
  $144 = ((($143)) + 20|0);
  $145 = HEAP16[$144>>1]|0;
  $_ax = $145;
 } else {
  $146 = $2;
  $147 = ((($7)) + 5252|0);
  $148 = (($147) + (($146*106)|0)|0);
  $149 = ((($148)) + 30|0);
  $150 = HEAP16[$149>>1]|0;
  $_ax = $150;
 }
 $151 = $_ax;
 $152 = $151 << 16 >> 16;
 $153 = ((($7)) + 3152|0);
 $154 = (__ZN6Script13fetchNextWordEv($153)|0);
 $155 = $154 << 16 >> 16;
 $156 = (($152) + ($155))|0;
 $157 = (($156) - 1)|0;
 $158 = $157&65535;
 $159 = $so;
 $160 = ((($159)) + 34|0);
 HEAP16[$160>>1] = $158;
 $161 = $4;
 $162 = ($161|0)==(0);
 $163 = $so;
 $164 = ((($163)) + 34|0);
 $165 = HEAP16[$164>>1]|0;
 $166 = $165 << 16 >> 16;
 $167 = ((($7)) + 79612|0);
 $168 = (($167) + (($166*6)|0)|0);
 $169 = HEAP16[$168>>1]|0;
 if ($162) {
  $170 = $so;
  $171 = ((($170)) + 18|0);
  HEAP16[$171>>1] = $169;
 } else {
  $172 = $169 << 16 >> 16;
  $173 = ((($7)) + 3152|0);
  $174 = (__ZN6Script13fetchNextWordEv($173)|0);
  $175 = $174 << 16 >> 16;
  $176 = (($172) + ($175))|0;
  $177 = (($176) - 1)|0;
  $178 = $177&65535;
  $179 = $so;
  $180 = ((($179)) + 18|0);
  HEAP16[$180>>1] = $178;
 }
 $181 = $so;
 $182 = ((($181)) + 18|0);
 $183 = HEAP16[$182>>1]|0;
 $184 = $183 << 16 >> 16;
 $185 = ((($7)) + 19044|0);
 $186 = (($185) + (($184*20)|0)|0);
 $187 = ((($186)) + 4|0);
 $188 = ((($187)) + 6|0);
 $189 = HEAP16[$188>>1]|0;
 $190 = $189 << 16 >> 16;
 $191 = $sof;
 $192 = ((($191)) + 4|0);
 $193 = ((($192)) + 6|0);
 $194 = HEAP16[$193>>1]|0;
 $195 = $194 << 16 >> 16;
 $196 = (($190) - ($195))|0;
 $197 = $196&65535;
 $_si = $197;
 $198 = $5;
 $199 = ($198|0)==(2);
 if ($199) {
  $200 = HEAP16[$xmin>>1]|0;
  $201 = $200 << 16 >> 16;
  $202 = $dx;
  $203 = $202 << 16 >> 16;
  $204 = (($201) - ($203))|0;
  $205 = (($204) + 1)|0;
  $206 = $dx;
  $207 = $206 << 16 >> 16;
  $208 = (($205|0) / ($207|0))&-1;
  $209 = $dx;
  $210 = $209 << 16 >> 16;
  $211 = Math_imul($208, $210)|0;
  $212 = $_si;
  $213 = $212 << 16 >> 16;
  $214 = $dx;
  $215 = $214 << 16 >> 16;
  $216 = (($213|0) % ($215|0))&-1;
  $217 = (($211) + ($216))|0;
  $218 = $217&65535;
  $_si = $218;
  $219 = $_si;
  $220 = $219 << 16 >> 16;
  $221 = HEAP16[$xmin>>1]|0;
  $222 = $221 << 16 >> 16;
  $223 = ($220|0)<($222|0);
  if ($223) {
   $224 = $dx;
   $225 = $224 << 16 >> 16;
   $226 = $_si;
   $227 = $226 << 16 >> 16;
   $228 = (($227) + ($225))|0;
   $229 = $228&65535;
   $_si = $229;
  }
 } else {
  $230 = $5;
  $231 = ($230|0)==(3);
  if ($231) {
   $232 = ((($7)) + 3152|0);
   $233 = (__ZN6Script13fetchNextWordEv($232)|0);
   $a0 = $233;
   $234 = ((($7)) + 3152|0);
   (__ZN6Script13fetchNextWordEv($234)|0);
   $235 = $a0;
   $236 = $235 << 16 >> 16;
   $237 = $sof;
   $238 = ((($237)) + 4|0);
   $239 = ((($238)) + 6|0);
   $240 = HEAP16[$239>>1]|0;
   $241 = $240 << 16 >> 16;
   $242 = (($236) - ($241))|0;
   $243 = $242&65535;
   $_si = $243;
  }
 }
 $244 = $so;
 $245 = ((($244)) + 18|0);
 $246 = HEAP16[$245>>1]|0;
 $247 = $246 << 16 >> 16;
 $248 = ((($7)) + 19044|0);
 $249 = (($248) + (($247*20)|0)|0);
 $250 = ((($249)) + 4|0);
 $251 = ((($250)) + 8|0);
 $252 = HEAP16[$251>>1]|0;
 $253 = $252 << 16 >> 16;
 $254 = $sof;
 $255 = ((($254)) + 4|0);
 $256 = ((($255)) + 8|0);
 $257 = HEAP16[$256>>1]|0;
 $258 = $257 << 16 >> 16;
 $259 = (($253) - ($258))|0;
 $260 = $259&65535;
 $_di = $260;
 $261 = $6;
 $262 = ($261|0)==(2);
 if ($262) {
  $263 = HEAP16[$ymin>>1]|0;
  $264 = $263 << 16 >> 16;
  $265 = $dy;
  $266 = $265 << 16 >> 16;
  $267 = (($264) - ($266))|0;
  $268 = (($267) + 1)|0;
  $269 = $dy;
  $270 = $269 << 16 >> 16;
  $271 = (($268|0) / ($270|0))&-1;
  $272 = $dy;
  $273 = $272 << 16 >> 16;
  $274 = Math_imul($271, $273)|0;
  $275 = $_di;
  $276 = $275 << 16 >> 16;
  $277 = $dy;
  $278 = $277 << 16 >> 16;
  $279 = (($276|0) % ($278|0))&-1;
  $280 = (($274) + ($279))|0;
  $281 = $280&65535;
  $_di = $281;
  $282 = $_di;
  $283 = $282 << 16 >> 16;
  $284 = HEAP16[$ymin>>1]|0;
  $285 = $284 << 16 >> 16;
  $286 = ($283|0)<($285|0);
  if ($286) {
   $287 = $dy;
   $288 = $287 << 16 >> 16;
   $289 = $_di;
   $290 = $289 << 16 >> 16;
   $291 = (($290) + ($288))|0;
   $292 = $291&65535;
   $_di = $292;
  }
 } else {
  $293 = $6;
  $294 = ($293|0)==(3);
  if ($294) {
   $295 = ((($7)) + 3152|0);
   (__ZN6Script13fetchNextWordEv($295)|0);
   $296 = ((($7)) + 3152|0);
   $297 = (__ZN6Script13fetchNextWordEv($296)|0);
   $a2 = $297;
   $298 = $a2;
   $299 = $298 << 16 >> 16;
   $300 = $sof;
   $301 = ((($300)) + 4|0);
   $302 = ((($301)) + 8|0);
   $303 = HEAP16[$302>>1]|0;
   $304 = $303 << 16 >> 16;
   $305 = (($299) - ($304))|0;
   $306 = $305&65535;
   $_di = $306;
  }
 }
 $307 = $so;
 $308 = ((($307)) + 26|0);
 $309 = HEAP16[$308>>1]|0;
 $310 = $309 << 16 >> 16;
 $311 = ($310|0)==(2);
 $312 = $so;
 $313 = ((($312)) + 8|0);
 $314 = HEAP16[$313>>1]|0;
 $315 = $314 << 16 >> 16;
 $316 = $_si;
 $317 = $316 << 16 >> 16;
 if ($311) {
  $318 = (($315) - ($317))|0;
  $319 = $318&65535;
  $_ax = $319;
  $320 = $so;
  $321 = ((($320)) + 20|0);
  $322 = HEAP16[$321>>1]|0;
  $323 = $322 << 16 >> 16;
  $324 = ((($7)) + 19044|0);
  $325 = (($324) + (($323*20)|0)|0);
  $326 = ((($325)) + 4|0);
  $327 = ((($326)) + 2|0);
  $328 = HEAP16[$327>>1]|0;
  $329 = $328 << 16 >> 16;
  $330 = $_ax;
  $331 = $330 << 16 >> 16;
  $332 = (($331) + ($329))|0;
  $333 = $332&65535;
  $_ax = $333;
  $334 = $so;
  $335 = ((($334)) + 18|0);
  $336 = HEAP16[$335>>1]|0;
  $337 = $336 << 16 >> 16;
  $338 = ((($7)) + 19044|0);
  $339 = (($338) + (($337*20)|0)|0);
  $340 = ((($339)) + 4|0);
  $341 = ((($340)) + 2|0);
  $342 = HEAP16[$341>>1]|0;
  $343 = $342 << 16 >> 16;
  $344 = $_ax;
  $345 = $344 << 16 >> 16;
  $346 = (($345) - ($343))|0;
  $347 = $346&65535;
  $_ax = $347;
 } else {
  $348 = (($315) + ($317))|0;
  $349 = $348&65535;
  $_ax = $349;
 }
 $350 = $_ax;
 $351 = $so;
 $352 = ((($351)) + 4|0);
 HEAP16[$352>>1] = $350;
 $353 = $so;
 $354 = ((($353)) + 10|0);
 $355 = HEAP16[$354>>1]|0;
 $356 = $355 << 16 >> 16;
 $357 = $_di;
 $358 = $357 << 16 >> 16;
 $359 = (($356) + ($358))|0;
 $360 = $359&65535;
 $361 = $so;
 $362 = ((($361)) + 6|0);
 HEAP16[$362>>1] = $360;
 STACKTOP = sp;return;
}
function __ZN4Game13intersectsBoxEiiiiii($this,$num,$index,$x1,$y1,$x2,$y2) {
 $this = $this|0;
 $num = $num|0;
 $index = $index|0;
 $x1 = $x1|0;
 $y1 = $y1|0;
 $x2 = $x2|0;
 $y2 = $y2|0;
 var $$expand_i1_val = 0, $$expand_i1_val10 = 0, $$expand_i1_val12 = 0, $$expand_i1_val14 = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$expand_i1_val8 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b = 0;
 var $ix = 0, $iy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 40|0;
 $1 = $this;
 $2 = $num;
 $3 = $index;
 $4 = $x1;
 $5 = $y1;
 $6 = $x2;
 $7 = $y2;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = (__ZN4Game8derefBoxEii($8,$9,$10)|0);
 $b = $11;
 $12 = $b;
 $13 = ((($12)) + 8|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = ($15|0)==(1);
 do {
  if ($16) {
   $17 = $b;
   $18 = HEAP16[$17>>1]|0;
   $19 = $18 << 16 >> 16;
   $20 = $4;
   $21 = ($19|0)<=($20|0);
   if ($21) {
    $22 = $b;
    $23 = ((($22)) + 2|0);
    $24 = HEAP16[$23>>1]|0;
    $25 = $24 << 16 >> 16;
    $26 = $4;
    $27 = ($25|0)>=($26|0);
    if ($27) {
     $28 = $b;
     $29 = ((($28)) + 4|0);
     $30 = HEAP16[$29>>1]|0;
     $31 = $30 << 16 >> 16;
     $32 = $5;
     $33 = ($31|0)<=($32|0);
     if ($33) {
      $34 = $b;
      $35 = ((($34)) + 6|0);
      $36 = HEAP16[$35>>1]|0;
      $37 = $36 << 16 >> 16;
      $38 = $5;
      $39 = ($37|0)>=($38|0);
      if ($39) {
       $$expand_i1_val = 1;
       HEAP8[$0>>0] = $$expand_i1_val;
       $$pre_trunc = HEAP8[$0>>0]|0;
       $249 = $$pre_trunc&1;
       STACKTOP = sp;return ($249|0);
      }
     }
    }
   }
   $40 = $b;
   $41 = HEAP16[$40>>1]|0;
   $42 = $41 << 16 >> 16;
   $43 = $6;
   $44 = ($42|0)<=($43|0);
   if ($44) {
    $45 = $b;
    $46 = ((($45)) + 2|0);
    $47 = HEAP16[$46>>1]|0;
    $48 = $47 << 16 >> 16;
    $49 = $6;
    $50 = ($48|0)>=($49|0);
    if ($50) {
     $51 = $b;
     $52 = ((($51)) + 4|0);
     $53 = HEAP16[$52>>1]|0;
     $54 = $53 << 16 >> 16;
     $55 = $7;
     $56 = ($54|0)<=($55|0);
     if ($56) {
      $57 = $b;
      $58 = ((($57)) + 6|0);
      $59 = HEAP16[$58>>1]|0;
      $60 = $59 << 16 >> 16;
      $61 = $7;
      $62 = ($60|0)>=($61|0);
      if ($62) {
       $$expand_i1_val2 = 1;
       HEAP8[$0>>0] = $$expand_i1_val2;
       $$pre_trunc = HEAP8[$0>>0]|0;
       $249 = $$pre_trunc&1;
       STACKTOP = sp;return ($249|0);
      }
     }
    }
   }
   $63 = $b;
   $64 = ((($63)) + 2|0);
   $65 = HEAP16[$64>>1]|0;
   $66 = $65 << 16 >> 16;
   $67 = $4;
   $68 = $6;
   $69 = (__Z3MINIiET_S0_S0_($67,$68)|0);
   $70 = ($66|0)>=($69|0);
   if ($70) {
    $71 = $b;
    $72 = HEAP16[$71>>1]|0;
    $73 = $72 << 16 >> 16;
    $74 = $4;
    $75 = $6;
    $76 = (__Z3MAXIiET_S0_S0_($74,$75)|0);
    $77 = ($73|0)<=($76|0);
    if ($77) {
     $78 = $b;
     $79 = ((($78)) + 6|0);
     $80 = HEAP16[$79>>1]|0;
     $81 = $80 << 16 >> 16;
     $82 = $5;
     $83 = $7;
     $84 = (__Z3MINIiET_S0_S0_($82,$83)|0);
     $85 = ($81|0)>=($84|0);
     if ($85) {
      $86 = $b;
      $87 = ((($86)) + 4|0);
      $88 = HEAP16[$87>>1]|0;
      $89 = $88 << 16 >> 16;
      $90 = $5;
      $91 = $7;
      $92 = (__Z3MAXIiET_S0_S0_($90,$91)|0);
      $93 = ($89|0)<=($92|0);
      if ($93) {
       $94 = $4;
       $95 = $6;
       $96 = ($94|0)==($95|0);
       if (!($96)) {
        $97 = $5;
        $98 = $7;
        $99 = ($97|0)==($98|0);
        if (!($99)) {
         $100 = $5;
         $101 = $5;
         $102 = $7;
         $103 = (($101) - ($102))|0;
         $104 = $4;
         $105 = $b;
         $106 = HEAP16[$105>>1]|0;
         $107 = $106 << 16 >> 16;
         $108 = (($104) - ($107))|0;
         $109 = Math_imul($103, $108)|0;
         $110 = $4;
         $111 = $6;
         $112 = (($110) - ($111))|0;
         $113 = (($109|0) / ($112|0))&-1;
         $114 = (($100) - ($113))|0;
         $iy = $114;
         $115 = $b;
         $116 = ((($115)) + 4|0);
         $117 = HEAP16[$116>>1]|0;
         $118 = $117 << 16 >> 16;
         $119 = $iy;
         $120 = ($118|0)<=($119|0);
         if ($120) {
          $121 = $b;
          $122 = ((($121)) + 6|0);
          $123 = HEAP16[$122>>1]|0;
          $124 = $123 << 16 >> 16;
          $125 = $iy;
          $126 = ($124|0)>=($125|0);
          if ($126) {
           $127 = $5;
           $128 = $7;
           $129 = (__Z3MINIiET_S0_S0_($127,$128)|0);
           $130 = $iy;
           $131 = ($129|0)<=($130|0);
           if ($131) {
            $132 = $5;
            $133 = $7;
            $134 = (__Z3MAXIiET_S0_S0_($132,$133)|0);
            $135 = $iy;
            $136 = ($134|0)>=($135|0);
            if ($136) {
             $$expand_i1_val6 = 1;
             HEAP8[$0>>0] = $$expand_i1_val6;
             $$pre_trunc = HEAP8[$0>>0]|0;
             $249 = $$pre_trunc&1;
             STACKTOP = sp;return ($249|0);
            }
           }
          }
         }
         $137 = $5;
         $138 = $5;
         $139 = $7;
         $140 = (($138) - ($139))|0;
         $141 = $4;
         $142 = $b;
         $143 = ((($142)) + 2|0);
         $144 = HEAP16[$143>>1]|0;
         $145 = $144 << 16 >> 16;
         $146 = (($141) - ($145))|0;
         $147 = Math_imul($140, $146)|0;
         $148 = $4;
         $149 = $6;
         $150 = (($148) - ($149))|0;
         $151 = (($147|0) / ($150|0))&-1;
         $152 = (($137) - ($151))|0;
         $iy = $152;
         $153 = $b;
         $154 = ((($153)) + 4|0);
         $155 = HEAP16[$154>>1]|0;
         $156 = $155 << 16 >> 16;
         $157 = $iy;
         $158 = ($156|0)<=($157|0);
         if ($158) {
          $159 = $b;
          $160 = ((($159)) + 6|0);
          $161 = HEAP16[$160>>1]|0;
          $162 = $161 << 16 >> 16;
          $163 = $iy;
          $164 = ($162|0)>=($163|0);
          if ($164) {
           $165 = $5;
           $166 = $7;
           $167 = (__Z3MINIiET_S0_S0_($165,$166)|0);
           $168 = $iy;
           $169 = ($167|0)<=($168|0);
           if ($169) {
            $170 = $5;
            $171 = $7;
            $172 = (__Z3MAXIiET_S0_S0_($170,$171)|0);
            $173 = $iy;
            $174 = ($172|0)>=($173|0);
            if ($174) {
             $$expand_i1_val8 = 1;
             HEAP8[$0>>0] = $$expand_i1_val8;
             $$pre_trunc = HEAP8[$0>>0]|0;
             $249 = $$pre_trunc&1;
             STACKTOP = sp;return ($249|0);
            }
           }
          }
         }
         $175 = $4;
         $176 = $4;
         $177 = $6;
         $178 = (($176) - ($177))|0;
         $179 = $5;
         $180 = $b;
         $181 = ((($180)) + 4|0);
         $182 = HEAP16[$181>>1]|0;
         $183 = $182 << 16 >> 16;
         $184 = (($179) - ($183))|0;
         $185 = Math_imul($178, $184)|0;
         $186 = $5;
         $187 = $7;
         $188 = (($186) - ($187))|0;
         $189 = (($185|0) / ($188|0))&-1;
         $190 = (($175) - ($189))|0;
         $ix = $190;
         $191 = $b;
         $192 = HEAP16[$191>>1]|0;
         $193 = $192 << 16 >> 16;
         $194 = $ix;
         $195 = ($193|0)<=($194|0);
         if ($195) {
          $196 = $b;
          $197 = ((($196)) + 2|0);
          $198 = HEAP16[$197>>1]|0;
          $199 = $198 << 16 >> 16;
          $200 = $ix;
          $201 = ($199|0)>=($200|0);
          if ($201) {
           $202 = $4;
           $203 = $6;
           $204 = (__Z3MINIiET_S0_S0_($202,$203)|0);
           $205 = $ix;
           $206 = ($204|0)<=($205|0);
           if ($206) {
            $207 = $4;
            $208 = $6;
            $209 = (__Z3MAXIiET_S0_S0_($207,$208)|0);
            $210 = $ix;
            $211 = ($209|0)>=($210|0);
            if ($211) {
             $$expand_i1_val10 = 1;
             HEAP8[$0>>0] = $$expand_i1_val10;
             $$pre_trunc = HEAP8[$0>>0]|0;
             $249 = $$pre_trunc&1;
             STACKTOP = sp;return ($249|0);
            }
           }
          }
         }
         $212 = $4;
         $213 = $4;
         $214 = $6;
         $215 = (($213) - ($214))|0;
         $216 = $5;
         $217 = $b;
         $218 = ((($217)) + 6|0);
         $219 = HEAP16[$218>>1]|0;
         $220 = $219 << 16 >> 16;
         $221 = (($216) - ($220))|0;
         $222 = Math_imul($215, $221)|0;
         $223 = $5;
         $224 = $7;
         $225 = (($223) - ($224))|0;
         $226 = (($222|0) / ($225|0))&-1;
         $227 = (($212) - ($226))|0;
         $ix = $227;
         $228 = $b;
         $229 = HEAP16[$228>>1]|0;
         $230 = $229 << 16 >> 16;
         $231 = $ix;
         $232 = ($230|0)<=($231|0);
         if (!($232)) {
          break;
         }
         $233 = $b;
         $234 = ((($233)) + 2|0);
         $235 = HEAP16[$234>>1]|0;
         $236 = $235 << 16 >> 16;
         $237 = $ix;
         $238 = ($236|0)>=($237|0);
         if (!($238)) {
          break;
         }
         $239 = $4;
         $240 = $6;
         $241 = (__Z3MINIiET_S0_S0_($239,$240)|0);
         $242 = $ix;
         $243 = ($241|0)<=($242|0);
         if (!($243)) {
          break;
         }
         $244 = $4;
         $245 = $6;
         $246 = (__Z3MAXIiET_S0_S0_($244,$245)|0);
         $247 = $ix;
         $248 = ($246|0)>=($247|0);
         if (!($248)) {
          break;
         }
         $$expand_i1_val12 = 1;
         HEAP8[$0>>0] = $$expand_i1_val12;
         $$pre_trunc = HEAP8[$0>>0]|0;
         $249 = $$pre_trunc&1;
         STACKTOP = sp;return ($249|0);
        }
       }
       $$expand_i1_val4 = 1;
       HEAP8[$0>>0] = $$expand_i1_val4;
       $$pre_trunc = HEAP8[$0>>0]|0;
       $249 = $$pre_trunc&1;
       STACKTOP = sp;return ($249|0);
      }
     }
    }
   }
  }
 } while(0);
 $$expand_i1_val14 = 0;
 HEAP8[$0>>0] = $$expand_i1_val14;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $249 = $$pre_trunc&1;
 STACKTOP = sp;return ($249|0);
}
function __ZN6Script13fetchNextWordEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $word = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + ($4)|0);
 $6 = (__Z14READ_LE_UINT16PKv($5)|0);
 $word = $6;
 $7 = ((($1)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 2)|0;
 HEAP32[$7>>2] = $9;
 $10 = $word;
 STACKTOP = sp;return ($10|0);
}
function __ZN4Game16derefSceneObjectEi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $0;
 $3 = $1;
 $4 = ($3|0)>=(0);
 if ($4) {
  $5 = $1;
  $6 = ((($2)) + 10552|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($5|0)<($7|0);
  if ($8) {
   $9 = $1;
   $10 = ((($2)) + 5252|0);
   $11 = (($10) + (($9*106)|0)|0);
   STACKTOP = sp;return ($11|0);
  }
 }
 ___assert_fail((24189|0),(27568|0),258,(24222|0));
 // unreachable;
 return (0)|0;
}
function __ZL15getBitmapHeightPKh58($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 $2 = ((($1)) + 2|0);
 $3 = (__Z14READ_LE_UINT16PKv($2)|0);
 $4 = $3&65535;
 $5 = (($4) + 1)|0;
 STACKTOP = sp;return ($5|0);
}
function __ZL14getBitmapWidthPKh59($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 $2 = (__Z14READ_LE_UINT16PKv($1)|0);
 $3 = $2&65535;
 $4 = (($3) + 1)|0;
 STACKTOP = sp;return ($4|0);
}
function __ZN6Script9getStringEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + ($4)|0);
 STACKTOP = sp;return ($5|0);
}
function __Z4SWAPIP11SceneObjectEvRT_S3_($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $tmp = $3;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 HEAP32[$6>>2] = $5;
 $7 = $tmp;
 $8 = $1;
 HEAP32[$8>>2] = $7;
 STACKTOP = sp;return;
}
function __Z3MINItET_S0_S0_($v1,$v2) {
 $v1 = $v1|0;
 $v2 = $v2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v1;
 $1 = $v2;
 $2 = $0;
 $3 = $2&65535;
 $4 = $1;
 $5 = $4&65535;
 $6 = ($3|0)<($5|0);
 $7 = $0;
 $8 = $1;
 $9 = $6 ? $7 : $8;
 STACKTOP = sp;return ($9|0);
}
function __ZN4Game8derefBoxEii($this,$i,$j) {
 $this = $this|0;
 $i = $i|0;
 $j = $j|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $j;
 $3 = $0;
 $4 = $1;
 $5 = ($4|0)>=(0);
 $6 = $1;
 $7 = ($6|0)<(20);
 $or$cond = $5 & $7;
 $8 = $2;
 $9 = ($8|0)>=(0);
 $or$cond3 = $or$cond & $9;
 $10 = $2;
 $11 = ($10|0)<(10);
 $or$cond5 = $or$cond3 & $11;
 if ($or$cond5) {
  $12 = $2;
  $13 = $1;
  $14 = ((($3)) + 15764|0);
  $15 = (($14) + (($13*160)|0)|0);
  $16 = (($15) + ($12<<4)|0);
  STACKTOP = sp;return ($16|0);
 } else {
  ___assert_fail((24136|0),(27568|0),263,(24180|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZN4Game21derefSceneObjectFrameEi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $0;
 $3 = $1;
 $4 = ($3|0)>=(0);
 if ($4) {
  $5 = $1;
  $6 = ((($2)) + 79044|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($5|0)<($7|0);
  if ($8) {
   $9 = $1;
   $10 = ((($2)) + 19044|0);
   $11 = (($10) + (($9*20)|0)|0);
   STACKTOP = sp;return ($11|0);
  }
 }
 ___assert_fail((24076|0),(27568|0),273,(24114|0));
 // unreachable;
 return (0)|0;
}
function __Z4SWAPIsEvRT_S1_($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = HEAP16[$2>>1]|0;
 $tmp = $3;
 $4 = $1;
 $5 = HEAP16[$4>>1]|0;
 $6 = $0;
 HEAP16[$6>>1] = $5;
 $7 = $tmp;
 $8 = $1;
 HEAP16[$8>>1] = $7;
 STACKTOP = sp;return;
}
function __Z3MAXIiET_S0_S0_($v1,$v2) {
 $v1 = $v1|0;
 $v2 = $v2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v1;
 $1 = $v2;
 $2 = $0;
 $3 = $1;
 $4 = ($2|0)>($3|0);
 $5 = $0;
 $6 = $1;
 $7 = $4 ? $5 : $6;
 STACKTOP = sp;return ($7|0);
}
function _main($argc,$argv) {
 $argc = $argc|0;
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_ZL5USAGE = 0, $dataPath = 0, $i = 0;
 var $musicPath = 0, $opt = 0, $savePath = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $_ZL5USAGE = 24468;
 $dataPath = sp + 16|0;
 $savePath = sp + 12|0;
 $musicPath = sp + 8|0;
 $0 = 0;
 $1 = $argc;
 $2 = $argv;
 HEAP32[$dataPath>>2] = 24423;
 HEAP32[$savePath>>2] = 35232;
 HEAP32[$musicPath>>2] = 24428;
 $i = 1;
 while(1) {
  $3 = $i;
  $4 = $1;
  $5 = ($3|0)<($4|0);
  if (!($5)) {
   label = 8;
   break;
  }
  $opt = 0;
  $6 = $i;
  $7 = $2;
  $8 = (($7) + ($6<<2)|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (_strlen($9)|0);
  $11 = ($10>>>0)>=(2);
  if ($11) {
   $12 = $i;
   $13 = $2;
   $14 = (($13) + ($12<<2)|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = (__ZL11parseOptionPKcS0_PS0_($15,24434,$dataPath)|0);
   $17 = $16&1;
   $18 = $opt;
   $19 = $18&1;
   $20 = $19&1;
   $21 = $20 | $17;
   $22 = ($21|0)!=(0);
   $23 = $22&1;
   $opt = $23;
   $24 = $i;
   $25 = $2;
   $26 = (($25) + ($24<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (__ZL11parseOptionPKcS0_PS0_($27,24444,$savePath)|0);
   $29 = $28&1;
   $30 = $opt;
   $31 = $30&1;
   $32 = $31&1;
   $33 = $32 | $29;
   $34 = ($33|0)!=(0);
   $35 = $34&1;
   $opt = $35;
   $36 = $i;
   $37 = $2;
   $38 = (($37) + ($36<<2)|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (__ZL11parseOptionPKcS0_PS0_($39,24454,$musicPath)|0);
   $41 = $40&1;
   $42 = $opt;
   $43 = $42&1;
   $44 = $43&1;
   $45 = $44 | $41;
   $46 = ($45|0)!=(0);
   $47 = $46&1;
   $opt = $47;
  }
  $48 = $opt;
  $49 = $48&1;
  if (!($49)) {
   label = 6;
   break;
  }
  $51 = $i;
  $52 = (($51) + 1)|0;
  $i = $52;
 }
 if ((label|0) == 6) {
  $50 = $_ZL5USAGE;
  HEAP32[$vararg_buffer>>2] = $50;
  (_printf(24465,$vararg_buffer)|0);
  $0 = 0;
  $56 = $0;
  STACKTOP = sp;return ($56|0);
 }
 else if ((label|0) == 8) {
  HEAP16[19248>>1] = 1;
  $53 = HEAP32[$dataPath>>2]|0;
  $54 = HEAP32[$savePath>>2]|0;
  $55 = HEAP32[$musicPath>>2]|0;
  __ZL4initPKcS0_S0_($53,$54,$55);
  _emscripten_set_main_loop((184|0),50,0);
  $0 = 0;
  $56 = $0;
  STACKTOP = sp;return ($56|0);
 }
 return (0)|0;
}
function __ZL11parseOptionPKcS0_PS0_($arg,$longCmd,$opt) {
 $arg = $arg|0;
 $longCmd = $longCmd|0;
 $opt = $opt|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $handled = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $arg;
 $1 = $longCmd;
 $2 = $opt;
 $handled = 0;
 $3 = $0;
 $4 = HEAP8[$3>>0]|0;
 $5 = $4 << 24 >> 24;
 $6 = ($5|0)==(45);
 if ($6) {
  $7 = $0;
  $8 = ((($7)) + 1|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9 << 24 >> 24;
  $11 = ($10|0)==(45);
  if ($11) {
   $12 = $0;
   $13 = ((($12)) + 2|0);
   $14 = $1;
   $15 = $1;
   $16 = (_strlen($15)|0);
   $17 = (_strncmp($13,$14,$16)|0);
   $18 = ($17|0)==(0);
   if ($18) {
    $19 = $0;
    $20 = ((($19)) + 2|0);
    $21 = $1;
    $22 = (_strlen($21)|0);
    $23 = (($20) + ($22)|0);
    $24 = $2;
    HEAP32[$24>>2] = $23;
    $handled = 1;
   }
  }
 }
 $25 = $handled;
 $26 = $25&1;
 STACKTOP = sp;return ($26|0);
}
function __ZL4initPKcS0_S0_($dataPath,$savePath,$musicPath) {
 $dataPath = $dataPath|0;
 $savePath = $savePath|0;
 $musicPath = $musicPath|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $dataPath;
 $1 = $savePath;
 $2 = $musicPath;
 $5 = (__Z21SystemStub_SDL_createv()|0);
 HEAP32[584>>2] = $5;
 $6 = (__Znwj(84264)|0);
 $7 = HEAP32[584>>2]|0;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 __THREW__ = 0;
 invoke_viiiii(185,($6|0),($7|0),($8|0),($9|0),($10|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $14 = ___cxa_find_matching_catch()|0;
  $15 = tempRet0;
  $3 = $14;
  $4 = $15;
  __ZdlPv($6);
  $16 = $3;
  $17 = $4;
  ___resumeException($16|0);
  // unreachable;
 } else {
  HEAP32[588>>2] = $6;
  $13 = HEAP32[588>>2]|0;
  __ZN4Game4initEv($13);
  STACKTOP = sp;return;
 }
}
function __ZL8mainLoopv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[584>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&1;
 if ($3) {
  return;
 }
 $4 = HEAP32[588>>2]|0;
 __ZN4Game8mainLoopEv($4);
 return;
}
function __Z16Mixer_SDL_createP10SystemStub($stub) {
 $stub = $stub|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $stub;
 $3 = (__Znwj(12)|0);
 __THREW__ = 0;
 invoke_vi(186,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  STACKTOP = sp;return ($3|0);
 }
 return (0)|0;
}
function __ZN8MixerSDLC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN5MixerC2Ev($1);
 $2 = 600;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 HEAP8[$3>>0] = 0;
 $4 = ((($1)) + 8|0);
 HEAP32[$4>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN5MixerC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 648;
 HEAP32[$1>>2] = $2;
 STACKTOP = sp;return;
}
function __ZN8MixerSDLD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN5MixerD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN8MixerSDLD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(22,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN8MixerSDL4openEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&1;
 if ($4) {
  STACKTOP = sp;return;
 }
 (_Mix_Init(24)|0);
 $5 = (_Mix_OpenAudio(22050,-32752,2,4096)|0);
 $6 = ($5|0)<(0);
 if ($6) {
  $7 = (_SDL_GetError()|0);
  HEAP32[$vararg_buffer>>2] = $7;
  __Z7warningPKcz(24817,$vararg_buffer);
 }
 (_Mix_AllocateChannels(4)|0);
 $8 = ((($1)) + 4|0);
 HEAP8[$8>>0] = 1;
 STACKTOP = sp;return;
}
function __ZN8MixerSDL5closeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&1;
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$1>>2]|0;
 $6 = ((($5)) + 32|0);
 $7 = HEAP32[$6>>2]|0;
 FUNCTION_TABLE_vi[$7 & 255]($1);
 _Mix_CloseAudio();
 _Mix_Quit();
 $8 = ((($1)) + 4|0);
 HEAP8[$8>>0] = 0;
 STACKTOP = sp;return;
}
function __ZN8MixerSDL9playSoundEP4FilePi($this,$f,$id) {
 $this = $this|0;
 $f = $f|0;
 $id = $id|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $chunk = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $f;
 $2 = $id;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$vararg_buffer>>2] = $4;
 __Z5debugtPKcz(32,24785,$vararg_buffer);
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 $7 = (_Mix_LoadWAV(($6|0))|0);
 $chunk = $7;
 $8 = $chunk;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = $chunk;
  $11 = (_Mix_PlayChannelTimed(-1,($10|0),0,-1)|0);
  $12 = $2;
  HEAP32[$12>>2] = $11;
  STACKTOP = sp;return;
 } else {
  $13 = $2;
  HEAP32[$13>>2] = -1;
  STACKTOP = sp;return;
 }
}
function __ZN8MixerSDL9playMusicEP4FilePi($this,$f,$id) {
 $this = $this|0;
 $f = $f|0;
 $id = $id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $f;
 $2 = $id;
 $3 = $0;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$vararg_buffer>>2] = $5;
 __Z5debugtPKcz(32,24718,$vararg_buffer);
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 __ZN8MixerSDL9playMusicEPKc($3,$7);
 $8 = $2;
 HEAP32[$8>>2] = -1;
 STACKTOP = sp;return;
}
function __ZN8MixerSDL14isSoundPlayingEi($this,$id) {
 $this = $this|0;
 $id = $id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $id;
 $2 = $1;
 $3 = (_Mix_Playing(($2|0))|0);
 $4 = ($3|0)!=(0);
 STACKTOP = sp;return ($4|0);
}
function __ZN8MixerSDL9stopSoundEi($this,$id) {
 $this = $this|0;
 $id = $id|0;
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $id;
 __Z5debugtPKcz(32,24696,$vararg_buffer);
 $2 = $1;
 (_Mix_HaltChannel(($2|0))|0);
 STACKTOP = sp;return;
}
function __ZN8MixerSDL7stopAllEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(32,24676,$vararg_buffer);
 (_Mix_HaltChannel(-1)|0);
 __ZN8MixerSDL9stopMusicEv($1);
 STACKTOP = sp;return;
}
function __ZN8MixerSDL11setMusicMixEPvPFvS0_PhiE($this,$param,$mix) {
 $this = $this|0;
 $param = $param|0;
 $mix = $mix|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $param;
 $2 = $mix;
 STACKTOP = sp;return;
}
function __ZN8MixerSDL9stopMusicEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 (_Mix_HaltMusic()|0);
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 _Mix_FreeMusic(($3|0));
 $4 = ((($1)) + 8|0);
 HEAP32[$4>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN8MixerSDL9playMusicEPKc($this,$path) {
 $this = $this|0;
 $path = $path|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $path;
 $2 = $0;
 __ZN8MixerSDL9stopMusicEv($2);
 $3 = $1;
 $4 = (_Mix_LoadMUS(($3|0))|0);
 $5 = ((($2)) + 8|0);
 HEAP32[$5>>2] = $4;
 $6 = ((($2)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  (_Mix_VolumeMusic(64)|0);
  $9 = ((($2)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  (_Mix_PlayMusic(($10|0),0)|0);
  STACKTOP = sp;return;
 } else {
  $11 = $1;
  $12 = (_SDL_GetError()|0);
  HEAP32[$vararg_buffer>>2] = $11;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $12;
  __Z7warningPKcz(24755,$vararg_buffer);
  STACKTOP = sp;return;
 }
}
function __ZN5MixerD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN5MixerD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(32,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZNK4Game19findConditionOpcodeEi($this,$num) {
 $this = $this|0;
 $num = $num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cop = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $num;
 $cop = 0;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = HEAP32[1112>>2]|0;
  $4 = ($2|0)<($3|0);
  if (!($4)) {
   label = 6;
   break;
  }
  $5 = $i;
  $6 = (716 + (($5*12)|0)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $1;
  $9 = ($7|0)==($8|0);
  $10 = $i;
  if ($9) {
   break;
  }
  $12 = (($10) + 1)|0;
  $i = $12;
 }
 if ((label|0) == 6) {
  $13 = $cop;
  STACKTOP = sp;return ($13|0);
 }
 $11 = (716 + (($10*12)|0)|0);
 $cop = $11;
 $13 = $cop;
 STACKTOP = sp;return ($13|0);
}
function __ZNK4Game18findOperatorOpcodeEi($this,$num) {
 $this = $this|0;
 $num = $num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cop = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $num;
 $cop = 0;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = HEAP32[1668>>2]|0;
  $4 = ($2|0)<($3|0);
  if (!($4)) {
   label = 6;
   break;
  }
  $5 = $i;
  $6 = (1116 + (($5*12)|0)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $1;
  $9 = ($7|0)==($8|0);
  $10 = $i;
  if ($9) {
   break;
  }
  $12 = (($10) + 1)|0;
  $i = $12;
 }
 if ((label|0) == 6) {
  $13 = $cop;
  STACKTOP = sp;return ($13|0);
 }
 $11 = (1116 + (($10*12)|0)|0);
 $cop = $11;
 $13 = $cop;
 STACKTOP = sp;return ($13|0);
}
function __ZN4Game8evalExprEPs($this,$val) {
 $this = $this|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $arg = 0, $op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $val;
 $2 = $0;
 $3 = ((($2)) + 3152|0);
 $4 = (__ZN6Script13fetchNextWordEv($3)|0);
 $op = $4;
 $5 = ((($2)) + 3152|0);
 $6 = (__ZN6Script13fetchNextWordEv($5)|0);
 $arg = $6;
 $7 = $op;
 $8 = $7 << 16 >> 16;
 switch ($8|0) {
 case 0:  {
  $9 = $arg;
  $10 = $1;
  HEAP16[$10>>1] = $9;
  STACKTOP = sp;return;
  break;
 }
 case 1:  {
  $11 = $arg;
  $12 = $11 << 16 >> 16;
  $13 = $1;
  $14 = HEAP16[$13>>1]|0;
  $15 = $14 << 16 >> 16;
  $16 = (($15) + ($12))|0;
  $17 = $16&65535;
  HEAP16[$13>>1] = $17;
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $18 = $arg;
  $19 = $18 << 16 >> 16;
  $20 = $1;
  $21 = HEAP16[$20>>1]|0;
  $22 = $21 << 16 >> 16;
  $23 = (($22) - ($19))|0;
  $24 = $23&65535;
  HEAP16[$20>>1] = $24;
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  $25 = $arg;
  $26 = $25 << 16 >> 16;
  $27 = $1;
  $28 = HEAP16[$27>>1]|0;
  $29 = $28 << 16 >> 16;
  $30 = Math_imul($29, $26)|0;
  $31 = $30&65535;
  HEAP16[$27>>1] = $31;
  STACKTOP = sp;return;
  break;
 }
 case 4:  {
  $32 = $arg;
  $33 = $32 << 16 >> 16;
  $34 = $1;
  $35 = HEAP16[$34>>1]|0;
  $36 = $35 << 16 >> 16;
  $37 = (($36|0) / ($33|0))&-1;
  $38 = $37&65535;
  HEAP16[$34>>1] = $38;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $39 = $op;
  $40 = $39 << 16 >> 16;
  HEAP32[$vararg_buffer>>2] = $40;
  __Z5errorPKcz(24859,$vararg_buffer);
  STACKTOP = sp;return;
 }
 }
}
function __ZN4Game8testExprEs($this,$val) {
 $this = $this|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $arg = 0, $cmp1 = 0, $cmp2 = 0, $count = 0, $op = 0, $ret = 0, $vararg_buffer = 0;
 var $vararg_buffer2 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $val;
 $2 = $0;
 $ret = 0;
 $3 = ((($2)) + 3152|0);
 $4 = (__ZN6Script13fetchNextWordEv($3)|0);
 $op = $4;
 $5 = $op;
 $6 = $5 << 16 >> 16;
 $7 = ($6|0)==(-1);
 $8 = ((($2)) + 3152|0);
 $9 = (__ZN6Script13fetchNextWordEv($8)|0);
 L1: do {
  if ($7) {
   $10 = $9 << 16 >> 16;
   $count = $10;
   while(1) {
    $11 = $count;
    $12 = (($11) + -1)|0;
    $count = $12;
    $13 = ($11|0)!=(0);
    if (!($13)) {
     break L1;
    }
    $14 = ((($2)) + 3152|0);
    $15 = (__ZN6Script13fetchNextWordEv($14)|0);
    $cmp1 = $15;
    $16 = ((($2)) + 3152|0);
    $17 = (__ZN6Script13fetchNextWordEv($16)|0);
    $cmp2 = $17;
    $18 = $cmp1;
    $19 = $18 << 16 >> 16;
    $20 = $cmp2;
    $21 = $20 << 16 >> 16;
    $22 = ($19|0)>($21|0);
    if ($22) {
     $23 = $cmp1;
     $24 = $23 << 16 >> 16;
     $25 = $cmp2;
     $26 = $25 << 16 >> 16;
     HEAP32[$vararg_buffer>>2] = $24;
     $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
     HEAP32[$vararg_ptr1>>2] = $26;
     __Z7warningPKcz(24878,$vararg_buffer);
    }
    $27 = $cmp1;
    $28 = $27 << 16 >> 16;
    $29 = $1;
    $30 = $29 << 16 >> 16;
    $31 = ($28|0)<=($30|0);
    if (!($31)) {
     continue;
    }
    $32 = $cmp2;
    $33 = $32 << 16 >> 16;
    $34 = $1;
    $35 = $34 << 16 >> 16;
    $36 = ($33|0)>=($35|0);
    if (!($36)) {
     continue;
    }
    $ret = 1;
   }
  } else {
   $arg = $9;
   $37 = $op;
   $38 = $37 << 16 >> 16;
   switch ($38|0) {
   case 0:  {
    $39 = $arg;
    $40 = $39 << 16 >> 16;
    $41 = $1;
    $42 = $41 << 16 >> 16;
    $43 = ($40|0)==($42|0);
    if (!($43)) {
     break L1;
    }
    $ret = 1;
    break L1;
    break;
   }
   case 1:  {
    $44 = $arg;
    $45 = $44 << 16 >> 16;
    $46 = $1;
    $47 = $46 << 16 >> 16;
    $48 = ($45|0)!=($47|0);
    if (!($48)) {
     break L1;
    }
    $ret = 1;
    break L1;
    break;
   }
   case 2:  {
    $49 = $arg;
    $50 = $49 << 16 >> 16;
    $51 = $1;
    $52 = $51 << 16 >> 16;
    $53 = ($50|0)>($52|0);
    if (!($53)) {
     break L1;
    }
    $ret = 1;
    break L1;
    break;
   }
   case 3:  {
    $54 = $arg;
    $55 = $54 << 16 >> 16;
    $56 = $1;
    $57 = $56 << 16 >> 16;
    $58 = ($55|0)<($57|0);
    if (!($58)) {
     break L1;
    }
    $ret = 1;
    break L1;
    break;
   }
   case 4:  {
    $59 = $arg;
    $60 = $59 << 16 >> 16;
    $61 = $1;
    $62 = $61 << 16 >> 16;
    $63 = ($60|0)>=($62|0);
    if (!($63)) {
     break L1;
    }
    $ret = 1;
    break L1;
    break;
   }
   case 5:  {
    $64 = $arg;
    $65 = $64 << 16 >> 16;
    $66 = $1;
    $67 = $66 << 16 >> 16;
    $68 = ($65|0)<=($67|0);
    if (!($68)) {
     break L1;
    }
    $ret = 1;
    break L1;
    break;
   }
   default: {
    $69 = $op;
    $70 = $69 << 16 >> 16;
    HEAP32[$vararg_buffer2>>2] = $70;
    __Z5errorPKcz(24859,$vararg_buffer2);
    break L1;
   }
   }
  }
 } while(0);
 $71 = $ret;
 $72 = $71&1;
 STACKTOP = sp;return ($72|0);
}
function __ZN4Game8cop_trueEv($this) {
 $this = $this|0;
 var $0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 __Z5debugtPKcz(4,24897,$vararg_buffer);
 STACKTOP = sp;return 1;
}
function __ZN4Game19cop_isInRandomRangeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rnd = 0, $t = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(4,24912,$vararg_buffer);
 $2 = ((($1)) + 20|0);
 $3 = (__ZN15RandomGenerator9getNumberEv($2)|0);
 $rnd = $3;
 $4 = ((($1)) + 3152|0);
 $5 = (__ZN6Script13fetchNextWordEv($4)|0);
 $6 = $5 << 16 >> 16;
 $t = $6;
 $7 = $t;
 $8 = $rnd;
 $9 = $8 << 16 >> 16;
 $10 = Math_imul($7, $9)|0;
 $11 = (($10|0) / 32768)&-1;
 $12 = $11 & 65535;
 $13 = ($12|0)==(0);
 STACKTOP = sp;return ($13|0);
}
function __ZN4Game16cop_isKeyPressedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $key = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(4,24938,$vararg_buffer);
 $2 = ((($1)) + 3152|0);
 $3 = (__ZN6Script13fetchNextWordEv($2)|0);
 $4 = $3 << 16 >> 16;
 $key = $4;
 $5 = $key;
 $6 = ((($1)) + 4478|0);
 $7 = (($6) + ($5)|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)!=(0);
 STACKTOP = sp;return ($10|0);
}
function __ZN4Game19cop_isKeyNotPressedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $key = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(4,24961,$vararg_buffer);
 $2 = ((($1)) + 3152|0);
 $3 = (__ZN6Script13fetchNextWordEv($2)|0);
 $4 = $3 << 16 >> 16;
 $key = $4;
 $5 = $key;
 $6 = ((($1)) + 4478|0);
 $7 = (($6) + ($5)|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)==(0);
 STACKTOP = sp;return ($10|0);
}
function __ZN4Game20cop_testMouseButtonsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ret = 0, $t = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(4,24987,$vararg_buffer);
 $ret = 1;
 $2 = ((($1)) + 3152|0);
 $3 = (__ZN6Script13fetchNextWordEv($2)|0);
 $4 = $3 << 16 >> 16;
 $t = $4;
 $5 = $t;
 switch ($5|0) {
 case 0:  {
  $6 = ((($1)) + 4608|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $7 & 1;
  $9 = ($8|0)!=(0);
  $10 = $9&1;
  $ret = $10;
  break;
 }
 case 1:  {
  $11 = ((($1)) + 4608|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $12 & 2;
  $14 = ($13|0)!=(0);
  $15 = $14&1;
  $ret = $15;
  break;
 }
 case 2:  {
  $16 = ((($1)) + 4608|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $17 & 1;
  $19 = ($18|0)==(0);
  $20 = $19&1;
  $ret = $20;
  break;
 }
 case 3:  {
  $21 = ((($1)) + 4608|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $22 & 2;
  $24 = ($23|0)==(0);
  $25 = $24&1;
  $ret = $25;
  break;
 }
 default: {
 }
 }
 $26 = $ret;
 $27 = $26&1;
 STACKTOP = sp;return ($27|0);
}
function __ZN4Game19cop_isObjectInSceneEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $index = 0, $ret = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(4,25014,$vararg_buffer);
 $ret = 1;
 $2 = ((($1)) + 3152|0);
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 3152|0);
 $6 = ((($5)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 3152|0);
 $9 = ((($8)) + 16|0);
 $10 = (__ZN4Game16findObjectByNameEiiPb($1,$4,$7,$9)|0);
 $index = $10;
 $11 = $index;
 $12 = ($11|0)==(-1);
 if ($12) {
  $ret = 0;
 }
 $13 = $ret;
 $14 = $13&1;
 if (!($14)) {
  $20 = $ret;
  $21 = $20&1;
  STACKTOP = sp;return ($21|0);
 }
 $15 = $index;
 $16 = ((($1)) + 3152|0);
 $17 = ((($16)) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($15|0)!=($18|0);
 if (!($19)) {
  $20 = $ret;
  $21 = $20&1;
  STACKTOP = sp;return ($21|0);
 }
 $ret = 0;
 $20 = $ret;
 $21 = $20&1;
 STACKTOP = sp;return ($21|0);
}
function __ZN4Game23cop_testObjectPrevStateEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $index = 0, $ret = 0, $so = 0, $state = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(4,25040,$vararg_buffer);
 $ret = 1;
 $2 = ((($1)) + 3152|0);
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 3152|0);
 $6 = ((($5)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 3152|0);
 $9 = ((($8)) + 16|0);
 $10 = (__ZN4Game16findObjectByNameEiiPb($1,$4,$7,$9)|0);
 $index = $10;
 $11 = $index;
 $12 = ($11|0)==(-1);
 if ($12) {
  $ret = 0;
 }
 $13 = $ret;
 $14 = $13&1;
 if (!($14)) {
  $26 = ((($1)) + 3152|0);
  $27 = ((($26)) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + 2)|0;
  HEAP32[$27>>2] = $29;
  $30 = $ret;
  $31 = $30&1;
  STACKTOP = sp;return ($31|0);
 }
 $15 = $index;
 $16 = (__ZN4Game16derefSceneObjectEi($1,$15)|0);
 $so = $16;
 $17 = ((($1)) + 3152|0);
 $18 = (__ZN6Script13fetchNextWordEv($17)|0);
 $state = $18;
 $19 = $so;
 $20 = ((($19)) + 42|0);
 $21 = HEAP16[$20>>1]|0;
 $22 = $21 << 16 >> 16;
 $23 = $state;
 $24 = $23 << 16 >> 16;
 $25 = ($22|0)!=($24|0);
 if (!($25)) {
  $30 = $ret;
  $31 = $30&1;
  STACKTOP = sp;return ($31|0);
 }
 $ret = 0;
 $30 = $ret;
 $31 = $30&1;
 STACKTOP = sp;return ($31|0);
}
function __ZN4Game19cop_testObjectStateEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $index = 0, $ret = 0, $so = 0, $state = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(4,25070,$vararg_buffer);
 $ret = 1;
 $2 = ((($1)) + 3152|0);
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 3152|0);
 $6 = ((($5)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 3152|0);
 $9 = ((($8)) + 16|0);
 $10 = (__ZN4Game16findObjectByNameEiiPb($1,$4,$7,$9)|0);
 $index = $10;
 $11 = $index;
 $12 = ($11|0)==(-1);
 if ($12) {
  $ret = 0;
 }
 $13 = $ret;
 $14 = $13&1;
 if (!($14)) {
  $26 = ((($1)) + 3152|0);
  $27 = ((($26)) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + 2)|0;
  HEAP32[$27>>2] = $29;
  $30 = $ret;
  $31 = $30&1;
  STACKTOP = sp;return ($31|0);
 }
 $15 = $index;
 $16 = (__ZN4Game16derefSceneObjectEi($1,$15)|0);
 $so = $16;
 $17 = ((($1)) + 3152|0);
 $18 = (__ZN6Script13fetchNextWordEv($17)|0);
 $state = $18;
 $19 = $so;
 $20 = ((($19)) + 44|0);
 $21 = HEAP16[$20>>1]|0;
 $22 = $21 << 16 >> 16;
 $23 = $state;
 $24 = $23 << 16 >> 16;
 $25 = ($22|0)!=($24|0);
 if (!($25)) {
  $30 = $ret;
  $31 = $30&1;
  STACKTOP = sp;return ($31|0);
 }
 $ret = 0;
 $30 = $ret;
 $31 = $30&1;
 STACKTOP = sp;return ($31|0);
}
function __ZN4Game18cop_isObjectInRectEv($this) {
 $this = $this|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $index = 0, $ret = 0, $so = 0, $var1E = 0, $var20 = 0, $var22 = 0, $var24 = 0, $vararg_buffer = 0, $xObj = 0, $yObj = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 33|0;
 $1 = $this;
 $2 = $1;
 __Z5debugtPKcz(4,25096,$vararg_buffer);
 $ret = 1;
 $3 = ((($2)) + 3152|0);
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($2)) + 3152|0);
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($2)) + 3152|0);
 $10 = ((($9)) + 16|0);
 $11 = (__ZN4Game16findObjectByNameEiiPb($2,$5,$8,$10)|0);
 $index = $11;
 $12 = $index;
 $13 = ($12|0)==(-1);
 if ($13) {
  $ret = 0;
 }
 $14 = ((($2)) + 3152|0);
 $15 = (__ZN6Script13fetchNextWordEv($14)|0);
 $var1E = $15;
 $16 = ((($2)) + 3152|0);
 $17 = (__ZN6Script13fetchNextWordEv($16)|0);
 $var22 = $17;
 $18 = ((($2)) + 3152|0);
 $19 = (__ZN6Script13fetchNextWordEv($18)|0);
 $var20 = $19;
 $20 = ((($2)) + 3152|0);
 $21 = (__ZN6Script13fetchNextWordEv($20)|0);
 $var24 = $21;
 $22 = $var1E;
 $23 = $22 << 16 >> 16;
 $24 = $var20;
 $25 = $24 << 16 >> 16;
 $26 = ($23|0)<=($25|0);
 if (!($26)) {
  ___assert_fail((25121|0),(25136|0),223,(25148|0));
  // unreachable;
 }
 $27 = $var22;
 $28 = $27 << 16 >> 16;
 $29 = $var24;
 $30 = $29 << 16 >> 16;
 $31 = ($28|0)<=($30|0);
 if (!($31)) {
  ___assert_fail((25167|0),(25136|0),224,(25148|0));
  // unreachable;
 }
 $32 = $ret;
 $33 = $32&1;
 if ($33) {
  $34 = $index;
  $35 = (__ZN4Game16derefSceneObjectEi($2,$34)|0);
  $so = $35;
  $36 = $so;
  $37 = ((($36)) + 44|0);
  $38 = HEAP16[$37>>1]|0;
  $39 = $38 << 16 >> 16;
  $40 = ($39|0)!=(0);
  if ($40) {
   $41 = $so;
   $42 = ((($41)) + 8|0);
   $43 = HEAP16[$42>>1]|0;
   $44 = $43 << 16 >> 16;
   $45 = $so;
   $46 = ((($45)) + 20|0);
   $47 = HEAP16[$46>>1]|0;
   $48 = $47 << 16 >> 16;
   $49 = ((($2)) + 19044|0);
   $50 = (($49) + (($48*20)|0)|0);
   $51 = ((($50)) + 4|0);
   $52 = ((($51)) + 2|0);
   $53 = HEAP16[$52>>1]|0;
   $54 = $53 << 16 >> 16;
   $55 = (($44) + ($54))|0;
   $xObj = $55;
   $56 = $xObj;
   $57 = $var1E;
   $58 = $57 << 16 >> 16;
   $59 = ($56|0)>=($58|0);
   if ($59) {
    $60 = $so;
    $61 = ((($60)) + 8|0);
    $62 = HEAP16[$61>>1]|0;
    $63 = $62 << 16 >> 16;
    $64 = $var20;
    $65 = $64 << 16 >> 16;
    $66 = ($63|0)<=($65|0);
    if ($66) {
     $67 = $so;
     $68 = ((($67)) + 10|0);
     $69 = HEAP16[$68>>1]|0;
     $70 = $69 << 16 >> 16;
     $71 = $so;
     $72 = ((($71)) + 20|0);
     $73 = HEAP16[$72>>1]|0;
     $74 = $73 << 16 >> 16;
     $75 = ((($2)) + 19044|0);
     $76 = (($75) + (($74*20)|0)|0);
     $77 = ((($76)) + 4|0);
     $78 = ((($77)) + 4|0);
     $79 = HEAP16[$78>>1]|0;
     $80 = $79 << 16 >> 16;
     $81 = (($70) + ($80))|0;
     $yObj = $81;
     $82 = $yObj;
     $83 = $var22;
     $84 = $83 << 16 >> 16;
     $85 = ($82|0)>=($84|0);
     if ($85) {
      $86 = $so;
      $87 = ((($86)) + 10|0);
      $88 = HEAP16[$87>>1]|0;
      $89 = $88 << 16 >> 16;
      $90 = $var24;
      $91 = $90 << 16 >> 16;
      $92 = ($89|0)<=($91|0);
      if ($92) {
       $93 = $ret;
       $94 = $93&1;
       $$expand_i1_val = $94&1;
       HEAP8[$0>>0] = $$expand_i1_val;
       $$pre_trunc = HEAP8[$0>>0]|0;
       $97 = $$pre_trunc&1;
       STACKTOP = sp;return ($97|0);
      }
     }
    }
   }
  }
  $ret = 0;
 }
 $95 = $ret;
 $96 = $95&1;
 $$expand_i1_val2 = $96&1;
 HEAP8[$0>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $97 = $$pre_trunc&1;
 STACKTOP = sp;return ($97|0);
}
function __ZN4Game31cop_testPrevObjectTransformXPosEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $index = 0, $ret = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(4,25182,$vararg_buffer);
 $ret = 1;
 $2 = ((($1)) + 3152|0);
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 3152|0);
 $6 = ((($5)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 3152|0);
 $9 = ((($8)) + 16|0);
 $10 = (__ZN4Game16findObjectByNameEiiPb($1,$4,$7,$9)|0);
 $index = $10;
 $11 = $index;
 $12 = ($11|0)==(-1);
 if ($12) {
  $ret = 0;
 }
 $13 = $ret;
 $14 = $13&1;
 if ($14) {
  $15 = $index;
  $16 = (__ZN4Game16derefSceneObjectEi($1,$15)|0);
  $17 = ((($16)) + 42|0);
  $18 = HEAP16[$17>>1]|0;
  $19 = $18 << 16 >> 16;
  $20 = ($19|0)!=(0);
  if ($20) {
   $21 = $index;
   $22 = (__ZN4Game30comparePrevObjectTransformXPosEibi($1,$21,1,-1)|0);
   if ($22) {
    $27 = $ret;
    $28 = $27&1;
    STACKTOP = sp;return ($28|0);
   }
   $ret = 0;
   $27 = $ret;
   $28 = $27&1;
   STACKTOP = sp;return ($28|0);
  }
 }
 $23 = ((($1)) + 3152|0);
 $24 = ((($23)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) + 14)|0;
 HEAP32[$24>>2] = $26;
 $27 = $ret;
 $28 = $27&1;
 STACKTOP = sp;return ($28|0);
}
function __ZN4Game27cop_testObjectTransformXPosEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $index = 0, $ret = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(4,25220,$vararg_buffer);
 $ret = 1;
 $2 = ((($1)) + 3152|0);
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 3152|0);
 $6 = ((($5)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 3152|0);
 $9 = ((($8)) + 16|0);
 $10 = (__ZN4Game16findObjectByNameEiiPb($1,$4,$7,$9)|0);
 $index = $10;
 $11 = $index;
 $12 = ($11|0)==(-1);
 if ($12) {
  $ret = 0;
 }
 $13 = $ret;
 $14 = $13&1;
 if ($14) {
  $15 = $index;
  $16 = (__ZN4Game16derefSceneObjectEi($1,$15)|0);
  $17 = ((($16)) + 44|0);
  $18 = HEAP16[$17>>1]|0;
  $19 = $18 << 16 >> 16;
  $20 = ($19|0)!=(0);
  if ($20) {
   $21 = $index;
   $22 = (__ZN4Game26compareObjectTransformXPosEibi($1,$21,1,-1)|0);
   if ($22) {
    $27 = $ret;
    $28 = $27&1;
    STACKTOP = sp;return ($28|0);
   }
   $ret = 0;
   $27 = $ret;
   $28 = $27&1;
   STACKTOP = sp;return ($28|0);
  }
 }
 $23 = ((($1)) + 3152|0);
 $24 = ((($23)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) + 14)|0;
 HEAP32[$24>>2] = $26;
 $27 = $ret;
 $28 = $27&1;
 STACKTOP = sp;return ($28|0);
}
function __ZN4Game31cop_testPrevObjectTransformYPosEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $index = 0, $ret = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(4,25254,$vararg_buffer);
 $ret = 1;
 $2 = ((($1)) + 3152|0);
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 3152|0);
 $6 = ((($5)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 3152|0);
 $9 = ((($8)) + 16|0);
 $10 = (__ZN4Game16findObjectByNameEiiPb($1,$4,$7,$9)|0);
 $index = $10;
 $11 = $index;
 $12 = ($11|0)==(-1);
 if ($12) {
  $ret = 0;
 }
 $13 = $ret;
 $14 = $13&1;
 if ($14) {
  $15 = $index;
  $16 = (__ZN4Game16derefSceneObjectEi($1,$15)|0);
  $17 = ((($16)) + 42|0);
  $18 = HEAP16[$17>>1]|0;
  $19 = $18 << 16 >> 16;
  $20 = ($19|0)!=(0);
  if ($20) {
   $21 = $index;
   $22 = (__ZN4Game30comparePrevObjectTransformYPosEibi($1,$21,1,-1)|0);
   if ($22) {
    $27 = $ret;
    $28 = $27&1;
    STACKTOP = sp;return ($28|0);
   }
   $ret = 0;
   $27 = $ret;
   $28 = $27&1;
   STACKTOP = sp;return ($28|0);
  }
 }
 $23 = ((($1)) + 3152|0);
 $24 = ((($23)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) + 14)|0;
 HEAP32[$24>>2] = $26;
 $27 = $ret;
 $28 = $27&1;
 STACKTOP = sp;return ($28|0);
}
function __ZN4Game27cop_testObjectTransformYPosEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $index = 0, $ret = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(4,25292,$vararg_buffer);
 $ret = 1;
 $2 = ((($1)) + 3152|0);
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 3152|0);
 $6 = ((($5)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 3152|0);
 $9 = ((($8)) + 16|0);
 $10 = (__ZN4Game16findObjectByNameEiiPb($1,$4,$7,$9)|0);
 $index = $10;
 $11 = $index;
 $12 = ($11|0)==(-1);
 if ($12) {
  $ret = 0;
 }
 $13 = $ret;
 $14 = $13&1;
 if ($14) {
  $15 = $index;
  $16 = (__ZN4Game16derefSceneObjectEi($1,$15)|0);
  $17 = ((($16)) + 44|0);
  $18 = HEAP16[$17>>1]|0;
  $19 = $18 << 16 >> 16;
  $20 = ($19|0)!=(0);
  if ($20) {
   $21 = $index;
   $22 = (__ZN4Game26compareObjectTransformYPosEibi($1,$21,1,-1)|0);
   if ($22) {
    $27 = $ret;
    $28 = $27&1;
    STACKTOP = sp;return ($28|0);
   }
   $ret = 0;
   $27 = $ret;
   $28 = $27&1;
   STACKTOP = sp;return ($28|0);
  }
 }
 $23 = ((($1)) + 3152|0);
 $24 = ((($23)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) + 14)|0;
 HEAP32[$24>>2] = $26;
 $27 = $ret;
 $28 = $27&1;
 STACKTOP = sp;return ($28|0);
}
function __ZN4Game22cop_testObjectPrevFlipEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flip = 0, $index = 0, $ret = 0, $so = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(4,25326,$vararg_buffer);
 $ret = 1;
 $2 = ((($1)) + 3152|0);
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 3152|0);
 $6 = ((($5)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 3152|0);
 $9 = ((($8)) + 16|0);
 $10 = (__ZN4Game16findObjectByNameEiiPb($1,$4,$7,$9)|0);
 $index = $10;
 $11 = $index;
 $12 = ($11|0)==(-1);
 if ($12) {
  $ret = 0;
 }
 $13 = $ret;
 $14 = $13&1;
 if (!($14)) {
  $26 = ((($1)) + 3152|0);
  $27 = ((($26)) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + 2)|0;
  HEAP32[$27>>2] = $29;
  $30 = $ret;
  $31 = $30&1;
  STACKTOP = sp;return ($31|0);
 }
 $15 = $index;
 $16 = (__ZN4Game16derefSceneObjectEi($1,$15)|0);
 $so = $16;
 $17 = ((($1)) + 3152|0);
 $18 = (__ZN6Script13fetchNextWordEv($17)|0);
 $flip = $18;
 $19 = $flip;
 $20 = $19 << 16 >> 16;
 $21 = $so;
 $22 = ((($21)) + 26|0);
 $23 = HEAP16[$22>>1]|0;
 $24 = $23 << 16 >> 16;
 $25 = ($20|0)!=($24|0);
 if (!($25)) {
  $30 = $ret;
  $31 = $30&1;
  STACKTOP = sp;return ($31|0);
 }
 $ret = 0;
 $30 = $ret;
 $31 = $30&1;
 STACKTOP = sp;return ($31|0);
}
function __ZN4Game18cop_testObjectFlipEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flip = 0, $index = 0, $ret = 0, $so = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(4,25355,$vararg_buffer);
 $ret = 1;
 $2 = ((($1)) + 3152|0);
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 3152|0);
 $6 = ((($5)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 3152|0);
 $9 = ((($8)) + 16|0);
 $10 = (__ZN4Game16findObjectByNameEiiPb($1,$4,$7,$9)|0);
 $index = $10;
 $11 = $index;
 $12 = ($11|0)==(-1);
 if ($12) {
  $ret = 0;
 }
 $13 = $ret;
 $14 = $13&1;
 if (!($14)) {
  $26 = ((($1)) + 3152|0);
  $27 = ((($26)) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + 2)|0;
  HEAP32[$27>>2] = $29;
  $30 = $ret;
  $31 = $30&1;
  STACKTOP = sp;return ($31|0);
 }
 $15 = $index;
 $16 = (__ZN4Game16derefSceneObjectEi($1,$15)|0);
 $so = $16;
 $17 = ((($1)) + 3152|0);
 $18 = (__ZN6Script13fetchNextWordEv($17)|0);
 $flip = $18;
 $19 = $flip;
 $20 = $19 << 16 >> 16;
 $21 = $so;
 $22 = ((($21)) + 24|0);
 $23 = HEAP16[$22>>1]|0;
 $24 = $23 << 16 >> 16;
 $25 = ($20|0)!=($24|0);
 if (!($25)) {
  $30 = $ret;
  $31 = $30&1;
  STACKTOP = sp;return ($31|0);
 }
 $ret = 0;
 $30 = $ret;
 $31 = $30&1;
 STACKTOP = sp;return ($31|0);
}
function __ZN4Game26cop_testObjectPrevFrameNumEv($this) {
 $this = $this|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $index = 0, $ret = 0, $so = 0, $val = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 19|0;
 $1 = $this;
 $2 = $1;
 __Z5debugtPKcz(4,25380,$vararg_buffer);
 $ret = 1;
 $3 = ((($2)) + 3152|0);
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($2)) + 3152|0);
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($2)) + 3152|0);
 $10 = ((($9)) + 16|0);
 $11 = (__ZN4Game16findObjectByNameEiiPb($2,$5,$8,$10)|0);
 $index = $11;
 $12 = $index;
 $13 = ($12|0)==(-1);
 if ($13) {
  $ret = 0;
 }
 $14 = $ret;
 $15 = $14&1;
 if ($15) {
  $16 = $index;
  $17 = (__ZN4Game16derefSceneObjectEi($2,$16)|0);
  $so = $17;
  $18 = $so;
  $19 = ((($18)) + 42|0);
  $20 = HEAP16[$19>>1]|0;
  $21 = $20 << 16 >> 16;
  $22 = ($21|0)!=(0);
  if ($22) {
   $23 = $so;
   $24 = ((($23)) + 20|0);
   $25 = HEAP16[$24>>1]|0;
   $26 = $25 << 16 >> 16;
   $27 = $so;
   $28 = ((($27)) + 32|0);
   $29 = HEAP16[$28>>1]|0;
   $30 = $29 << 16 >> 16;
   $31 = ((($2)) + 79612|0);
   $32 = (($31) + (($30*6)|0)|0);
   $33 = HEAP16[$32>>1]|0;
   $34 = $33 << 16 >> 16;
   $35 = (($26) - ($34))|0;
   $36 = (($35) + 1)|0;
   $37 = $36&65535;
   $val = $37;
   $38 = $val;
   $39 = (__ZN4Game8testExprEs($2,$38)|0);
   if ($39) {
    $$expand_i1_val = 1;
    HEAP8[$0>>0] = $$expand_i1_val;
    $$pre_trunc = HEAP8[$0>>0]|0;
    $42 = $$pre_trunc&1;
    STACKTOP = sp;return ($42|0);
   }
  }
  $ret = 0;
 }
 $40 = $ret;
 $41 = $40&1;
 $$expand_i1_val2 = $41&1;
 HEAP8[$0>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $42 = $$pre_trunc&1;
 STACKTOP = sp;return ($42|0);
}
function __ZN4Game22cop_testObjectFrameNumEv($this) {
 $this = $this|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $index = 0, $ret = 0, $so = 0, $val = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 19|0;
 $1 = $this;
 $2 = $1;
 __Z5debugtPKcz(4,25413,$vararg_buffer);
 $ret = 1;
 $3 = ((($2)) + 3152|0);
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($2)) + 3152|0);
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($2)) + 3152|0);
 $10 = ((($9)) + 16|0);
 $11 = (__ZN4Game16findObjectByNameEiiPb($2,$5,$8,$10)|0);
 $index = $11;
 $12 = $index;
 $13 = ($12|0)==(-1);
 if ($13) {
  $ret = 0;
 }
 $14 = $ret;
 $15 = $14&1;
 if ($15) {
  $16 = $index;
  $17 = (__ZN4Game16derefSceneObjectEi($2,$16)|0);
  $so = $17;
  $18 = $so;
  $19 = ((($18)) + 42|0);
  $20 = HEAP16[$19>>1]|0;
  $21 = $20 << 16 >> 16;
  $22 = ($21|0)!=(0);
  if ($22) {
   $23 = $so;
   $24 = ((($23)) + 18|0);
   $25 = HEAP16[$24>>1]|0;
   $26 = $25 << 16 >> 16;
   $27 = $so;
   $28 = ((($27)) + 34|0);
   $29 = HEAP16[$28>>1]|0;
   $30 = $29 << 16 >> 16;
   $31 = ((($2)) + 79612|0);
   $32 = (($31) + (($30*6)|0)|0);
   $33 = HEAP16[$32>>1]|0;
   $34 = $33 << 16 >> 16;
   $35 = (($26) - ($34))|0;
   $36 = (($35) + 1)|0;
   $37 = $36&65535;
   $val = $37;
   $38 = $val;
   $39 = (__ZN4Game8testExprEs($2,$38)|0);
   if ($39) {
    $$expand_i1_val = 1;
    HEAP8[$0>>0] = $$expand_i1_val;
    $$pre_trunc = HEAP8[$0>>0]|0;
    $42 = $$pre_trunc&1;
    STACKTOP = sp;return ($42|0);
   }
  }
  $ret = 0;
 }
 $40 = $ret;
 $41 = $40&1;
 $$expand_i1_val2 = $41&1;
 HEAP8[$0>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $42 = $$pre_trunc&1;
 STACKTOP = sp;return ($42|0);
}
function __ZN4Game21cop_testPrevMotionNumEv($this) {
 $this = $this|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $_ax = 0, $_dx = 0, $index = 0, $ret = 0, $so = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 21|0;
 $1 = $this;
 $2 = $1;
 __Z5debugtPKcz(4,25442,$vararg_buffer);
 $ret = 1;
 $3 = ((($2)) + 3152|0);
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($2)) + 3152|0);
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($2)) + 3152|0);
 $10 = ((($9)) + 16|0);
 $11 = (__ZN4Game16findObjectByNameEiiPb($2,$5,$8,$10)|0);
 $index = $11;
 $12 = $index;
 $13 = ($12|0)==(-1);
 if ($13) {
  $ret = 0;
 }
 $14 = $ret;
 $15 = $14&1;
 if ($15) {
  $16 = $index;
  $17 = (__ZN4Game16derefSceneObjectEi($2,$16)|0);
  $so = $17;
  $18 = $so;
  $19 = ((($18)) + 42|0);
  $20 = HEAP16[$19>>1]|0;
  $21 = $20 << 16 >> 16;
  $22 = ($21|0)!=(0);
  if ($22) {
   $23 = $so;
   $24 = ((($23)) + 32|0);
   $25 = HEAP16[$24>>1]|0;
   $26 = $25 << 16 >> 16;
   $27 = $so;
   $28 = ((($27)) + 32|0);
   $29 = HEAP16[$28>>1]|0;
   $30 = $29 << 16 >> 16;
   $31 = ((($2)) + 79612|0);
   $32 = (($31) + (($30*6)|0)|0);
   $33 = ((($32)) + 4|0);
   $34 = HEAP16[$33>>1]|0;
   $35 = $34 << 16 >> 16;
   $36 = ((($2)) + 10556|0);
   $37 = (($36) + (($35*40)|0)|0);
   $38 = ((($37)) + 20|0);
   $39 = HEAP16[$38>>1]|0;
   $40 = $39 << 16 >> 16;
   $41 = (($26) - ($40))|0;
   $42 = $41&65535;
   $_dx = $42;
   $_ax = 0;
   $43 = ((($2)) + 3152|0);
   $44 = ((($43)) + 16|0);
   $45 = HEAP8[$44>>0]|0;
   $46 = $45&1;
   if ($46) {
    $47 = $so;
    $48 = ((($47)) + 32|0);
    $49 = HEAP16[$48>>1]|0;
    $50 = $49 << 16 >> 16;
    $51 = ((($2)) + 79612|0);
    $52 = (($51) + (($50*6)|0)|0);
    $53 = ((($52)) + 4|0);
    $54 = HEAP16[$53>>1]|0;
    $55 = $54 << 16 >> 16;
    $56 = $so;
    $57 = ((($56)) + 30|0);
    $58 = HEAP16[$57>>1]|0;
    $59 = $58 << 16 >> 16;
    $60 = ((($2)) + 79612|0);
    $61 = (($60) + (($59*6)|0)|0);
    $62 = ((($61)) + 4|0);
    $63 = HEAP16[$62>>1]|0;
    $64 = $63 << 16 >> 16;
    $65 = ($55|0)!=($64|0);
    if ($65) {
     $66 = $so;
     $67 = ((($66)) + 32|0);
     $68 = HEAP16[$67>>1]|0;
     $69 = $68 << 16 >> 16;
     $70 = ((($2)) + 79612|0);
     $71 = (($70) + (($69*6)|0)|0);
     $72 = ((($71)) + 4|0);
     $73 = HEAP16[$72>>1]|0;
     $74 = $73 << 16 >> 16;
     $75 = ((($2)) + 10556|0);
     $76 = (($75) + (($74*40)|0)|0);
     $77 = ((($76)) + 38|0);
     $78 = HEAP16[$77>>1]|0;
     $_ax = $78;
    }
   }
   $79 = $_ax;
   $80 = $79 << 16 >> 16;
   $81 = $_dx;
   $82 = $81 << 16 >> 16;
   $83 = (($80) + ($82))|0;
   $84 = (($83) + 1)|0;
   $85 = $84&65535;
   $86 = (__ZN4Game8testExprEs($2,$85)|0);
   if ($86) {
    $$expand_i1_val = 1;
    HEAP8[$0>>0] = $$expand_i1_val;
    $$pre_trunc = HEAP8[$0>>0]|0;
    $89 = $$pre_trunc&1;
    STACKTOP = sp;return ($89|0);
   }
  }
  $ret = 0;
 }
 $87 = $ret;
 $88 = $87&1;
 $$expand_i1_val2 = $88&1;
 HEAP8[$0>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $89 = $$pre_trunc&1;
 STACKTOP = sp;return ($89|0);
}
function __ZN4Game17cop_testMotionNumEv($this) {
 $this = $this|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $_ax = 0, $_dx = 0, $index = 0, $ret = 0, $so = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 21|0;
 $1 = $this;
 $2 = $1;
 __Z5debugtPKcz(4,25470,$vararg_buffer);
 $ret = 1;
 $3 = ((($2)) + 3152|0);
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($2)) + 3152|0);
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($2)) + 3152|0);
 $10 = ((($9)) + 16|0);
 $11 = (__ZN4Game16findObjectByNameEiiPb($2,$5,$8,$10)|0);
 $index = $11;
 $12 = $index;
 $13 = ($12|0)==(-1);
 if ($13) {
  $ret = 0;
 }
 $14 = $ret;
 $15 = $14&1;
 if ($15) {
  $16 = $index;
  $17 = (__ZN4Game16derefSceneObjectEi($2,$16)|0);
  $so = $17;
  $18 = $so;
  $19 = ((($18)) + 42|0);
  $20 = HEAP16[$19>>1]|0;
  $21 = $20 << 16 >> 16;
  $22 = ($21|0)!=(0);
  if ($22) {
   $23 = $so;
   $24 = ((($23)) + 34|0);
   $25 = HEAP16[$24>>1]|0;
   $26 = $25 << 16 >> 16;
   $27 = $so;
   $28 = ((($27)) + 32|0);
   $29 = HEAP16[$28>>1]|0;
   $30 = $29 << 16 >> 16;
   $31 = ((($2)) + 79612|0);
   $32 = (($31) + (($30*6)|0)|0);
   $33 = ((($32)) + 4|0);
   $34 = HEAP16[$33>>1]|0;
   $35 = $34 << 16 >> 16;
   $36 = ((($2)) + 10556|0);
   $37 = (($36) + (($35*40)|0)|0);
   $38 = ((($37)) + 20|0);
   $39 = HEAP16[$38>>1]|0;
   $40 = $39 << 16 >> 16;
   $41 = (($26) - ($40))|0;
   $42 = $41&65535;
   $_dx = $42;
   $_ax = 0;
   $43 = ((($2)) + 3152|0);
   $44 = ((($43)) + 16|0);
   $45 = HEAP8[$44>>0]|0;
   $46 = $45&1;
   if ($46) {
    $47 = $so;
    $48 = ((($47)) + 32|0);
    $49 = HEAP16[$48>>1]|0;
    $50 = $49 << 16 >> 16;
    $51 = ((($2)) + 79612|0);
    $52 = (($51) + (($50*6)|0)|0);
    $53 = ((($52)) + 4|0);
    $54 = HEAP16[$53>>1]|0;
    $55 = $54 << 16 >> 16;
    $56 = $so;
    $57 = ((($56)) + 30|0);
    $58 = HEAP16[$57>>1]|0;
    $59 = $58 << 16 >> 16;
    $60 = ((($2)) + 79612|0);
    $61 = (($60) + (($59*6)|0)|0);
    $62 = ((($61)) + 4|0);
    $63 = HEAP16[$62>>1]|0;
    $64 = $63 << 16 >> 16;
    $65 = ($55|0)!=($64|0);
    if ($65) {
     $66 = $so;
     $67 = ((($66)) + 32|0);
     $68 = HEAP16[$67>>1]|0;
     $69 = $68 << 16 >> 16;
     $70 = ((($2)) + 79612|0);
     $71 = (($70) + (($69*6)|0)|0);
     $72 = ((($71)) + 4|0);
     $73 = HEAP16[$72>>1]|0;
     $74 = $73 << 16 >> 16;
     $75 = ((($2)) + 10556|0);
     $76 = (($75) + (($74*40)|0)|0);
     $77 = ((($76)) + 38|0);
     $78 = HEAP16[$77>>1]|0;
     $_ax = $78;
    }
   }
   $79 = $_ax;
   $80 = $79 << 16 >> 16;
   $81 = $_dx;
   $82 = $81 << 16 >> 16;
   $83 = (($80) + ($82))|0;
   $84 = (($83) + 1)|0;
   $85 = $84&65535;
   $86 = (__ZN4Game8testExprEs($2,$85)|0);
   if ($86) {
    $$expand_i1_val = 1;
    HEAP8[$0>>0] = $$expand_i1_val;
    $$pre_trunc = HEAP8[$0>>0]|0;
    $89 = $$pre_trunc&1;
    STACKTOP = sp;return ($89|0);
   }
  }
  $ret = 0;
 }
 $87 = $ret;
 $88 = $87&1;
 $$expand_i1_val2 = $88&1;
 HEAP8[$0>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $89 = $$pre_trunc&1;
 STACKTOP = sp;return ($89|0);
}
function __ZN4Game17cop_testObjectVarEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $index = 0, $or$cond = 0, $ret = 0, $so = 0, $var = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(4,25494,$vararg_buffer);
 $ret = 1;
 $2 = ((($1)) + 3152|0);
 $3 = (__ZN6Script13fetchNextWordEv($2)|0);
 $4 = $3 << 16 >> 16;
 $var = $4;
 $5 = ((($1)) + 3152|0);
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 3152|0);
 $9 = ((($8)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($1)) + 3152|0);
 $12 = ((($11)) + 16|0);
 $13 = (__ZN4Game16findObjectByNameEiiPb($1,$7,$10,$12)|0);
 $index = $13;
 $14 = $index;
 $15 = ($14|0)==(-1);
 if ($15) {
  $ret = 0;
 }
 $16 = $ret;
 $17 = $16&1;
 if (!($17)) {
  $30 = $ret;
  $31 = $30&1;
  STACKTOP = sp;return ($31|0);
 }
 $18 = $index;
 $19 = (__ZN4Game16derefSceneObjectEi($1,$18)|0);
 $so = $19;
 $20 = $var;
 $21 = ($20|0)>=(0);
 $22 = $var;
 $23 = ($22|0)<(10);
 $or$cond = $21 & $23;
 if (!($or$cond)) {
  ___assert_fail((29399|0),(25136|0),450,(25520|0));
  // unreachable;
 }
 $24 = $var;
 $25 = $so;
 $26 = ((($25)) + 86|0);
 $27 = (($26) + ($24<<1)|0);
 $28 = HEAP16[$27>>1]|0;
 $29 = (__ZN4Game8testExprEs($1,$28)|0);
 if ($29) {
  $30 = $ret;
  $31 = $30&1;
  STACKTOP = sp;return ($31|0);
 }
 $ret = 0;
 $30 = $ret;
 $31 = $30&1;
 STACKTOP = sp;return ($31|0);
}
function __ZN4Game27cop_testObjectAndObjectXPosEv($this) {
 $this = $this|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $_ax = 0, $_dx = 0, $index = 0, $so = 0, $var18 = 0;
 var $var1E = 0, $var20 = 0, $var22 = 0, $var24 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 32|0;
 $1 = $this;
 $2 = $1;
 __Z5debugtPKcz(4,25538,$vararg_buffer);
 $3 = ((($2)) + 3152|0);
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($2)) + 3152|0);
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($2)) + 3152|0);
 $10 = ((($9)) + 16|0);
 $11 = (__ZN4Game16findObjectByNameEiiPb($2,$5,$8,$10)|0);
 $index = $11;
 $12 = $index;
 $13 = ($12|0)!=(-1);
 if ($13) {
  $14 = $index;
  $15 = (__ZN4Game16derefSceneObjectEi($2,$14)|0);
  $so = $15;
  $16 = $so;
  $17 = ((($16)) + 42|0);
  $18 = HEAP16[$17>>1]|0;
  $19 = $18 << 16 >> 16;
  $20 = ($19|0)!=(0);
  if ($20) {
   $21 = $index;
   $22 = (__ZN4Game22getObjectTransformXPosEi($2,$21)|0);
   $var1E = $22;
   $23 = $index;
   $24 = (__ZN4Game22getObjectTransformXPosEi($2,$23)|0);
   $var20 = $24;
   $25 = ((($2)) + 3152|0);
   $26 = ((($25)) + 12|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ((($2)) + 3152|0);
   $29 = ((($28)) + 20|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ((($2)) + 3152|0);
   $32 = ((($31)) + 16|0);
   $33 = (__ZN4Game16findObjectByNameEiiPb($2,$27,$30,$32)|0);
   $var18 = $33;
   $34 = $var18;
   $35 = ($34|0)!=(-1);
   if ($35) {
    $36 = $var18;
    $37 = (__ZN4Game16derefSceneObjectEi($2,$36)|0);
    $so = $37;
    $38 = $so;
    $39 = ((($38)) + 42|0);
    $40 = HEAP16[$39>>1]|0;
    $41 = $40 << 16 >> 16;
    $42 = ($41|0)==(0);
    if ($42) {
     $$expand_i1_val = 0;
     HEAP8[$0>>0] = $$expand_i1_val;
     $$pre_trunc = HEAP8[$0>>0]|0;
     $69 = $$pre_trunc&1;
     STACKTOP = sp;return ($69|0);
    }
    $43 = $var18;
    $44 = (__ZN4Game22getObjectTransformXPosEi($2,$43)|0);
    $var22 = $44;
    $45 = $var18;
    $46 = (__ZN4Game22getObjectTransformXPosEi($2,$45)|0);
    $var24 = $46;
    $47 = $var1E;
    $48 = $var20;
    $49 = (__Z3MINIsET_S0_S0_($47,$48)|0);
    $_dx = $49;
    $50 = $var22;
    $51 = $var24;
    $52 = (__Z3MAXIsET_S0_S0_($50,$51)|0);
    $_ax = $52;
    $53 = $_dx;
    $54 = $53 << 16 >> 16;
    $55 = $_ax;
    $56 = $55 << 16 >> 16;
    $57 = ($54|0)<=($56|0);
    if ($57) {
     $58 = $var1E;
     $59 = $var20;
     $60 = (__Z3MAXIsET_S0_S0_($58,$59)|0);
     $_dx = $60;
     $61 = $var22;
     $62 = $var24;
     $63 = (__Z3MINIsET_S0_S0_($61,$62)|0);
     $_ax = $63;
     $64 = $_dx;
     $65 = $64 << 16 >> 16;
     $66 = $_ax;
     $67 = $66 << 16 >> 16;
     $68 = ($65|0)>=($67|0);
     if ($68) {
      $$expand_i1_val2 = 1;
      HEAP8[$0>>0] = $$expand_i1_val2;
      $$pre_trunc = HEAP8[$0>>0]|0;
      $69 = $$pre_trunc&1;
      STACKTOP = sp;return ($69|0);
     }
    }
   }
   $$expand_i1_val4 = 0;
   HEAP8[$0>>0] = $$expand_i1_val4;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $69 = $$pre_trunc&1;
   STACKTOP = sp;return ($69|0);
  }
 }
 $$expand_i1_val6 = 0;
 HEAP8[$0>>0] = $$expand_i1_val6;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $69 = $$pre_trunc&1;
 STACKTOP = sp;return ($69|0);
}
function __ZN4Game27cop_testObjectAndObjectYPosEv($this) {
 $this = $this|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $_ax = 0, $_dx = 0, $index = 0, $so = 0, $var18 = 0;
 var $var1E = 0, $var20 = 0, $var22 = 0, $var24 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 32|0;
 $1 = $this;
 $2 = $1;
 __Z5debugtPKcz(4,25574,$vararg_buffer);
 $3 = ((($2)) + 3152|0);
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($2)) + 3152|0);
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($2)) + 3152|0);
 $10 = ((($9)) + 16|0);
 $11 = (__ZN4Game16findObjectByNameEiiPb($2,$5,$8,$10)|0);
 $index = $11;
 $12 = $index;
 $13 = ($12|0)!=(-1);
 if ($13) {
  $14 = $index;
  $15 = (__ZN4Game16derefSceneObjectEi($2,$14)|0);
  $so = $15;
  $16 = $so;
  $17 = ((($16)) + 42|0);
  $18 = HEAP16[$17>>1]|0;
  $19 = $18 << 16 >> 16;
  $20 = ($19|0)!=(0);
  if ($20) {
   $21 = $index;
   $22 = (__ZN4Game22getObjectTransformYPosEi($2,$21)|0);
   $var22 = $22;
   $23 = $index;
   $24 = (__ZN4Game22getObjectTransformYPosEi($2,$23)|0);
   $var24 = $24;
   $25 = ((($2)) + 3152|0);
   $26 = ((($25)) + 12|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ((($2)) + 3152|0);
   $29 = ((($28)) + 20|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ((($2)) + 3152|0);
   $32 = ((($31)) + 16|0);
   $33 = (__ZN4Game16findObjectByNameEiiPb($2,$27,$30,$32)|0);
   $var18 = $33;
   $34 = $var18;
   $35 = ($34|0)!=(-1);
   if ($35) {
    $36 = $var18;
    $37 = (__ZN4Game16derefSceneObjectEi($2,$36)|0);
    $so = $37;
    $38 = $so;
    $39 = ((($38)) + 42|0);
    $40 = HEAP16[$39>>1]|0;
    $41 = $40 << 16 >> 16;
    $42 = ($41|0)==(0);
    if ($42) {
     $$expand_i1_val = 0;
     HEAP8[$0>>0] = $$expand_i1_val;
     $$pre_trunc = HEAP8[$0>>0]|0;
     $69 = $$pre_trunc&1;
     STACKTOP = sp;return ($69|0);
    }
    $43 = $var18;
    $44 = (__ZN4Game22getObjectTransformYPosEi($2,$43)|0);
    $var1E = $44;
    $45 = $var18;
    $46 = (__ZN4Game22getObjectTransformYPosEi($2,$45)|0);
    $var20 = $46;
    $47 = $var22;
    $48 = $var24;
    $49 = (__Z3MINIsET_S0_S0_($47,$48)|0);
    $_dx = $49;
    $50 = $var1E;
    $51 = $var20;
    $52 = (__Z3MAXIsET_S0_S0_($50,$51)|0);
    $_ax = $52;
    $53 = $_dx;
    $54 = $53 << 16 >> 16;
    $55 = $_ax;
    $56 = $55 << 16 >> 16;
    $57 = ($54|0)<=($56|0);
    if ($57) {
     $58 = $var22;
     $59 = $var24;
     $60 = (__Z3MAXIsET_S0_S0_($58,$59)|0);
     $_dx = $60;
     $61 = $var1E;
     $62 = $var20;
     $63 = (__Z3MINIsET_S0_S0_($61,$62)|0);
     $_ax = $63;
     $64 = $_dx;
     $65 = $64 << 16 >> 16;
     $66 = $_ax;
     $67 = $66 << 16 >> 16;
     $68 = ($65|0)>=($67|0);
     if ($68) {
      $$expand_i1_val2 = 1;
      HEAP8[$0>>0] = $$expand_i1_val2;
      $$pre_trunc = HEAP8[$0>>0]|0;
      $69 = $$pre_trunc&1;
      STACKTOP = sp;return ($69|0);
     }
    }
   }
   $$expand_i1_val4 = 0;
   HEAP8[$0>>0] = $$expand_i1_val4;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $69 = $$pre_trunc&1;
   STACKTOP = sp;return ($69|0);
  }
 }
 $$expand_i1_val6 = 0;
 HEAP8[$0>>0] = $$expand_i1_val6;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $69 = $$pre_trunc&1;
 STACKTOP = sp;return ($69|0);
}
function __ZN4Game24cop_testObjectMotionYPosEv($this) {
 $this = $this|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $_ax = 0, $cmp = 0, $div = 0, $index = 0, $num = 0, $so = 0, $var1A = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 30|0;
 $1 = $this;
 $2 = $1;
 __Z5debugtPKcz(4,25610,$vararg_buffer);
 $3 = ((($2)) + 3152|0);
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($2)) + 3152|0);
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($2)) + 3152|0);
 $10 = ((($9)) + 16|0);
 $11 = (__ZN4Game16findObjectByNameEiiPb($2,$5,$8,$10)|0);
 $index = $11;
 $12 = $index;
 $13 = ($12|0)!=(-1);
 if ($13) {
  $14 = $index;
  $15 = (__ZN4Game16derefSceneObjectEi($2,$14)|0);
  $so = $15;
  $16 = $so;
  $17 = ((($16)) + 28|0);
  $18 = HEAP16[$17>>1]|0;
  $19 = $18 << 16 >> 16;
  $20 = $so;
  $21 = ((($20)) + 30|0);
  $22 = HEAP16[$21>>1]|0;
  $23 = $22 << 16 >> 16;
  $24 = (($19) + ($23))|0;
  $num = $24;
  $25 = $num;
  $26 = ((($2)) + 79612|0);
  $27 = (($26) + (($25*6)|0)|0);
  $28 = HEAP16[$27>>1]|0;
  $29 = $28 << 16 >> 16;
  $30 = $so;
  $31 = ((($30)) + 36|0);
  $32 = HEAP16[$31>>1]|0;
  $33 = $32 << 16 >> 16;
  $34 = (($29) + ($33))|0;
  $35 = $34&65535;
  $var1A = $35;
  $36 = $so;
  $37 = ((($36)) + 10|0);
  $38 = HEAP16[$37>>1]|0;
  $39 = $38 << 16 >> 16;
  $40 = $so;
  $41 = ((($40)) + 2|0);
  $42 = HEAP16[$41>>1]|0;
  $43 = $42 << 16 >> 16;
  $44 = (($39) - ($43))|0;
  $_ax = $44;
  $45 = $so;
  $46 = ((($45)) + 20|0);
  $47 = HEAP16[$46>>1]|0;
  $48 = $47 << 16 >> 16;
  $49 = ((($2)) + 19044|0);
  $50 = (($49) + (($48*20)|0)|0);
  $51 = ((($50)) + 4|0);
  $52 = ((($51)) + 8|0);
  $53 = HEAP16[$52>>1]|0;
  $54 = $53 << 16 >> 16;
  $55 = $_ax;
  $56 = (($55) - ($54))|0;
  $_ax = $56;
  $57 = $var1A;
  $58 = $57 << 16 >> 16;
  $59 = ((($2)) + 19044|0);
  $60 = (($59) + (($58*20)|0)|0);
  $61 = ((($60)) + 4|0);
  $62 = ((($61)) + 8|0);
  $63 = HEAP16[$62>>1]|0;
  $64 = $63 << 16 >> 16;
  $65 = $_ax;
  $66 = (($65) + ($64))|0;
  $_ax = $66;
  $67 = ((($2)) + 3152|0);
  $68 = (__ZN6Script13fetchNextWordEv($67)|0);
  $div = $68;
  $69 = $_ax;
  $70 = $div;
  $71 = $70 << 16 >> 16;
  $72 = (($69|0) % ($71|0))&-1;
  $73 = $72&65535;
  $var1A = $73;
  $74 = $var1A;
  $75 = $74 << 16 >> 16;
  $76 = ($75|0)<(0);
  if ($76) {
   $77 = $div;
   $78 = $77 << 16 >> 16;
   $79 = $var1A;
   $80 = $79 << 16 >> 16;
   $81 = (($80) + ($78))|0;
   $82 = $81&65535;
   $var1A = $82;
  }
  $83 = ((($2)) + 3152|0);
  $84 = (__ZN6Script13fetchNextWordEv($83)|0);
  $cmp = $84;
  $85 = $var1A;
  $86 = $85 << 16 >> 16;
  $87 = $cmp;
  $88 = $87 << 16 >> 16;
  $89 = ($86|0)==($88|0);
  if ($89) {
   $90 = $so;
   $91 = ((($90)) + 44|0);
   $92 = HEAP16[$91>>1]|0;
   $93 = $92 << 16 >> 16;
   $94 = ($93|0)==(1);
   if ($94) {
    $$expand_i1_val = 1;
    HEAP8[$0>>0] = $$expand_i1_val;
    $$pre_trunc = HEAP8[$0>>0]|0;
    $99 = $$pre_trunc&1;
    STACKTOP = sp;return ($99|0);
   }
  }
 } else {
  $95 = ((($2)) + 3152|0);
  $96 = ((($95)) + 4|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = (($97) + 4)|0;
  HEAP32[$96>>2] = $98;
 }
 $$expand_i1_val2 = 0;
 HEAP8[$0>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $99 = $$pre_trunc&1;
 STACKTOP = sp;return ($99|0);
}
function __ZN4Game11cop_testVarEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ret = 0, $var = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(4,25643,$vararg_buffer);
 $2 = ((($1)) + 3152|0);
 $3 = (__ZN6Script13fetchNextWordEv($2)|0);
 $4 = $3 << 16 >> 16;
 $var = $4;
 $5 = $var;
 $6 = ((($1)) + 3804|0);
 $7 = (($6) + ($5<<1)|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = (__ZN4Game8testExprEs($1,$8)|0);
 $10 = $9&1;
 $ret = $10;
 $11 = $ret;
 $12 = $11&1;
 STACKTOP = sp;return ($12|0);
}
function __ZN4Game22cop_isCurrentBagActionEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $num = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(4,25663,$vararg_buffer);
 $2 = ((($1)) + 3152|0);
 $3 = (__ZN6Script13fetchNextWordEv($2)|0);
 $num = $3;
 $4 = $num;
 $5 = $4 << 16 >> 16;
 $6 = ((($1)) + 4452|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)==($7|0);
 STACKTOP = sp;return ($8|0);
}
function __ZN4Game17cop_isObjectInBoxEv($this) {
 $this = $this|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $box = 0, $box2 = 0, $foundBox = 0, $i = 0, $i1 = 0, $index = 0, $ret = 0, $so = 0, $var1A = 0, $var1E = 0, $var20 = 0, $var22 = 0, $var24 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 44|0;
 $1 = $this;
 $2 = $1;
 __Z5debugtPKcz(4,25694,$vararg_buffer);
 $ret = 1;
 $3 = ((($2)) + 3152|0);
 $4 = (__ZN6Script13fetchNextWordEv($3)|0);
 $var1A = $4;
 $5 = ((($2)) + 3152|0);
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($2)) + 3152|0);
 $9 = ((($8)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($2)) + 3152|0);
 $12 = ((($11)) + 16|0);
 $13 = (__ZN4Game16findObjectByNameEiiPb($2,$7,$10,$12)|0);
 $index = $13;
 $14 = $index;
 $15 = ($14|0)==(-1);
 if ($15) {
  $ret = 0;
 }
 $16 = $ret;
 $17 = $16&1;
 if ($17) {
  $18 = $index;
  $19 = (__ZN4Game16derefSceneObjectEi($2,$18)|0);
  $so = $19;
  $20 = $so;
  $21 = ((($20)) + 42|0);
  $22 = HEAP16[$21>>1]|0;
  $23 = $22 << 16 >> 16;
  $24 = ($23|0)!=(0);
  if ($24) {
   $25 = $index;
   $26 = (__ZN4Game22getObjectTransformXPosEi($2,$25)|0);
   $var1E = $26;
   $27 = $index;
   $28 = (__ZN4Game22getObjectTransformXPosEi($2,$27)|0);
   $var20 = $28;
   $29 = $index;
   $30 = (__ZN4Game22getObjectTransformYPosEi($2,$29)|0);
   $var22 = $30;
   $31 = $index;
   $32 = (__ZN4Game22getObjectTransformYPosEi($2,$31)|0);
   $var24 = $32;
   $foundBox = 0;
   $i = 0;
   while(1) {
    $33 = $i;
    $34 = $var1A;
    $35 = $34 << 16 >> 16;
    $36 = ((($2)) + 18964|0);
    $37 = (($36) + ($35<<2)|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ($33|0)<($38|0);
    if (!($39)) {
     break;
    }
    $40 = $var1A;
    $41 = $40 << 16 >> 16;
    $42 = $i;
    $43 = (__ZN4Game8derefBoxEii($2,$41,$42)|0);
    $box = $43;
    $44 = $box;
    $45 = $var1E;
    $46 = $45 << 16 >> 16;
    $47 = $var20;
    $48 = $47 << 16 >> 16;
    $49 = $var22;
    $50 = $49 << 16 >> 16;
    $51 = $var24;
    $52 = $51 << 16 >> 16;
    $53 = (__ZL9boxInRectP3Boxiiii($44,$46,$48,$50,$52)|0);
    if ($53) {
     $54 = $box;
     $55 = ((($54)) + 8|0);
     $56 = HEAP8[$55>>0]|0;
     $57 = $56&255;
     $58 = ($57|0)==(1);
     if ($58) {
      label = 9;
      break;
     }
    }
    $59 = $i;
    $60 = (($59) + 1)|0;
    $i = $60;
   }
   if ((label|0) == 9) {
    $foundBox = 1;
   }
   $61 = $foundBox;
   $62 = $61&1;
   if ($62) {
    $$expand_i1_val = 1;
    HEAP8[$0>>0] = $$expand_i1_val;
    $$pre_trunc = HEAP8[$0>>0]|0;
    $95 = $$pre_trunc&1;
    STACKTOP = sp;return ($95|0);
   }
   $foundBox = 0;
   $i1 = 0;
   while(1) {
    $63 = $i1;
    $64 = $var1A;
    $65 = $64 << 16 >> 16;
    $66 = (10 + ($65))|0;
    $67 = ((($2)) + 18964|0);
    $68 = (($67) + ($66<<2)|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = ($63|0)<($69|0);
    if (!($70)) {
     break;
    }
    $71 = $var1A;
    $72 = $71 << 16 >> 16;
    $73 = (10 + ($72))|0;
    $74 = $i1;
    $75 = (__ZN4Game8derefBoxEii($2,$73,$74)|0);
    $box2 = $75;
    $76 = $box2;
    $77 = $var1E;
    $78 = $77 << 16 >> 16;
    $79 = $var20;
    $80 = $79 << 16 >> 16;
    $81 = $var22;
    $82 = $81 << 16 >> 16;
    $83 = $var24;
    $84 = $83 << 16 >> 16;
    $85 = (__ZL9boxInRectP3Boxiiii($76,$78,$80,$82,$84)|0);
    if ($85) {
     $86 = $box2;
     $87 = ((($86)) + 8|0);
     $88 = HEAP8[$87>>0]|0;
     $89 = $88&255;
     $90 = ($89|0)==(1);
     if ($90) {
      label = 17;
      break;
     }
    }
    $91 = $i1;
    $92 = (($91) + 1)|0;
    $i1 = $92;
   }
   if ((label|0) == 17) {
    $foundBox = 1;
   }
   $93 = $foundBox;
   $94 = $93&1;
   if ($94) {
    $$expand_i1_val2 = 1;
    HEAP8[$0>>0] = $$expand_i1_val2;
    $$pre_trunc = HEAP8[$0>>0]|0;
    $95 = $$pre_trunc&1;
    STACKTOP = sp;return ($95|0);
   }
  }
 }
 $$expand_i1_val4 = 0;
 HEAP8[$0>>0] = $$expand_i1_val4;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $95 = $$pre_trunc&1;
 STACKTOP = sp;return ($95|0);
}
function __ZN4Game20cop_isObjectNotInBoxEv($this) {
 $this = $this|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $box = 0, $box2 = 0, $foundBox = 0, $i = 0, $i1 = 0, $index = 0, $ret = 0, $so = 0, $var1A = 0, $var1E = 0, $var20 = 0, $var22 = 0, $var24 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 44|0;
 $1 = $this;
 $2 = $1;
 __Z5debugtPKcz(4,25720,$vararg_buffer);
 $ret = 1;
 $3 = ((($2)) + 3152|0);
 $4 = (__ZN6Script13fetchNextWordEv($3)|0);
 $var1A = $4;
 $5 = ((($2)) + 3152|0);
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($2)) + 3152|0);
 $9 = ((($8)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($2)) + 3152|0);
 $12 = ((($11)) + 16|0);
 $13 = (__ZN4Game16findObjectByNameEiiPb($2,$7,$10,$12)|0);
 $index = $13;
 $14 = $index;
 $15 = ($14|0)==(-1);
 if ($15) {
  $ret = 0;
 }
 $16 = $ret;
 $17 = $16&1;
 if ($17) {
  $18 = $index;
  $19 = (__ZN4Game16derefSceneObjectEi($2,$18)|0);
  $so = $19;
  $20 = $so;
  $21 = ((($20)) + 42|0);
  $22 = HEAP16[$21>>1]|0;
  $23 = $22 << 16 >> 16;
  $24 = ($23|0)!=(0);
  if ($24) {
   $25 = $index;
   $26 = (__ZN4Game22getObjectTransformXPosEi($2,$25)|0);
   $var1E = $26;
   $27 = $index;
   $28 = (__ZN4Game22getObjectTransformXPosEi($2,$27)|0);
   $var20 = $28;
   $29 = $index;
   $30 = (__ZN4Game22getObjectTransformYPosEi($2,$29)|0);
   $var22 = $30;
   $31 = $index;
   $32 = (__ZN4Game22getObjectTransformYPosEi($2,$31)|0);
   $var24 = $32;
   $foundBox = 0;
   $i = 0;
   while(1) {
    $33 = $i;
    $34 = $var1A;
    $35 = $34 << 16 >> 16;
    $36 = ((($2)) + 18964|0);
    $37 = (($36) + ($35<<2)|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ($33|0)<($38|0);
    if (!($39)) {
     break;
    }
    $40 = $var1A;
    $41 = $40 << 16 >> 16;
    $42 = $i;
    $43 = (__ZN4Game8derefBoxEii($2,$41,$42)|0);
    $box = $43;
    $44 = $box;
    $45 = $var1E;
    $46 = $45 << 16 >> 16;
    $47 = $var20;
    $48 = $47 << 16 >> 16;
    $49 = $var22;
    $50 = $49 << 16 >> 16;
    $51 = $var24;
    $52 = $51 << 16 >> 16;
    $53 = (__ZL9boxInRectP3Boxiiii($44,$46,$48,$50,$52)|0);
    if ($53) {
     $54 = $box;
     $55 = ((($54)) + 8|0);
     $56 = HEAP8[$55>>0]|0;
     $57 = $56&255;
     $58 = ($57|0)==(1);
     if ($58) {
      label = 9;
      break;
     }
    }
    $59 = $i;
    $60 = (($59) + 1)|0;
    $i = $60;
   }
   if ((label|0) == 9) {
    $foundBox = 1;
   }
   $61 = $foundBox;
   $62 = $61&1;
   if ($62) {
    $$expand_i1_val = 0;
    HEAP8[$0>>0] = $$expand_i1_val;
    $$pre_trunc = HEAP8[$0>>0]|0;
    $95 = $$pre_trunc&1;
    STACKTOP = sp;return ($95|0);
   }
   $foundBox = 0;
   $i1 = 0;
   while(1) {
    $63 = $i1;
    $64 = $var1A;
    $65 = $64 << 16 >> 16;
    $66 = (10 + ($65))|0;
    $67 = ((($2)) + 18964|0);
    $68 = (($67) + ($66<<2)|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = ($63|0)<($69|0);
    if (!($70)) {
     break;
    }
    $71 = $var1A;
    $72 = $71 << 16 >> 16;
    $73 = (10 + ($72))|0;
    $74 = $i1;
    $75 = (__ZN4Game8derefBoxEii($2,$73,$74)|0);
    $box2 = $75;
    $76 = $box2;
    $77 = $var1E;
    $78 = $77 << 16 >> 16;
    $79 = $var20;
    $80 = $79 << 16 >> 16;
    $81 = $var22;
    $82 = $81 << 16 >> 16;
    $83 = $var24;
    $84 = $83 << 16 >> 16;
    $85 = (__ZL9boxInRectP3Boxiiii($76,$78,$80,$82,$84)|0);
    if ($85) {
     $86 = $box2;
     $87 = ((($86)) + 8|0);
     $88 = HEAP8[$87>>0]|0;
     $89 = $88&255;
     $90 = ($89|0)==(1);
     if ($90) {
      label = 17;
      break;
     }
    }
    $91 = $i1;
    $92 = (($91) + 1)|0;
    $i1 = $92;
   }
   if ((label|0) == 17) {
    $foundBox = 1;
   }
   $93 = $foundBox;
   $94 = $93&1;
   if ($94) {
    $$expand_i1_val2 = 0;
    HEAP8[$0>>0] = $$expand_i1_val2;
    $$pre_trunc = HEAP8[$0>>0]|0;
    $95 = $$pre_trunc&1;
    STACKTOP = sp;return ($95|0);
   } else {
    $$expand_i1_val4 = 1;
    HEAP8[$0>>0] = $$expand_i1_val4;
    $$pre_trunc = HEAP8[$0>>0]|0;
    $95 = $$pre_trunc&1;
    STACKTOP = sp;return ($95|0);
   }
  }
 }
 $$expand_i1_val6 = 0;
 HEAP8[$0>>0] = $$expand_i1_val6;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $95 = $$pre_trunc&1;
 STACKTOP = sp;return ($95|0);
}
function __ZN4Game30cop_isObjectNotIntersectingBoxEv($this) {
 $this = $this|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $foundBox = 0, $i = 0, $i1 = 0, $so = 0, $var18 = 0, $var1A = 0, $var1E = 0, $var20 = 0, $var22 = 0, $var24 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 35|0;
 $1 = $this;
 $2 = $1;
 __Z5debugtPKcz(4,25749,$vararg_buffer);
 $3 = ((($2)) + 3152|0);
 $4 = (__ZN6Script13fetchNextWordEv($3)|0);
 $var1A = $4;
 $5 = ((($2)) + 3152|0);
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($2)) + 3152|0);
 $9 = ((($8)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($2)) + 3152|0);
 $12 = ((($11)) + 16|0);
 $13 = (__ZN4Game16findObjectByNameEiiPb($2,$7,$10,$12)|0);
 $var18 = $13;
 $14 = $var18;
 $15 = ($14|0)!=(-1);
 if ($15) {
  $16 = $var18;
  $17 = (__ZN4Game16derefSceneObjectEi($2,$16)|0);
  $so = $17;
  $18 = $so;
  $19 = ((($18)) + 42|0);
  $20 = HEAP16[$19>>1]|0;
  $21 = $20 << 16 >> 16;
  $22 = ($21|0)!=(0);
  if ($22) {
   $23 = $var18;
   $24 = (__ZN4Game22getObjectTransformXPosEi($2,$23)|0);
   $var1E = $24;
   $25 = $var18;
   $26 = (__ZN4Game22getObjectTransformYPosEi($2,$25)|0);
   $var22 = $26;
   $27 = ((($2)) + 3152|0);
   $28 = ((($27)) + 12|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ((($2)) + 3152|0);
   $31 = ((($30)) + 20|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ((($2)) + 3152|0);
   $34 = ((($33)) + 16|0);
   $35 = (__ZN4Game16findObjectByNameEiiPb($2,$29,$32,$34)|0);
   $var18 = $35;
   $36 = $var18;
   $37 = ($36|0)!=(-1);
   if ($37) {
    $38 = $var18;
    $39 = (__ZN4Game16derefSceneObjectEi($2,$38)|0);
    $so = $39;
    $40 = $so;
    $41 = ((($40)) + 42|0);
    $42 = HEAP16[$41>>1]|0;
    $43 = $42 << 16 >> 16;
    $44 = ($43|0)!=(0);
    if ($44) {
     $45 = $var18;
     $46 = (__ZN4Game22getObjectTransformXPosEi($2,$45)|0);
     $var20 = $46;
     $47 = $var18;
     $48 = (__ZN4Game22getObjectTransformYPosEi($2,$47)|0);
     $var24 = $48;
     $foundBox = 0;
     $i = 0;
     while(1) {
      $49 = $i;
      $50 = $var1A;
      $51 = $50 << 16 >> 16;
      $52 = ((($2)) + 18964|0);
      $53 = (($52) + ($51<<2)|0);
      $54 = HEAP32[$53>>2]|0;
      $55 = ($49|0)<($54|0);
      if (!($55)) {
       break;
      }
      $56 = $var1A;
      $57 = $56 << 16 >> 16;
      $58 = $i;
      $59 = $var1E;
      $60 = $59 << 16 >> 16;
      $61 = $var22;
      $62 = $61 << 16 >> 16;
      $63 = $var20;
      $64 = $63 << 16 >> 16;
      $65 = $var24;
      $66 = $65 << 16 >> 16;
      $67 = (__ZN4Game13intersectsBoxEiiiiii($2,$57,$58,$60,$62,$64,$66)|0);
      if ($67) {
       label = 8;
       break;
      }
      $68 = $i;
      $69 = (($68) + 1)|0;
      $i = $69;
     }
     if ((label|0) == 8) {
      $foundBox = 1;
     }
     $70 = $foundBox;
     $71 = $70&1;
     if ($71) {
      $$expand_i1_val = 0;
      HEAP8[$0>>0] = $$expand_i1_val;
      $$pre_trunc = HEAP8[$0>>0]|0;
      $97 = $$pre_trunc&1;
      STACKTOP = sp;return ($97|0);
     }
     $foundBox = 0;
     $i1 = 0;
     while(1) {
      $72 = $i1;
      $73 = $var1A;
      $74 = $73 << 16 >> 16;
      $75 = (10 + ($74))|0;
      $76 = ((($2)) + 18964|0);
      $77 = (($76) + ($75<<2)|0);
      $78 = HEAP32[$77>>2]|0;
      $79 = ($72|0)<($78|0);
      if (!($79)) {
       break;
      }
      $80 = $var1A;
      $81 = $80 << 16 >> 16;
      $82 = (10 + ($81))|0;
      $83 = $i1;
      $84 = $var1E;
      $85 = $84 << 16 >> 16;
      $86 = $var22;
      $87 = $86 << 16 >> 16;
      $88 = $var20;
      $89 = $88 << 16 >> 16;
      $90 = $var24;
      $91 = $90 << 16 >> 16;
      $92 = (__ZN4Game13intersectsBoxEiiiiii($2,$82,$83,$85,$87,$89,$91)|0);
      if ($92) {
       label = 15;
       break;
      }
      $93 = $i1;
      $94 = (($93) + 1)|0;
      $i1 = $94;
     }
     if ((label|0) == 15) {
      $foundBox = 1;
     }
     $95 = $foundBox;
     $96 = $95&1;
     if ($96) {
      $$expand_i1_val2 = 0;
      HEAP8[$0>>0] = $$expand_i1_val2;
      $$pre_trunc = HEAP8[$0>>0]|0;
      $97 = $$pre_trunc&1;
      STACKTOP = sp;return ($97|0);
     } else {
      $$expand_i1_val4 = 1;
      HEAP8[$0>>0] = $$expand_i1_val4;
      $$pre_trunc = HEAP8[$0>>0]|0;
      $97 = $$pre_trunc&1;
      STACKTOP = sp;return ($97|0);
     }
    }
   }
  }
 }
 $$expand_i1_val6 = 0;
 HEAP8[$0>>0] = $$expand_i1_val6;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $97 = $$pre_trunc&1;
 STACKTOP = sp;return ($97|0);
}
function __ZN4Game22cop_isCurrentBagObjectEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $index = 0, $name = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(4,25788,$vararg_buffer);
 $2 = ((($1)) + 3152|0);
 $3 = (__ZN6Script15fetchNextStringEv($2)|0);
 $name = $3;
 $4 = $name;
 $5 = (__ZNK4Game19findBagObjectByNameEPKc($1,$4)|0);
 $index = $5;
 $6 = $index;
 $7 = ($6|0)!=(-1);
 if (!($7)) {
  $12 = 0;
  STACKTOP = sp;return ($12|0);
 }
 $8 = ((($1)) + 4460|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $index;
 $11 = ($9|0)==($10|0);
 $12 = $11;
 STACKTOP = sp;return ($12|0);
}
function __ZN4Game22cop_isLifeBarDisplayedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(4,25817,$vararg_buffer);
 $2 = ((($1)) + 4476|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&1;
 STACKTOP = sp;return ($4|0);
}
function __ZN4Game25cop_isLifeBarNotDisplayedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(4,25846,$vararg_buffer);
 $2 = ((($1)) + 4476|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&1;
 $5 = $4 ^ 1;
 STACKTOP = sp;return ($5|0);
}
function __ZN4Game20cop_testLastDialogueEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(4,25878,$vararg_buffer);
 $2 = ((($1)) + 868|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3&65535;
 $5 = (__ZN4Game8testExprEs($1,$4)|0);
 if (!($5)) {
  $9 = 0;
  STACKTOP = sp;return ($9|0);
 }
 $6 = ((($1)) + 872|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0);
 $9 = $8;
 STACKTOP = sp;return ($9|0);
}
function __ZN4Game15cop_isNextSceneEv($this) {
 $this = $this|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $i = 0, $scene = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 16|0;
 $1 = $this;
 $2 = $1;
 __Z5debugtPKcz(4,25905,$vararg_buffer);
 $3 = ((($2)) + 3152|0);
 $4 = (__ZN6Script13fetchNextWordEv($3)|0);
 $5 = $4 << 16 >> 16;
 $scene = $5;
 $i = 0;
 while(1) {
  $6 = $i;
  $7 = ((($2)) + 81856|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($6|0)<($8|0);
  if (!($9)) {
   label = 6;
   break;
  }
  $10 = $i;
  $11 = ((($2)) + 81416|0);
  $12 = (($11) + (($10*22)|0)|0);
  $13 = HEAP16[$12>>1]|0;
  $14 = $13 << 16 >> 16;
  $15 = $scene;
  $16 = ($14|0)==($15|0);
  if ($16) {
   label = 4;
   break;
  }
  $17 = $i;
  $18 = (($17) + 1)|0;
  $i = $18;
 }
 if ((label|0) == 4) {
  $$expand_i1_val = 1;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $19 = $$pre_trunc&1;
  STACKTOP = sp;return ($19|0);
 }
 else if ((label|0) == 6) {
  $$expand_i1_val2 = 0;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $19 = $$pre_trunc&1;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function __ZN4Game20oop_initializeObjectEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $index = 0, $mode = 0, $mode1 = 0, $op = 0, $so = 0, $sof = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(4,25927,$vararg_buffer);
 $2 = ((($1)) + 3152|0);
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 3152|0);
 $6 = ((($5)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 3152|0);
 $9 = ((($8)) + 16|0);
 $10 = (__ZN4Game16findObjectByNameEiiPb($1,$4,$7,$9)|0);
 $index = $10;
 $11 = $index;
 $12 = ($11|0)!=(-1);
 if (!($12)) {
  $136 = ((($1)) + 3152|0);
  $137 = ((($136)) + 4|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = (($138) + 2)|0;
  HEAP32[$137>>2] = $139;
  STACKTOP = sp;return;
 }
 $13 = $index;
 $14 = (__ZN4Game16derefSceneObjectEi($1,$13)|0);
 $so = $14;
 $15 = ((($1)) + 3152|0);
 $16 = (__ZN6Script13fetchNextWordEv($15)|0);
 $op = $16;
 $17 = $op;
 $18 = $17 << 16 >> 16;
 $19 = ($18|0)==(0);
 if ($19) {
  $20 = $so;
  $21 = ((($20)) + 44|0);
  $22 = HEAP16[$21>>1]|0;
  $23 = $22 << 16 >> 16;
  $24 = ($23|0)!=(0);
  if (!($24)) {
   STACKTOP = sp;return;
  }
  $25 = $so;
  $26 = ((($25)) + 8|0);
  $27 = HEAP16[$26>>1]|0;
  $28 = $so;
  $29 = ((($28)) + 4|0);
  HEAP16[$29>>1] = $27;
  $30 = $so;
  $31 = ((($30)) + 10|0);
  $32 = HEAP16[$31>>1]|0;
  $33 = $so;
  $34 = ((($33)) + 6|0);
  HEAP16[$34>>1] = $32;
  $35 = $so;
  $36 = ((($35)) + 20|0);
  $37 = HEAP16[$36>>1]|0;
  $38 = $so;
  $39 = ((($38)) + 18|0);
  HEAP16[$39>>1] = $37;
  $40 = $so;
  $41 = ((($40)) + 44|0);
  $42 = HEAP16[$41>>1]|0;
  $43 = $42 << 16 >> 16;
  $44 = ($43|0)==(2);
  if ($44) {
   $45 = $so;
   $46 = ((($45)) + 18|0);
   $47 = HEAP16[$46>>1]|0;
   $48 = $47 << 16 >> 16;
   $49 = (__ZN4Game21derefSceneObjectFrameEi($1,$48)|0);
   $sof = $49;
   $50 = $so;
   $51 = ((($50)) + 4|0);
   $52 = HEAP16[$51>>1]|0;
   $53 = $52 << 16 >> 16;
   $54 = ((($1)) + 68|0);
   $55 = ((($54)) + 2|0);
   $56 = HEAP16[$55>>1]|0;
   $57 = $56&65535;
   $58 = (($57) + 1)|0;
   $59 = $so;
   $60 = ((($59)) + 6|0);
   $61 = HEAP16[$60>>1]|0;
   $62 = $61 << 16 >> 16;
   $63 = (($58) - ($62))|0;
   $64 = $sof;
   $65 = ((($64)) + 4|0);
   $66 = ((($65)) + 4|0);
   $67 = HEAP16[$66>>1]|0;
   $68 = $67 << 16 >> 16;
   $69 = (($63) - ($68))|0;
   $70 = $sof;
   $71 = ((($70)) + 4|0);
   $72 = ((($71)) + 2|0);
   $73 = HEAP16[$72>>1]|0;
   $74 = $73 << 16 >> 16;
   $75 = $sof;
   $76 = ((($75)) + 4|0);
   $77 = ((($76)) + 4|0);
   $78 = HEAP16[$77>>1]|0;
   $79 = $78 << 16 >> 16;
   $80 = ((($1)) + 84|0);
   $81 = ((($1)) + 68|0);
   __ZN4Game18copyBufferToBufferEiiiiP11SceneBitmapS1_($1,$53,$69,$74,$79,$80,$81);
  }
  $82 = $so;
  $83 = ((($82)) + 44|0);
  HEAP16[$83>>1] = -1;
  STACKTOP = sp;return;
 }
 $84 = $op;
 $85 = $84 << 16 >> 16;
 $86 = ($85|0)==(1);
 if ($86) {
  $87 = $so;
  $88 = ((($87)) + 38|0);
  $89 = HEAP16[$88>>1]|0;
  $mode = $89;
  $90 = $so;
  $91 = ((($90)) + 38|0);
  HEAP16[$91>>1] = 1;
  $92 = $index;
  __ZN4Game18reinitializeObjectEi($1,$92);
  $93 = $mode;
  $94 = $so;
  $95 = ((($94)) + 38|0);
  HEAP16[$95>>1] = $93;
  $96 = $so;
  $97 = ((($96)) + 44|0);
  $98 = HEAP16[$97>>1]|0;
  $99 = $98 << 16 >> 16;
  $100 = ($99|0)==(2);
  if (!($100)) {
   STACKTOP = sp;return;
  }
  $101 = $so;
  $102 = ((($101)) + 44|0);
  HEAP16[$102>>1] = 1;
  STACKTOP = sp;return;
 }
 $103 = $op;
 $104 = $103 << 16 >> 16;
 $105 = ($104|0)==(2);
 if (!($105)) {
  STACKTOP = sp;return;
 }
 $106 = $so;
 $107 = ((($106)) + 44|0);
 $108 = HEAP16[$107>>1]|0;
 $109 = $108 << 16 >> 16;
 $110 = ($109|0)==(1);
 $111 = $so;
 if ($110) {
  $112 = ((($111)) + 8|0);
  $113 = HEAP16[$112>>1]|0;
  $114 = $so;
  $115 = ((($114)) + 4|0);
  HEAP16[$115>>1] = $113;
  $116 = $so;
  $117 = ((($116)) + 10|0);
  $118 = HEAP16[$117>>1]|0;
  $119 = $so;
  $120 = ((($119)) + 6|0);
  HEAP16[$120>>1] = $118;
  $121 = $so;
  $122 = ((($121)) + 20|0);
  $123 = HEAP16[$122>>1]|0;
  $124 = $so;
  $125 = ((($124)) + 18|0);
  HEAP16[$125>>1] = $123;
  $126 = $so;
  $127 = ((($126)) + 44|0);
  HEAP16[$127>>1] = 2;
  STACKTOP = sp;return;
 } else {
  $128 = ((($111)) + 38|0);
  $129 = HEAP16[$128>>1]|0;
  $mode1 = $129;
  $130 = $so;
  $131 = ((($130)) + 38|0);
  HEAP16[$131>>1] = 3;
  $132 = $index;
  __ZN4Game18reinitializeObjectEi($1,$132);
  $133 = $mode1;
  $134 = $so;
  $135 = ((($134)) + 38|0);
  HEAP16[$135>>1] = $133;
  STACKTOP = sp;return;
 }
}
function __ZN4Game22oop_evalCurrentObjectXEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $so = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(4,25954,$vararg_buffer);
 $2 = ((($1)) + 3152|0);
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (__ZN4Game16derefSceneObjectEi($1,$4)|0);
 $so = $5;
 $6 = $so;
 $7 = ((($6)) + 44|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8 << 16 >> 16;
 $10 = ($9|0)!=(0);
 $11 = ((($1)) + 3152|0);
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 if ($10) {
  $14 = (($13) + 6)|0;
  HEAP32[$12>>2] = $14;
  $15 = $so;
  $16 = ((($15)) + 4|0);
  __ZN4Game8evalExprEPs($1,$16);
  STACKTOP = sp;return;
 } else {
  $17 = (($13) + 10)|0;
  HEAP32[$12>>2] = $17;
  STACKTOP = sp;return;
 }
}
function __ZN4Game22oop_evalCurrentObjectYEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $so = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(4,25985,$vararg_buffer);
 $2 = ((($1)) + 3152|0);
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (__ZN4Game16derefSceneObjectEi($1,$4)|0);
 $so = $5;
 $6 = $so;
 $7 = ((($6)) + 44|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8 << 16 >> 16;
 $10 = ($9|0)!=(0);
 $11 = ((($1)) + 3152|0);
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 if ($10) {
  $14 = (($13) + 6)|0;
  HEAP32[$12>>2] = $14;
  $15 = $so;
  $16 = ((($15)) + 6|0);
  __ZN4Game8evalExprEPs($1,$16);
  STACKTOP = sp;return;
 } else {
  $17 = (($13) + 10)|0;
  HEAP32[$12>>2] = $17;
  STACKTOP = sp;return;
 }
}
function __ZN4Game15oop_evalObjectXEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $index = 0, $so = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(4,26016,$vararg_buffer);
 $2 = ((($1)) + 3152|0);
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 3152|0);
 $6 = ((($5)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 3152|0);
 $9 = ((($8)) + 16|0);
 $10 = (__ZN4Game16findObjectByNameEiiPb($1,$4,$7,$9)|0);
 $index = $10;
 $11 = $index;
 $12 = ($11|0)!=(-1);
 if ($12) {
  $13 = $index;
  $14 = (__ZN4Game16derefSceneObjectEi($1,$13)|0);
  $so = $14;
  $15 = $so;
  $16 = ((($15)) + 4|0);
  __ZN4Game8evalExprEPs($1,$16);
  STACKTOP = sp;return;
 } else {
  $17 = ((($1)) + 3152|0);
  $18 = ((($17)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + 4)|0;
  HEAP32[$18>>2] = $20;
  STACKTOP = sp;return;
 }
}
function __ZN4Game15oop_evalObjectYEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $index = 0, $so = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(4,26040,$vararg_buffer);
 $2 = ((($1)) + 3152|0);
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 3152|0);
 $6 = ((($5)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 3152|0);
 $9 = ((($8)) + 16|0);
 $10 = (__ZN4Game16findObjectByNameEiiPb($1,$4,$7,$9)|0);
 $index = $10;
 $11 = $index;
 $12 = ($11|0)!=(-1);
 if ($12) {
  $13 = $index;
  $14 = (__ZN4Game16derefSceneObjectEi($1,$13)|0);
  $so = $14;
  $15 = $so;
  $16 = ((($15)) + 6|0);
  __ZN4Game8evalExprEPs($1,$16);
  STACKTOP = sp;return;
 } else {
  $17 = ((($1)) + 3152|0);
  $18 = ((($17)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + 4)|0;
  HEAP32[$18>>2] = $20;
  STACKTOP = sp;return;
 }
}
function __ZN4Game15oop_evalObjectZEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $index = 0, $so = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(4,26064,$vararg_buffer);
 $2 = ((($1)) + 3152|0);
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 3152|0);
 $6 = ((($5)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 3152|0);
 $9 = ((($8)) + 16|0);
 $10 = (__ZN4Game16findObjectByNameEiiPb($1,$4,$7,$9)|0);
 $index = $10;
 $11 = $index;
 $12 = ($11|0)!=(-1);
 if ($12) {
  $13 = $index;
  $14 = (__ZN4Game16derefSceneObjectEi($1,$13)|0);
  $so = $14;
  $15 = $so;
  $16 = ((($15)) + 16|0);
  __ZN4Game8evalExprEPs($1,$16);
  STACKTOP = sp;return;
 } else {
  $17 = ((($1)) + 3152|0);
  $18 = ((($17)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + 4)|0;
  HEAP32[$18>>2] = $20;
  STACKTOP = sp;return;
 }
}
function __ZN4Game17oop_setObjectFlipEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $index = 0, $so = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(4,26088,$vararg_buffer);
 $2 = ((($1)) + 3152|0);
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 3152|0);
 $6 = ((($5)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 3152|0);
 $9 = ((($8)) + 16|0);
 $10 = (__ZN4Game16findObjectByNameEiiPb($1,$4,$7,$9)|0);
 $index = $10;
 $11 = $index;
 $12 = ($11|0)!=(-1);
 if ($12) {
  $13 = $index;
  $14 = (__ZN4Game16derefSceneObjectEi($1,$13)|0);
  $so = $14;
  $15 = ((($1)) + 3152|0);
  $16 = (__ZN6Script13fetchNextWordEv($15)|0);
  $17 = $so;
  $18 = ((($17)) + 24|0);
  HEAP16[$18>>1] = $16;
  STACKTOP = sp;return;
 } else {
  $19 = ((($1)) + 3152|0);
  $20 = ((($19)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + 2)|0;
  HEAP32[$20>>2] = $22;
  STACKTOP = sp;return;
 }
}
function __ZN4Game26oop_adjustObjectPos_vv0000Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a0 = 0, $a2 = 0, $index = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(4,26114,$vararg_buffer);
 $2 = ((($1)) + 3152|0);
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 3152|0);
 $6 = ((($5)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 3152|0);
 $9 = ((($8)) + 16|0);
 $10 = (__ZN4Game16findObjectByNameEiiPb($1,$4,$7,$9)|0);
 $index = $10;
 $11 = $index;
 $12 = ($11|0)!=(-1);
 $13 = ((($1)) + 3152|0);
 if ($12) {
  $14 = (__ZN6Script13fetchNextWordEv($13)|0);
  $a0 = $14;
  $15 = ((($1)) + 3152|0);
  $16 = (__ZN6Script13fetchNextWordEv($15)|0);
  $a2 = $16;
  $17 = ((($1)) + 3152|0);
  $18 = ((($17)) + 12|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $index;
  $21 = ((($1)) + 3152|0);
  $22 = ((($21)) + 16|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23&1;
  $25 = $24&1;
  $26 = $a2;
  $27 = $26 << 16 >> 16;
  $28 = $a0;
  $29 = $28 << 16 >> 16;
  __ZN4Game23changeObjectMotionFrameEiiiiiiiii($1,$19,$20,$25,$27,$29,0,0,0,0);
  STACKTOP = sp;return;
 } else {
  $30 = ((($13)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($31) + 4)|0;
  HEAP32[$30>>2] = $32;
  STACKTOP = sp;return;
 }
}
function __ZN4Game26oop_adjustObjectPos_vv1v00Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a0 = 0, $a2 = 0;
 var $a4 = 0, $index = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(4,26149,$vararg_buffer);
 $2 = ((($1)) + 3152|0);
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 3152|0);
 $6 = ((($5)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 3152|0);
 $9 = ((($8)) + 16|0);
 $10 = (__ZN4Game16findObjectByNameEiiPb($1,$4,$7,$9)|0);
 $index = $10;
 $11 = $index;
 $12 = ($11|0)!=(-1);
 $13 = ((($1)) + 3152|0);
 if ($12) {
  $14 = (__ZN6Script13fetchNextWordEv($13)|0);
  $a0 = $14;
  $15 = ((($1)) + 3152|0);
  $16 = (__ZN6Script13fetchNextWordEv($15)|0);
  $a2 = $16;
  $17 = ((($1)) + 3152|0);
  $18 = (__ZN6Script13fetchNextWordEv($17)|0);
  $a4 = $18;
  $19 = ((($1)) + 3152|0);
  (__ZN6Script13fetchNextWordEv($19)|0);
  $20 = ((($1)) + 3152|0);
  $21 = ((($20)) + 12|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $index;
  $24 = ((($1)) + 3152|0);
  $25 = ((($24)) + 16|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = $26&1;
  $28 = $27&1;
  $29 = $a2;
  $30 = $29 << 16 >> 16;
  $31 = $a0;
  $32 = $31 << 16 >> 16;
  $33 = $a4;
  $34 = $33 << 16 >> 16;
  __ZN4Game23changeObjectMotionFrameEiiiiiiiii($1,$22,$23,$28,$30,$32,1,$34,0,0);
  STACKTOP = sp;return;
 } else {
  $35 = ((($13)) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($36) + 8)|0;
  HEAP32[$35>>2] = $37;
  STACKTOP = sp;return;
 }
}
function __ZN4Game26oop_adjustObjectPos_vv1v1vEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $a0 = 0, $a2 = 0, $a4 = 0, $a6 = 0, $index = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(4,26184,$vararg_buffer);
 $2 = ((($1)) + 3152|0);
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 3152|0);
 $6 = ((($5)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 3152|0);
 $9 = ((($8)) + 16|0);
 $10 = (__ZN4Game16findObjectByNameEiiPb($1,$4,$7,$9)|0);
 $index = $10;
 $11 = $index;
 $12 = ($11|0)!=(-1);
 $13 = ((($1)) + 3152|0);
 if ($12) {
  $14 = (__ZN6Script13fetchNextWordEv($13)|0);
  $a0 = $14;
  $15 = ((($1)) + 3152|0);
  $16 = (__ZN6Script13fetchNextWordEv($15)|0);
  $a2 = $16;
  $17 = ((($1)) + 3152|0);
  $18 = (__ZN6Script13fetchNextWordEv($17)|0);
  $a4 = $18;
  $19 = ((($1)) + 3152|0);
  $20 = (__ZN6Script13fetchNextWordEv($19)|0);
  $a6 = $20;
  $21 = ((($1)) + 3152|0);
  $22 = ((($21)) + 12|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $index;
  $25 = ((($1)) + 3152|0);
  $26 = ((($25)) + 16|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $27&1;
  $29 = $28&1;
  $30 = $a2;
  $31 = $30 << 16 >> 16;
  $32 = $a0;
  $33 = $32 << 16 >> 16;
  $34 = $a4;
  $35 = $34 << 16 >> 16;
  $36 = $a6;
  $37 = $36 << 16 >> 16;
  __ZN4Game23changeObjectMotionFrameEiiiiiiiii($1,$23,$24,$29,$31,$33,1,$35,1,$37);
  STACKTOP = sp;return;
 } else {
  $38 = ((($13)) + 4|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (($39) + 8)|0;
  HEAP32[$38>>2] = $40;
  STACKTOP = sp;return;
 }
}
function __ZN4Game22oop_setupObjectPos_121Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $index = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(4,26219,$vararg_buffer);
 $2 = ((($1)) + 3152|0);
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 3152|0);
 $6 = ((($5)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 3152|0);
 $9 = ((($8)) + 16|0);
 $10 = (__ZN4Game16findObjectByNameEiiPb($1,$4,$7,$9)|0);
 $index = $10;
 $11 = $index;
 $12 = ($11|0)!=(-1);
 $13 = ((($1)) + 3152|0);
 if ($12) {
  $14 = ((($13)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $index;
  $17 = ((($1)) + 3152|0);
  $18 = ((($17)) + 16|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&1;
  $21 = $20&1;
  __ZN4Game14setupObjectPosEiiiiii($1,$15,$16,$21,1,2,1);
  STACKTOP = sp;return;
 } else {
  $22 = ((($13)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($23) + 16)|0;
  HEAP32[$22>>2] = $24;
  STACKTOP = sp;return;
 }
}
function __ZN4Game22oop_setupObjectPos_122Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $index = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(4,26250,$vararg_buffer);
 $2 = ((($1)) + 3152|0);
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 3152|0);
 $6 = ((($5)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 3152|0);
 $9 = ((($8)) + 16|0);
 $10 = (__ZN4Game16findObjectByNameEiiPb($1,$4,$7,$9)|0);
 $index = $10;
 $11 = $index;
 $12 = ($11|0)!=(-1);
 $13 = ((($1)) + 3152|0);
 if ($12) {
  $14 = ((($13)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $index;
  $17 = ((($1)) + 3152|0);
  $18 = ((($17)) + 16|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&1;
  $21 = $20&1;
  __ZN4Game14setupObjectPosEiiiiii($1,$15,$16,$21,1,2,2);
  STACKTOP = sp;return;
 } else {
  $22 = ((($13)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($23) + 28)|0;
  HEAP32[$22>>2] = $24;
  STACKTOP = sp;return;
 }
}
function __ZN4Game22oop_setupObjectPos_123Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $index = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(4,26281,$vararg_buffer);
 $2 = ((($1)) + 3152|0);
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 3152|0);
 $6 = ((($5)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 3152|0);
 $9 = ((($8)) + 16|0);
 $10 = (__ZN4Game16findObjectByNameEiiPb($1,$4,$7,$9)|0);
 $index = $10;
 $11 = $index;
 $12 = ($11|0)!=(-1);
 $13 = ((($1)) + 3152|0);
 if ($12) {
  $14 = ((($13)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $index;
  $17 = ((($1)) + 3152|0);
  $18 = ((($17)) + 16|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&1;
  $21 = $20&1;
  __ZN4Game14setupObjectPosEiiiiii($1,$15,$16,$21,1,2,3);
  STACKTOP = sp;return;
 } else {
  $22 = ((($13)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($23) + 20)|0;
  HEAP32[$22>>2] = $24;
  STACKTOP = sp;return;
 }
}
function __ZN4Game26oop_adjustObjectPos_1v0000Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a0 = 0, $index = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(4,26312,$vararg_buffer);
 $2 = ((($1)) + 3152|0);
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 3152|0);
 $6 = ((($5)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 3152|0);
 $9 = ((($8)) + 16|0);
 $10 = (__ZN4Game16findObjectByNameEiiPb($1,$4,$7,$9)|0);
 $index = $10;
 $11 = $index;
 $12 = ($11|0)!=(-1);
 $13 = ((($1)) + 3152|0);
 if ($12) {
  $14 = (__ZN6Script13fetchNextWordEv($13)|0);
  $a0 = $14;
  $15 = ((($1)) + 3152|0);
  $16 = ((($15)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $index;
  $19 = ((($1)) + 3152|0);
  $20 = ((($19)) + 16|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&1;
  $23 = $22&1;
  $24 = $a0;
  $25 = $24 << 16 >> 16;
  __ZN4Game23changeObjectMotionFrameEiiiiiiiii($1,$17,$18,$23,1,$25,0,0,0,0);
  STACKTOP = sp;return;
 } else {
  $26 = ((($13)) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + 2)|0;
  HEAP32[$26>>2] = $28;
  STACKTOP = sp;return;
 }
}
function __ZN4Game26oop_adjustObjectPos_1v1v1vEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a0 = 0, $a2 = 0, $a4 = 0;
 var $index = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(4,26347,$vararg_buffer);
 $2 = ((($1)) + 3152|0);
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 3152|0);
 $6 = ((($5)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 3152|0);
 $9 = ((($8)) + 16|0);
 $10 = (__ZN4Game16findObjectByNameEiiPb($1,$4,$7,$9)|0);
 $index = $10;
 $11 = $index;
 $12 = ($11|0)!=(-1);
 $13 = ((($1)) + 3152|0);
 if ($12) {
  $14 = (__ZN6Script13fetchNextWordEv($13)|0);
  $a0 = $14;
  $15 = ((($1)) + 3152|0);
  $16 = (__ZN6Script13fetchNextWordEv($15)|0);
  $a2 = $16;
  $17 = ((($1)) + 3152|0);
  $18 = (__ZN6Script13fetchNextWordEv($17)|0);
  $a4 = $18;
  $19 = ((($1)) + 3152|0);
  $20 = ((($19)) + 12|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $index;
  $23 = ((($1)) + 3152|0);
  $24 = ((($23)) + 16|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25&1;
  $27 = $26&1;
  $28 = $a0;
  $29 = $28 << 16 >> 16;
  $30 = $a2;
  $31 = $30 << 16 >> 16;
  $32 = $a4;
  $33 = $32 << 16 >> 16;
  __ZN4Game23changeObjectMotionFrameEiiiiiiiii($1,$21,$22,$27,1,$29,1,$31,1,$33);
  STACKTOP = sp;return;
 } else {
  $34 = ((($13)) + 4|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (($35) + 6)|0;
  HEAP32[$34>>2] = $36;
  STACKTOP = sp;return;
 }
}
function __ZN4Game22oop_setupObjectPos_021Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $index = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(4,26382,$vararg_buffer);
 $2 = ((($1)) + 3152|0);
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 3152|0);
 $6 = ((($5)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 3152|0);
 $9 = ((($8)) + 16|0);
 $10 = (__ZN4Game16findObjectByNameEiiPb($1,$4,$7,$9)|0);
 $index = $10;
 $11 = $index;
 $12 = ($11|0)!=(-1);
 $13 = ((($1)) + 3152|0);
 if ($12) {
  $14 = ((($13)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $index;
  $17 = ((($1)) + 3152|0);
  $18 = ((($17)) + 16|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&1;
  $21 = $20&1;
  __ZN4Game14setupObjectPosEiiiiii($1,$15,$16,$21,0,2,1);
  STACKTOP = sp;return;
 } else {
  $22 = ((($13)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($23) + 14)|0;
  HEAP32[$22>>2] = $24;
  STACKTOP = sp;return;
 }
}
function __ZN4Game22oop_setupObjectPos_022Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $index = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(4,26413,$vararg_buffer);
 $2 = ((($1)) + 3152|0);
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 3152|0);
 $6 = ((($5)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 3152|0);
 $9 = ((($8)) + 16|0);
 $10 = (__ZN4Game16findObjectByNameEiiPb($1,$4,$7,$9)|0);
 $index = $10;
 $11 = $index;
 $12 = ($11|0)!=(-1);
 $13 = ((($1)) + 3152|0);
 if ($12) {
  $14 = ((($13)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $index;
  $17 = ((($1)) + 3152|0);
  $18 = ((($17)) + 16|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&1;
  $21 = $20&1;
  __ZN4Game14setupObjectPosEiiiiii($1,$15,$16,$21,0,2,2);
  STACKTOP = sp;return;
 } else {
  $22 = ((($13)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($23) + 26)|0;
  HEAP32[$22>>2] = $24;
  STACKTOP = sp;return;
 }
}
function __ZN4Game22oop_setupObjectPos_023Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $index = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(4,26444,$vararg_buffer);
 $2 = ((($1)) + 3152|0);
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 3152|0);
 $6 = ((($5)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 3152|0);
 $9 = ((($8)) + 16|0);
 $10 = (__ZN4Game16findObjectByNameEiiPb($1,$4,$7,$9)|0);
 $index = $10;
 $11 = $index;
 $12 = ($11|0)!=(-1);
 $13 = ((($1)) + 3152|0);
 if ($12) {
  $14 = ((($13)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $index;
  $17 = ((($1)) + 3152|0);
  $18 = ((($17)) + 16|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&1;
  $21 = $20&1;
  __ZN4Game14setupObjectPosEiiiiii($1,$15,$16,$21,0,2,3);
  STACKTOP = sp;return;
 } else {
  $22 = ((($13)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($23) + 18)|0;
  HEAP32[$22>>2] = $24;
  STACKTOP = sp;return;
 }
}
function __ZN4Game17oop_evalObjectVarEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $index = 0, $or$cond = 0, $so = 0, $var = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(4,26475,$vararg_buffer);
 $2 = ((($1)) + 3152|0);
 $3 = (__ZN6Script13fetchNextWordEv($2)|0);
 $4 = $3 << 16 >> 16;
 $var = $4;
 $5 = ((($1)) + 3152|0);
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 3152|0);
 $9 = ((($8)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($1)) + 3152|0);
 $12 = ((($11)) + 16|0);
 $13 = (__ZN4Game16findObjectByNameEiiPb($1,$7,$10,$12)|0);
 $index = $13;
 $14 = $index;
 $15 = ($14|0)!=(-1);
 if (!($15)) {
  $26 = ((($1)) + 3152|0);
  $27 = ((($26)) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + 4)|0;
  HEAP32[$27>>2] = $29;
  STACKTOP = sp;return;
 }
 $16 = $var;
 $17 = ($16|0)>=(0);
 $18 = $var;
 $19 = ($18|0)<(10);
 $or$cond = $17 & $19;
 if (!($or$cond)) {
  ___assert_fail((29399|0),(25136|0),959,(26501|0));
  // unreachable;
 }
 $20 = $index;
 $21 = (__ZN4Game16derefSceneObjectEi($1,$20)|0);
 $so = $21;
 $22 = $var;
 $23 = $so;
 $24 = ((($23)) + 86|0);
 $25 = (($24) + ($22<<1)|0);
 __ZN4Game8evalExprEPs($1,$25);
 STACKTOP = sp;return;
}
function __ZN4Game23oop_translateObjectXPosEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $a0 = 0, $a2 = 0, $a4 = 0, $a6 = 0, $index = 0, $so = 0, $var1A = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(4,26519,$vararg_buffer);
 $2 = ((($1)) + 3152|0);
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 3152|0);
 $6 = ((($5)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 3152|0);
 $9 = ((($8)) + 16|0);
 $10 = (__ZN4Game16findObjectByNameEiiPb($1,$4,$7,$9)|0);
 $index = $10;
 $11 = $index;
 $12 = ($11|0)!=(-1);
 if (!($12)) {
  $62 = ((($1)) + 3152|0);
  $63 = ((($62)) + 4|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = (($64) + 8)|0;
  HEAP32[$63>>2] = $65;
  STACKTOP = sp;return;
 }
 $13 = $index;
 $14 = (__ZN4Game16derefSceneObjectEi($1,$13)|0);
 $so = $14;
 $15 = ((($1)) + 3152|0);
 $16 = (__ZN6Script13fetchNextWordEv($15)|0);
 $a0 = $16;
 $17 = ((($1)) + 3152|0);
 $18 = (__ZN6Script13fetchNextWordEv($17)|0);
 $a2 = $18;
 $19 = ((($1)) + 3152|0);
 $20 = (__ZN6Script13fetchNextWordEv($19)|0);
 $a4 = $20;
 $21 = ((($1)) + 3152|0);
 $22 = (__ZN6Script13fetchNextWordEv($21)|0);
 $a6 = $22;
 $23 = $index;
 $24 = $a0;
 $25 = $24 << 16 >> 16;
 $26 = $a2;
 $27 = $26 << 16 >> 16;
 $28 = $a4;
 $29 = $28 << 16 >> 16;
 $30 = (__ZN4Game22getObjectTranslateXPosEiiii($1,$23,$25,$27,$29)|0);
 $31 = $30&65535;
 $var1A = $31;
 $32 = $a2;
 $33 = $32 << 16 >> 16;
 $34 = (($33|0) / 2)&-1;
 $35 = $var1A;
 $36 = $35 << 16 >> 16;
 $37 = ($34|0)>=($36|0);
 $38 = $a6;
 if ($37) {
  $39 = $var1A;
  $40 = (__Z3MINIsET_S0_S0_($38,$39)|0);
  $41 = $40 << 16 >> 16;
  $42 = $so;
  $43 = ((($42)) + 4|0);
  $44 = HEAP16[$43>>1]|0;
  $45 = $44 << 16 >> 16;
  $46 = (($45) - ($41))|0;
  $47 = $46&65535;
  HEAP16[$43>>1] = $47;
  STACKTOP = sp;return;
 } else {
  $48 = $a2;
  $49 = $48 << 16 >> 16;
  $50 = $var1A;
  $51 = $50 << 16 >> 16;
  $52 = (($49) - ($51))|0;
  $53 = $52&65535;
  $54 = (__Z3MINIsET_S0_S0_($38,$53)|0);
  $55 = $54 << 16 >> 16;
  $56 = $so;
  $57 = ((($56)) + 4|0);
  $58 = HEAP16[$57>>1]|0;
  $59 = $58 << 16 >> 16;
  $60 = (($59) + ($55))|0;
  $61 = $60&65535;
  HEAP16[$57>>1] = $61;
  STACKTOP = sp;return;
 }
}
function __ZN4Game23oop_translateObjectYPosEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $a0 = 0, $a2 = 0, $a4 = 0, $a6 = 0, $index = 0, $so = 0, $var1A = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(4,26551,$vararg_buffer);
 $2 = ((($1)) + 3152|0);
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 3152|0);
 $6 = ((($5)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 3152|0);
 $9 = ((($8)) + 16|0);
 $10 = (__ZN4Game16findObjectByNameEiiPb($1,$4,$7,$9)|0);
 $index = $10;
 $11 = $index;
 $12 = ($11|0)!=(-1);
 if (!($12)) {
  $62 = ((($1)) + 3152|0);
  $63 = ((($62)) + 4|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = (($64) + 8)|0;
  HEAP32[$63>>2] = $65;
  STACKTOP = sp;return;
 }
 $13 = $index;
 $14 = (__ZN4Game16derefSceneObjectEi($1,$13)|0);
 $so = $14;
 $15 = ((($1)) + 3152|0);
 $16 = (__ZN6Script13fetchNextWordEv($15)|0);
 $a0 = $16;
 $17 = ((($1)) + 3152|0);
 $18 = (__ZN6Script13fetchNextWordEv($17)|0);
 $a2 = $18;
 $19 = ((($1)) + 3152|0);
 $20 = (__ZN6Script13fetchNextWordEv($19)|0);
 $a4 = $20;
 $21 = ((($1)) + 3152|0);
 $22 = (__ZN6Script13fetchNextWordEv($21)|0);
 $a6 = $22;
 $23 = $index;
 $24 = $a0;
 $25 = $24 << 16 >> 16;
 $26 = $a2;
 $27 = $26 << 16 >> 16;
 $28 = $a4;
 $29 = $28 << 16 >> 16;
 $30 = (__ZN4Game22getObjectTranslateYPosEiiii($1,$23,$25,$27,$29)|0);
 $31 = $30&65535;
 $var1A = $31;
 $32 = $a2;
 $33 = $32 << 16 >> 16;
 $34 = (($33|0) / 2)&-1;
 $35 = $var1A;
 $36 = $35 << 16 >> 16;
 $37 = ($34|0)>=($36|0);
 $38 = $a6;
 if ($37) {
  $39 = $var1A;
  $40 = (__Z3MINIsET_S0_S0_($38,$39)|0);
  $41 = $40 << 16 >> 16;
  $42 = $so;
  $43 = ((($42)) + 6|0);
  $44 = HEAP16[$43>>1]|0;
  $45 = $44 << 16 >> 16;
  $46 = (($45) - ($41))|0;
  $47 = $46&65535;
  HEAP16[$43>>1] = $47;
  STACKTOP = sp;return;
 } else {
  $48 = $a2;
  $49 = $48 << 16 >> 16;
  $50 = $var1A;
  $51 = $50 << 16 >> 16;
  $52 = (($49) - ($51))|0;
  $53 = $52&65535;
  $54 = (__Z3MINIsET_S0_S0_($38,$53)|0);
  $55 = $54 << 16 >> 16;
  $56 = $so;
  $57 = ((($56)) + 6|0);
  $58 = HEAP16[$57>>1]|0;
  $59 = $58 << 16 >> 16;
  $60 = (($59) + ($55))|0;
  $61 = $60&65535;
  HEAP16[$57>>1] = $61;
  STACKTOP = sp;return;
 }
}
function __ZN4Game17oop_setObjectModeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $index = 0, $mode = 0, $modeRndMul = 0, $so = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(4,26583,$vararg_buffer);
 $2 = ((($1)) + 3152|0);
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 3152|0);
 $6 = ((($5)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 3152|0);
 $9 = ((($8)) + 16|0);
 $10 = (__ZN4Game16findObjectByNameEiiPb($1,$4,$7,$9)|0);
 $index = $10;
 $11 = ((($1)) + 3152|0);
 $12 = (__ZN6Script13fetchNextWordEv($11)|0);
 $13 = $12 << 16 >> 16;
 $mode = $13;
 $modeRndMul = 0;
 $14 = $mode;
 $15 = ($14|0)==(2);
 if ($15) {
  $16 = ((($1)) + 3152|0);
  $17 = (__ZN6Script13fetchNextWordEv($16)|0);
  $18 = $17 << 16 >> 16;
  $modeRndMul = $18;
 }
 $19 = $index;
 $20 = ($19|0)!=(-1);
 if (!($20)) {
  STACKTOP = sp;return;
 }
 $21 = $index;
 $22 = (__ZN4Game16derefSceneObjectEi($1,$21)|0);
 $so = $22;
 $23 = $mode;
 $24 = $23&65535;
 $25 = $so;
 $26 = ((($25)) + 38|0);
 HEAP16[$26>>1] = $24;
 $27 = $mode;
 $28 = ($27|0)==(2);
 if (!($28)) {
  STACKTOP = sp;return;
 }
 $29 = $modeRndMul;
 $30 = $29&65535;
 $31 = $so;
 $32 = ((($31)) + 40|0);
 HEAP16[$32>>1] = $30;
 STACKTOP = sp;return;
}
function __ZN4Game20oop_setObjectInitPosEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $index = 0, $so = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(4,26609,$vararg_buffer);
 $2 = ((($1)) + 3152|0);
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 3152|0);
 $6 = ((($5)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 3152|0);
 $9 = ((($8)) + 16|0);
 $10 = (__ZN4Game16findObjectByNameEiiPb($1,$4,$7,$9)|0);
 $index = $10;
 $11 = $index;
 $12 = ($11|0)!=(-1);
 if ($12) {
  $13 = $index;
  $14 = (__ZN4Game16derefSceneObjectEi($1,$13)|0);
  $so = $14;
  $15 = ((($1)) + 3152|0);
  $16 = (__ZN6Script13fetchNextWordEv($15)|0);
  $17 = $so;
  HEAP16[$17>>1] = $16;
  $18 = ((($1)) + 3152|0);
  $19 = (__ZN6Script13fetchNextWordEv($18)|0);
  $20 = $so;
  $21 = ((($20)) + 2|0);
  HEAP16[$21>>1] = $19;
  STACKTOP = sp;return;
 } else {
  $22 = ((($1)) + 3152|0);
  $23 = ((($22)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + 4)|0;
  HEAP32[$23>>2] = $25;
  STACKTOP = sp;return;
 }
}
function __ZN4Game29oop_setObjectTransformInitPosEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $index = 0, $so = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(4,26638,$vararg_buffer);
 $2 = ((($1)) + 3152|0);
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 3152|0);
 $6 = ((($5)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 3152|0);
 $9 = ((($8)) + 16|0);
 $10 = (__ZN4Game16findObjectByNameEiiPb($1,$4,$7,$9)|0);
 $index = $10;
 $11 = $index;
 $12 = ($11|0)!=(-1);
 if ($12) {
  $13 = $index;
  $14 = (__ZN4Game16derefSceneObjectEi($1,$13)|0);
  $so = $14;
  $15 = ((($1)) + 3152|0);
  $16 = ((($15)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (__ZN4Game22getObjectTransformXPosEi($1,$17)|0);
  $19 = $so;
  HEAP16[$19>>1] = $18;
  $20 = ((($1)) + 3152|0);
  $21 = ((($20)) + 12|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (__ZN4Game22getObjectTransformYPosEi($1,$22)|0);
  $24 = $so;
  $25 = ((($24)) + 2|0);
  HEAP16[$25>>1] = $23;
  STACKTOP = sp;return;
 } else {
  $26 = ((($1)) + 3152|0);
  $27 = ((($26)) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + 12)|0;
  HEAP32[$27>>2] = $29;
  STACKTOP = sp;return;
 }
}
function __ZN4Game19oop_evalObjectXInitEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $index = 0, $so = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(4,26676,$vararg_buffer);
 $2 = ((($1)) + 3152|0);
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 3152|0);
 $6 = ((($5)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 3152|0);
 $9 = ((($8)) + 16|0);
 $10 = (__ZN4Game16findObjectByNameEiiPb($1,$4,$7,$9)|0);
 $index = $10;
 $11 = $index;
 $12 = ($11|0)!=(-1);
 if ($12) {
  $13 = $index;
  $14 = (__ZN4Game16derefSceneObjectEi($1,$13)|0);
  $so = $14;
  $15 = $so;
  __ZN4Game8evalExprEPs($1,$15);
  STACKTOP = sp;return;
 } else {
  $16 = ((($1)) + 3152|0);
  $17 = ((($16)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + 4)|0;
  HEAP32[$17>>2] = $19;
  STACKTOP = sp;return;
 }
}
function __ZN4Game19oop_evalObjectYInitEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $index = 0, $so = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(4,26704,$vararg_buffer);
 $2 = ((($1)) + 3152|0);
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 3152|0);
 $6 = ((($5)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 3152|0);
 $9 = ((($8)) + 16|0);
 $10 = (__ZN4Game16findObjectByNameEiiPb($1,$4,$7,$9)|0);
 $index = $10;
 $11 = $index;
 $12 = ($11|0)!=(-1);
 if ($12) {
  $13 = $index;
  $14 = (__ZN4Game16derefSceneObjectEi($1,$13)|0);
  $so = $14;
  $15 = $so;
  $16 = ((($15)) + 2|0);
  __ZN4Game8evalExprEPs($1,$16);
  STACKTOP = sp;return;
 } else {
  $17 = ((($1)) + 3152|0);
  $18 = ((($17)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + 4)|0;
  HEAP32[$18>>2] = $20;
  STACKTOP = sp;return;
 }
}
function __ZN4Game19oop_evalObjectZInitEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $index = 0, $so = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(4,26732,$vararg_buffer);
 $2 = ((($1)) + 3152|0);
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 3152|0);
 $6 = ((($5)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 3152|0);
 $9 = ((($8)) + 16|0);
 $10 = (__ZN4Game16findObjectByNameEiiPb($1,$4,$7,$9)|0);
 $index = $10;
 $11 = $index;
 $12 = ($11|0)!=(-1);
 if ($12) {
  $13 = $index;
  $14 = (__ZN4Game16derefSceneObjectEi($1,$13)|0);
  $so = $14;
  $15 = $so;
  $16 = ((($15)) + 12|0);
  __ZN4Game8evalExprEPs($1,$16);
  STACKTOP = sp;return;
 } else {
  $17 = ((($1)) + 3152|0);
  $18 = ((($17)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + 4)|0;
  HEAP32[$18>>2] = $20;
  STACKTOP = sp;return;
 }
}
function __ZN4Game21oop_setObjectFlipInitEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $index = 0, $so = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(4,26760,$vararg_buffer);
 $2 = ((($1)) + 3152|0);
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 3152|0);
 $6 = ((($5)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 3152|0);
 $9 = ((($8)) + 16|0);
 $10 = (__ZN4Game16findObjectByNameEiiPb($1,$4,$7,$9)|0);
 $index = $10;
 $11 = $index;
 $12 = ($11|0)!=(-1);
 if ($12) {
  $13 = $index;
  $14 = (__ZN4Game16derefSceneObjectEi($1,$13)|0);
  $so = $14;
  $15 = ((($1)) + 3152|0);
  $16 = (__ZN6Script13fetchNextWordEv($15)|0);
  $17 = $so;
  $18 = ((($17)) + 22|0);
  HEAP16[$18>>1] = $16;
  STACKTOP = sp;return;
 } else {
  $19 = ((($1)) + 3152|0);
  $20 = ((($19)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + 2)|0;
  HEAP32[$20>>2] = $22;
  STACKTOP = sp;return;
 }
}
function __ZN4Game16oop_setObjectCelEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $index = 0, $so = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(4,26790,$vararg_buffer);
 $2 = ((($1)) + 3152|0);
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 3152|0);
 $6 = ((($5)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 3152|0);
 $9 = ((($8)) + 16|0);
 $10 = (__ZN4Game16findObjectByNameEiiPb($1,$4,$7,$9)|0);
 $index = $10;
 $11 = $index;
 $12 = ($11|0)!=(-1);
 if ($12) {
  $13 = $index;
  $14 = (__ZN4Game16derefSceneObjectEi($1,$13)|0);
  $so = $14;
  $15 = ((($1)) + 3152|0);
  $16 = (__ZN6Script13fetchNextWordEv($15)|0);
  $17 = $16 << 16 >> 16;
  $18 = (($17) - 1)|0;
  $19 = $18&65535;
  $20 = $so;
  $21 = ((($20)) + 28|0);
  HEAP16[$21>>1] = $19;
  $22 = ((($1)) + 3152|0);
  $23 = (__ZN6Script13fetchNextWordEv($22)|0);
  $24 = $23 << 16 >> 16;
  $25 = (($24) - 1)|0;
  $26 = $25&65535;
  $27 = $so;
  $28 = ((($27)) + 36|0);
  HEAP16[$28>>1] = $26;
  STACKTOP = sp;return;
 } else {
  $29 = ((($1)) + 3152|0);
  $30 = ((($29)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($31) + 4)|0;
  HEAP32[$30>>2] = $32;
  STACKTOP = sp;return;
 }
}
function __ZN4Game18oop_resetObjectCelEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $index = 0, $so = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(4,26815,$vararg_buffer);
 $2 = ((($1)) + 3152|0);
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 3152|0);
 $6 = ((($5)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 3152|0);
 $9 = ((($8)) + 16|0);
 $10 = (__ZN4Game16findObjectByNameEiiPb($1,$4,$7,$9)|0);
 $index = $10;
 $11 = $index;
 $12 = ($11|0)!=(-1);
 if ($12) {
  $13 = $index;
  $14 = (__ZN4Game16derefSceneObjectEi($1,$13)|0);
  $so = $14;
  $15 = ((($1)) + 3152|0);
  $16 = (__ZN6Script13fetchNextWordEv($15)|0);
  $17 = $16 << 16 >> 16;
  $18 = (($17) - 1)|0;
  $19 = $18&65535;
  $20 = $so;
  $21 = ((($20)) + 28|0);
  HEAP16[$21>>1] = $19;
  $22 = $so;
  $23 = ((($22)) + 36|0);
  HEAP16[$23>>1] = 0;
  STACKTOP = sp;return;
 } else {
  $24 = ((($1)) + 3152|0);
  $25 = ((($24)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) + 2)|0;
  HEAP32[$25>>2] = $27;
  STACKTOP = sp;return;
 }
}
function __ZN4Game11oop_evalVarEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $var = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(4,26842,$vararg_buffer);
 $2 = ((($1)) + 3152|0);
 $3 = (__ZN6Script13fetchNextWordEv($2)|0);
 $4 = $3 << 16 >> 16;
 $var = $4;
 $5 = $var;
 $6 = ($5|0)>=(0);
 $7 = $var;
 $8 = ($7|0)<(310);
 $or$cond = $6 & $8;
 if ($or$cond) {
  $9 = $var;
  $10 = ((($1)) + 3804|0);
  $11 = (($10) + ($9<<1)|0);
  __ZN4Game8evalExprEPs($1,$11);
  STACKTOP = sp;return;
 } else {
  ___assert_fail((26862|0),(25136|0),1119,(26889|0));
  // unreachable;
 }
}
function __ZN4Game23oop_getSceneNumberInVarEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $var = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(4,26901,$vararg_buffer);
 $2 = ((($1)) + 3152|0);
 $3 = (__ZN6Script13fetchNextWordEv($2)|0);
 $4 = $3 << 16 >> 16;
 $var = $4;
 $5 = $var;
 $6 = ($5|0)>=(0);
 $7 = $var;
 $8 = ($7|0)<(310);
 $or$cond = $6 & $8;
 if ($or$cond) {
  $9 = ((($1)) + 4656|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $10&65535;
  $12 = $var;
  $13 = ((($1)) + 3804|0);
  $14 = (($13) + ($12<<1)|0);
  HEAP16[$14>>1] = $11;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((26862|0),(25136|0),1126,(26933|0));
  // unreachable;
 }
}
function __ZN4Game14oop_disableBoxEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $box = 0, $index = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(4,26957,$vararg_buffer);
 $2 = ((($1)) + 3152|0);
 $3 = (__ZN6Script13fetchNextWordEv($2)|0);
 $4 = $3 << 16 >> 16;
 $box = $4;
 $5 = ((($1)) + 3152|0);
 $6 = (__ZN6Script13fetchNextWordEv($5)|0);
 $7 = $6 << 16 >> 16;
 $index = $7;
 $8 = ((($1)) + 3152|0);
 $9 = ((($8)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = ((($1)) + 3152|0);
  $13 = ((($12)) + 28|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(38);
  if ($15) {
   STACKTOP = sp;return;
  }
  $16 = ((($1)) + 3152|0);
  $17 = ((($16)) + 28|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)==(39);
  if ($19) {
   STACKTOP = sp;return;
  }
 }
 $20 = $box;
 $21 = $index;
 $22 = (__ZN4Game8derefBoxEii($1,$20,$21)|0);
 $23 = ((($22)) + 8|0);
 HEAP8[$23>>0] = 0;
 STACKTOP = sp;return;
}
function __ZN4Game13oop_enableBoxEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $box = 0, $index = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(4,26980,$vararg_buffer);
 $2 = ((($1)) + 3152|0);
 $3 = (__ZN6Script13fetchNextWordEv($2)|0);
 $4 = $3 << 16 >> 16;
 $box = $4;
 $5 = ((($1)) + 3152|0);
 $6 = (__ZN6Script13fetchNextWordEv($5)|0);
 $7 = $6 << 16 >> 16;
 $index = $7;
 $8 = $box;
 $9 = $index;
 $10 = (__ZN4Game8derefBoxEii($1,$8,$9)|0);
 $11 = ((($10)) + 8|0);
 HEAP8[$11>>0] = 1;
 STACKTOP = sp;return;
}
function __ZN4Game17oop_evalBoxesXPosEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $box = 0, $i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(4,27002,$vararg_buffer);
 $b = 0;
 while(1) {
  $2 = $b;
  $3 = ($2|0)<(10);
  if (!($3)) {
   break;
  }
  $i = 0;
  while(1) {
   $4 = $i;
   $5 = $b;
   $6 = ((($1)) + 18964|0);
   $7 = (($6) + ($5<<2)|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($4|0)<($8|0);
   $10 = $b;
   if (!($9)) {
    break;
   }
   $11 = $i;
   $12 = (__ZN4Game8derefBoxEii($1,$10,$11)|0);
   $box = $12;
   $13 = $box;
   __ZN4Game8evalExprEPs($1,$13);
   $14 = ((($1)) + 3152|0);
   $15 = ((($14)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($16) - 4)|0;
   HEAP32[$15>>2] = $17;
   $18 = $box;
   $19 = ((($18)) + 2|0);
   __ZN4Game8evalExprEPs($1,$19);
   $20 = ((($1)) + 3152|0);
   $21 = ((($20)) + 4|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (($22) - 4)|0;
   HEAP32[$21>>2] = $23;
   $24 = $i;
   $25 = (($24) + 1)|0;
   $i = $25;
  }
  $26 = (($10) + 1)|0;
  $b = $26;
 }
 $27 = ((($1)) + 3152|0);
 $28 = ((($27)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($29) + 4)|0;
 HEAP32[$28>>2] = $30;
 STACKTOP = sp;return;
}
function __ZN4Game17oop_evalBoxesYPosEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $box = 0, $i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(4,27028,$vararg_buffer);
 $b = 0;
 while(1) {
  $2 = $b;
  $3 = ($2|0)<(10);
  if (!($3)) {
   break;
  }
  $i = 0;
  while(1) {
   $4 = $i;
   $5 = $b;
   $6 = ((($1)) + 18964|0);
   $7 = (($6) + ($5<<2)|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($4|0)<($8|0);
   $10 = $b;
   if (!($9)) {
    break;
   }
   $11 = $i;
   $12 = (__ZN4Game8derefBoxEii($1,$10,$11)|0);
   $box = $12;
   $13 = $box;
   $14 = ((($13)) + 4|0);
   __ZN4Game8evalExprEPs($1,$14);
   $15 = ((($1)) + 3152|0);
   $16 = ((($15)) + 4|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (($17) - 4)|0;
   HEAP32[$16>>2] = $18;
   $19 = $box;
   $20 = ((($19)) + 6|0);
   __ZN4Game8evalExprEPs($1,$20);
   $21 = ((($1)) + 3152|0);
   $22 = ((($21)) + 4|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (($23) - 4)|0;
   HEAP32[$22>>2] = $24;
   $25 = $i;
   $26 = (($25) + 1)|0;
   $i = $26;
  }
  $27 = (($10) + 1)|0;
  $b = $27;
 }
 $28 = ((($1)) + 3152|0);
 $29 = ((($28)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + 4)|0;
 HEAP32[$29>>2] = $31;
 STACKTOP = sp;return;
}
function __ZN4Game18oop_setBoxToObjectEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $box = 0, $index = 0, $so = 0, $var1A = 0, $var1C = 0, $var1E = 0, $var20 = 0, $var22 = 0, $var24 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(4,27054,$vararg_buffer);
 $2 = ((($1)) + 3152|0);
 $3 = (__ZN6Script13fetchNextWordEv($2)|0);
 $var1A = $3;
 $4 = ((($1)) + 3152|0);
 $5 = (__ZN6Script13fetchNextWordEv($4)|0);
 $var1C = $5;
 $6 = ((($1)) + 3152|0);
 $7 = ((($6)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($1)) + 3152|0);
 $10 = ((($9)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($1)) + 3152|0);
 $13 = ((($12)) + 16|0);
 $14 = (__ZN4Game16findObjectByNameEiiPb($1,$8,$11,$13)|0);
 $index = $14;
 $15 = $index;
 $16 = ($15|0)!=(-1);
 if ($16) {
  $17 = $index;
  $18 = (__ZN4Game16derefSceneObjectEi($1,$17)|0);
  $so = $18;
  $19 = $so;
  $20 = ((($19)) + 42|0);
  $21 = HEAP16[$20>>1]|0;
  $22 = $21 << 16 >> 16;
  $23 = ($22|0)!=(0);
  if ($23) {
   $24 = $index;
   $25 = (__ZN4Game22getObjectTransformXPosEi($1,$24)|0);
   $var1E = $25;
   $26 = $index;
   $27 = (__ZN4Game22getObjectTransformXPosEi($1,$26)|0);
   $var20 = $27;
   $28 = $index;
   $29 = (__ZN4Game22getObjectTransformYPosEi($1,$28)|0);
   $var22 = $29;
   $30 = $index;
   $31 = (__ZN4Game22getObjectTransformYPosEi($1,$30)|0);
   $var24 = $31;
   $32 = $var1A;
   $33 = $32 << 16 >> 16;
   $34 = $var1C;
   $35 = $34 << 16 >> 16;
   $36 = (__ZN4Game8derefBoxEii($1,$33,$35)|0);
   $box = $36;
   $37 = $var1E;
   $38 = $var20;
   $39 = (__Z3MINIsET_S0_S0_($37,$38)|0);
   $40 = $box;
   HEAP16[$40>>1] = $39;
   $41 = $var1E;
   $42 = $var20;
   $43 = (__Z3MAXIsET_S0_S0_($41,$42)|0);
   $44 = $box;
   $45 = ((($44)) + 2|0);
   HEAP16[$45>>1] = $43;
   $46 = $var24;
   $47 = $var22;
   $48 = (__Z3MINIsET_S0_S0_($46,$47)|0);
   $49 = $box;
   $50 = ((($49)) + 4|0);
   HEAP16[$50>>1] = $48;
   $51 = $var24;
   $52 = $var22;
   $53 = (__Z3MAXIsET_S0_S0_($51,$52)|0);
   $54 = $box;
   $55 = ((($54)) + 6|0);
   HEAP16[$55>>1] = $53;
   STACKTOP = sp;return;
  }
 }
 $56 = ((($1)) + 3152|0);
 $57 = ((($56)) + 4|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = (($58) + 24)|0;
 HEAP32[$57>>2] = $59;
 STACKTOP = sp;return;
}
function __ZN4Game13oop_clipBoxesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $box = 0, $i = 0, $vararg_buffer = 0, $x1 = 0, $x2 = 0;
 var $y1 = 0, $y2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(4,27081,$vararg_buffer);
 $2 = ((($1)) + 3152|0);
 $3 = (__ZN6Script13fetchNextWordEv($2)|0);
 $x1 = $3;
 $4 = ((($1)) + 3152|0);
 $5 = (__ZN6Script13fetchNextWordEv($4)|0);
 $y1 = $5;
 $6 = ((($1)) + 3152|0);
 $7 = (__ZN6Script13fetchNextWordEv($6)|0);
 $x2 = $7;
 $8 = ((($1)) + 3152|0);
 $9 = (__ZN6Script13fetchNextWordEv($8)|0);
 $y2 = $9;
 $b = 0;
 while(1) {
  $10 = $b;
  $11 = ($10|0)<(10);
  if (!($11)) {
   break;
  }
  $i = 0;
  while(1) {
   $12 = $i;
   $13 = $b;
   $14 = ((($1)) + 18964|0);
   $15 = (($14) + ($13<<2)|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($12|0)<($16|0);
   $18 = $b;
   if (!($17)) {
    break;
   }
   $19 = $i;
   $20 = (__ZN4Game8derefBoxEii($1,$18,$19)|0);
   $box = $20;
   $21 = $box;
   $22 = HEAP16[$21>>1]|0;
   $23 = $x1;
   $24 = $x2;
   $25 = (__Z4CLIPIsET_S0_S0_S0_($22,$23,$24)|0);
   $26 = $box;
   HEAP16[$26>>1] = $25;
   $27 = $box;
   $28 = ((($27)) + 2|0);
   $29 = HEAP16[$28>>1]|0;
   $30 = $x1;
   $31 = $x2;
   $32 = (__Z4CLIPIsET_S0_S0_S0_($29,$30,$31)|0);
   $33 = $box;
   $34 = ((($33)) + 2|0);
   HEAP16[$34>>1] = $32;
   $35 = $box;
   $36 = ((($35)) + 4|0);
   $37 = HEAP16[$36>>1]|0;
   $38 = $y1;
   $39 = $y2;
   $40 = (__Z4CLIPIsET_S0_S0_S0_($37,$38,$39)|0);
   $41 = $box;
   $42 = ((($41)) + 4|0);
   HEAP16[$42>>1] = $40;
   $43 = $box;
   $44 = ((($43)) + 6|0);
   $45 = HEAP16[$44>>1]|0;
   $46 = $y1;
   $47 = $y2;
   $48 = (__Z4CLIPIsET_S0_S0_S0_($45,$46,$47)|0);
   $49 = $box;
   $50 = ((($49)) + 6|0);
   HEAP16[$50>>1] = $48;
   $51 = $i;
   $52 = (($51) + 1)|0;
   $i = $52;
  }
  $53 = (($18) + 1)|0;
  $b = $53;
 }
 STACKTOP = sp;return;
}
function __ZN4Game20oop_saveObjectStatusEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $index = 0, $so = 0, $stat = 0, $vararg_buffer = 0, $xPrev = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(4,27103,$vararg_buffer);
 $2 = ((($1)) + 3152|0);
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (__ZN4Game16derefSceneObjectEi($1,$4)|0);
 $so = $5;
 $6 = $so;
 $7 = ((($6)) + 26|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8 << 16 >> 16;
 $10 = ($9|0)==(2);
 $11 = $so;
 $12 = ((($11)) + 8|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = $13 << 16 >> 16;
 if ($10) {
  $15 = $so;
  $16 = ((($15)) + 20|0);
  $17 = HEAP16[$16>>1]|0;
  $18 = $17 << 16 >> 16;
  $19 = ((($1)) + 19044|0);
  $20 = (($19) + (($18*20)|0)|0);
  $21 = ((($20)) + 4|0);
  $22 = ((($21)) + 2|0);
  $23 = HEAP16[$22>>1]|0;
  $24 = $23 << 16 >> 16;
  $25 = (($14) + ($24))|0;
  $26 = (($25) - 1)|0;
  $xPrev = $26;
 } else {
  $xPrev = $14;
 }
 $27 = ((($1)) + 3152|0);
 $28 = (__ZN6Script13fetchNextWordEv($27)|0);
 $29 = $28 << 16 >> 16;
 $index = $29;
 $30 = $index;
 $31 = (__ZN4Game22derefSceneObjectStatusEi($1,$30)|0);
 $stat = $31;
 $32 = $xPrev;
 $33 = $32&65535;
 $34 = $stat;
 HEAP16[$34>>1] = $33;
 $35 = $so;
 $36 = ((($35)) + 10|0);
 $37 = HEAP16[$36>>1]|0;
 $38 = $stat;
 $39 = ((($38)) + 2|0);
 HEAP16[$39>>1] = $37;
 $40 = $so;
 $41 = ((($40)) + 14|0);
 $42 = HEAP16[$41>>1]|0;
 $43 = $stat;
 $44 = ((($43)) + 4|0);
 HEAP16[$44>>1] = $42;
 $45 = $so;
 $46 = ((($45)) + 32|0);
 $47 = HEAP16[$46>>1]|0;
 $48 = $47 << 16 >> 16;
 $49 = $so;
 $50 = ((($49)) + 32|0);
 $51 = HEAP16[$50>>1]|0;
 $52 = $51 << 16 >> 16;
 $53 = ((($1)) + 79612|0);
 $54 = (($53) + (($52*6)|0)|0);
 $55 = ((($54)) + 4|0);
 $56 = HEAP16[$55>>1]|0;
 $57 = $56 << 16 >> 16;
 $58 = ((($1)) + 10556|0);
 $59 = (($58) + (($57*40)|0)|0);
 $60 = ((($59)) + 20|0);
 $61 = HEAP16[$60>>1]|0;
 $62 = $61 << 16 >> 16;
 $63 = (($48) - ($62))|0;
 $64 = $63&65535;
 $65 = $stat;
 $66 = ((($65)) + 6|0);
 HEAP16[$66>>1] = $64;
 $67 = $so;
 $68 = ((($67)) + 20|0);
 $69 = HEAP16[$68>>1]|0;
 $70 = $69 << 16 >> 16;
 $71 = $so;
 $72 = ((($71)) + 32|0);
 $73 = HEAP16[$72>>1]|0;
 $74 = $73 << 16 >> 16;
 $75 = ((($1)) + 79612|0);
 $76 = (($75) + (($74*6)|0)|0);
 $77 = HEAP16[$76>>1]|0;
 $78 = $77 << 16 >> 16;
 $79 = (($70) - ($78))|0;
 $80 = $79&65535;
 $81 = $stat;
 $82 = ((($81)) + 8|0);
 HEAP16[$82>>1] = $80;
 $83 = $so;
 $84 = ((($83)) + 26|0);
 $85 = HEAP16[$84>>1]|0;
 $86 = $stat;
 $87 = ((($86)) + 10|0);
 HEAP16[$87>>1] = $85;
 STACKTOP = sp;return;
}
function __ZN4Game18oop_addObjectToBagEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $bo = 0, $index = 0;
 var $size = 0, $so = 0, $sof = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(4,27132,$vararg_buffer);
 $2 = ((($1)) + 3152|0);
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 3152|0);
 $6 = ((($5)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 3152|0);
 $9 = ((($8)) + 16|0);
 $10 = (__ZN4Game16findObjectByNameEiiPb($1,$4,$7,$9)|0);
 $index = $10;
 $11 = $index;
 $12 = ($11|0)!=(-1);
 if (!($12)) {
  STACKTOP = sp;return;
 }
 $13 = $index;
 $14 = (__ZN4Game16derefSceneObjectEi($1,$13)|0);
 $so = $14;
 $15 = $so;
 $16 = ((($15)) + 46|0);
 $17 = (__ZNK4Game19findBagObjectByNameEPKc($1,$16)|0);
 $18 = ($17|0)==(-1);
 if (!($18)) {
  STACKTOP = sp;return;
 }
 $19 = ((($1)) + 79608|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)<(20);
 if (!($21)) {
  ___assert_fail((27159|0),(25136|0),1241,(27194|0));
  // unreachable;
 }
 $22 = ((($1)) + 79608|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($1)) + 79048|0);
 $25 = (($24) + (($23*28)|0)|0);
 $bo = $25;
 $26 = $bo;
 $27 = $so;
 $28 = ((($27)) + 46|0);
 (_strcpy($26,$28)|0);
 $29 = $so;
 $30 = ((($29)) + 20|0);
 $31 = HEAP16[$30>>1]|0;
 $32 = $31 << 16 >> 16;
 $33 = ((($1)) + 19044|0);
 $34 = (($33) + (($32*20)|0)|0);
 $sof = $34;
 $35 = $sof;
 $36 = ((($35)) + 4|0);
 $37 = ((($36)) + 2|0);
 $38 = HEAP16[$37>>1]|0;
 $39 = $38 << 16 >> 16;
 $40 = $sof;
 $41 = ((($40)) + 4|0);
 $42 = ((($41)) + 4|0);
 $43 = HEAP16[$42>>1]|0;
 $44 = $43 << 16 >> 16;
 $45 = Math_imul($39, $44)|0;
 $46 = (($45) + 4)|0;
 $size = $46;
 $47 = $size;
 $48 = (_malloc($47)|0);
 $49 = $bo;
 $50 = ((($49)) + 20|0);
 HEAP32[$50>>2] = $48;
 $51 = $bo;
 $52 = ((($51)) + 20|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = ($53|0)!=(0|0);
 if ($54) {
  $55 = $sof;
  $56 = HEAP32[$55>>2]|0;
  $57 = $bo;
  $58 = ((($57)) + 20|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = (__Z10decodeLzssPKhPh($56,$59)|0);
  $61 = $bo;
  $62 = ((($61)) + 24|0);
  HEAP32[$62>>2] = $60;
  $63 = $bo;
  $64 = ((($63)) + 24|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $size;
  $67 = ($65|0)==($66|0);
  if (!($67)) {
   ___assert_fail((27213|0),(25136|0),1250,(27194|0));
   // unreachable;
  }
 }
 $68 = ((($1)) + 79608|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = (($69) + 1)|0;
 HEAP32[$68>>2] = $70;
 $71 = ((($1)) + 79608|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = ($72|0)!=(0);
 if (!($73)) {
  STACKTOP = sp;return;
 }
 $74 = ((($1)) + 4460|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = ($75|0)==(-1);
 if (!($76)) {
  STACKTOP = sp;return;
 }
 $77 = ((($1)) + 4460|0);
 HEAP32[$77>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN4Game23oop_removeObjectFromBagEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count = 0, $index = 0, $name = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(4,27234,$vararg_buffer);
 $2 = ((($1)) + 3152|0);
 $3 = (__ZN6Script15fetchNextStringEv($2)|0);
 $name = $3;
 $4 = $name;
 $5 = (__ZNK4Game19findBagObjectByNameEPKc($1,$4)|0);
 $index = $5;
 $6 = $index;
 $7 = ($6|0)!=(-1);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = ((($1)) + 4460|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $index;
 $11 = ($9|0)==($10|0);
 do {
  if ($11) {
   $12 = ((($1)) + 79608|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)>=(1);
   $15 = ((($1)) + 4460|0);
   if ($14) {
    HEAP32[$15>>2] = 0;
    break;
   } else {
    HEAP32[$15>>2] = -1;
    break;
   }
  } else {
   $16 = ((($1)) + 4460|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = $index;
   $19 = ($17|0)>($18|0);
   if ($19) {
    $20 = ((($1)) + 4460|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = (($21) + -1)|0;
    HEAP32[$20>>2] = $22;
   }
  }
 } while(0);
 $23 = $index;
 $24 = ((($1)) + 79048|0);
 $25 = (($24) + (($23*28)|0)|0);
 $26 = ((($25)) + 20|0);
 $27 = HEAP32[$26>>2]|0;
 _free($27);
 $28 = ((($1)) + 79608|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $index;
 $31 = (($29) - ($30))|0;
 $32 = (($31) - 1)|0;
 $count = $32;
 $33 = $count;
 $34 = ($33|0)!=(0);
 if ($34) {
  $35 = $index;
  $36 = ((($1)) + 79048|0);
  $37 = (($36) + (($35*28)|0)|0);
  $38 = $index;
  $39 = (($38) + 1)|0;
  $40 = ((($1)) + 79048|0);
  $41 = (($40) + (($39*28)|0)|0);
  $42 = $count;
  $43 = ($42*28)|0;
  _memmove(($37|0),($41|0),($43|0))|0;
 }
 $44 = ((($1)) + 79608|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (($45) + -1)|0;
 HEAP32[$44>>2] = $46;
 STACKTOP = sp;return;
}
function __ZN4Game31oop_playSoundLowerEqualPriorityEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $num = 0, $priority = 0, $so = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(4,27266,$vararg_buffer);
 $2 = ((($1)) + 3152|0);
 $3 = (__ZN6Script13fetchNextWordEv($2)|0);
 $4 = $3 << 16 >> 16;
 $num = $4;
 $5 = ((($1)) + 3152|0);
 $6 = (__ZN6Script13fetchNextWordEv($5)|0);
 $7 = $6 << 16 >> 16;
 $priority = $7;
 $8 = $priority;
 $9 = ((($1)) + 4472|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8|0)>($10|0);
 if ($11) {
  $12 = (__ZN4Game18win16_sndPlaySoundEiPv($1,22,0)|0);
  $13 = ($12|0)==(0);
  if ($13) {
   STACKTOP = sp;return;
  }
 }
 $14 = ((($1)) + 3152|0);
 $15 = ((($14)) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (__ZN4Game16derefSceneObjectEi($1,$16)|0);
 $so = $17;
 $18 = $so;
 $19 = ((($18)) + 32|0);
 $20 = HEAP16[$19>>1]|0;
 $21 = $20 << 16 >> 16;
 $22 = ((($1)) + 79612|0);
 $23 = (($22) + (($21*6)|0)|0);
 $24 = ((($23)) + 4|0);
 $25 = HEAP16[$24>>1]|0;
 $26 = $25 << 16 >> 16;
 $27 = ((($1)) + 10556|0);
 $28 = (($27) + (($26*40)|0)|0);
 $29 = ((($28)) + 28|0);
 $30 = HEAP16[$29>>1]|0;
 $31 = $30 << 16 >> 16;
 $32 = (($31) - 1)|0;
 $33 = $num;
 $34 = (($33) + ($32))|0;
 $num = $34;
 $35 = $num;
 $36 = ($35|0)>=(0);
 if (!($36)) {
  ___assert_fail((27306|0),(25136|0),1297,(27343|0));
  // unreachable;
 }
 $37 = $num;
 $38 = ((($1)) + 15760|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($37|0)<($39|0);
 if (!($40)) {
  ___assert_fail((27306|0),(25136|0),1297,(27343|0));
  // unreachable;
 }
 $41 = $num;
 $42 = ((($1)) + 12560|0);
 $43 = (($42) + (($41*40)|0)|0);
 (__ZN4Game18win16_sndPlaySoundEiPv($1,3,$43)|0);
 $44 = $priority;
 $45 = ((($1)) + 4472|0);
 HEAP32[$45>>2] = $44;
 STACKTOP = sp;return;
}
function __ZN4Game26oop_playSoundLowerPriorityEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $num = 0, $priority = 0, $so = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(4,27375,$vararg_buffer);
 $2 = ((($1)) + 3152|0);
 $3 = (__ZN6Script13fetchNextWordEv($2)|0);
 $4 = $3 << 16 >> 16;
 $num = $4;
 $5 = ((($1)) + 3152|0);
 $6 = (__ZN6Script13fetchNextWordEv($5)|0);
 $7 = $6 << 16 >> 16;
 $priority = $7;
 $8 = $priority;
 $9 = ((($1)) + 4472|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8|0)>=($10|0);
 if ($11) {
  $12 = (__ZN4Game18win16_sndPlaySoundEiPv($1,22,0)|0);
  $13 = ($12|0)==(0);
  if ($13) {
   STACKTOP = sp;return;
  }
 }
 $14 = ((($1)) + 3152|0);
 $15 = ((($14)) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (__ZN4Game16derefSceneObjectEi($1,$16)|0);
 $so = $17;
 $18 = $so;
 $19 = ((($18)) + 32|0);
 $20 = HEAP16[$19>>1]|0;
 $21 = $20 << 16 >> 16;
 $22 = ((($1)) + 79612|0);
 $23 = (($22) + (($21*6)|0)|0);
 $24 = ((($23)) + 4|0);
 $25 = HEAP16[$24>>1]|0;
 $26 = $25 << 16 >> 16;
 $27 = ((($1)) + 10556|0);
 $28 = (($27) + (($26*40)|0)|0);
 $29 = ((($28)) + 28|0);
 $30 = HEAP16[$29>>1]|0;
 $31 = $30 << 16 >> 16;
 $32 = (($31) - 1)|0;
 $33 = $num;
 $34 = (($33) + ($32))|0;
 $num = $34;
 $35 = $num;
 $36 = ($35|0)>=(0);
 if (!($36)) {
  ___assert_fail((27306|0),(25136|0),1313,(27410|0));
  // unreachable;
 }
 $37 = $num;
 $38 = ((($1)) + 15760|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($37|0)<($39|0);
 if (!($40)) {
  ___assert_fail((27306|0),(25136|0),1313,(27410|0));
  // unreachable;
 }
 $41 = $num;
 $42 = ((($1)) + 12560|0);
 $43 = (($42) + (($41*40)|0)|0);
 (__ZN4Game18win16_sndPlaySoundEiPv($1,3,$43)|0);
 $44 = $priority;
 $45 = ((($1)) + 4472|0);
 HEAP32[$45>>2] = $44;
 STACKTOP = sp;return;
}
function __ZN4Game17oop_startDialogueEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(4,27437,$vararg_buffer);
 $2 = ((($1)) + 3152|0);
 $3 = (__ZN6Script15fetchNextStringEv($2)|0);
 $4 = ((($1)) + 4424|0);
 HEAP32[$4>>2] = $3;
 $5 = ((($1)) + 3152|0);
 $6 = (__ZN6Script15fetchNextStringEv($5)|0);
 $7 = ((($1)) + 4428|0);
 HEAP32[$7>>2] = $6;
 $8 = ((($1)) + 3152|0);
 $9 = (__ZN6Script15fetchNextStringEv($8)|0);
 $10 = ((($1)) + 4432|0);
 HEAP32[$10>>2] = $9;
 $11 = ((($1)) + 3152|0);
 $12 = (__ZN6Script15fetchNextStringEv($11)|0);
 $13 = ((($1)) + 4436|0);
 HEAP32[$13>>2] = $12;
 $14 = ((($1)) + 4441|0);
 HEAP8[$14>>0] = 1;
 STACKTOP = sp;return;
}
function __ZN4Game25oop_switchSceneClearBoxesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $foundScene = 0, $i = 0, $i1 = 0, $num = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(4,27463,$vararg_buffer);
 $foundScene = 0;
 $2 = ((($1)) + 3152|0);
 $3 = (__ZN6Script13fetchNextWordEv($2)|0);
 $4 = $3 << 16 >> 16;
 $num = $4;
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = ((($1)) + 81856|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($5|0)<($7|0);
  if (!($8)) {
   break;
  }
  $9 = $i;
  $10 = ((($1)) + 81416|0);
  $11 = (($10) + (($9*22)|0)|0);
  $12 = HEAP16[$11>>1]|0;
  $13 = $12 << 16 >> 16;
  $14 = $num;
  $15 = ($13|0)==($14|0);
  $16 = $i;
  if ($15) {
   label = 4;
   break;
  }
  $19 = (($16) + 1)|0;
  $i = $19;
 }
 if ((label|0) == 4) {
  $17 = ((($1)) + 3152|0);
  $18 = ((($17)) + 24|0);
  HEAP32[$18>>2] = $16;
  $foundScene = 1;
 }
 $20 = $foundScene;
 $21 = $20&1;
 if (!($21)) {
  STACKTOP = sp;return;
 }
 $i1 = 0;
 while(1) {
  $22 = $i1;
  $23 = ($22|0)<(10);
  if (!($23)) {
   break;
  }
  $24 = $i1;
  $25 = (10 + ($24))|0;
  $26 = ((($1)) + 18964|0);
  $27 = (($26) + ($25<<2)|0);
  HEAP32[$27>>2] = 0;
  $28 = $i1;
  $29 = (($28) + 1)|0;
  $i1 = $29;
 }
 STACKTOP = sp;return;
}
function __ZN4Game24oop_switchSceneCopyBoxesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $foundScene = 0, $i = 0, $i1 = 0, $num = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 __Z5debugtPKcz(4,27497,$vararg_buffer);
 $foundScene = 0;
 $2 = ((($1)) + 3152|0);
 $3 = (__ZN6Script13fetchNextWordEv($2)|0);
 $4 = $3 << 16 >> 16;
 $num = $4;
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = ((($1)) + 81856|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($5|0)<($7|0);
  if (!($8)) {
   break;
  }
  $9 = $i;
  $10 = ((($1)) + 81416|0);
  $11 = (($10) + (($9*22)|0)|0);
  $12 = HEAP16[$11>>1]|0;
  $13 = $12 << 16 >> 16;
  $14 = $num;
  $15 = ($13|0)==($14|0);
  $16 = $i;
  if ($15) {
   label = 4;
   break;
  }
  $19 = (($16) + 1)|0;
  $i = $19;
 }
 if ((label|0) == 4) {
  $17 = ((($1)) + 3152|0);
  $18 = ((($17)) + 24|0);
  HEAP32[$18>>2] = $16;
  $foundScene = 1;
 }
 $20 = $foundScene;
 $21 = $20&1;
 if (!($21)) {
  STACKTOP = sp;return;
 }
 $i1 = 0;
 while(1) {
  $22 = $i1;
  $23 = ($22|0)<(10);
  if (!($23)) {
   break;
  }
  $24 = $i1;
  $25 = ((($1)) + 18964|0);
  $26 = (($25) + ($24<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $i1;
  $29 = (10 + ($28))|0;
  $30 = ((($1)) + 18964|0);
  $31 = (($30) + ($29<<2)|0);
  HEAP32[$31>>2] = $27;
  $32 = $i1;
  $33 = ((($1)) + 18964|0);
  $34 = (($33) + ($32<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ($35|0)!=(0);
  if ($36) {
   $37 = $i1;
   $38 = (10 + ($37))|0;
   $39 = ((($1)) + 15764|0);
   $40 = (($39) + (($38*160)|0)|0);
   $41 = $i1;
   $42 = ((($1)) + 15764|0);
   $43 = (($42) + (($41*160)|0)|0);
   $44 = $i1;
   $45 = ((($1)) + 18964|0);
   $46 = (($45) + ($44<<2)|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = $47<<4;
   _memcpy(($40|0),($43|0),($48|0))|0;
  }
  $49 = $i1;
  $50 = (($49) + 1)|0;
  $i1 = $50;
 }
 STACKTOP = sp;return;
}
function __Z3MINIsET_S0_S0_($v1,$v2) {
 $v1 = $v1|0;
 $v2 = $v2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v1;
 $1 = $v2;
 $2 = $0;
 $3 = $2 << 16 >> 16;
 $4 = $1;
 $5 = $4 << 16 >> 16;
 $6 = ($3|0)<($5|0);
 $7 = $0;
 $8 = $1;
 $9 = $6 ? $7 : $8;
 STACKTOP = sp;return ($9|0);
}
function __Z3MAXIsET_S0_S0_($v1,$v2) {
 $v1 = $v1|0;
 $v2 = $v2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v1;
 $1 = $v2;
 $2 = $0;
 $3 = $2 << 16 >> 16;
 $4 = $1;
 $5 = $4 << 16 >> 16;
 $6 = ($3|0)>($5|0);
 $7 = $0;
 $8 = $1;
 $9 = $6 ? $7 : $8;
 STACKTOP = sp;return ($9|0);
}
function __ZL9boxInRectP3Boxiiii($box,$rect_x1,$rect_x2,$rect_y1,$rect_y2) {
 $box = $box|0;
 $rect_x1 = $rect_x1|0;
 $rect_x2 = $rect_x2|0;
 $rect_y1 = $rect_y1|0;
 $rect_y2 = $rect_y2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $xmax = 0, $xmin = 0;
 var $ymax = 0, $ymin = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $box;
 $1 = $rect_x1;
 $2 = $rect_x2;
 $3 = $rect_y1;
 $4 = $rect_y2;
 $5 = $0;
 $6 = HEAP16[$5>>1]|0;
 $7 = $6 << 16 >> 16;
 $8 = $0;
 $9 = ((($8)) + 2|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10 << 16 >> 16;
 $12 = ($7|0)<=($11|0);
 if (!($12)) {
  ___assert_fail((27658|0),(27568|0),227,(27699|0));
  // unreachable;
 }
 $13 = $0;
 $14 = ((($13)) + 4|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = $15 << 16 >> 16;
 $17 = $0;
 $18 = ((($17)) + 6|0);
 $19 = HEAP16[$18>>1]|0;
 $20 = $19 << 16 >> 16;
 $21 = ($16|0)<=($20|0);
 if (!($21)) {
  ___assert_fail((27658|0),(27568|0),227,(27699|0));
  // unreachable;
 }
 $22 = $1;
 $23 = $2;
 $24 = (__Z3MINIiET_S0_S0_($22,$23)|0);
 $xmin = $24;
 $25 = $1;
 $26 = $2;
 $27 = (__Z3MAXIiET_S0_S0_($25,$26)|0);
 $xmax = $27;
 $28 = $3;
 $29 = $4;
 $30 = (__Z3MINIiET_S0_S0_($28,$29)|0);
 $ymin = $30;
 $31 = $3;
 $32 = $4;
 $33 = (__Z3MAXIiET_S0_S0_($31,$32)|0);
 $ymax = $33;
 $34 = $0;
 $35 = HEAP16[$34>>1]|0;
 $36 = $35 << 16 >> 16;
 $37 = $xmax;
 $38 = ($36|0)<=($37|0);
 if (!($38)) {
  $57 = 0;
  STACKTOP = sp;return ($57|0);
 }
 $39 = $0;
 $40 = ((($39)) + 2|0);
 $41 = HEAP16[$40>>1]|0;
 $42 = $41 << 16 >> 16;
 $43 = $xmin;
 $44 = ($42|0)>=($43|0);
 if (!($44)) {
  $57 = 0;
  STACKTOP = sp;return ($57|0);
 }
 $45 = $0;
 $46 = ((($45)) + 4|0);
 $47 = HEAP16[$46>>1]|0;
 $48 = $47 << 16 >> 16;
 $49 = $ymax;
 $50 = ($48|0)<=($49|0);
 if (!($50)) {
  $57 = 0;
  STACKTOP = sp;return ($57|0);
 }
 $51 = $0;
 $52 = ((($51)) + 6|0);
 $53 = HEAP16[$52>>1]|0;
 $54 = $53 << 16 >> 16;
 $55 = $ymin;
 $56 = ($54|0)>=($55|0);
 $57 = $56;
 STACKTOP = sp;return ($57|0);
}
function __ZN6Script15fetchNextStringEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $len = 0, $str = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (__ZN6Script13fetchNextWordEv($1)|0);
 $3 = $2 << 16 >> 16;
 $len = $3;
 $4 = $len;
 $5 = ($4|0)>=(1);
 if (!($5)) {
  ___assert_fail((27600|0),(27568|0),136,(27609|0));
  // unreachable;
 }
 $6 = HEAP32[$1>>2]|0;
 $7 = ((($1)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + ($8)|0);
 $str = $9;
 $10 = $len;
 $11 = ((($1)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + ($10))|0;
 HEAP32[$11>>2] = $13;
 $14 = $len;
 $15 = ($14|0)>=(1);
 if (!($15)) {
  ___assert_fail((27625|0),(27568|0),139,(27609|0));
  // unreachable;
 }
 $16 = $len;
 $17 = (($16) - 1)|0;
 $18 = $str;
 $19 = (($18) + ($17)|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20 << 24 >> 24;
 $22 = ($21|0)==(0);
 if ($22) {
  $23 = $str;
  STACKTOP = sp;return ($23|0);
 } else {
  ___assert_fail((27625|0),(27568|0),139,(27609|0));
  // unreachable;
 }
 return (0)|0;
}
function __Z4CLIPIsET_S0_S0_S0_($t,$tmin,$tmax) {
 $t = $t|0;
 $tmin = $tmin|0;
 $tmax = $tmax|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $t;
 $2 = $tmin;
 $3 = $tmax;
 $4 = $1;
 $5 = $4 << 16 >> 16;
 $6 = $2;
 $7 = $6 << 16 >> 16;
 $8 = ($5|0)<($7|0);
 do {
  if ($8) {
   $9 = $2;
   $0 = $9;
  } else {
   $10 = $1;
   $11 = $10 << 16 >> 16;
   $12 = $3;
   $13 = $12 << 16 >> 16;
   $14 = ($11|0)>($13|0);
   if ($14) {
    $15 = $3;
    $0 = $15;
    break;
   } else {
    $16 = $1;
    $0 = $16;
    break;
   }
  }
 } while(0);
 $17 = $0;
 STACKTOP = sp;return ($17|0);
}
function __ZN4Game22derefSceneObjectStatusEi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $0;
 $3 = $1;
 $4 = ($3|0)>=(0);
 $5 = $1;
 $6 = ($5|0)<(200);
 $or$cond = $4 & $6;
 if ($or$cond) {
  $7 = $1;
  $8 = ((($2)) + 81860|0);
  $9 = (($8) + (($7*12)|0)|0);
  STACKTOP = sp;return ($9|0);
 } else {
  ___assert_fail((27530|0),(27568|0),268,(27577|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZN4Game8parseDLGEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $dc = 0, $s = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $s = sp + 16|0;
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 2984|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 2180|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$s>>2] = $4;
 while(1) {
  $5 = HEAP32[$s>>2]|0;
  $6 = ($5|0)!=(0|0);
  if (!($6)) {
   label = 13;
   break;
  }
  $7 = ((($1)) + 2984|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)<(40);
  if (!($9)) {
   label = 4;
   break;
  }
  $10 = ((($1)) + 2984|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($1)) + 2184|0);
  $13 = (($12) + (($11*20)|0)|0);
  $dc = $13;
  $14 = (__Z15stringNextTokenPPc($s)|0);
  $15 = $dc;
  HEAP32[$15>>2] = $14;
  $16 = HEAP32[$s>>2]|0;
  $17 = ($16|0)!=(0|0);
  if (!($17)) {
   label = 13;
   break;
  }
  $18 = (__ZL12getNextTokenPPc($s)|0);
  HEAP32[688>>2] = $18;
  $19 = HEAP32[688>>2]|0;
  switch ($19|0) {
  case 0:  {
   $20 = $dc;
   $21 = ((($20)) + 4|0);
   HEAP8[$21>>0] = 1;
   break;
  }
  case 1:  {
   $22 = $dc;
   $23 = ((($22)) + 4|0);
   HEAP8[$23>>0] = 0;
   break;
  }
  default: {
   $24 = HEAP32[688>>2]|0;
   HEAP32[$vararg_buffer>>2] = $24;
   __Z5errorPKcz(27797,$vararg_buffer);
  }
  }
  $25 = (__Z15stringNextTokenPPc($s)|0);
  $26 = $dc;
  $27 = ((($26)) + 8|0);
  HEAP32[$27>>2] = $25;
  $28 = (__Z15stringNextTokenPPc($s)|0);
  $29 = $dc;
  $30 = ((($29)) + 12|0);
  HEAP32[$30>>2] = $28;
  $31 = (__ZL12getNextTokenPPc($s)|0);
  HEAP32[688>>2] = $31;
  $32 = HEAP32[688>>2]|0;
  $33 = ($32|0)!=(2);
  if ($33) {
   $34 = HEAP32[688>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $34;
   __Z5errorPKcz(27797,$vararg_buffer1);
  }
  $35 = (__Z18stringNextTokenEOLPPc($s)|0);
  $36 = $dc;
  $37 = ((($36)) + 16|0);
  HEAP32[$37>>2] = $35;
  $38 = ((($1)) + 2984|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (($39) + 1)|0;
  HEAP32[$38>>2] = $40;
 }
 if ((label|0) == 4) {
  ___assert_fail((27709|0),(27750|0),39,(27765|0));
  // unreachable;
 }
 else if ((label|0) == 13) {
  STACKTOP = sp;return;
 }
}
function __ZL12getNextTokenPPc($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $token = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $1;
 $3 = (__Z15stringNextTokenPPc($2)|0);
 $token = $3;
 $4 = $token;
 $5 = ($4|0)!=(0|0);
 do {
  if ($5) {
   $6 = $token;
   $7 = HEAP8[$6>>0]|0;
   $8 = ($7<<24>>24)!=(0);
   if ($8) {
    $9 = $token;
    $10 = (_strcmp($9,27774)|0);
    $11 = ($10|0)==(0);
    if ($11) {
     $0 = 0;
     break;
    }
    $12 = $token;
    $13 = (_strcmp($12,28329)|0);
    $14 = ($13|0)==(0);
    if ($14) {
     $0 = 1;
     break;
    }
    $15 = $token;
    $16 = (_strcmp($15,28326)|0);
    $17 = ($16|0)==(0);
    if ($17) {
     $0 = 2;
     break;
    } else {
     $0 = 4;
     break;
    }
   } else {
    label = 3;
   }
  } else {
   label = 3;
  }
 } while(0);
 if ((label|0) == 3) {
  $0 = 3;
 }
 $18 = $0;
 STACKTOP = sp;return ($18|0);
}
function __ZN4Game8parseSCNEPKc($this,$fileName) {
 $this = $this|0;
 $fileName = $fileName|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $anim = 0, $compareTest = 0, $didTest = 0, $fp = 0, $loadMovData = 0, $s = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $fp = sp + 48|0;
 $s = sp + 32|0;
 $0 = $this;
 $1 = $fileName;
 $4 = $0;
 __Z5debugtPKcz(2,27779,$vararg_buffer);
 $5 = ((($4)) + 16|0);
 $6 = $1;
 __ZN10FileHolderC2ER10FileSystemPKc($fp,$5,$6);
 __THREW__ = 0;
 $7 = (invoke_ii(157,($fp|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 L1: do {
  if (!($9)) {
   __THREW__ = 0;
   $10 = (invoke_ii(164,($7|0))|0);
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   if (!($12)) {
    $13 = ((($4)) + 3144|0);
    HEAP32[$13>>2] = $10;
    $14 = ((($4)) + 3144|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = (($15) + 1)|0;
    __THREW__ = 0;
    $17 = (invoke_ii(162,($16|0))|0);
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if (!($19)) {
     $20 = ((($4)) + 3148|0);
     HEAP32[$20>>2] = $17;
     $21 = ((($4)) + 3148|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ($22|0)!=(0|0);
     if (!($23)) {
      $24 = ((($4)) + 3144|0);
      $25 = HEAP32[$24>>2]|0;
      $26 = (($25) + 1)|0;
      __THREW__ = 0;
      HEAP32[$vararg_buffer1>>2] = $26;
      invoke_vii(159,(29166|0),($vararg_buffer1|0));
      $27 = __THREW__; __THREW__ = 0;
      $28 = $27&1;
      if ($28) {
       break;
      }
     }
     __THREW__ = 0;
     $33 = (invoke_ii(157,($fp|0))|0);
     $34 = __THREW__; __THREW__ = 0;
     $35 = $34&1;
     if (!($35)) {
      $36 = ((($4)) + 3148|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($4)) + 3144|0);
      $39 = HEAP32[$38>>2]|0;
      __THREW__ = 0;
      (invoke_iiii(163,($33|0),($37|0),($39|0))|0);
      $40 = __THREW__; __THREW__ = 0;
      $41 = $40&1;
      if (!($41)) {
       $42 = ((($4)) + 3144|0);
       $43 = HEAP32[$42>>2]|0;
       $44 = ((($4)) + 3148|0);
       $45 = HEAP32[$44>>2]|0;
       $46 = (($45) + ($43)|0);
       HEAP8[$46>>0] = 0;
       $47 = ((($4)) + 3148|0);
       $48 = HEAP32[$47>>2]|0;
       __THREW__ = 0;
       invoke_vi(165,($48|0));
       $49 = __THREW__; __THREW__ = 0;
       $50 = $49&1;
       if (!($50)) {
        $anim = 0;
        $loadMovData = 0;
        $51 = ((($4)) + 4656|0);
        HEAP32[$51>>2] = 0;
        HEAP32[692>>2] = 0;
        $52 = ((($4)) + 3184|0);
        $53 = ((($4)) + 3804|0);
        _memcpy(($52|0),($53|0),620)|0;
        HEAP32[696>>2] = 0;
        HEAP8[27796>>0] = 0;
        $54 = ((($4)) + 3148|0);
        $55 = HEAP32[$54>>2]|0;
        HEAP32[$s>>2] = $55;
        L11: while(1) {
         $56 = HEAP8[27796>>0]|0;
         $57 = $56&1;
         $58 = HEAP32[$s>>2]|0;
         $59 = ($58|0)!=(0|0);
         $60 = $57 ? 0 : $59;
         if (!($60)) {
          break;
         }
         $didTest = 0;
         $compareTest = 1;
         while(1) {
          __THREW__ = 0;
          $61 = (invoke_ii(187,($s|0))|0);
          $62 = __THREW__; __THREW__ = 0;
          $63 = $62&1;
          if ($63) {
           break L1;
          }
          HEAP32[700>>2] = $61;
          $64 = ($61|0)==(0);
          if (!($64)) {
           break;
          }
          $65 = $compareTest;
          $66 = $65&1;
          if ($66) {
           __THREW__ = 0;
           $67 = (invoke_iii(188,($s|0),($4|0))|0);
           $68 = __THREW__; __THREW__ = 0;
           $69 = $68&1;
           if ($69) {
            break L1;
           } else {
            $71 = $67;
           }
          } else {
           $71 = 0;
          }
          $70 = $71&1;
          $compareTest = $70;
          $didTest = 1;
         }
         $72 = $didTest;
         $73 = $72&1;
         if ($73) {
          $74 = $compareTest;
          $75 = $74&1;
          if (!($75)) {
           __THREW__ = 0;
           (invoke_ii(189,($s|0))|0);
           $76 = __THREW__; __THREW__ = 0;
           $77 = $76&1;
           if ($77) {
            break L1;
           } else {
            continue;
           }
          }
          $78 = HEAP32[700>>2]|0;
          $79 = ($78|0)!=(8);
          if ($79) {
           $80 = HEAP32[700>>2]|0;
           __THREW__ = 0;
           HEAP32[$vararg_buffer3>>2] = $80;
           invoke_vii(159,(27797|0),($vararg_buffer3|0));
           $81 = __THREW__; __THREW__ = 0;
           $82 = $81&1;
           if ($82) {
            break L1;
           }
          }
          __THREW__ = 0;
          $83 = (invoke_ii(187,($s|0))|0);
          $84 = __THREW__; __THREW__ = 0;
          $85 = $84&1;
          if ($85) {
           break L1;
          }
          HEAP32[700>>2] = $83;
         }
         $86 = HEAP32[696>>2]|0;
         $87 = ($86|0)!=(0);
         if (!($87)) {
          $157 = HEAP32[700>>2]|0;
          do {
           switch ($157|0) {
           case 9:  {
            HEAP8[27796>>0] = 1;
            continue L11;
            break;
           }
           case 10:  {
            HEAP32[696>>2] = 1;
            continue L11;
            break;
           }
           case 11:  {
            HEAP32[696>>2] = 3;
            continue L11;
            break;
           }
           case 12:  {
            __THREW__ = 0;
            invoke_vii(197,($s|0),($4|0));
            $158 = __THREW__; __THREW__ = 0;
            $159 = $158&1;
            if ($159) {
             break L1;
            } else {
             continue L11;
            }
            break;
           }
           case 1:  {
            $160 = ((($4)) + 4656|0);
            __THREW__ = 0;
            invoke_vii(198,($s|0),($160|0));
            $161 = __THREW__; __THREW__ = 0;
            $162 = $161&1;
            if ($162) {
             break L1;
            } else {
             continue L11;
            }
            break;
           }
           case 13:  {
            __THREW__ = 0;
            invoke_vii(199,($s|0),($4|0));
            $163 = __THREW__; __THREW__ = 0;
            $164 = $163&1;
            if ($164) {
             break L1;
            } else {
             continue L11;
            }
            break;
           }
           case 15:  {
            HEAP32[696>>2] = 4;
            __THREW__ = 0;
            invoke_vii(200,($s|0),($4|0));
            $165 = __THREW__; __THREW__ = 0;
            $166 = $165&1;
            if ($166) {
             break L1;
            } else {
             continue L11;
            }
            break;
           }
           case 16:  {
            HEAP32[696>>2] = 5;
            __THREW__ = 0;
            invoke_vii(200,($s|0),($4|0));
            $167 = __THREW__; __THREW__ = 0;
            $168 = $167&1;
            if ($168) {
             break L1;
            } else {
             continue L11;
            }
            break;
           }
           case 17:  {
            HEAP32[696>>2] = 2;
            __THREW__ = 0;
            invoke_vii(201,($s|0),($4|0));
            $169 = __THREW__; __THREW__ = 0;
            $170 = $169&1;
            if ($170) {
             break L1;
            } else {
             continue L11;
            }
            break;
           }
           case 18:  {
            HEAP32[696>>2] = 6;
            continue L11;
            break;
           }
           default: {
            $171 = HEAP32[700>>2]|0;
            $172 = HEAP32[696>>2]|0;
            __THREW__ = 0;
            HEAP32[$vararg_buffer6>>2] = $171;
            $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
            HEAP32[$vararg_ptr9>>2] = $172;
            invoke_vii(159,(27817|0),($vararg_buffer6|0));
            $173 = __THREW__; __THREW__ = 0;
            $174 = $173&1;
            if ($174) {
             break L1;
            } else {
             continue L11;
            }
           }
           }
          } while(0);
         }
         $88 = HEAP32[696>>2]|0;
         switch ($88|0) {
         case 1:  {
          $89 = HEAP32[700>>2]|0;
          $90 = ($89|0)==(20);
          $91 = $loadMovData;
          $92 = $91&1;
          if ($90) {
           if (!($92)) {
            $93 = $anim;
            $94 = (($93) - 1)|0;
            __THREW__ = 0;
            invoke_vii(190,($4|0),($94|0));
            $95 = __THREW__; __THREW__ = 0;
            $96 = $95&1;
            if ($96) {
             break L1;
            }
           }
           HEAP32[696>>2] = 0;
           continue L11;
          }
          do {
           if (!($92)) {
            $97 = $anim;
            $98 = ((($4)) + 12556|0);
            $99 = HEAP32[$98>>2]|0;
            $100 = ($97|0)<($99|0);
            if ($100) {
             $101 = $anim;
             $102 = ((($4)) + 10556|0);
             $103 = (($102) + (($101*40)|0)|0);
             $104 = HEAP32[704>>2]|0;
             __THREW__ = 0;
             $105 = (invoke_iii(191,($103|0),($104|0))|0);
             $106 = __THREW__; __THREW__ = 0;
             $107 = $106&1;
             if ($107) {
              break L1;
             }
             $108 = ($105|0)==(0);
             if ($108) {
              $109 = $anim;
              $110 = (($109) + 1)|0;
              $anim = $110;
              break;
             }
            }
            $111 = ((($4)) + 12556|0);
            $112 = HEAP32[$111>>2]|0;
            $113 = ($112|0)!=(0);
            if ($113) {
             $114 = $anim;
             $115 = (($114) - 1)|0;
             __THREW__ = 0;
             invoke_vii(190,($4|0),($115|0));
             $116 = __THREW__; __THREW__ = 0;
             $117 = $116&1;
             if ($117) {
              break L1;
             }
            }
            $118 = ((($4)) + 4448|0);
            HEAP32[$118>>2] = 1;
            $loadMovData = 1;
           }
          } while(0);
          $119 = $loadMovData;
          $120 = $119&1;
          if (!($120)) {
           continue L11;
          }
          $121 = HEAP32[704>>2]|0;
          __THREW__ = 0;
          invoke_vii(192,($4|0),($121|0));
          $122 = __THREW__; __THREW__ = 0;
          $123 = $122&1;
          if ($123) {
           break L1;
          } else {
           continue L11;
          }
          break;
         }
         case 2:  {
          $124 = HEAP32[700>>2]|0;
          $125 = ($124|0)==(19);
          if ($125) {
           HEAP32[696>>2] = 0;
           continue L11;
          } else {
           __THREW__ = 0;
           invoke_vii(193,($s|0),($4|0));
           $126 = __THREW__; __THREW__ = 0;
           $127 = $126&1;
           if ($127) {
            break L1;
           } else {
            continue L11;
           }
          }
          break;
         }
         case 3:  {
          $128 = HEAP32[700>>2]|0;
          $129 = ($128|0)==(21);
          if ($129) {
           HEAP32[696>>2] = 0;
           continue L11;
          } else {
           __THREW__ = 0;
           invoke_vii(194,($s|0),($4|0));
           $130 = __THREW__; __THREW__ = 0;
           $131 = $130&1;
           if ($131) {
            break L1;
           } else {
            continue L11;
           }
          }
          break;
         }
         case 4:  {
          $132 = HEAP32[700>>2]|0;
          $133 = ($132|0)==(22);
          if ($133) {
           HEAP32[696>>2] = 0;
           continue L11;
          } else {
           __THREW__ = 0;
           invoke_vii(195,($s|0),($4|0));
           $134 = __THREW__; __THREW__ = 0;
           $135 = $134&1;
           if ($135) {
            break L1;
           } else {
            continue L11;
           }
          }
          break;
         }
         case 5:  {
          $136 = HEAP32[700>>2]|0;
          $137 = ($136|0)==(22);
          if ($137) {
           HEAP32[696>>2] = 0;
           continue L11;
          }
          $138 = HEAP32[692>>2]|0;
          $139 = ($138|0)!=(0|0);
          if ($139) {
           $140 = HEAP32[692>>2]|0;
           $141 = ((($140)) + 30|0);
           $142 = HEAP16[$141>>1]|0;
           $143 = $142 << 16 >> 16;
           $144 = ((($4)) + 79612|0);
           $145 = (($144) + (($143*6)|0)|0);
           $146 = ((($145)) + 4|0);
           $147 = HEAP16[$146>>1]|0;
           $148 = $147 << 16 >> 16;
           $149 = $anim;
           $150 = ($148|0)<($149|0);
           if ($150) {
            HEAP32[692>>2] = 0;
           }
          }
          __THREW__ = 0;
          invoke_vii(195,($s|0),($4|0));
          $151 = __THREW__; __THREW__ = 0;
          $152 = $151&1;
          if ($152) {
           break L1;
          } else {
           continue L11;
          }
          break;
         }
         case 6:  {
          $153 = HEAP32[700>>2]|0;
          $154 = ($153|0)==(23);
          if ($154) {
           HEAP32[696>>2] = 0;
           continue L11;
          } else {
           __THREW__ = 0;
           invoke_vii(196,($s|0),($4|0));
           $155 = __THREW__; __THREW__ = 0;
           $156 = $155&1;
           if ($156) {
            break L1;
           } else {
            continue L11;
           }
          }
          break;
         }
         default: {
          continue L11;
         }
         }
        }
        $175 = ((($4)) + 3148|0);
        $176 = HEAP32[$175>>2]|0;
        __THREW__ = 0;
        invoke_vi(202,($176|0));
        $177 = __THREW__; __THREW__ = 0;
        $178 = $177&1;
        if (!($178)) {
         $179 = ((($4)) + 3148|0);
         HEAP32[$179>>2] = 0;
         $180 = ((($4)) + 3144|0);
         HEAP32[$180>>2] = 0;
         __ZN10FileHolderD2Ev($fp);
         STACKTOP = sp;return;
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $29 = ___cxa_find_matching_catch()|0;
 $30 = tempRet0;
 $2 = $29;
 $3 = $30;
 __THREW__ = 0;
 invoke_vi(160,($fp|0));
 $31 = __THREW__; __THREW__ = 0;
 $32 = $31&1;
 if ($32) {
  $183 = ___cxa_find_matching_catch(0|0)|0;
  $184 = tempRet0;
  ___clang_call_terminate($183);
  // unreachable;
 } else {
  $181 = $2;
  $182 = $3;
  ___resumeException($181|0);
  // unreachable;
 }
}
function __ZL12getNextTokenPPc199($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $1;
 $3 = (__Z15stringNextTokenPPc($2)|0);
 HEAP32[704>>2] = $3;
 $4 = HEAP32[704>>2]|0;
 $5 = ($4|0)!=(0|0);
 do {
  if ($5) {
   $6 = HEAP32[704>>2]|0;
   $7 = HEAP8[$6>>0]|0;
   $8 = ($7<<24>>24)!=(0);
   if ($8) {
    $9 = HEAP32[704>>2]|0;
    $10 = (_strcmp($9,28285)|0);
    $11 = ($10|0)==(0);
    if ($11) {
     $0 = 0;
     break;
    }
    $12 = HEAP32[704>>2]|0;
    $13 = (_strcmp($12,28298)|0);
    $14 = ($13|0)==(0);
    if ($14) {
     $0 = 1;
     break;
    }
    $15 = HEAP32[704>>2]|0;
    $16 = (_strcmp($15,28310)|0);
    $17 = ($16|0)==(0);
    if ($17) {
     $0 = 2;
     break;
    }
    $18 = HEAP32[704>>2]|0;
    $19 = (_strcmp($18,28313)|0);
    $20 = ($19|0)==(0);
    if ($20) {
     $0 = 3;
     break;
    }
    $21 = HEAP32[704>>2]|0;
    $22 = (_strcmp($21,28316)|0);
    $23 = ($22|0)==(0);
    if ($23) {
     $0 = 4;
     break;
    }
    $24 = HEAP32[704>>2]|0;
    $25 = (_strcmp($24,28318)|0);
    $26 = ($25|0)==(0);
    if ($26) {
     $0 = 5;
     break;
    }
    $27 = HEAP32[704>>2]|0;
    $28 = (_strcmp($27,28321)|0);
    $29 = ($28|0)==(0);
    if ($29) {
     $0 = 6;
     break;
    }
    $30 = HEAP32[704>>2]|0;
    $31 = (_strcmp($30,28323)|0);
    $32 = ($31|0)==(0);
    if ($32) {
     $0 = 7;
     break;
    }
    $33 = HEAP32[704>>2]|0;
    $34 = (_strcmp($33,28326)|0);
    $35 = ($34|0)==(0);
    if ($35) {
     $0 = 8;
     break;
    }
    $36 = HEAP32[704>>2]|0;
    $37 = (_strcmp($36,28329)|0);
    $38 = ($37|0)==(0);
    if ($38) {
     $0 = 9;
     break;
    }
    $39 = HEAP32[704>>2]|0;
    $40 = (_strcmp($39,28333)|0);
    $41 = ($40|0)==(0);
    if ($41) {
     $0 = 10;
     break;
    }
    $42 = HEAP32[704>>2]|0;
    $43 = (_strcmp($42,28340)|0);
    $44 = ($43|0)==(0);
    if ($44) {
     $0 = 11;
     break;
    }
    $45 = HEAP32[704>>2]|0;
    $46 = (_strcmp($45,28346)|0);
    $47 = ($46|0)==(0);
    if ($47) {
     $0 = 12;
     break;
    }
    $48 = HEAP32[704>>2]|0;
    $49 = (_strcmp($48,28353)|0);
    $50 = ($49|0)==(0);
    if ($50) {
     $0 = 13;
     break;
    }
    $51 = HEAP32[704>>2]|0;
    $52 = (_strcmp($51,28358)|0);
    $53 = ($52|0)==(0);
    if ($53) {
     $0 = 14;
     break;
    }
    $54 = HEAP32[704>>2]|0;
    $55 = (_strcmp($54,28363)|0);
    $56 = ($55|0)==(0);
    if ($56) {
     $0 = 15;
     break;
    }
    $57 = HEAP32[704>>2]|0;
    $58 = (_strcmp($57,28371)|0);
    $59 = ($58|0)==(0);
    if ($59) {
     $0 = 16;
     break;
    }
    $60 = HEAP32[704>>2]|0;
    $61 = (_strcmp($60,28384)|0);
    $62 = ($61|0)==(0);
    if ($62) {
     $0 = 17;
     break;
    }
    $63 = HEAP32[704>>2]|0;
    $64 = (_strcmp($63,28388)|0);
    $65 = ($64|0)==(0);
    if ($65) {
     $0 = 18;
     break;
    }
    $66 = HEAP32[704>>2]|0;
    $67 = (_strcmp($66,28392)|0);
    $68 = ($67|0)==(0);
    if ($68) {
     $0 = 19;
     break;
    }
    $69 = HEAP32[704>>2]|0;
    $70 = (_strcmp($69,28399)|0);
    $71 = ($70|0)==(0);
    if ($71) {
     $0 = 20;
     break;
    }
    $72 = HEAP32[704>>2]|0;
    $73 = (_strcmp($72,28409)|0);
    $74 = ($73|0)==(0);
    if ($74) {
     $0 = 21;
     break;
    }
    $75 = HEAP32[704>>2]|0;
    $76 = (_strcmp($75,28418)|0);
    $77 = ($76|0)==(0);
    if ($77) {
     $0 = 22;
     break;
    }
    $78 = HEAP32[704>>2]|0;
    $79 = (_strcmp($78,28428)|0);
    $80 = ($79|0)==(0);
    if ($80) {
     $0 = 23;
     break;
    }
    $81 = HEAP32[704>>2]|0;
    $82 = (_strcmp($81,28435)|0);
    $83 = ($82|0)==(0);
    if ($83) {
     $0 = 24;
     break;
    }
    $84 = HEAP32[704>>2]|0;
    $85 = (_strcmp($84,28441)|0);
    $86 = ($85|0)==(0);
    if ($86) {
     $0 = 25;
     break;
    }
    $87 = HEAP32[704>>2]|0;
    $88 = (_strcmp($87,28448)|0);
    $89 = ($88|0)==(0);
    if ($89) {
     $0 = 26;
     break;
    }
    $90 = HEAP32[704>>2]|0;
    $91 = (_strcmp($90,28454)|0);
    $92 = ($91|0)==(0);
    if ($92) {
     $0 = 27;
     break;
    }
    $93 = HEAP32[704>>2]|0;
    $94 = (_strcmp($93,28464)|0);
    $95 = ($94|0)==(0);
    if ($95) {
     $0 = 28;
     break;
    }
    $96 = HEAP32[704>>2]|0;
    $97 = (_strcmp($96,28474)|0);
    $98 = ($97|0)==(0);
    if ($98) {
     $0 = 29;
     break;
    }
    $99 = HEAP32[704>>2]|0;
    $100 = (_strcmp($99,28481)|0);
    $101 = ($100|0)==(0);
    if ($101) {
     $0 = 30;
     break;
    }
    $102 = HEAP32[704>>2]|0;
    $103 = (_strcmp($102,28488)|0);
    $104 = ($103|0)==(0);
    if ($104) {
     $0 = 31;
     break;
    }
    $105 = HEAP32[704>>2]|0;
    $106 = (_strcmp($105,28494)|0);
    $107 = ($106|0)==(0);
    if ($107) {
     $0 = 32;
     break;
    }
    $108 = HEAP32[704>>2]|0;
    $109 = (_strcmp($108,28499)|0);
    $110 = ($109|0)==(0);
    if ($110) {
     $0 = 33;
     break;
    }
    $111 = HEAP32[704>>2]|0;
    $112 = (_strcmp($111,28503)|0);
    $113 = ($112|0)==(0);
    if ($113) {
     $0 = 34;
     break;
    }
    $114 = HEAP32[704>>2]|0;
    $115 = (_strcmp($114,28510)|0);
    $116 = ($115|0)==(0);
    if ($116) {
     $0 = 35;
     break;
    }
    $117 = HEAP32[704>>2]|0;
    $118 = (_strcmp($117,28513)|0);
    $119 = ($118|0)==(0);
    if ($119) {
     $0 = 36;
     break;
    }
    $120 = HEAP32[704>>2]|0;
    $121 = (_strcmp($120,28515)|0);
    $122 = ($121|0)==(0);
    if ($122) {
     $0 = 37;
     break;
    }
    $123 = HEAP32[704>>2]|0;
    $124 = (_strcmp($123,28517)|0);
    $125 = ($124|0)==(0);
    if ($125) {
     $0 = 38;
     break;
    }
    $126 = HEAP32[704>>2]|0;
    $127 = (_strcmp($126,28520)|0);
    $128 = ($127|0)==(0);
    if ($128) {
     $0 = 39;
     break;
    }
    $129 = HEAP32[704>>2]|0;
    $130 = (_strcmp($129,28525)|0);
    $131 = ($130|0)==(0);
    if ($131) {
     $0 = 40;
     break;
    }
    $132 = HEAP32[704>>2]|0;
    $133 = (_strcmp($132,28532)|0);
    $134 = ($133|0)==(0);
    if ($134) {
     $0 = 41;
     break;
    }
    $135 = HEAP32[704>>2]|0;
    $136 = (_strcmp($135,28539)|0);
    $137 = ($136|0)==(0);
    if ($137) {
     $0 = 42;
     break;
    }
    $138 = HEAP32[704>>2]|0;
    $139 = (_strcmp($138,28546)|0);
    $140 = ($139|0)==(0);
    if ($140) {
     $0 = 43;
     break;
    }
    $141 = HEAP32[704>>2]|0;
    $142 = (_strcmp($141,28550)|0);
    $143 = ($142|0)==(0);
    if ($143) {
     $0 = 44;
     break;
    }
    $144 = HEAP32[704>>2]|0;
    $145 = (_strcmp($144,28561)|0);
    $146 = ($145|0)==(0);
    if ($146) {
     $0 = 45;
     break;
    }
    $147 = HEAP32[704>>2]|0;
    $148 = (_strcmp($147,28569)|0);
    $149 = ($148|0)==(0);
    if ($149) {
     $0 = 46;
     break;
    }
    $150 = HEAP32[704>>2]|0;
    $151 = (_strcmp($150,28576)|0);
    $152 = ($151|0)==(0);
    if ($152) {
     $0 = 47;
     break;
    }
    $153 = HEAP32[704>>2]|0;
    $154 = (_strcmp($153,28580)|0);
    $155 = ($154|0)==(0);
    if ($155) {
     $0 = 1;
     break;
    } else {
     $0 = 49;
     break;
    }
   } else {
    label = 3;
   }
  } else {
   label = 3;
  }
 } while(0);
 if ((label|0) == 3) {
  $0 = 48;
 }
 $156 = $0;
 STACKTOP = sp;return ($156|0);
}
function __ZL23parseToken_GlobalMemoryPPcP4Game($s,$g) {
 $s = $s|0;
 $g = $g|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $op = 0, $or$cond = 0, $testValue = 0, $var = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $var = sp + 8|0;
 $testValue = sp + 4|0;
 $0 = $s;
 $1 = $g;
 $2 = $0;
 __ZL23getNextToken_ArrayIndexPPcPi($2,$var);
 $3 = $0;
 $4 = (__ZL12getNextTokenPPc199($3)|0);
 $op = $4;
 $5 = $0;
 $6 = (__ZL12getNextTokenPPc199($5)|0);
 HEAP32[700>>2] = $6;
 $7 = HEAP32[700>>2]|0;
 $8 = ($7|0)==(1);
 if ($8) {
  $9 = $1;
  $10 = ((($9)) + 4656|0);
  $11 = HEAP32[$10>>2]|0;
  HEAP32[$testValue>>2] = $11;
 } else {
  __ZL12getToken_IntPi($testValue);
 }
 $12 = HEAP32[$var>>2]|0;
 $13 = ($12|0)>=(0);
 $14 = HEAP32[$var>>2]|0;
 $15 = ($14|0)<(310);
 $or$cond = $13 & $15;
 if ($or$cond) {
  $16 = HEAP32[$var>>2]|0;
  $17 = $1;
  $18 = ((($17)) + 3804|0);
  $19 = (($18) + ($16<<1)|0);
  $20 = HEAP16[$19>>1]|0;
  $21 = $20 << 16 >> 16;
  $22 = HEAP32[$testValue>>2]|0;
  $23 = $op;
  $24 = (__ZL9compareOpiii($21,$22,$23)|0);
  STACKTOP = sp;return ($24|0);
 } else {
  ___assert_fail((28200|0),(27911|0),278,(28233|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZL15parse_BagObjectPPcP4Game($s,$g) {
 $s = $s|0;
 $g = $g|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bo = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $g;
 $2 = $1;
 $3 = HEAP32[704>>2]|0;
 $4 = (__ZNK4Game19findBagObjectByNameEPKc($2,$3)|0);
 $5 = ($4|0)==(-1);
 if (!($5)) {
  $31 = $0;
  (__Z18stringNextTokenEOLPPc($31)|0);
  STACKTOP = sp;return;
 }
 $6 = $1;
 $7 = ((($6)) + 79608|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)<(20);
 if (!($9)) {
  ___assert_fail((28140|0),(27911|0),443,(28184|0));
  // unreachable;
 }
 $10 = $1;
 $11 = ((($10)) + 79608|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $1;
 $14 = ((($13)) + 79048|0);
 $15 = (($14) + (($12*28)|0)|0);
 $bo = $15;
 $16 = $bo;
 $17 = HEAP32[704>>2]|0;
 (_strcpy($16,$17)|0);
 $18 = $0;
 $19 = (__Z15stringNextTokenPPc($18)|0);
 HEAP32[704>>2] = $19;
 $20 = $1;
 $21 = HEAP32[704>>2]|0;
 $22 = $bo;
 $23 = ((($22)) + 24|0);
 $24 = (__ZN4Game8loadFileEPKcPhPj($20,$21,0,$23)|0);
 $25 = $bo;
 $26 = ((($25)) + 20|0);
 HEAP32[$26>>2] = $24;
 $27 = $1;
 $28 = ((($27)) + 79608|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($29) + 1)|0;
 HEAP32[$28>>2] = $30;
 STACKTOP = sp;return;
}
function __ZL20parse_SceneConditionPPcP4Game($s,$g) {
 $s = $s|0;
 $g = $g|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ns = 0, $num = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $num = sp + 4|0;
 $0 = $s;
 $1 = $g;
 __ZL12getToken_IntPi($num);
 $2 = $1;
 $3 = ((($2)) + 81856|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)<(20);
 if ($5) {
  $6 = $1;
  $7 = ((($6)) + 81856|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $1;
  $10 = ((($9)) + 81416|0);
  $11 = (($10) + (($8*22)|0)|0);
  $ns = $11;
  $12 = HEAP32[$num>>2]|0;
  $13 = $12&65535;
  $14 = $ns;
  HEAP16[$14>>1] = $13;
  $15 = $0;
  $16 = (__Z15stringNextTokenPPc($15)|0);
  HEAP32[704>>2] = $16;
  $17 = $ns;
  $18 = ((($17)) + 2|0);
  $19 = HEAP32[704>>2]|0;
  (_strcpy($18,$19)|0);
  $20 = $ns;
  $21 = ((($20)) + 2|0);
  __Z17stringToUpperCasePc($21);
  $22 = $1;
  $23 = ((($22)) + 81856|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + 1)|0;
  HEAP32[$23>>2] = $25;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((28070|0),(27911|0),458,(28119|0));
  // unreachable;
 }
}
function __ZL12parse_ObjectPPcP4Game($s,$g) {
 $s = $s|0;
 $g = $g|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $index = 0;
 var $or$cond = 0, $sos = 0, $value = 0, $var = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $var = sp + 36|0;
 $index = sp + 32|0;
 $value = sp + 28|0;
 $0 = $s;
 $1 = $g;
 $2 = HEAP32[692>>2]|0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  $4 = $0;
  (__Z18stringNextTokenEOLPPc($4)|0);
  STACKTOP = sp;return;
 }
 $5 = HEAP32[700>>2]|0;
 do {
  switch ($5|0) {
  case 24:  {
   $6 = $0;
   $7 = (__Z15stringNextTokenPPc($6)|0);
   HEAP32[704>>2] = $7;
   $8 = HEAP32[692>>2]|0;
   $9 = ((($8)) + 66|0);
   $10 = HEAP32[704>>2]|0;
   (_strcpy($9,$10)|0);
   STACKTOP = sp;return;
   break;
  }
  case 25:  {
   $11 = $0;
   __ZL23getNextToken_ArrayIndexPPcPi($11,$var);
   $12 = $0;
   __ZL16getNextToken_IntPPcPi($12,$value);
   $13 = HEAP32[$var>>2]|0;
   $14 = ($13|0)>=(0);
   $15 = HEAP32[$var>>2]|0;
   $16 = ($15|0)<(10);
   $or$cond = $14 & $16;
   if (!($or$cond)) {
    ___assert_fail((29399|0),(27911|0),346,(27974|0));
    // unreachable;
   }
   $17 = HEAP32[$value>>2]|0;
   $18 = $17&65535;
   $19 = HEAP32[$var>>2]|0;
   $20 = HEAP32[692>>2]|0;
   $21 = ((($20)) + 86|0);
   $22 = (($21) + ($19<<1)|0);
   HEAP16[$22>>1] = $18;
   STACKTOP = sp;return;
   break;
  }
  case 26:  {
   $23 = $0;
   $24 = HEAP32[692>>2]|0;
   $25 = HEAP32[692>>2]|0;
   $26 = ((($25)) + 2|0);
   __ZL18getNextToken_CoordPPcPsS1_($23,$24,$26);
   STACKTOP = sp;return;
   break;
  }
  case 27:  {
   $27 = $0;
   __ZL16getNextToken_IntPPcPi($27,$value);
   $28 = HEAP32[$value>>2]|0;
   $29 = HEAP32[692>>2]|0;
   $30 = HEAP16[$29>>1]|0;
   $31 = $30 << 16 >> 16;
   $32 = (($31) + ($28))|0;
   $33 = $32&65535;
   HEAP16[$29>>1] = $33;
   STACKTOP = sp;return;
   break;
  }
  case 28:  {
   $34 = $0;
   __ZL16getNextToken_IntPPcPi($34,$value);
   $35 = HEAP32[$value>>2]|0;
   $36 = HEAP32[692>>2]|0;
   $37 = ((($36)) + 2|0);
   $38 = HEAP16[$37>>1]|0;
   $39 = $38 << 16 >> 16;
   $40 = (($39) + ($35))|0;
   $41 = $40&65535;
   HEAP16[$37>>1] = $41;
   STACKTOP = sp;return;
   break;
  }
  case 29:  {
   $42 = $0;
   __ZL16getNextToken_IntPPcPi($42,$value);
   $43 = HEAP32[$value>>2]|0;
   $44 = $43&65535;
   $45 = HEAP32[692>>2]|0;
   HEAP16[$45>>1] = $44;
   STACKTOP = sp;return;
   break;
  }
  case 30:  {
   $46 = $0;
   __ZL16getNextToken_IntPPcPi($46,$value);
   $47 = HEAP32[$value>>2]|0;
   $48 = $47&65535;
   $49 = HEAP32[692>>2]|0;
   $50 = ((($49)) + 2|0);
   HEAP16[$50>>1] = $48;
   STACKTOP = sp;return;
   break;
  }
  case 31:  {
   $51 = $0;
   __ZL16getNextToken_IntPPcPi($51,$value);
   $52 = HEAP32[$value>>2]|0;
   $53 = $52&65535;
   $54 = HEAP32[692>>2]|0;
   $55 = ((($54)) + 12|0);
   HEAP16[$55>>1] = $53;
   STACKTOP = sp;return;
   break;
  }
  case 32:  {
   $56 = $0;
   __ZL16getNextToken_IntPPcPi($56,$value);
   $57 = HEAP32[$value>>2]|0;
   $58 = (($57) - 1)|0;
   $59 = $58&65535;
   $60 = HEAP32[692>>2]|0;
   $61 = ((($60)) + 28|0);
   HEAP16[$61>>1] = $59;
   $62 = HEAP32[692>>2]|0;
   $63 = ((($62)) + 36|0);
   HEAP16[$63>>1] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 33:  {
   $64 = $0;
   __ZL16getNextToken_IntPPcPi($64,$value);
   $65 = HEAP32[$value>>2]|0;
   $66 = (($65) - 1)|0;
   $67 = $66&65535;
   $68 = HEAP32[692>>2]|0;
   $69 = ((($68)) + 28|0);
   HEAP16[$69>>1] = $67;
   $70 = $0;
   __ZL16getNextToken_IntPPcPi($70,$value);
   $71 = HEAP32[$value>>2]|0;
   $72 = (($71) - 1)|0;
   $73 = $72&65535;
   $74 = HEAP32[692>>2]|0;
   $75 = ((($74)) + 36|0);
   HEAP16[$75>>1] = $73;
   STACKTOP = sp;return;
   break;
  }
  case 34:  {
   $76 = $0;
   $77 = (__ZL12getNextTokenPPc199($76)|0);
   HEAP32[700>>2] = $77;
   $78 = HEAP32[700>>2]|0;
   switch ($78|0) {
   case 35:  {
    $79 = HEAP32[692>>2]|0;
    $80 = ((($79)) + 22|0);
    HEAP16[$80>>1] = 0;
    STACKTOP = sp;return;
    break;
   }
   case 36:  {
    $81 = HEAP32[692>>2]|0;
    $82 = ((($81)) + 22|0);
    HEAP16[$82>>1] = 1;
    STACKTOP = sp;return;
    break;
   }
   case 37:  {
    $83 = HEAP32[692>>2]|0;
    $84 = ((($83)) + 22|0);
    HEAP16[$84>>1] = 2;
    STACKTOP = sp;return;
    break;
   }
   case 38:  {
    $85 = HEAP32[692>>2]|0;
    $86 = ((($85)) + 22|0);
    HEAP16[$86>>1] = 3;
    STACKTOP = sp;return;
    break;
   }
   default: {
    $87 = HEAP32[704>>2]|0;
    HEAP32[$vararg_buffer>>2] = $87;
    __Z5errorPKcz(27987,$vararg_buffer);
    STACKTOP = sp;return;
   }
   }
   break;
  }
  case 39:  {
   $88 = $0;
   $89 = (__ZL12getNextTokenPPc199($88)|0);
   HEAP32[700>>2] = $89;
   $90 = HEAP32[700>>2]|0;
   switch ($90|0) {
   case 40:  {
    $91 = HEAP32[692>>2]|0;
    $92 = ((($91)) + 38|0);
    HEAP16[$92>>1] = 0;
    STACKTOP = sp;return;
    break;
   }
   case 41:  {
    $93 = HEAP32[692>>2]|0;
    $94 = ((($93)) + 38|0);
    HEAP16[$94>>1] = 1;
    STACKTOP = sp;return;
    break;
   }
   case 42:  {
    $95 = HEAP32[692>>2]|0;
    $96 = ((($95)) + 38|0);
    HEAP16[$96>>1] = 2;
    $97 = $0;
    __ZL16getNextToken_IntPPcPi($97,$value);
    $98 = HEAP32[$value>>2]|0;
    $99 = $98&65535;
    $100 = HEAP32[692>>2]|0;
    $101 = ((($100)) + 40|0);
    HEAP16[$101>>1] = $99;
    STACKTOP = sp;return;
    break;
   }
   case 43:  {
    $102 = HEAP32[692>>2]|0;
    $103 = ((($102)) + 38|0);
    HEAP16[$103>>1] = 3;
    STACKTOP = sp;return;
    break;
   }
   default: {
    $104 = HEAP32[704>>2]|0;
    HEAP32[$vararg_buffer2>>2] = $104;
    __Z5errorPKcz(28013,$vararg_buffer2);
    STACKTOP = sp;return;
   }
   }
   break;
  }
  case 44:  {
   $105 = $0;
   __ZL23getNextToken_ArrayIndexPPcPi($105,$index);
   $106 = $1;
   $107 = HEAP32[$index>>2]|0;
   $108 = (__ZN4Game22derefSceneObjectStatusEi($106,$107)|0);
   $sos = $108;
   $109 = $sos;
   $110 = HEAP16[$109>>1]|0;
   $111 = HEAP32[692>>2]|0;
   HEAP16[$111>>1] = $110;
   $112 = $sos;
   $113 = ((($112)) + 2|0);
   $114 = HEAP16[$113>>1]|0;
   $115 = HEAP32[692>>2]|0;
   $116 = ((($115)) + 2|0);
   HEAP16[$116>>1] = $114;
   $117 = $sos;
   $118 = ((($117)) + 4|0);
   $119 = HEAP16[$118>>1]|0;
   $120 = HEAP32[692>>2]|0;
   $121 = ((($120)) + 12|0);
   HEAP16[$121>>1] = $119;
   $122 = $sos;
   $123 = ((($122)) + 6|0);
   $124 = HEAP16[$123>>1]|0;
   $125 = HEAP32[692>>2]|0;
   $126 = ((($125)) + 28|0);
   HEAP16[$126>>1] = $124;
   $127 = $sos;
   $128 = ((($127)) + 8|0);
   $129 = HEAP16[$128>>1]|0;
   $130 = HEAP32[692>>2]|0;
   $131 = ((($130)) + 36|0);
   HEAP16[$131>>1] = $129;
   $132 = $sos;
   $133 = ((($132)) + 10|0);
   $134 = HEAP16[$133>>1]|0;
   $135 = HEAP32[692>>2]|0;
   $136 = ((($135)) + 22|0);
   HEAP16[$136>>1] = $134;
   STACKTOP = sp;return;
   break;
  }
  default: {
   $137 = HEAP32[700>>2]|0;
   $138 = HEAP32[696>>2]|0;
   HEAP32[$vararg_buffer5>>2] = $137;
   $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
   HEAP32[$vararg_ptr8>>2] = $138;
   __Z5errorPKcz(27817,$vararg_buffer5);
   STACKTOP = sp;return;
  }
  }
 } while(0);
}
function __ZL20parse_BoxDescriptionPPcP4Game($s,$g) {
 $s = $s|0;
 $g = $g|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $b = 0, $box = 0, $value = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $box = sp + 16|0;
 $value = sp + 12|0;
 $0 = $s;
 $1 = $g;
 __ZL12getToken_IntPi($box);
 $2 = HEAP32[$box>>2]|0;
 $3 = (($2) + -1)|0;
 HEAP32[$box>>2] = $3;
 $4 = $1;
 $5 = HEAP32[$box>>2]|0;
 $6 = HEAP32[$box>>2]|0;
 $7 = $1;
 $8 = ((($7)) + 18964|0);
 $9 = (($8) + ($6<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (__ZN4Game8derefBoxEii($4,$5,$10)|0);
 $b = $11;
 $12 = $0;
 $13 = (__ZL12getNextTokenPPc199($12)|0);
 HEAP32[700>>2] = $13;
 $14 = HEAP32[700>>2]|0;
 switch ($14|0) {
 case 45:  {
  $15 = $b;
  $16 = ((($15)) + 8|0);
  HEAP8[$16>>0] = 0;
  break;
 }
 case 46:  {
  $17 = $b;
  $18 = ((($17)) + 8|0);
  HEAP8[$18>>0] = 1;
  break;
 }
 case 47:  {
  $19 = $b;
  $20 = ((($19)) + 8|0);
  HEAP8[$20>>0] = 2;
  $21 = $0;
  __ZL16getNextToken_IntPPcPi($21,$value);
  $22 = HEAP32[$value>>2]|0;
  $23 = $22&65535;
  $24 = $b;
  $25 = ((($24)) + 10|0);
  HEAP16[$25>>1] = $23;
  $26 = $0;
  __ZL16getNextToken_IntPPcPi($26,$value);
  $27 = HEAP32[$value>>2]|0;
  $28 = $27&65535;
  $29 = $b;
  $30 = ((($29)) + 12|0);
  HEAP16[$30>>1] = $28;
  $31 = $0;
  __ZL16getNextToken_IntPPcPi($31,$value);
  $32 = HEAP32[$value>>2]|0;
  $33 = $32&65535;
  $34 = $b;
  $35 = ((($34)) + 14|0);
  HEAP16[$35>>1] = $33;
  $36 = $b;
  $37 = ((($36)) + 12|0);
  $38 = HEAP16[$37>>1]|0;
  $39 = $38 << 16 >> 16;
  $40 = $b;
  $41 = ((($40)) + 14|0);
  $42 = HEAP16[$41>>1]|0;
  $43 = $42 << 16 >> 16;
  $44 = (($39) + ($43))|0;
  $45 = ($44|0)<=(256);
  if (!($45)) {
   ___assert_fail((27876|0),(27911|0),490,(27926|0));
   // unreachable;
  }
  break;
 }
 default: {
  $46 = HEAP32[700>>2]|0;
  $47 = HEAP32[696>>2]|0;
  HEAP32[$vararg_buffer>>2] = $46;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $47;
  __Z5errorPKcz(27817,$vararg_buffer);
 }
 }
 $48 = $0;
 $49 = $b;
 $50 = $b;
 $51 = ((($50)) + 4|0);
 __ZL18getNextToken_CoordPPcPsS1_($48,$49,$51);
 $52 = $0;
 $53 = $b;
 $54 = ((($53)) + 2|0);
 $55 = $b;
 $56 = ((($55)) + 6|0);
 __ZL18getNextToken_CoordPPcPsS1_($52,$54,$56);
 $57 = HEAP32[$box>>2]|0;
 $58 = $1;
 $59 = ((($58)) + 18964|0);
 $60 = (($59) + ($57<<2)|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (($61) + 1)|0;
 HEAP32[$60>>2] = $62;
 STACKTOP = sp;return;
}
function __ZL17parseToken_ScreenPPcP4Game($s,$g) {
 $s = $s|0;
 $g = $g|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $g;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ($2|0)<(10);
  if (!($3)) {
   break;
  }
  $4 = $i;
  $5 = $1;
  $6 = ((($5)) + 18964|0);
  $7 = (($6) + ($4<<2)|0);
  HEAP32[$7>>2] = 0;
  $8 = $i;
  $9 = (($8) + 1)|0;
  $i = $9;
 }
 $10 = $0;
 $11 = (__Z15stringNextTokenPPc($10)|0);
 HEAP32[704>>2] = $11;
 $12 = $1;
 $13 = HEAP32[704>>2]|0;
 __ZN4Game7loadWGPEPKc($12,$13);
 $14 = $1;
 $15 = ((($14)) + 4660|0);
 $16 = HEAP32[704>>2]|0;
 (_strcpy($15,$16)|0);
 $17 = $1;
 $18 = ((($17)) + 10552|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(0);
 $21 = $20 ? 1 : 2;
 $22 = $1;
 $23 = ((($22)) + 4448|0);
 HEAP32[$23>>2] = $21;
 STACKTOP = sp;return;
}
function __ZL16getNextToken_IntPPcPi($s,$i) {
 $s = $s|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $i;
 $2 = $0;
 $3 = (__Z15stringNextTokenPPc($2)|0);
 HEAP32[704>>2] = $3;
 $4 = $1;
 __ZL12getToken_IntPi($4);
 STACKTOP = sp;return;
}
function __ZL15parseToken_MidiPPcP4Game($s,$g) {
 $s = $s|0;
 $g = $g|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $g;
 $2 = $1;
 $3 = ((($2)) + 4612|0);
 HEAP32[$3>>2] = 0;
 $4 = $0;
 $5 = (__ZL12getNextTokenPPc199($4)|0);
 HEAP32[700>>2] = $5;
 $6 = HEAP32[700>>2]|0;
 $7 = ($6|0)==(14);
 if ($7) {
  $8 = $1;
  __ZN4Game9stopMusicEv($8);
  STACKTOP = sp;return;
 }
 $9 = HEAP32[704>>2]|0;
 $10 = $1;
 $11 = ((($10)) + 4616|0);
 $12 = (_strcmp($9,$11)|0);
 $13 = ($12|0)!=(0);
 if ($13) {
  $14 = $1;
  $15 = HEAP32[704>>2]|0;
  __ZN4Game9playMusicEPKc($14,$15);
 }
 $16 = $1;
 $17 = ((($16)) + 4616|0);
 $18 = HEAP32[704>>2]|0;
 (_strcpy($17,$18)|0);
 $19 = $0;
 $20 = $1;
 $21 = ((($20)) + 4612|0);
 __ZL16getNextToken_IntPPcPi($19,$21);
 STACKTOP = sp;return;
}
function __ZL17parseToken_ObjectPPcP4Game($s,$g) {
 $s = $s|0;
 $g = $g|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $or$cond = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $g;
 $2 = $0;
 $3 = (__Z15stringNextTokenPPc($2)|0);
 HEAP32[704>>2] = $3;
 HEAP32[692>>2] = 0;
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = $1;
  $6 = ((($5)) + 10552|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($4|0)<($7|0);
  if (!($8)) {
   break;
  }
  $9 = $i;
  $10 = $1;
  $11 = ((($10)) + 5252|0);
  $12 = (($11) + (($9*106)|0)|0);
  $13 = ((($12)) + 46|0);
  $14 = HEAP32[704>>2]|0;
  $15 = (_strcasecmp($13,$14)|0);
  $16 = ($15|0)==(0);
  $17 = $i;
  if ($16) {
   label = 4;
   break;
  }
  $21 = (($17) + 1)|0;
  $i = $21;
 }
 if ((label|0) == 4) {
  $18 = $1;
  $19 = ((($18)) + 5252|0);
  $20 = (($19) + (($17*106)|0)|0);
  HEAP32[692>>2] = $20;
 }
 $22 = HEAP32[696>>2]|0;
 $23 = ($22|0)==(4);
 $24 = HEAP32[692>>2]|0;
 $25 = ($24|0)!=(0|0);
 $or$cond = $23 & $25;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 $26 = HEAP32[692>>2]|0;
 $27 = ((($26)) + 86|0);
 dest=$27; stop=dest+20|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 $28 = HEAP32[692>>2]|0;
 $29 = ((($28)) + 44|0);
 HEAP16[$29>>1] = 0;
 $30 = HEAP32[692>>2]|0;
 $31 = ((($30)) + 42|0);
 HEAP16[$31>>1] = 0;
 STACKTOP = sp;return;
}
function __ZL14parseToken_BagPPcP4Game($s,$g) {
 $s = $s|0;
 $g = $g|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $g;
 $2 = $0;
 $3 = $1;
 $4 = ((($3)) + 5044|0);
 __ZL16getNextToken_IntPPcPi($2,$4);
 $5 = $0;
 $6 = $1;
 $7 = ((($6)) + 5048|0);
 __ZL16getNextToken_IntPPcPi($5,$7);
 STACKTOP = sp;return;
}
function __ZL12getToken_IntPi($i) {
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $i;
 $1 = HEAP32[704>>2]|0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 0;
  $4 = HEAP32[704>>2]|0;
  $5 = (_strtol($4,0,0)|0);
  $6 = $0;
  HEAP32[$6>>2] = $5;
  $7 = (___errno_location()|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0);
  if ($9) {
   STACKTOP = sp;return;
  }
 }
 $10 = HEAP32[704>>2]|0;
 $11 = ($10|0)!=(0|0);
 $12 = HEAP32[704>>2]|0;
 $13 = $11 ? $12 : 27846;
 HEAP32[$vararg_buffer>>2] = $13;
 __Z5errorPKcz(27847,$vararg_buffer);
 STACKTOP = sp;return;
}
function __ZL18getNextToken_CoordPPcPsS1_($s,$i,$j) {
 $s = $s|0;
 $i = $i|0;
 $j = $j|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $endTokenStr = 0, $subTokenStr = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $s;
 $1 = $i;
 $2 = $j;
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $5 = (__Z14stringTrimLeftPc($4)|0);
 HEAP32[704>>2] = $5;
 $6 = HEAP32[704>>2]|0;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = HEAP32[704>>2]|0;
  $9 = HEAP8[$8>>0]|0;
  $10 = $9 << 24 >> 24;
  $11 = ($10|0)==(40);
  if ($11) {
   $12 = (___errno_location()|0);
   HEAP32[$12>>2] = 0;
   $13 = HEAP32[704>>2]|0;
   $14 = ((($13)) + 1|0);
   $15 = (_strtol($14,0,0)|0);
   $16 = $15&65535;
   $17 = $1;
   HEAP16[$17>>1] = $16;
   $18 = (___errno_location()|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(0);
   if ($20) {
    $21 = HEAP32[704>>2]|0;
    $22 = ((($21)) + 1|0);
    $23 = (_strchr($22,44)|0);
    $subTokenStr = $23;
    $24 = $subTokenStr;
    $25 = ($24|0)!=(0|0);
    if ($25) {
     $26 = (___errno_location()|0);
     HEAP32[$26>>2] = 0;
     $27 = $subTokenStr;
     $28 = ((($27)) + 1|0);
     $29 = (_strtol($28,0,0)|0);
     $30 = $29&65535;
     $31 = $2;
     HEAP16[$31>>1] = $30;
     $32 = (___errno_location()|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = ($33|0)==(0);
     if ($34) {
      $35 = $subTokenStr;
      $36 = ((($35)) + 1|0);
      $37 = (_strchr($36,41)|0);
      $endTokenStr = $37;
      $38 = $endTokenStr;
      $39 = ($38|0)!=(0|0);
      if ($39) {
       $40 = $endTokenStr;
       $41 = ((($40)) + 1|0);
       $42 = $0;
       HEAP32[$42>>2] = $41;
       STACKTOP = sp;return;
      }
     }
    }
   }
  }
 }
 $43 = HEAP32[704>>2]|0;
 $44 = ($43|0)!=(0|0);
 $45 = HEAP32[704>>2]|0;
 $46 = $44 ? $45 : 27846;
 HEAP32[$vararg_buffer>>2] = $46;
 __Z5errorPKcz(27947,$vararg_buffer);
 STACKTOP = sp;return;
}
function __ZL23getNextToken_ArrayIndexPPcPi($s,$i) {
 $s = $s|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $s;
 $1 = $i;
 $2 = $0;
 $3 = (__Z15stringNextTokenPPc($2)|0);
 HEAP32[704>>2] = $3;
 $4 = HEAP32[704>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = HEAP32[704>>2]|0;
  $7 = HEAP8[$6>>0]|0;
  $8 = $7 << 24 >> 24;
  $9 = ($8|0)==(91);
  if ($9) {
   $10 = (___errno_location()|0);
   HEAP32[$10>>2] = 0;
   $11 = HEAP32[704>>2]|0;
   $12 = ((($11)) + 1|0);
   $13 = (_strtol($12,0,0)|0);
   $14 = $1;
   HEAP32[$14>>2] = $13;
   $15 = (___errno_location()|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($16|0)==(0);
   if ($17) {
    $18 = $1;
    $19 = HEAP32[$18>>2]|0;
    $20 = (($19) - 1)|0;
    HEAP32[$18>>2] = $20;
    STACKTOP = sp;return;
   }
  }
 }
 $21 = HEAP32[704>>2]|0;
 $22 = ($21|0)!=(0|0);
 $23 = HEAP32[704>>2]|0;
 $24 = $22 ? $23 : 27846;
 HEAP32[$vararg_buffer>>2] = $24;
 __Z5errorPKcz(28037,$vararg_buffer);
 STACKTOP = sp;return;
}
function __ZL9compareOpiii($value1,$value2,$op) {
 $value1 = $value1|0;
 $value2 = $value2|0;
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $compareResult = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $value1;
 $1 = $value2;
 $2 = $op;
 $compareResult = 0;
 $3 = $2;
 switch ($3|0) {
 case 2:  {
  $4 = $0;
  $5 = $1;
  $6 = ($4|0)==($5|0);
  $7 = $6&1;
  $compareResult = $7;
  break;
 }
 case 3:  {
  $8 = $0;
  $9 = $1;
  $10 = ($8|0)!=($9|0);
  $11 = $10&1;
  $compareResult = $11;
  break;
 }
 case 4:  {
  $12 = $0;
  $13 = $1;
  $14 = ($12|0)<($13|0);
  $15 = $14&1;
  $compareResult = $15;
  break;
 }
 case 5:  {
  $16 = $0;
  $17 = $1;
  $18 = ($16|0)<=($17|0);
  $19 = $18&1;
  $compareResult = $19;
  break;
 }
 case 6:  {
  $20 = $0;
  $21 = $1;
  $22 = ($20|0)>($21|0);
  $23 = $22&1;
  $compareResult = $23;
  break;
 }
 case 7:  {
  $24 = $0;
  $25 = $1;
  $26 = ($24|0)>=($25|0);
  $27 = $26&1;
  $compareResult = $27;
  break;
 }
 default: {
  $28 = $2;
  HEAP32[$vararg_buffer>>2] = $28;
  __Z5errorPKcz(28257,$vararg_buffer);
 }
 }
 $29 = $compareResult;
 $30 = $29&1;
 STACKTOP = sp;return ($30|0);
}
function __ZN15RandomGeneratorC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $seed = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (_time((0|0))|0);
 $3 = $2&65535;
 $seed = $3;
 $4 = $seed;
 __ZN15RandomGenerator7setSeedEt($1,$4);
 STACKTOP = sp;return;
}
function __ZN15RandomGenerator7setSeedEt($this,$seed) {
 $this = $this|0;
 $seed = $seed|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $seed;
 $2 = $0;
 $3 = $1;
 $4 = $3&65535;
 HEAP32[$2>>2] = $4;
 STACKTOP = sp;return;
}
function __ZN15RandomGenerator9getNumberEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $randomSeedHi = 0, $randomSeedLo = 0, $rnd = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 65535;
 $4 = $3&65535;
 $randomSeedLo = $4;
 $5 = HEAP32[$1>>2]|0;
 $6 = $5 >>> 16;
 $7 = $6&65535;
 $randomSeedHi = $7;
 $8 = $randomSeedLo;
 $9 = $8&65535;
 $10 = ($9*346)|0;
 $11 = $10&65535;
 $rnd = $11;
 $12 = $randomSeedHi;
 $13 = $12&65535;
 $14 = ($13|0)!=(0);
 if ($14) {
  $15 = $randomSeedHi;
  $16 = $15&65535;
  $17 = ($16*20021)|0;
  $18 = $rnd;
  $19 = $18&65535;
  $20 = (($19) + ($17))|0;
  $21 = $20&65535;
  $rnd = $21;
 }
 $22 = $rnd;
 $23 = $22&65535;
 $24 = $23 << 16;
 $25 = $randomSeedLo;
 $26 = $25&65535;
 $27 = ($26*20021)|0;
 $28 = $27 & 65535;
 $29 = $24 | $28;
 HEAP32[$1>>2] = $29;
 $30 = HEAP32[$1>>2]|0;
 $31 = (($30) + 1)|0;
 HEAP32[$1>>2] = $31;
 $32 = HEAP32[$1>>2]|0;
 $33 = $32 & 32767;
 $34 = $33&65535;
 STACKTOP = sp;return ($34|0);
}
function __ZN4Game14allocateTablesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 $2 = (_malloc(65535)|0);
 $3 = ((($1)) + 100|0);
 HEAP32[$3>>2] = $2;
 $4 = ((($1)) + 100|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  __Z5errorPKcz(28593,$vararg_buffer);
 }
 $7 = (_malloc(309288)|0);
 $8 = ((($1)) + 64|0);
 HEAP32[$8>>2] = $7;
 $9 = ((($1)) + 64|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  HEAP32[$vararg_buffer1>>2] = 309288;
  __Z5errorPKcz(28650,$vararg_buffer1);
 }
 $12 = (_malloc(309288)|0);
 $13 = ((($1)) + 80|0);
 HEAP32[$13>>2] = $12;
 $14 = ((($1)) + 80|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(0|0);
 if ($16) {
  STACKTOP = sp;return;
 }
 HEAP32[$vararg_buffer3>>2] = 309288;
 __Z5errorPKcz(28696,$vararg_buffer3);
 STACKTOP = sp;return;
}
function __ZN4Game17loadCommonSpritesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bagBitmapSize = 0, $decodedSize = 0, $i = 0, $i1 = 0, $i2 = 0, $i3 = 0, $i4 = 0, $i6 = 0, $j = 0, $j5 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&1;
 if ($4) {
  $5 = ((($1)) + 96|0);
  HEAP32[$5>>2] = 0;
 } else {
  $6 = (__ZN4Game8loadFileEPKcPhPj($1,28742,0,0)|0);
  $7 = ((($1)) + 96|0);
  HEAP32[$7>>2] = $6;
 }
 __ZN4Game7loadWGPEPKc($1,28757);
 $8 = ((($1)) + 104|0);
 $9 = ((($1)) + 68|0);
 ;HEAP32[$8>>2]=HEAP32[$9>>2]|0;HEAP32[$8+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$9+8>>2]|0;
 $10 = ((($1)) + 104|0);
 $11 = ((($10)) + 4|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12&65535;
 $14 = ((($1)) + 104|0);
 $15 = ((($14)) + 2|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = $16&65535;
 $18 = (($17) + 1)|0;
 $19 = Math_imul($13, $18)|0;
 $bagBitmapSize = $19;
 $20 = $bagBitmapSize;
 $21 = (_malloc($20)|0);
 $22 = ((($1)) + 104|0);
 $23 = ((($22)) + 8|0);
 HEAP32[$23>>2] = $21;
 $24 = ((($1)) + 104|0);
 $25 = ((($24)) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)!=(0|0);
 if (!($27)) {
  $28 = $bagBitmapSize;
  HEAP32[$vararg_buffer>>2] = $28;
  __Z5errorPKcz(28772,$vararg_buffer);
 }
 $29 = ((($1)) + 104|0);
 $30 = ((($29)) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ((($1)) + 68|0);
 $33 = ((($32)) + 8|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $bagBitmapSize;
 _memcpy(($31|0),($34|0),($35|0))|0;
 $36 = ((($1)) + 100|0);
 $37 = HEAP32[$36>>2]|0;
 (__ZN4Game8loadFileEPKcPhPj($1,28820,$37,0)|0);
 $38 = ((($1)) + 100|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ((($39)) + 2|0);
 $41 = (__Z14READ_LE_UINT32PKv($40)|0);
 $decodedSize = $41;
 $42 = $decodedSize;
 $43 = (_malloc($42)|0);
 $44 = ((($1)) + 116|0);
 HEAP32[$44>>2] = $43;
 $45 = ((($1)) + 116|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($46|0)!=(0|0);
 if (!($47)) {
  $48 = $decodedSize;
  HEAP32[$vararg_buffer1>>2] = $48;
  __Z5errorPKcz(28835,$vararg_buffer1);
 }
 $49 = ((($1)) + 100|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ((($50)) + 2|0);
 $52 = ((($1)) + 116|0);
 $53 = HEAP32[$52>>2]|0;
 (__Z10decodeLzssPKhPh($51,$53)|0);
 $54 = ((($1)) + 116|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ((($1)) + 120|0);
 HEAP32[$56>>2] = $55;
 $i = 1;
 while(1) {
  $57 = $i;
  $58 = ($57|0)<(3);
  if (!($58)) {
   break;
  }
  $59 = $i;
  $60 = (($59) - 1)|0;
  $61 = ((($1)) + 120|0);
  $62 = (($61) + ($60<<2)|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = $i;
  $65 = (($64) - 1)|0;
  $66 = ((($1)) + 120|0);
  $67 = (($66) + ($65<<2)|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (__ZL13getBitmapSizePKh($68)|0);
  $70 = (($63) + ($69)|0);
  $71 = $i;
  $72 = ((($1)) + 120|0);
  $73 = (($72) + ($71<<2)|0);
  HEAP32[$73>>2] = $70;
  $74 = $i;
  $75 = (($74) + 1)|0;
  $i = $75;
 }
 $i1 = 0;
 while(1) {
  $76 = $i1;
  $77 = ($76|0)<(11);
  if (!($77)) {
   break;
  }
  $78 = $i1;
  $79 = ($78|0)==(0);
  if ($79) {
   $80 = ((($1)) + 120|0);
   $81 = ((($80)) + 8|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = ((($1)) + 120|0);
   $84 = ((($83)) + 8|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = (__ZL13getBitmapSizePKh($85)|0);
   $87 = (($82) + ($86)|0);
   $88 = $i1;
   $89 = ((($1)) + 132|0);
   $90 = (($89) + (($88*48)|0)|0);
   HEAP32[$90>>2] = $87;
  } else {
   $91 = $i1;
   $92 = (($91) - 1)|0;
   $93 = ((($1)) + 132|0);
   $94 = (($93) + (($92*48)|0)|0);
   $95 = ((($94)) + 44|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = $i1;
   $98 = (($97) - 1)|0;
   $99 = ((($1)) + 132|0);
   $100 = (($99) + (($98*48)|0)|0);
   $101 = ((($100)) + 44|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = (__ZL13getBitmapSizePKh($102)|0);
   $104 = (($96) + ($103)|0);
   $105 = $i1;
   $106 = ((($1)) + 132|0);
   $107 = (($106) + (($105*48)|0)|0);
   HEAP32[$107>>2] = $104;
  }
  $j = 1;
  while(1) {
   $108 = $j;
   $109 = ($108|0)<(12);
   if (!($109)) {
    break;
   }
   $110 = $j;
   $111 = (($110) - 1)|0;
   $112 = $i1;
   $113 = ((($1)) + 132|0);
   $114 = (($113) + (($112*48)|0)|0);
   $115 = (($114) + ($111<<2)|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = $j;
   $118 = (($117) - 1)|0;
   $119 = $i1;
   $120 = ((($1)) + 132|0);
   $121 = (($120) + (($119*48)|0)|0);
   $122 = (($121) + ($118<<2)|0);
   $123 = HEAP32[$122>>2]|0;
   $124 = (__ZL13getBitmapSizePKh($123)|0);
   $125 = (($116) + ($124)|0);
   $126 = $j;
   $127 = $i1;
   $128 = ((($1)) + 132|0);
   $129 = (($128) + (($127*48)|0)|0);
   $130 = (($129) + ($126<<2)|0);
   HEAP32[$130>>2] = $125;
   $131 = $j;
   $132 = (($131) + 1)|0;
   $j = $132;
  }
  $133 = $i1;
  $134 = (($133) + 1)|0;
  $i1 = $134;
 }
 $135 = ((($1)) + 132|0);
 $136 = ((($135)) + 480|0);
 $137 = ((($136)) + 44|0);
 $138 = HEAP32[$137>>2]|0;
 $139 = ((($1)) + 132|0);
 $140 = ((($139)) + 480|0);
 $141 = ((($140)) + 44|0);
 $142 = HEAP32[$141>>2]|0;
 $143 = (__ZL13getBitmapSizePKh($142)|0);
 $144 = (($138) + ($143)|0);
 $145 = ((($1)) + 768|0);
 HEAP32[$145>>2] = $144;
 $i2 = 1;
 while(1) {
  $146 = $i2;
  $147 = ($146|0)<(10);
  if (!($147)) {
   break;
  }
  $148 = $i2;
  $149 = (($148) - 1)|0;
  $150 = ((($1)) + 768|0);
  $151 = (($150) + ($149<<2)|0);
  $152 = HEAP32[$151>>2]|0;
  $153 = $i2;
  $154 = (($153) - 1)|0;
  $155 = ((($1)) + 768|0);
  $156 = (($155) + ($154<<2)|0);
  $157 = HEAP32[$156>>2]|0;
  $158 = (__ZL13getBitmapSizePKh($157)|0);
  $159 = (($152) + ($158)|0);
  $160 = $i2;
  $161 = ((($1)) + 768|0);
  $162 = (($161) + ($160<<2)|0);
  HEAP32[$162>>2] = $159;
  $163 = $i2;
  $164 = (($163) + 1)|0;
  $i2 = $164;
 }
 $165 = ((($1)) + 768|0);
 $166 = ((($165)) + 36|0);
 $167 = HEAP32[$166>>2]|0;
 $168 = ((($1)) + 768|0);
 $169 = ((($168)) + 36|0);
 $170 = HEAP32[$169>>2]|0;
 $171 = (__ZL13getBitmapSizePKh($170)|0);
 $172 = (($167) + ($171)|0);
 $173 = ((($1)) + 660|0);
 HEAP32[$173>>2] = $172;
 $i3 = 1;
 while(1) {
  $174 = $i3;
  $175 = ($174|0)<(14);
  if (!($175)) {
   break;
  }
  $176 = $i3;
  $177 = (($176) - 1)|0;
  $178 = ((($1)) + 660|0);
  $179 = (($178) + ($177<<2)|0);
  $180 = HEAP32[$179>>2]|0;
  $181 = $i3;
  $182 = (($181) - 1)|0;
  $183 = ((($1)) + 660|0);
  $184 = (($183) + ($182<<2)|0);
  $185 = HEAP32[$184>>2]|0;
  $186 = (__ZL13getBitmapSizePKh($185)|0);
  $187 = (($180) + ($186)|0);
  $188 = $i3;
  $189 = ((($1)) + 660|0);
  $190 = (($189) + ($188<<2)|0);
  HEAP32[$190>>2] = $187;
  $191 = $i3;
  $192 = (($191) + 1)|0;
  $i3 = $192;
 }
 $i4 = 0;
 while(1) {
  $193 = $i4;
  $194 = ($193|0)<(2);
  if (!($194)) {
   break;
  }
  $195 = $i4;
  $196 = ($195|0)==(0);
  if ($196) {
   $197 = ((($1)) + 660|0);
   $198 = ((($197)) + 52|0);
   $199 = HEAP32[$198>>2]|0;
   $200 = ((($1)) + 660|0);
   $201 = ((($200)) + 52|0);
   $202 = HEAP32[$201>>2]|0;
   $203 = (__ZL13getBitmapSizePKh($202)|0);
   $204 = (($199) + ($203)|0);
   $205 = $i4;
   $206 = ((($1)) + 716|0);
   $207 = (($206) + (($205*20)|0)|0);
   HEAP32[$207>>2] = $204;
  } else {
   $208 = $i4;
   $209 = (($208) - 1)|0;
   $210 = ((($1)) + 716|0);
   $211 = (($210) + (($209*20)|0)|0);
   $212 = ((($211)) + 16|0);
   $213 = HEAP32[$212>>2]|0;
   $214 = $i4;
   $215 = (($214) - 1)|0;
   $216 = ((($1)) + 716|0);
   $217 = (($216) + (($215*20)|0)|0);
   $218 = ((($217)) + 16|0);
   $219 = HEAP32[$218>>2]|0;
   $220 = (__ZL13getBitmapSizePKh($219)|0);
   $221 = (($213) + ($220)|0);
   $222 = $i4;
   $223 = ((($1)) + 716|0);
   $224 = (($223) + (($222*20)|0)|0);
   HEAP32[$224>>2] = $221;
  }
  $j5 = 1;
  while(1) {
   $225 = $j5;
   $226 = ($225|0)<(5);
   if (!($226)) {
    break;
   }
   $227 = $j5;
   $228 = (($227) - 1)|0;
   $229 = $i4;
   $230 = ((($1)) + 716|0);
   $231 = (($230) + (($229*20)|0)|0);
   $232 = (($231) + ($228<<2)|0);
   $233 = HEAP32[$232>>2]|0;
   $234 = $j5;
   $235 = (($234) - 1)|0;
   $236 = $i4;
   $237 = ((($1)) + 716|0);
   $238 = (($237) + (($236*20)|0)|0);
   $239 = (($238) + ($235<<2)|0);
   $240 = HEAP32[$239>>2]|0;
   $241 = (__ZL13getBitmapSizePKh($240)|0);
   $242 = (($233) + ($241)|0);
   $243 = $j5;
   $244 = $i4;
   $245 = ((($1)) + 716|0);
   $246 = (($245) + (($244*20)|0)|0);
   $247 = (($246) + ($243<<2)|0);
   HEAP32[$247>>2] = $242;
   $248 = $j5;
   $249 = (($248) + 1)|0;
   $j5 = $249;
  }
  $250 = $i4;
  $251 = (($250) + 1)|0;
  $i4 = $251;
 }
 $252 = ((($1)) + 8|0);
 $253 = HEAP8[$252>>0]|0;
 $254 = $253&1;
 if ($254) {
  $255 = ((($1)) + 756|0);
  HEAP32[$255>>2] = 0;
  $256 = ((($1)) + 716|0);
  $257 = ((($256)) + 20|0);
  $258 = ((($257)) + 16|0);
  $259 = HEAP32[$258>>2]|0;
  $260 = ((($1)) + 716|0);
  $261 = ((($260)) + 20|0);
  $262 = ((($261)) + 16|0);
  $263 = HEAP32[$262>>2]|0;
  $264 = (__ZL13getBitmapSizePKh($263)|0);
  $265 = (($259) + ($264)|0);
  $266 = ((($1)) + 760|0);
  HEAP32[$266>>2] = $265;
  $267 = ((($1)) + 760|0);
  $268 = HEAP32[$267>>2]|0;
  $269 = ((($1)) + 760|0);
  $270 = HEAP32[$269>>2]|0;
  $271 = (__ZL13getBitmapSizePKh($270)|0);
  $272 = (($268) + ($271)|0);
  $273 = ((($1)) + 764|0);
  HEAP32[$273>>2] = $272;
  $274 = ((($1)) + 812|0);
  dest=$274; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  STACKTOP = sp;return;
 }
 $275 = ((($1)) + 716|0);
 $276 = ((($275)) + 20|0);
 $277 = ((($276)) + 16|0);
 $278 = HEAP32[$277>>2]|0;
 $279 = ((($1)) + 716|0);
 $280 = ((($279)) + 20|0);
 $281 = ((($280)) + 16|0);
 $282 = HEAP32[$281>>2]|0;
 $283 = (__ZL13getBitmapSizePKh($282)|0);
 $284 = (($278) + ($283)|0);
 $285 = ((($1)) + 756|0);
 HEAP32[$285>>2] = $284;
 $286 = ((($1)) + 756|0);
 $287 = HEAP32[$286>>2]|0;
 $288 = ((($1)) + 756|0);
 $289 = HEAP32[$288>>2]|0;
 $290 = (__ZL13getBitmapSizePKh($289)|0);
 $291 = (($287) + ($290)|0);
 $292 = ((($1)) + 760|0);
 HEAP32[$292>>2] = $291;
 $293 = ((($1)) + 760|0);
 $294 = HEAP32[$293>>2]|0;
 $295 = ((($1)) + 760|0);
 $296 = HEAP32[$295>>2]|0;
 $297 = (__ZL13getBitmapSizePKh($296)|0);
 $298 = (($294) + ($297)|0);
 $299 = ((($1)) + 764|0);
 HEAP32[$299>>2] = $298;
 $300 = ((($1)) + 764|0);
 $301 = HEAP32[$300>>2]|0;
 $302 = ((($1)) + 764|0);
 $303 = HEAP32[$302>>2]|0;
 $304 = (__ZL13getBitmapSizePKh($303)|0);
 $305 = (($301) + ($304)|0);
 $306 = ((($1)) + 812|0);
 HEAP32[$306>>2] = $305;
 $i6 = 1;
 while(1) {
  $307 = $i6;
  $308 = ($307|0)<(10);
  if (!($308)) {
   break;
  }
  $309 = $i6;
  $310 = (($309) - 1)|0;
  $311 = ((($1)) + 812|0);
  $312 = (($311) + ($310<<2)|0);
  $313 = HEAP32[$312>>2]|0;
  $314 = $i6;
  $315 = (($314) - 1)|0;
  $316 = ((($1)) + 812|0);
  $317 = (($316) + ($315<<2)|0);
  $318 = HEAP32[$317>>2]|0;
  $319 = (__ZL13getBitmapSizePKh($318)|0);
  $320 = (($313) + ($319)|0);
  $321 = $i6;
  $322 = ((($1)) + 812|0);
  $323 = (($322) + ($321<<2)|0);
  HEAP32[$323>>2] = $320;
  $324 = $i6;
  $325 = (($324) + 1)|0;
  $i6 = $325;
 }
 STACKTOP = sp;return;
}
function __ZN4Game8loadFileEPKcPhPj($this,$fileName,$dst,$dstSize) {
 $this = $this|0;
 $fileName = $fileName|0;
 $dst = $dst|0;
 $dstSize = $dstSize|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fileSize = 0, $fp = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $fp = sp + 32|0;
 $0 = $this;
 $1 = $fileName;
 $2 = $dst;
 $3 = $dstSize;
 $7 = $0;
 $8 = $1;
 HEAP32[$vararg_buffer>>2] = $8;
 __Z5debugtPKcz(8,28884,$vararg_buffer);
 $9 = ((($7)) + 16|0);
 $10 = $1;
 __ZN10FileHolderC2ER10FileSystemPKc($fp,$9,$10);
 __THREW__ = 0;
 $11 = (invoke_ii(157,($fp|0))|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 do {
  if (!($13)) {
   __THREW__ = 0;
   $14 = (invoke_ii(164,($11|0))|0);
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   if (!($16)) {
    $fileSize = $14;
    $17 = $2;
    $18 = ($17|0)!=(0|0);
    if (!($18)) {
     $19 = $fileSize;
     __THREW__ = 0;
     $20 = (invoke_ii(162,($19|0))|0);
     $21 = __THREW__; __THREW__ = 0;
     $22 = $21&1;
     if ($22) {
      break;
     }
     $2 = $20;
     $23 = $2;
     $24 = ($23|0)!=(0|0);
     if (!($24)) {
      $25 = $fileSize;
      __THREW__ = 0;
      HEAP32[$vararg_buffer1>>2] = $25;
      invoke_vii(159,(28905|0),($vararg_buffer1|0));
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if ($27) {
       break;
      }
     }
    }
    $32 = $3;
    $33 = ($32|0)!=(0|0);
    if ($33) {
     $34 = $fileSize;
     $35 = $3;
     HEAP32[$35>>2] = $34;
    }
    __THREW__ = 0;
    $36 = (invoke_ii(157,($fp|0))|0);
    $37 = __THREW__; __THREW__ = 0;
    $38 = $37&1;
    if (!($38)) {
     $39 = $2;
     $40 = $fileSize;
     __THREW__ = 0;
     (invoke_iiii(163,($36|0),($39|0),($40|0))|0);
     $41 = __THREW__; __THREW__ = 0;
     $42 = $41&1;
     if (!($42)) {
      $43 = $2;
      $6 = 1;
      __ZN10FileHolderD2Ev($fp);
      STACKTOP = sp;return ($43|0);
     }
    }
   }
  }
 } while(0);
 $28 = ___cxa_find_matching_catch()|0;
 $29 = tempRet0;
 $4 = $28;
 $5 = $29;
 __THREW__ = 0;
 invoke_vi(160,($fp|0));
 $30 = __THREW__; __THREW__ = 0;
 $31 = $30&1;
 if ($31) {
  $46 = ___cxa_find_matching_catch(0|0)|0;
  $47 = tempRet0;
  ___clang_call_terminate($46);
  // unreachable;
 } else {
  $44 = $4;
  $45 = $5;
  ___resumeException($44|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN4Game7loadWGPEPKc($this,$fileName) {
 $this = $this|0;
 $fileName = $fileName|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $dataSize = 0, $decodedSize = 0, $fp = 0, $len = 0, $offs = 0, $sz = 0, $sz1 = 0, $tag = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $fp = sp + 48|0;
 $0 = $this;
 $1 = $fileName;
 $4 = $0;
 $5 = $1;
 HEAP32[$vararg_buffer>>2] = $5;
 __Z5debugtPKcz(8,28959,$vararg_buffer);
 $6 = ((($4)) + 16|0);
 $7 = $1;
 __ZN10FileHolderC2ER10FileSystemPKc($fp,$6,$7);
 $offs = 1064;
 $len = 0;
 __THREW__ = 0;
 $8 = (invoke_ii(157,($fp|0))|0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 L1: do {
  if (!($10)) {
   __THREW__ = 0;
   $11 = (invoke_ii(158,($8|0))|0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if (!($13)) {
    $14 = $11&65535;
    $tag = $14;
    $15 = $tag;
    $16 = ($15|0)==(19778);
    do {
     if ($16) {
      __THREW__ = 0;
      $17 = (invoke_ii(157,($fp|0))|0);
      $18 = __THREW__; __THREW__ = 0;
      $19 = $18&1;
      if ($19) {
       break L1;
      }
      __THREW__ = 0;
      $20 = (invoke_ii(203,($17|0))|0);
      $21 = __THREW__; __THREW__ = 0;
      $22 = $21&1;
      if ($22) {
       break L1;
      }
      $23 = (($20) - 14)|0;
      $len = $23;
      __THREW__ = 0;
      $24 = (invoke_ii(157,($fp|0))|0);
      $25 = __THREW__; __THREW__ = 0;
      $26 = $25&1;
      if ($26) {
       break L1;
      }
      __THREW__ = 0;
      invoke_viii(204,($24|0),8,1);
      $27 = __THREW__; __THREW__ = 0;
      $28 = $27&1;
      if ($28) {
       break L1;
      }
      __THREW__ = 0;
      $29 = (invoke_ii(157,($fp|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       break L1;
      }
      $32 = ((($4)) + 64|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = $len;
      __THREW__ = 0;
      (invoke_iiii(163,($29|0),($33|0),($34|0))|0);
      $35 = __THREW__; __THREW__ = 0;
      $36 = $35&1;
      if ($36) {
       break L1;
      }
     } else {
      $41 = $tag;
      $42 = ($41|0)==(20567);
      if (!($42)) {
       $95 = $tag;
       $96 = ($95|0)==(20570);
       if (!($96)) {
        $121 = $tag;
        __THREW__ = 0;
        HEAP32[$vararg_buffer1>>2] = $121;
        invoke_vii(159,(28979|0),($vararg_buffer1|0));
        $122 = __THREW__; __THREW__ = 0;
        $123 = $122&1;
        if ($123) {
         break L1;
        } else {
         break;
        }
       }
       __THREW__ = 0;
       $97 = (invoke_ii(157,($fp|0))|0);
       $98 = __THREW__; __THREW__ = 0;
       $99 = $98&1;
       if ($99) {
        break L1;
       }
       __THREW__ = 0;
       $100 = (invoke_ii(164,($97|0))|0);
       $101 = __THREW__; __THREW__ = 0;
       $102 = $101&1;
       if ($102) {
        break L1;
       }
       $103 = (($100) - 2)|0;
       $sz1 = $103;
       __THREW__ = 0;
       $104 = (invoke_ii(157,($fp|0))|0);
       $105 = __THREW__; __THREW__ = 0;
       $106 = $105&1;
       if ($106) {
        break L1;
       }
       $107 = ((($4)) + 80|0);
       $108 = HEAP32[$107>>2]|0;
       $109 = $sz1;
       __THREW__ = 0;
       (invoke_iiii(163,($104|0),($108|0),($109|0))|0);
       $110 = __THREW__; __THREW__ = 0;
       $111 = $110&1;
       if ($111) {
        break L1;
       }
       $112 = ((($4)) + 80|0);
       $113 = HEAP32[$112>>2]|0;
       $114 = ((($4)) + 64|0);
       $115 = HEAP32[$114>>2]|0;
       __THREW__ = 0;
       $116 = (invoke_iii(207,($113|0),($115|0))|0);
       $117 = __THREW__; __THREW__ = 0;
       $118 = $117&1;
       if ($118) {
        break L1;
       }
       $len = $116;
       $119 = $offs;
       $120 = (($119) + 4)|0;
       $offs = $120;
       break;
      }
      $len = 0;
      __THREW__ = 0;
      $43 = (invoke_ii(157,($fp|0))|0);
      $44 = __THREW__; __THREW__ = 0;
      $45 = $44&1;
      if ($45) {
       break L1;
      }
      __THREW__ = 0;
      $46 = (invoke_ii(164,($43|0))|0);
      $47 = __THREW__; __THREW__ = 0;
      $48 = $47&1;
      if ($48) {
       break L1;
      }
      $dataSize = $46;
      while(1) {
       __THREW__ = 0;
       $49 = (invoke_ii(157,($fp|0))|0);
       $50 = __THREW__; __THREW__ = 0;
       $51 = $50&1;
       if ($51) {
        break L1;
       }
       __THREW__ = 0;
       $52 = (invoke_ii(158,($49|0))|0);
       $53 = __THREW__; __THREW__ = 0;
       $54 = $53&1;
       if ($54) {
        break L1;
       }
       $55 = $52&65535;
       $sz = $55;
       __THREW__ = 0;
       $56 = (invoke_ii(157,($fp|0))|0);
       $57 = __THREW__; __THREW__ = 0;
       $58 = $57&1;
       if ($58) {
        break L1;
       }
       __THREW__ = 0;
       $59 = (invoke_ii(205,($56|0))|0);
       $60 = __THREW__; __THREW__ = 0;
       $61 = $60&1;
       if ($61) {
        break L1;
       }
       if ($59) {
        break;
       }
       $62 = $sz;
       $63 = ($62|0)!=(0);
       if ($63) {
        __THREW__ = 0;
        $64 = (invoke_ii(157,($fp|0))|0);
        $65 = __THREW__; __THREW__ = 0;
        $66 = $65&1;
        if ($66) {
         break L1;
        }
        $67 = ((($4)) + 80|0);
        $68 = HEAP32[$67>>2]|0;
        $69 = $sz;
        __THREW__ = 0;
        (invoke_iiii(163,($64|0),($68|0),($69|0))|0);
        $70 = __THREW__; __THREW__ = 0;
        $71 = $70&1;
        if ($71) {
         break L1;
        }
        $72 = ((($4)) + 80|0);
        $73 = HEAP32[$72>>2]|0;
        $74 = ((($4)) + 64|0);
        $75 = HEAP32[$74>>2]|0;
        $76 = $len;
        $77 = (($75) + ($76)|0);
        __THREW__ = 0;
        $78 = (invoke_iii(206,($73|0),($77|0))|0);
        $79 = __THREW__; __THREW__ = 0;
        $80 = $79&1;
        if ($80) {
         break L1;
        }
        $decodedSize = $78;
        $81 = $decodedSize;
        $82 = $len;
        $83 = (($82) + ($81))|0;
        $len = $83;
        $84 = $sz;
        $85 = $dataSize;
        $86 = (($85) - ($84))|0;
        $dataSize = $86;
       }
       $87 = $dataSize;
       $88 = (($87) - 2)|0;
       $dataSize = $88;
       $89 = $dataSize;
       $90 = ($89|0)>(0);
       if (!($90)) {
        break;
       }
      }
      $91 = $offs;
      $92 = (($91) + 4)|0;
      $offs = $92;
      $93 = $len;
      $94 = (($93) + 4)|0;
      $len = $94;
     }
    } while(0);
    $124 = ((($4)) + 4448|0);
    HEAP32[$124>>2] = 1;
    $125 = ((($4)) + 64|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ((($126)) + 4|0);
    __THREW__ = 0;
    $128 = (invoke_ii(208,($127|0))|0);
    $129 = __THREW__; __THREW__ = 0;
    $130 = $129&1;
    if (!($130)) {
     $131 = (($128) - 1)|0;
     $132 = $131&65535;
     $133 = ((($4)) + 68|0);
     HEAP16[$133>>1] = $132;
     $134 = ((($4)) + 64|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = ((($135)) + 8|0);
     __THREW__ = 0;
     $137 = (invoke_ii(208,($136|0))|0);
     $138 = __THREW__; __THREW__ = 0;
     $139 = $138&1;
     if (!($139)) {
      $140 = (($137) - 1)|0;
      $141 = $140&65535;
      $142 = ((($4)) + 68|0);
      $143 = ((($142)) + 2|0);
      HEAP16[$143>>1] = $141;
      $144 = ((($4)) + 64|0);
      $145 = HEAP32[$144>>2]|0;
      $146 = ((($145)) + 4|0);
      __THREW__ = 0;
      $147 = (invoke_ii(208,($146|0))|0);
      $148 = __THREW__; __THREW__ = 0;
      $149 = $148&1;
      if (!($149)) {
       $150 = (($147) + 3)|0;
       $151 = $150 & -4;
       $152 = $151&65535;
       $153 = ((($4)) + 68|0);
       $154 = ((($153)) + 4|0);
       HEAP16[$154>>1] = $152;
       $155 = ((($4)) + 80|0);
       $156 = HEAP32[$155>>2]|0;
       $157 = ((($4)) + 68|0);
       $158 = ((($157)) + 8|0);
       HEAP32[$158>>2] = $156;
       $159 = ((($4)) + 84|0);
       $160 = ((($4)) + 68|0);
       ;HEAP32[$159>>2]=HEAP32[$160>>2]|0;HEAP32[$159+4>>2]=HEAP32[$160+4>>2]|0;HEAP32[$159+8>>2]=HEAP32[$160+8>>2]|0;
       $161 = ((($4)) + 64|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = $offs;
       $164 = (($162) + ($163)|0);
       $165 = ((($4)) + 84|0);
       $166 = ((($165)) + 8|0);
       HEAP32[$166>>2] = $164;
       $167 = ((($4)) + 68|0);
       $168 = ((($167)) + 8|0);
       $169 = HEAP32[$168>>2]|0;
       $170 = ((($4)) + 84|0);
       $171 = ((($170)) + 8|0);
       $172 = HEAP32[$171>>2]|0;
       $173 = $len;
       $174 = $offs;
       $175 = (($173) - ($174))|0;
       _memcpy(($169|0),($172|0),($175|0))|0;
       __ZN10FileHolderD2Ev($fp);
       STACKTOP = sp;return;
      }
     }
    }
   }
  }
 } while(0);
 $37 = ___cxa_find_matching_catch()|0;
 $38 = tempRet0;
 $2 = $37;
 $3 = $38;
 __THREW__ = 0;
 invoke_vi(160,($fp|0));
 $39 = __THREW__; __THREW__ = 0;
 $40 = $39&1;
 if ($40) {
  $178 = ___cxa_find_matching_catch(0|0)|0;
  $179 = tempRet0;
  ___clang_call_terminate($178);
  // unreachable;
 } else {
  $176 = $2;
  $177 = $3;
  ___resumeException($176|0);
  // unreachable;
 }
}
function __ZN4Game7loadSPREPKcP14SceneAnimation($this,$fileName,$sa) {
 $this = $this|0;
 $fileName = $fileName|0;
 $sa = $sa|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $decode = 0, $fp = 0, $frame = 0, $i = 0, $len = 0, $motion = 0, $num = 0, $tag = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $fp = sp + 56|0;
 $0 = $this;
 $1 = $fileName;
 $2 = $sa;
 $5 = $0;
 $6 = $1;
 HEAP32[$vararg_buffer>>2] = $6;
 __Z5debugtPKcz(8,29001,$vararg_buffer);
 $7 = ((($5)) + 16|0);
 $8 = $1;
 __ZN10FileHolderC2ER10FileSystemPKc($fp,$7,$8);
 $decode = 0;
 __THREW__ = 0;
 $9 = (invoke_ii(157,($fp|0))|0);
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 L1: do {
  if (!($11)) {
   __THREW__ = 0;
   $12 = (invoke_ii(158,($9|0))|0);
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   if (!($14)) {
    $15 = $12&65535;
    $tag = $15;
    $16 = $tag;
    $17 = ($16|0)==(13651);
    do {
     if ($17) {
      $decode = 206;
     } else {
      $22 = $tag;
      $23 = ($22|0)==(13658);
      if ($23) {
       $decode = 207;
       break;
      } else {
       $24 = $tag;
       __THREW__ = 0;
       HEAP32[$vararg_buffer1>>2] = $24;
       invoke_vii(159,(29021|0),($vararg_buffer1|0));
       $25 = __THREW__; __THREW__ = 0;
       $26 = $25&1;
       if ($26) {
        break L1;
       } else {
        break;
       }
      }
     }
    } while(0);
    $27 = $2;
    $28 = ((($27)) + 22|0);
    HEAP16[$28>>1] = 0;
    $29 = ((($5)) + 81412|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = $30&65535;
    $32 = $2;
    $33 = ((($32)) + 20|0);
    HEAP16[$33>>1] = $31;
    while(1) {
     __THREW__ = 0;
     $34 = (invoke_ii(157,($fp|0))|0);
     $35 = __THREW__; __THREW__ = 0;
     $36 = $35&1;
     if ($36) {
      break L1;
     }
     __THREW__ = 0;
     $37 = (invoke_ii(158,($34|0))|0);
     $38 = __THREW__; __THREW__ = 0;
     $39 = $38&1;
     if ($39) {
      break L1;
     }
     $40 = $37&65535;
     $num = $40;
     $41 = $num;
     $42 = ($41|0)==(0);
     if ($42) {
      label = 38;
      break;
     }
     $43 = ((($5)) + 81412|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = ($44|0)<(300);
     if (!($45)) {
      label = 14;
      break;
     }
     $47 = ((($5)) + 81412|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ((($5)) + 79612|0);
     $50 = (($49) + (($48*6)|0)|0);
     $motion = $50;
     $51 = ((($5)) + 79044|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = $52&65535;
     $54 = $motion;
     HEAP16[$54>>1] = $53;
     $55 = $num;
     $56 = $55&65535;
     $57 = $motion;
     $58 = ((($57)) + 2|0);
     HEAP16[$58>>1] = $56;
     $59 = ((($5)) + 12556|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = $60&65535;
     $62 = $motion;
     $63 = ((($62)) + 4|0);
     HEAP16[$63>>1] = $61;
     $64 = ((($5)) + 79044|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = $num;
     $67 = (($65) + ($66))|0;
     $68 = ($67|0)<=(3000);
     if (!($68)) {
      label = 16;
      break;
     }
     $i = 0;
     while(1) {
      $70 = $i;
      $71 = $num;
      $72 = ($70|0)<($71|0);
      if (!($72)) {
       break;
      }
      __THREW__ = 0;
      $73 = (invoke_ii(157,($fp|0))|0);
      $74 = __THREW__; __THREW__ = 0;
      $75 = $74&1;
      if ($75) {
       break L1;
      }
      __THREW__ = 0;
      $76 = (invoke_ii(158,($73|0))|0);
      $77 = __THREW__; __THREW__ = 0;
      $78 = $77&1;
      if ($78) {
       break L1;
      }
      $79 = $76&65535;
      $len = $79;
      $80 = ((($5)) + 79044|0);
      $81 = HEAP32[$80>>2]|0;
      $82 = ((($5)) + 19044|0);
      $83 = (($82) + (($81*20)|0)|0);
      $frame = $83;
      $84 = $len;
      __THREW__ = 0;
      $85 = (invoke_ii(162,($84|0))|0);
      $86 = __THREW__; __THREW__ = 0;
      $87 = $86&1;
      if ($87) {
       break L1;
      }
      $88 = $frame;
      HEAP32[$88>>2] = $85;
      $89 = $frame;
      $90 = HEAP32[$89>>2]|0;
      $91 = ($90|0)!=(0|0);
      if (!($91)) {
       $92 = $len;
       __THREW__ = 0;
       HEAP32[$vararg_buffer4>>2] = $92;
       invoke_vii(159,(29166|0),($vararg_buffer4|0));
       $93 = __THREW__; __THREW__ = 0;
       $94 = $93&1;
       if ($94) {
        break L1;
       }
      }
      __THREW__ = 0;
      $95 = (invoke_ii(157,($fp|0))|0);
      $96 = __THREW__; __THREW__ = 0;
      $97 = $96&1;
      if ($97) {
       break L1;
      }
      $98 = $frame;
      $99 = HEAP32[$98>>2]|0;
      $100 = $len;
      __THREW__ = 0;
      (invoke_iiii(163,($95|0),($99|0),($100|0))|0);
      $101 = __THREW__; __THREW__ = 0;
      $102 = $101&1;
      if ($102) {
       break L1;
      }
      __THREW__ = 0;
      $103 = (invoke_ii(157,($fp|0))|0);
      $104 = __THREW__; __THREW__ = 0;
      $105 = $104&1;
      if ($105) {
       break L1;
      }
      __THREW__ = 0;
      $106 = (invoke_ii(158,($103|0))|0);
      $107 = __THREW__; __THREW__ = 0;
      $108 = $107&1;
      if ($108) {
       break L1;
      }
      $109 = $frame;
      $110 = ((($109)) + 4|0);
      HEAP16[$110>>1] = $106;
      __THREW__ = 0;
      $111 = (invoke_ii(157,($fp|0))|0);
      $112 = __THREW__; __THREW__ = 0;
      $113 = $112&1;
      if ($113) {
       break L1;
      }
      __THREW__ = 0;
      $114 = (invoke_ii(158,($111|0))|0);
      $115 = __THREW__; __THREW__ = 0;
      $116 = $115&1;
      if ($116) {
       break L1;
      }
      $117 = $frame;
      $118 = ((($117)) + 4|0);
      $119 = ((($118)) + 2|0);
      HEAP16[$119>>1] = $114;
      __THREW__ = 0;
      $120 = (invoke_ii(157,($fp|0))|0);
      $121 = __THREW__; __THREW__ = 0;
      $122 = $121&1;
      if ($122) {
       break L1;
      }
      __THREW__ = 0;
      $123 = (invoke_ii(158,($120|0))|0);
      $124 = __THREW__; __THREW__ = 0;
      $125 = $124&1;
      if ($125) {
       break L1;
      }
      $126 = $frame;
      $127 = ((($126)) + 4|0);
      $128 = ((($127)) + 4|0);
      HEAP16[$128>>1] = $123;
      __THREW__ = 0;
      $129 = (invoke_ii(157,($fp|0))|0);
      $130 = __THREW__; __THREW__ = 0;
      $131 = $130&1;
      if ($131) {
       break L1;
      }
      __THREW__ = 0;
      $132 = (invoke_ii(158,($129|0))|0);
      $133 = __THREW__; __THREW__ = 0;
      $134 = $133&1;
      if ($134) {
       break L1;
      }
      $135 = $frame;
      $136 = ((($135)) + 4|0);
      $137 = ((($136)) + 6|0);
      HEAP16[$137>>1] = $132;
      __THREW__ = 0;
      $138 = (invoke_ii(157,($fp|0))|0);
      $139 = __THREW__; __THREW__ = 0;
      $140 = $139&1;
      if ($140) {
       break L1;
      }
      __THREW__ = 0;
      $141 = (invoke_ii(158,($138|0))|0);
      $142 = __THREW__; __THREW__ = 0;
      $143 = $142&1;
      if ($143) {
       break L1;
      }
      $144 = $frame;
      $145 = ((($144)) + 4|0);
      $146 = ((($145)) + 8|0);
      HEAP16[$146>>1] = $141;
      $147 = $decode;
      $148 = $frame;
      $149 = ((($148)) + 16|0);
      HEAP32[$149>>2] = $147;
      $150 = ((($5)) + 79044|0);
      $151 = HEAP32[$150>>2]|0;
      $152 = (($151) + 1)|0;
      HEAP32[$150>>2] = $152;
      $153 = $i;
      $154 = (($153) + 1)|0;
      $i = $154;
     }
     $155 = $2;
     $156 = ((($155)) + 22|0);
     $157 = HEAP16[$156>>1]|0;
     $158 = (($157) + 1)<<16>>16;
     HEAP16[$156>>1] = $158;
     $159 = ((($5)) + 81412|0);
     $160 = HEAP32[$159>>2]|0;
     $161 = (($160) + 1)|0;
     HEAP32[$159>>2] = $161;
    }
    if ((label|0) == 14) {
     __THREW__ = 0;
     invoke_viiii(161,(29043|0),(29088|0),212,(29101|0));
     $46 = __THREW__; __THREW__ = 0;
     break;
    }
    else if ((label|0) == 16) {
     __THREW__ = 0;
     invoke_viiii(161,(29109|0),(29088|0),217,(29101|0));
     $69 = __THREW__; __THREW__ = 0;
     break;
    }
    else if ((label|0) == 38) {
     __ZN10FileHolderD2Ev($fp);
     STACKTOP = sp;return;
    }
   }
  }
 } while(0);
 $18 = ___cxa_find_matching_catch()|0;
 $19 = tempRet0;
 $3 = $18;
 $4 = $19;
 __THREW__ = 0;
 invoke_vi(160,($fp|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $164 = ___cxa_find_matching_catch(0|0)|0;
  $165 = tempRet0;
  ___clang_call_terminate($164);
  // unreachable;
 } else {
  $162 = $3;
  $163 = $4;
  ___resumeException($162|0);
  // unreachable;
 }
}
function __ZN4Game7loadMOVEPKc($this,$fileName) {
 $this = $this|0;
 $fileName = $fileName|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $box = 0, $filePath = 0, $fp = 0;
 var $i = 0, $i1 = 0, $index = 0, $initType = 0, $len = 0, $or$cond = 0, $p = 0, $sa = 0, $so = 0, $speed = 0, $sprName = 0, $tag = 0, $type = 0, $var = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, $wgpName = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 496|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $fp = sp + 88|0;
 $sprName = sp + 360|0;
 $wgpName = sp + 232|0;
 $filePath = sp + 104|0;
 $0 = $this;
 $1 = $fileName;
 $4 = $0;
 $5 = $1;
 HEAP32[$vararg_buffer>>2] = $5;
 __Z5debugtPKcz(8,29194,$vararg_buffer);
 $6 = ((($4)) + 16|0);
 $7 = $1;
 __ZN10FileHolderC2ER10FileSystemPKc($fp,$6,$7);
 __THREW__ = 0;
 $8 = (invoke_ii(157,($fp|0))|0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 L1: do {
  if (!($10)) {
   __THREW__ = 0;
   $11 = (invoke_ii(158,($8|0))|0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if (!($13)) {
    $14 = $11&65535;
    $tag = $14;
    $15 = $tag;
    $16 = ($15|0)!=(13645);
    if ($16) {
     $17 = $tag;
     __THREW__ = 0;
     HEAP32[$vararg_buffer2>>2] = $17;
     invoke_vii(159,(29214|0),($vararg_buffer2|0));
     $18 = __THREW__; __THREW__ = 0;
     $19 = $18&1;
     if ($19) {
      break;
     }
    }
    $24 = ((($4)) + 12556|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($25|0)<(50);
    if (!($26)) {
     __THREW__ = 0;
     invoke_viiii(161,(29236|0),(29088|0),259,(29276|0));
     $27 = __THREW__; __THREW__ = 0;
     break;
    }
    $28 = ((($4)) + 12556|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ((($4)) + 10556|0);
    $31 = (($30) + (($29*40)|0)|0);
    $sa = $31;
    __THREW__ = 0;
    $32 = (invoke_ii(157,($fp|0))|0);
    $33 = __THREW__; __THREW__ = 0;
    $34 = $33&1;
    if (!($34)) {
     __THREW__ = 0;
     $35 = (invoke_ii(158,($32|0))|0);
     $36 = __THREW__; __THREW__ = 0;
     $37 = $36&1;
     if (!($37)) {
      $38 = $35&65535;
      $len = $38;
      __THREW__ = 0;
      $39 = (invoke_ii(157,($fp|0))|0);
      $40 = __THREW__; __THREW__ = 0;
      $41 = $40&1;
      if (!($41)) {
       $42 = $len;
       __THREW__ = 0;
       (invoke_iiii(163,($39|0),($sprName|0),($42|0))|0);
       $43 = __THREW__; __THREW__ = 0;
       $44 = $43&1;
       if (!($44)) {
        __THREW__ = 0;
        $45 = (invoke_ii(157,($fp|0))|0);
        $46 = __THREW__; __THREW__ = 0;
        $47 = $46&1;
        if (!($47)) {
         __THREW__ = 0;
         $48 = (invoke_ii(158,($45|0))|0);
         $49 = __THREW__; __THREW__ = 0;
         $50 = $49&1;
         if (!($50)) {
          $51 = $48&65535;
          $len = $51;
          __THREW__ = 0;
          $52 = (invoke_ii(157,($fp|0))|0);
          $53 = __THREW__; __THREW__ = 0;
          $54 = $53&1;
          if (!($54)) {
           $55 = $len;
           __THREW__ = 0;
           (invoke_iiii(163,($52|0),($wgpName|0),($55|0))|0);
           $56 = __THREW__; __THREW__ = 0;
           $57 = $56&1;
           if (!($57)) {
            __THREW__ = 0;
            $58 = (invoke_ii(157,($fp|0))|0);
            $59 = __THREW__; __THREW__ = 0;
            $60 = $59&1;
            if (!($60)) {
             __THREW__ = 0;
             $61 = (invoke_ii(158,($58|0))|0);
             $62 = __THREW__; __THREW__ = 0;
             $63 = $62&1;
             if (!($63)) {
              $64 = $61&65535;
              $speed = $64;
              $65 = $speed;
              __THREW__ = 0;
              HEAP32[$vararg_buffer5>>2] = $65;
              invoke_viii(209,8,(29284|0),($vararg_buffer5|0));
              $66 = __THREW__; __THREW__ = 0;
              $67 = $66&1;
              if (!($67)) {
               $68 = ((($4)) + 4448|0);
               $69 = HEAP32[$68>>2]|0;
               $70 = ($69|0)==(0);
               L21: do {
                if ($70) {
                 __THREW__ = 0;
                 invoke_vii(210,($4|0),($wgpName|0));
                 $71 = __THREW__; __THREW__ = 0;
                 $72 = $71&1;
                 if ($72) {
                  break L1;
                 }
                 $73 = ((($4)) + 4660|0);
                 __THREW__ = 0;
                 (invoke_iii(211,($73|0),($wgpName|0))|0);
                 $74 = __THREW__; __THREW__ = 0;
                 $75 = $74&1;
                 if ($75) {
                  break L1;
                 }
                 $76 = ((($4)) + 79044|0);
                 HEAP32[$76>>2] = 0;
                 $77 = ((($4)) + 81412|0);
                 HEAP32[$77>>2] = 0;
                 $78 = ((($4)) + 10552|0);
                 HEAP32[$78>>2] = 0;
                 $i = 0;
                 while(1) {
                  $79 = $i;
                  $80 = ($79|0)<(50);
                  if (!($80)) {
                   break L21;
                  }
                  $81 = $i;
                  $82 = ((($4)) + 5252|0);
                  $83 = (($82) + (($81*106)|0)|0);
                  $84 = ((($83)) + 86|0);
                  dest=$84; stop=dest+20|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
                  $85 = $i;
                  $86 = (($85) + 1)|0;
                  $i = $86;
                 }
                }
               } while(0);
               $87 = $sa;
               $88 = ((($87)) + 38|0);
               HEAP16[$88>>1] = 0;
               $89 = $sa;
               $90 = ((($89)) + 26|0);
               HEAP16[$90>>1] = 0;
               $91 = ((($4)) + 10552|0);
               $92 = HEAP32[$91>>2]|0;
               $93 = $92&65535;
               $94 = $sa;
               $95 = ((($94)) + 24|0);
               HEAP16[$95>>1] = $93;
               $96 = $sa;
               $97 = ((($96)) + 30|0);
               HEAP16[$97>>1] = 0;
               $98 = ((($4)) + 15760|0);
               $99 = HEAP32[$98>>2]|0;
               $100 = $99&65535;
               $101 = $sa;
               $102 = ((($101)) + 28|0);
               HEAP16[$102>>1] = $100;
               L29: while(1) {
                __THREW__ = 0;
                $103 = (invoke_ii(157,($fp|0))|0);
                $104 = __THREW__; __THREW__ = 0;
                $105 = $104&1;
                if ($105) {
                 break L1;
                }
                __THREW__ = 0;
                $106 = (invoke_ii(158,($103|0))|0);
                $107 = __THREW__; __THREW__ = 0;
                $108 = $107&1;
                if ($108) {
                 break L1;
                }
                $109 = $106&65535;
                $type = $109;
                $110 = $type;
                L33: do {
                 switch ($110|0) {
                 case 1:  {
                  while(1) {
                   __THREW__ = 0;
                   $111 = (invoke_ii(157,($fp|0))|0);
                   $112 = __THREW__; __THREW__ = 0;
                   $113 = $112&1;
                   if ($113) {
                    break L1;
                   }
                   __THREW__ = 0;
                   $114 = (invoke_ii(158,($111|0))|0);
                   $115 = __THREW__; __THREW__ = 0;
                   $116 = $115&1;
                   if ($116) {
                    break L1;
                   }
                   $117 = $114&65535;
                   $len = $117;
                   $118 = $len;
                   $119 = ($118|0)==(0);
                   if ($119) {
                    break L33;
                   }
                   $120 = ((($4)) + 15760|0);
                   $121 = HEAP32[$120>>2]|0;
                   $122 = ($121|0)<(80);
                   __THREW__ = 0;
                   if (!($122)) {
                    label = 33;
                    break L29;
                   }
                   $124 = (__ZN10FileHolderptEv($fp)|0);
                   $125 = __THREW__; __THREW__ = 0;
                   $126 = $125&1;
                   if ($126) {
                    break L1;
                   }
                   $127 = ((($4)) + 15760|0);
                   $128 = HEAP32[$127>>2]|0;
                   $129 = ((($4)) + 12560|0);
                   $130 = (($129) + (($128*40)|0)|0);
                   $131 = $len;
                   __THREW__ = 0;
                   (invoke_iiii(163,($124|0),($130|0),($131|0))|0);
                   $132 = __THREW__; __THREW__ = 0;
                   $133 = $132&1;
                   if ($133) {
                    break L1;
                   }
                   $134 = ((($4)) + 15760|0);
                   $135 = HEAP32[$134>>2]|0;
                   $136 = (($135) + 1)|0;
                   HEAP32[$134>>2] = $136;
                   $137 = $sa;
                   $138 = ((($137)) + 30|0);
                   $139 = HEAP16[$138>>1]|0;
                   $140 = (($139) + 1)<<16>>16;
                   HEAP16[$138>>1] = $140;
                  }
                  break;
                 }
                 case 2:  {
                  while(1) {
                   __THREW__ = 0;
                   $141 = (invoke_ii(157,($fp|0))|0);
                   $142 = __THREW__; __THREW__ = 0;
                   $143 = $142&1;
                   if ($143) {
                    break L1;
                   }
                   __THREW__ = 0;
                   $144 = (invoke_ii(158,($141|0))|0);
                   $145 = __THREW__; __THREW__ = 0;
                   $146 = $145&1;
                   if ($146) {
                    break L1;
                   }
                   $147 = $144&65535;
                   $index = $147;
                   $148 = $index;
                   $149 = ($148|0)==(0);
                   if ($149) {
                    break L33;
                   }
                   $150 = $index;
                   $151 = (($150) + -1)|0;
                   $index = $151;
                   $152 = $index;
                   $153 = $index;
                   $154 = ((($4)) + 18964|0);
                   $155 = (($154) + ($153<<2)|0);
                   $156 = HEAP32[$155>>2]|0;
                   __THREW__ = 0;
                   $157 = (invoke_iiii(212,($4|0),($152|0),($156|0))|0);
                   $158 = __THREW__; __THREW__ = 0;
                   $159 = $158&1;
                   if ($159) {
                    break L1;
                   }
                   $box = $157;
                   __THREW__ = 0;
                   $160 = (invoke_ii(157,($fp|0))|0);
                   $161 = __THREW__; __THREW__ = 0;
                   $162 = $161&1;
                   if ($162) {
                    break L1;
                   }
                   __THREW__ = 0;
                   $163 = (invoke_ii(213,($160|0))|0);
                   $164 = __THREW__; __THREW__ = 0;
                   $165 = $164&1;
                   if ($165) {
                    break L1;
                   }
                   $166 = $box;
                   $167 = ((($166)) + 8|0);
                   HEAP8[$167>>0] = $163;
                   __THREW__ = 0;
                   $168 = (invoke_ii(157,($fp|0))|0);
                   $169 = __THREW__; __THREW__ = 0;
                   $170 = $169&1;
                   if ($170) {
                    break L1;
                   }
                   __THREW__ = 0;
                   $171 = (invoke_ii(158,($168|0))|0);
                   $172 = __THREW__; __THREW__ = 0;
                   $173 = $172&1;
                   if ($173) {
                    break L1;
                   }
                   $174 = $box;
                   HEAP16[$174>>1] = $171;
                   __THREW__ = 0;
                   $175 = (invoke_ii(157,($fp|0))|0);
                   $176 = __THREW__; __THREW__ = 0;
                   $177 = $176&1;
                   if ($177) {
                    break L1;
                   }
                   __THREW__ = 0;
                   $178 = (invoke_ii(158,($175|0))|0);
                   $179 = __THREW__; __THREW__ = 0;
                   $180 = $179&1;
                   if ($180) {
                    break L1;
                   }
                   $181 = $box;
                   $182 = ((($181)) + 4|0);
                   HEAP16[$182>>1] = $178;
                   __THREW__ = 0;
                   $183 = (invoke_ii(157,($fp|0))|0);
                   $184 = __THREW__; __THREW__ = 0;
                   $185 = $184&1;
                   if ($185) {
                    break L1;
                   }
                   __THREW__ = 0;
                   $186 = (invoke_ii(158,($183|0))|0);
                   $187 = __THREW__; __THREW__ = 0;
                   $188 = $187&1;
                   if ($188) {
                    break L1;
                   }
                   $189 = $box;
                   $190 = ((($189)) + 2|0);
                   HEAP16[$190>>1] = $186;
                   __THREW__ = 0;
                   $191 = (invoke_ii(157,($fp|0))|0);
                   $192 = __THREW__; __THREW__ = 0;
                   $193 = $192&1;
                   if ($193) {
                    break L1;
                   }
                   __THREW__ = 0;
                   $194 = (invoke_ii(158,($191|0))|0);
                   $195 = __THREW__; __THREW__ = 0;
                   $196 = $195&1;
                   if ($196) {
                    break L1;
                   }
                   $197 = $box;
                   $198 = ((($197)) + 6|0);
                   HEAP16[$198>>1] = $194;
                   $199 = $index;
                   $200 = ((($4)) + 18964|0);
                   $201 = (($200) + ($199<<2)|0);
                   $202 = HEAP32[$201>>2]|0;
                   $203 = (($202) + 1)|0;
                   HEAP32[$201>>2] = $203;
                  }
                  break;
                 }
                 case 3:  {
                  $204 = ((($4)) + 10552|0);
                  $205 = HEAP32[$204>>2]|0;
                  $206 = ($205|0)<(50);
                  if (!($206)) {
                   label = 53;
                   break L29;
                  }
                  $208 = ((($4)) + 10552|0);
                  $209 = HEAP32[$208>>2]|0;
                  $210 = ((($4)) + 5252|0);
                  $211 = (($210) + (($209*106)|0)|0);
                  $so = $211;
                  __THREW__ = 0;
                  $212 = (invoke_ii(157,($fp|0))|0);
                  $213 = __THREW__; __THREW__ = 0;
                  $214 = $213&1;
                  if ($214) {
                   break L1;
                  }
                  __THREW__ = 0;
                  $215 = (invoke_ii(158,($212|0))|0);
                  $216 = __THREW__; __THREW__ = 0;
                  $217 = $216&1;
                  if ($217) {
                   break L1;
                  }
                  $218 = $215&65535;
                  $len = $218;
                  __THREW__ = 0;
                  $219 = (invoke_ii(157,($fp|0))|0);
                  $220 = __THREW__; __THREW__ = 0;
                  $221 = $220&1;
                  if ($221) {
                   break L1;
                  }
                  $222 = $so;
                  $223 = ((($222)) + 46|0);
                  $224 = $len;
                  __THREW__ = 0;
                  (invoke_iiii(163,($219|0),($223|0),($224|0))|0);
                  $225 = __THREW__; __THREW__ = 0;
                  $226 = $225&1;
                  if ($226) {
                   break L1;
                  }
                  $i1 = 0;
                  while(1) {
                   $227 = $i1;
                   $228 = ((($4)) + 10552|0);
                   $229 = HEAP32[$228>>2]|0;
                   $230 = ($227|0)<($229|0);
                   if (!($230)) {
                    break;
                   }
                   $231 = $i1;
                   $232 = ((($4)) + 5252|0);
                   $233 = (($232) + (($231*106)|0)|0);
                   $234 = ((($233)) + 46|0);
                   $235 = $so;
                   $236 = ((($235)) + 46|0);
                   __THREW__ = 0;
                   $237 = (invoke_iii(214,($234|0),($236|0))|0);
                   $238 = __THREW__; __THREW__ = 0;
                   $239 = $238&1;
                   if ($239) {
                    break L1;
                   }
                   $240 = ($237|0)==(0);
                   if ($240) {
                    $241 = $so;
                    $242 = ((($241)) + 46|0);
                    __THREW__ = 0;
                    HEAP32[$vararg_buffer8>>2] = $242;
                    invoke_vii(159,(29374|0),($vararg_buffer8|0));
                    $243 = __THREW__; __THREW__ = 0;
                    $244 = $243&1;
                    if ($244) {
                     break L1;
                    }
                   }
                   $245 = $i1;
                   $246 = (($245) + 1)|0;
                   $i1 = $246;
                  }
                  $247 = $so;
                  $248 = ((($247)) + 36|0);
                  HEAP16[$248>>1] = 0;
                  $249 = $so;
                  $250 = ((($249)) + 28|0);
                  HEAP16[$250>>1] = 0;
                  $251 = $so;
                  $252 = ((($251)) + 22|0);
                  HEAP16[$252>>1] = 0;
                  $253 = $so;
                  $254 = ((($253)) + 12|0);
                  HEAP16[$254>>1] = 0;
                  $255 = $so;
                  $256 = ((($255)) + 2|0);
                  HEAP16[$256>>1] = 0;
                  $257 = $so;
                  HEAP16[$257>>1] = 0;
                  $258 = $so;
                  $259 = ((($258)) + 38|0);
                  HEAP16[$259>>1] = 0;
                  $260 = $so;
                  $261 = ((($260)) + 42|0);
                  HEAP16[$261>>1] = 0;
                  $262 = $so;
                  $263 = ((($262)) + 44|0);
                  HEAP16[$263>>1] = 0;
                  $264 = ((($4)) + 81412|0);
                  $265 = HEAP32[$264>>2]|0;
                  $266 = $265&65535;
                  $267 = $so;
                  $268 = ((($267)) + 30|0);
                  HEAP16[$268>>1] = $266;
                  L72: while(1) {
                   __THREW__ = 0;
                   $269 = (invoke_ii(157,($fp|0))|0);
                   $270 = __THREW__; __THREW__ = 0;
                   $271 = $270&1;
                   if ($271) {
                    break L1;
                   }
                   __THREW__ = 0;
                   $272 = (invoke_ii(158,($269|0))|0);
                   $273 = __THREW__; __THREW__ = 0;
                   $274 = $273&1;
                   if ($274) {
                    break L1;
                   }
                   $275 = $272&65535;
                   $initType = $275;
                   $276 = $initType;
                   $277 = ($276|0)==(0);
                   if ($277) {
                    break;
                   }
                   $278 = $initType;
                   switch ($278|0) {
                   case 2000:  {
                    __THREW__ = 0;
                    $279 = (invoke_ii(157,($fp|0))|0);
                    $280 = __THREW__; __THREW__ = 0;
                    $281 = $280&1;
                    if ($281) {
                     break L1;
                    }
                    __THREW__ = 0;
                    $282 = (invoke_ii(158,($279|0))|0);
                    $283 = __THREW__; __THREW__ = 0;
                    $284 = $283&1;
                    if ($284) {
                     break L1;
                    }
                    $285 = $282&65535;
                    $len = $285;
                    __THREW__ = 0;
                    $286 = (invoke_ii(157,($fp|0))|0);
                    $287 = __THREW__; __THREW__ = 0;
                    $288 = $287&1;
                    if ($288) {
                     break L1;
                    }
                    $289 = $so;
                    $290 = ((($289)) + 66|0);
                    $291 = $len;
                    __THREW__ = 0;
                    (invoke_iiii(163,($286|0),($290|0),($291|0))|0);
                    $292 = __THREW__; __THREW__ = 0;
                    $293 = $292&1;
                    if ($293) {
                     break L1;
                    } else {
                     continue L72;
                    }
                    break;
                   }
                   case 3000:  {
                    __THREW__ = 0;
                    $294 = (invoke_ii(157,($fp|0))|0);
                    $295 = __THREW__; __THREW__ = 0;
                    $296 = $295&1;
                    if ($296) {
                     break L1;
                    }
                    __THREW__ = 0;
                    $297 = (invoke_ii(158,($294|0))|0);
                    $298 = __THREW__; __THREW__ = 0;
                    $299 = $298&1;
                    if ($299) {
                     break L1;
                    }
                    $300 = $so;
                    $301 = ((($300)) + 38|0);
                    HEAP16[$301>>1] = $297;
                    $302 = $so;
                    $303 = ((($302)) + 38|0);
                    $304 = HEAP16[$303>>1]|0;
                    $305 = $304 << 16 >> 16;
                    $306 = ($305|0)==(2);
                    if (!($306)) {
                     continue L72;
                    }
                    __THREW__ = 0;
                    $307 = (invoke_ii(157,($fp|0))|0);
                    $308 = __THREW__; __THREW__ = 0;
                    $309 = $308&1;
                    if ($309) {
                     break L1;
                    }
                    __THREW__ = 0;
                    $310 = (invoke_ii(158,($307|0))|0);
                    $311 = __THREW__; __THREW__ = 0;
                    $312 = $311&1;
                    if ($312) {
                     break L1;
                    }
                    $313 = $so;
                    $314 = ((($313)) + 40|0);
                    HEAP16[$314>>1] = $310;
                    continue L72;
                    break;
                   }
                   case 3500:  {
                    __THREW__ = 0;
                    $315 = (invoke_ii(157,($fp|0))|0);
                    $316 = __THREW__; __THREW__ = 0;
                    $317 = $316&1;
                    if ($317) {
                     break L1;
                    }
                    __THREW__ = 0;
                    $318 = (invoke_ii(158,($315|0))|0);
                    $319 = __THREW__; __THREW__ = 0;
                    $320 = $319&1;
                    if ($320) {
                     break L1;
                    }
                    $321 = $so;
                    HEAP16[$321>>1] = $318;
                    __THREW__ = 0;
                    $322 = (invoke_ii(157,($fp|0))|0);
                    $323 = __THREW__; __THREW__ = 0;
                    $324 = $323&1;
                    if ($324) {
                     break L1;
                    }
                    __THREW__ = 0;
                    $325 = (invoke_ii(158,($322|0))|0);
                    $326 = __THREW__; __THREW__ = 0;
                    $327 = $326&1;
                    if ($327) {
                     break L1;
                    }
                    $328 = $so;
                    $329 = ((($328)) + 2|0);
                    HEAP16[$329>>1] = $325;
                    continue L72;
                    break;
                   }
                   case 4000:  {
                    __THREW__ = 0;
                    $330 = (invoke_ii(157,($fp|0))|0);
                    $331 = __THREW__; __THREW__ = 0;
                    $332 = $331&1;
                    if ($332) {
                     break L1;
                    }
                    __THREW__ = 0;
                    $333 = (invoke_ii(158,($330|0))|0);
                    $334 = __THREW__; __THREW__ = 0;
                    $335 = $334&1;
                    if ($335) {
                     break L1;
                    }
                    $336 = $so;
                    $337 = ((($336)) + 12|0);
                    HEAP16[$337>>1] = $333;
                    continue L72;
                    break;
                   }
                   case 4500:  {
                    __THREW__ = 0;
                    $338 = (invoke_ii(157,($fp|0))|0);
                    $339 = __THREW__; __THREW__ = 0;
                    $340 = $339&1;
                    if ($340) {
                     break L1;
                    }
                    __THREW__ = 0;
                    $341 = (invoke_ii(158,($338|0))|0);
                    $342 = __THREW__; __THREW__ = 0;
                    $343 = $342&1;
                    if ($343) {
                     break L1;
                    }
                    $344 = $so;
                    $345 = ((($344)) + 22|0);
                    HEAP16[$345>>1] = $341;
                    continue L72;
                    break;
                   }
                   case 5000:  {
                    __THREW__ = 0;
                    $346 = (invoke_ii(157,($fp|0))|0);
                    $347 = __THREW__; __THREW__ = 0;
                    $348 = $347&1;
                    if ($348) {
                     break L1;
                    }
                    __THREW__ = 0;
                    $349 = (invoke_ii(158,($346|0))|0);
                    $350 = __THREW__; __THREW__ = 0;
                    $351 = $350&1;
                    if ($351) {
                     break L1;
                    }
                    $352 = $so;
                    $353 = ((($352)) + 36|0);
                    HEAP16[$353>>1] = $349;
                    $354 = $so;
                    $355 = ((($354)) + 36|0);
                    $356 = HEAP16[$355>>1]|0;
                    $357 = (($356) + -1)<<16>>16;
                    HEAP16[$355>>1] = $357;
                    continue L72;
                    break;
                   }
                   case 5500:  {
                    __THREW__ = 0;
                    $358 = (invoke_ii(157,($fp|0))|0);
                    $359 = __THREW__; __THREW__ = 0;
                    $360 = $359&1;
                    if ($360) {
                     break L1;
                    }
                    __THREW__ = 0;
                    $361 = (invoke_ii(158,($358|0))|0);
                    $362 = __THREW__; __THREW__ = 0;
                    $363 = $362&1;
                    if ($363) {
                     break L1;
                    }
                    $364 = $so;
                    $365 = ((($364)) + 28|0);
                    HEAP16[$365>>1] = $361;
                    $366 = $so;
                    $367 = ((($366)) + 28|0);
                    $368 = HEAP16[$367>>1]|0;
                    $369 = (($368) + -1)<<16>>16;
                    HEAP16[$367>>1] = $369;
                    continue L72;
                    break;
                   }
                   case 6000:  {
                    __THREW__ = 0;
                    $370 = (invoke_ii(157,($fp|0))|0);
                    $371 = __THREW__; __THREW__ = 0;
                    $372 = $371&1;
                    if ($372) {
                     break L1;
                    }
                    __THREW__ = 0;
                    $373 = (invoke_ii(158,($370|0))|0);
                    $374 = __THREW__; __THREW__ = 0;
                    $375 = $374&1;
                    if ($375) {
                     break L1;
                    }
                    $376 = $373&65535;
                    $var = $376;
                    $377 = $var;
                    $378 = ($377|0)>=(0);
                    $379 = $var;
                    $380 = ($379|0)<(10);
                    $or$cond = $378 & $380;
                    __THREW__ = 0;
                    if (!($or$cond)) {
                     label = 99;
                     break L29;
                    }
                    $382 = (__ZN10FileHolderptEv($fp)|0);
                    $383 = __THREW__; __THREW__ = 0;
                    $384 = $383&1;
                    if ($384) {
                     break L1;
                    }
                    __THREW__ = 0;
                    $385 = (invoke_ii(158,($382|0))|0);
                    $386 = __THREW__; __THREW__ = 0;
                    $387 = $386&1;
                    if ($387) {
                     break L1;
                    }
                    $388 = $var;
                    $389 = $so;
                    $390 = ((($389)) + 86|0);
                    $391 = (($390) + ($388<<1)|0);
                    HEAP16[$391>>1] = $385;
                    continue L72;
                    break;
                   }
                   default: {
                    label = 103;
                    break L29;
                   }
                   }
                  }
                  $393 = ((($4)) + 10552|0);
                  $394 = HEAP32[$393>>2]|0;
                  $395 = (($394) + 1)|0;
                  HEAP32[$393>>2] = $395;
                  $396 = $sa;
                  $397 = ((($396)) + 26|0);
                  $398 = HEAP16[$397>>1]|0;
                  $399 = (($398) + 1)<<16>>16;
                  HEAP16[$397>>1] = $399;
                  break;
                 }
                 case 4:  {
                  __THREW__ = 0;
                  $400 = (invoke_ii(157,($fp|0))|0);
                  $401 = __THREW__; __THREW__ = 0;
                  $402 = $401&1;
                  if ($402) {
                   break L1;
                  }
                  __THREW__ = 0;
                  $403 = (invoke_ii(158,($400|0))|0);
                  $404 = __THREW__; __THREW__ = 0;
                  $405 = $404&1;
                  if ($405) {
                   break L1;
                  }
                  $406 = $sa;
                  $407 = ((($406)) + 36|0);
                  HEAP16[$407>>1] = $403;
                  $408 = $sa;
                  $409 = ((($408)) + 36|0);
                  $410 = HEAP16[$409>>1]|0;
                  $411 = $410&65535;
                  $412 = ($411|0)!=(0);
                  if (!($412)) {
                   break L33;
                  }
                  $413 = $sa;
                  $414 = ((($413)) + 36|0);
                  $415 = HEAP16[$414>>1]|0;
                  $416 = $415&65535;
                  __THREW__ = 0;
                  $417 = (invoke_ii(162,($416|0))|0);
                  $418 = __THREW__; __THREW__ = 0;
                  $419 = $418&1;
                  if ($419) {
                   break L1;
                  }
                  $420 = $sa;
                  $421 = ((($420)) + 32|0);
                  HEAP32[$421>>2] = $417;
                  __THREW__ = 0;
                  $422 = (invoke_ii(157,($fp|0))|0);
                  $423 = __THREW__; __THREW__ = 0;
                  $424 = $423&1;
                  if ($424) {
                   break L1;
                  }
                  $425 = $sa;
                  $426 = ((($425)) + 32|0);
                  $427 = HEAP32[$426>>2]|0;
                  $428 = $sa;
                  $429 = ((($428)) + 36|0);
                  $430 = HEAP16[$429>>1]|0;
                  $431 = $430&65535;
                  __THREW__ = 0;
                  (invoke_iiii(163,($422|0),($427|0),($431|0))|0);
                  $432 = __THREW__; __THREW__ = 0;
                  $433 = $432&1;
                  if ($433) {
                   break L1;
                  }
                  break;
                 }
                 case 5:  {
                  __THREW__ = 0;
                  $434 = (invoke_ii(157,($fp|0))|0);
                  $435 = __THREW__; __THREW__ = 0;
                  $436 = $435&1;
                  if ($436) {
                   break L1;
                  }
                  __THREW__ = 0;
                  $437 = (invoke_ii(158,($434|0))|0);
                  $438 = __THREW__; __THREW__ = 0;
                  $439 = $438&1;
                  if ($439) {
                   break L1;
                  }
                  $440 = $sa;
                  $441 = ((($440)) + 38|0);
                  HEAP16[$441>>1] = $437;
                  break;
                 }
                 default: {
                  label = 114;
                  break L29;
                 }
                 }
                } while(0);
                $443 = $type;
                $444 = ($443|0)==(4);
                if ($444) {
                 label = 116;
                 break;
                }
               }
               if ((label|0) == 33) {
                ___assert_fail((29296|0),(29088|0),297,(29276|0));
                $123 = __THREW__; __THREW__ = 0;
                break;
               }
               else if ((label|0) == 53) {
                __THREW__ = 0;
                invoke_viiii(161,(29335|0),(29088|0),320,(29276|0));
                $207 = __THREW__; __THREW__ = 0;
                break;
               }
               else if ((label|0) == 99) {
                ___assert_fail((29399|0),(29088|0),375,(29276|0));
                $381 = __THREW__; __THREW__ = 0;
                break;
               }
               else if ((label|0) == 103) {
                __THREW__ = 0;
                invoke_viiii(161,(29420|0),(29088|0),380,(29276|0));
                $392 = __THREW__; __THREW__ = 0;
                break;
               }
               else if ((label|0) == 114) {
                __THREW__ = 0;
                invoke_viiii(161,(29420|0),(29088|0),402,(29276|0));
                $442 = __THREW__; __THREW__ = 0;
                break;
               }
               else if ((label|0) == 116) {
                $445 = $1;
                __THREW__ = 0;
                (invoke_iii(211,($filePath|0),($445|0))|0);
                $446 = __THREW__; __THREW__ = 0;
                $447 = $446&1;
                if ($447) {
                 break;
                }
                __THREW__ = 0;
                $448 = (invoke_iii(215,($filePath|0),92)|0);
                $449 = __THREW__; __THREW__ = 0;
                $450 = $449&1;
                if ($450) {
                 break;
                }
                $p = $448;
                $451 = $p;
                $452 = ($451|0)!=(0|0);
                if ($452) {
                 $453 = $p;
                 $454 = ((($453)) + 1|0);
                 __THREW__ = 0;
                 (invoke_iii(211,($454|0),($sprName|0))|0);
                 $455 = __THREW__; __THREW__ = 0;
                 $456 = $455&1;
                 if ($456) {
                  break;
                 }
                } else {
                 __THREW__ = 0;
                 (invoke_iii(211,($filePath|0),($sprName|0))|0);
                 $457 = __THREW__; __THREW__ = 0;
                 $458 = $457&1;
                 if ($458) {
                  break;
                 }
                }
                $459 = $sa;
                __THREW__ = 0;
                invoke_viii(216,($4|0),($filePath|0),($459|0));
                $460 = __THREW__; __THREW__ = 0;
                $461 = $460&1;
                if ($461) {
                 break;
                }
                $462 = $sa;
                $463 = $1;
                __THREW__ = 0;
                (invoke_iii(211,($462|0),($463|0))|0);
                $464 = __THREW__; __THREW__ = 0;
                $465 = $464&1;
                if ($465) {
                 break;
                }
                $466 = $sa;
                __THREW__ = 0;
                invoke_vi(217,($466|0));
                $467 = __THREW__; __THREW__ = 0;
                $468 = $467&1;
                if ($468) {
                 break;
                }
                $469 = ((($4)) + 12556|0);
                $470 = HEAP32[$469>>2]|0;
                $471 = (($470) + 1)|0;
                HEAP32[$469>>2] = $471;
                $472 = ((($4)) + 4448|0);
                HEAP32[$472>>2] = 2;
                __ZN10FileHolderD2Ev($fp);
                STACKTOP = sp;return;
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $20 = ___cxa_find_matching_catch()|0;
 $21 = tempRet0;
 $2 = $20;
 $3 = $21;
 __THREW__ = 0;
 invoke_vi(160,($fp|0));
 $22 = __THREW__; __THREW__ = 0;
 $23 = $22&1;
 if ($23) {
  $475 = ___cxa_find_matching_catch(0|0)|0;
  $476 = tempRet0;
  ___clang_call_terminate($475);
  // unreachable;
 } else {
  $473 = $2;
  $474 = $3;
  ___resumeException($473|0);
  // unreachable;
 }
}
function __ZL13getBitmapSizePKh($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $sz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 $2 = (__ZL14getBitmapWidthPKh310($1)|0);
 $3 = $0;
 $4 = (__ZL15getBitmapHeightPKh311($3)|0);
 $5 = Math_imul($2, $4)|0;
 $6 = (4 + ($5))|0;
 $sz = $6;
 $7 = $sz;
 STACKTOP = sp;return ($7|0);
}
function __ZL14getBitmapWidthPKh310($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 $2 = (__Z14READ_LE_UINT16PKv($1)|0);
 $3 = $2&65535;
 $4 = (($3) + 1)|0;
 STACKTOP = sp;return ($4|0);
}
function __ZL15getBitmapHeightPKh311($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 $2 = ((($1)) + 2|0);
 $3 = (__Z14READ_LE_UINT16PKv($2)|0);
 $4 = $3&65535;
 $5 = (($4) + 1)|0;
 STACKTOP = sp;return ($5|0);
}
function __ZN4Game9saveStateEi($this,$slot) {
 $this = $this|0;
 $slot = $slot|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $f = 0, $filePath = 0, $i = 0, $i1 = 0, $i2 = 0, $i3 = 0, $i4 = 0, $i5 = 0, $j = 0, $vararg_buffer = 0, $vararg_buffer2 = 0;
 var $vararg_buffer5 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $f = sp + 64|0;
 $filePath = sp + 80|0;
 $0 = $this;
 $1 = $slot;
 $5 = $0;
 __ZN4FileC2Ev($f);
 $6 = ((($5)) + 36|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $1;
 __THREW__ = 0;
 HEAP32[$vararg_buffer>>2] = $7;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $8;
 (invoke_iiiii(218,($filePath|0),512,(29731|0),($vararg_buffer|0))|0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 L1: do {
  if (!($10)) {
   __THREW__ = 0;
   $11 = (invoke_iiii(179,($f|0),($filePath|0),(29422|0))|0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if (!($13)) {
    if (!($11)) {
     __THREW__ = 0;
     HEAP32[$vararg_buffer2>>2] = $filePath;
     invoke_vii(219,(29425|0),($vararg_buffer2|0));
     $14 = __THREW__; __THREW__ = 0;
     $15 = $14&1;
     if ($15) {
      break;
     }
     $4 = 1;
     __ZN4FileD2Ev($f);
     STACKTOP = sp;return;
    }
    HEAP32[708>>2] = $f;
    HEAP32[712>>2] = 0;
    __THREW__ = 0;
    invoke_vi(220,310);
    $20 = __THREW__; __THREW__ = 0;
    $21 = $20&1;
    if (!($21)) {
     $i = 0;
     while(1) {
      $22 = $i;
      $23 = ($22|0)<(310);
      if (!($23)) {
       break;
      }
      $24 = $i;
      $25 = ((($5)) + 3184|0);
      $26 = (($25) + ($24<<1)|0);
      $27 = HEAP16[$26>>1]|0;
      $28 = $27 << 16 >> 16;
      __THREW__ = 0;
      invoke_vi(220,($28|0));
      $29 = __THREW__; __THREW__ = 0;
      $30 = $29&1;
      if ($30) {
       break L1;
      }
      $31 = $i;
      $32 = (($31) + 1)|0;
      $i = $32;
     }
     $33 = ((($5)) + 4916|0);
     __THREW__ = 0;
     $34 = (invoke_iii(221,($33|0),92)|0);
     $35 = __THREW__; __THREW__ = 0;
     $36 = $35&1;
     if (!($36)) {
      $37 = ($34|0)==(0|0);
      if (!($37)) {
       __THREW__ = 0;
       invoke_viiii(161,(29464|0),(29500|0),206,(29513|0));
       $38 = __THREW__; __THREW__ = 0;
       break;
      }
      $39 = ((($5)) + 4916|0);
      __THREW__ = 0;
      invoke_vii(222,($39|0),-2);
      $40 = __THREW__; __THREW__ = 0;
      $41 = $40&1;
      if (!($41)) {
       $42 = ((($5)) + 10552|0);
       $43 = HEAP32[$42>>2]|0;
       __THREW__ = 0;
       invoke_vi(220,($43|0));
       $44 = __THREW__; __THREW__ = 0;
       $45 = $44&1;
       if (!($45)) {
        $i1 = 0;
        while(1) {
         $46 = $i1;
         $47 = ((($5)) + 10552|0);
         $48 = HEAP32[$47>>2]|0;
         $49 = ($46|0)<($48|0);
         if (!($49)) {
          break;
         }
         $50 = $i1;
         $51 = ((($5)) + 5252|0);
         $52 = (($51) + (($50*106)|0)|0);
         __THREW__ = 0;
         invoke_vi(223,($52|0));
         $53 = __THREW__; __THREW__ = 0;
         $54 = $53&1;
         if ($54) {
          break L1;
         }
         $55 = $i1;
         $56 = (($55) + 1)|0;
         $i1 = $56;
        }
        __THREW__ = 0;
        invoke_vi(220,20);
        $57 = __THREW__; __THREW__ = 0;
        $58 = $57&1;
        if (!($58)) {
         $i2 = 0;
         while(1) {
          $59 = $i2;
          $60 = ($59|0)<(20);
          if (!($60)) {
           break;
          }
          $61 = $i2;
          $62 = ((($5)) + 18964|0);
          $63 = (($62) + ($61<<2)|0);
          $64 = HEAP32[$63>>2]|0;
          __THREW__ = 0;
          invoke_vi(220,($64|0));
          $65 = __THREW__; __THREW__ = 0;
          $66 = $65&1;
          if ($66) {
           break L1;
          }
          $67 = $i2;
          $68 = (($67) + 1)|0;
          $i2 = $68;
         }
         __THREW__ = 0;
         invoke_vi(220,200);
         $69 = __THREW__; __THREW__ = 0;
         $70 = $69&1;
         if (!($70)) {
          $i3 = 0;
          while(1) {
           $71 = $i3;
           $72 = ($71|0)<(20);
           if (!($72)) {
            break;
           }
           $j = 0;
           while(1) {
            $73 = $j;
            $74 = ($73|0)<(10);
            if (!($74)) {
             break;
            }
            $75 = $j;
            $76 = $i3;
            $77 = ((($5)) + 15764|0);
            $78 = (($77) + (($76*160)|0)|0);
            $79 = (($78) + ($75<<4)|0);
            __THREW__ = 0;
            invoke_vi(224,($79|0));
            $80 = __THREW__; __THREW__ = 0;
            $81 = $80&1;
            if ($81) {
             break L1;
            }
            $82 = $j;
            $83 = (($82) + 1)|0;
            $j = $83;
           }
           $84 = $i3;
           $85 = (($84) + 1)|0;
           $i3 = $85;
          }
          __THREW__ = 0;
          invoke_vi(220,310);
          $86 = __THREW__; __THREW__ = 0;
          $87 = $86&1;
          if (!($87)) {
           $i4 = 0;
           while(1) {
            $88 = $i4;
            $89 = ($88|0)<(310);
            if (!($89)) {
             break;
            }
            $90 = $i4;
            $91 = ((($5)) + 3804|0);
            $92 = (($91) + ($90<<1)|0);
            $93 = HEAP16[$92>>1]|0;
            $94 = $93 << 16 >> 16;
            __THREW__ = 0;
            invoke_vi(220,($94|0));
            $95 = __THREW__; __THREW__ = 0;
            $96 = $95&1;
            if ($96) {
             break L1;
            }
            $97 = $i4;
            $98 = (($97) + 1)|0;
            $i4 = $98;
           }
           __THREW__ = 0;
           invoke_vi(220,200);
           $99 = __THREW__; __THREW__ = 0;
           $100 = $99&1;
           if (!($100)) {
            $i5 = 0;
            while(1) {
             $101 = $i5;
             $102 = ($101|0)<(200);
             if (!($102)) {
              break;
             }
             $103 = $i5;
             $104 = ((($5)) + 81860|0);
             $105 = (($104) + (($103*12)|0)|0);
             __THREW__ = 0;
             invoke_vi(225,($105|0));
             $106 = __THREW__; __THREW__ = 0;
             $107 = $106&1;
             if ($107) {
              break L1;
             }
             $108 = $i5;
             $109 = (($108) + 1)|0;
             $i5 = $109;
            }
            $110 = ((($5)) + 5044|0);
            $111 = HEAP32[$110>>2]|0;
            __THREW__ = 0;
            invoke_vi(220,($111|0));
            $112 = __THREW__; __THREW__ = 0;
            $113 = $112&1;
            if (!($113)) {
             $114 = ((($5)) + 5048|0);
             $115 = HEAP32[$114>>2]|0;
             __THREW__ = 0;
             invoke_vi(220,($115|0));
             $116 = __THREW__; __THREW__ = 0;
             $117 = $116&1;
             if (!($117)) {
              $118 = ((($5)) + 4460|0);
              $119 = HEAP32[$118>>2]|0;
              __THREW__ = 0;
              invoke_vi(220,($119|0));
              $120 = __THREW__; __THREW__ = 0;
              $121 = $120&1;
              if (!($121)) {
               $122 = ((($5)) + 79048|0);
               $123 = ((($5)) + 79608|0);
               $124 = HEAP32[$123>>2]|0;
               __THREW__ = 0;
               invoke_vii(226,($122|0),($124|0));
               $125 = __THREW__; __THREW__ = 0;
               $126 = $125&1;
               if (!($126)) {
                $127 = ((($5)) + 4452|0);
                $128 = HEAP32[$127>>2]|0;
                __THREW__ = 0;
                invoke_vi(220,($128|0));
                $129 = __THREW__; __THREW__ = 0;
                $130 = $129&1;
                if (!($130)) {
                 $131 = ((($5)) + 4612|0);
                 $132 = HEAP32[$131>>2]|0;
                 __THREW__ = 0;
                 invoke_vi(227,($132|0));
                 $133 = __THREW__; __THREW__ = 0;
                 $134 = $133&1;
                 if (!($134)) {
                  $135 = ((($5)) + 4612|0);
                  $136 = HEAP32[$135>>2]|0;
                  __THREW__ = 0;
                  invoke_vi(227,($136|0));
                  $137 = __THREW__; __THREW__ = 0;
                  $138 = $137&1;
                  if (!($138)) {
                   $139 = ((($5)) + 4616|0);
                   __THREW__ = 0;
                   invoke_vii(222,($139|0),-1);
                   $140 = __THREW__; __THREW__ = 0;
                   $141 = $140&1;
                   if ($141) {
                    break;
                   }
                   $142 = $1;
                   __THREW__ = 0;
                   HEAP32[$vararg_buffer5>>2] = $142;
                   invoke_viii(209,1,(29523|0),($vararg_buffer5|0));
                   $143 = __THREW__; __THREW__ = 0;
                   $144 = $143&1;
                   if ($144) {
                    break;
                   }
                   $4 = 0;
                   __ZN4FileD2Ev($f);
                   STACKTOP = sp;return;
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $16 = ___cxa_find_matching_catch()|0;
 $17 = tempRet0;
 $2 = $16;
 $3 = $17;
 __THREW__ = 0;
 invoke_vi(177,($f|0));
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $147 = ___cxa_find_matching_catch(0|0)|0;
  $148 = tempRet0;
  ___clang_call_terminate($147);
  // unreachable;
 } else {
  $145 = $2;
  $146 = $3;
  ___resumeException($145|0);
  // unreachable;
 }
}
function __ZN4Game9loadStateEib($this,$slot,$switchScene) {
 $this = $this|0;
 $slot = $slot|0;
 $switchScene = $switchScene|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $f = 0, $filePath = 0, $i = 0, $i1 = 0, $i2 = 0, $i3 = 0;
 var $i4 = 0, $i5 = 0, $i6 = 0, $j = 0, $n = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 608|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $f = sp + 72|0;
 $filePath = sp + 88|0;
 $0 = $this;
 $1 = $slot;
 $6 = $switchScene&1;
 $2 = $6;
 $7 = $0;
 __ZN4FileC2Ev($f);
 $8 = ((($7)) + 36|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $1;
 __THREW__ = 0;
 HEAP32[$vararg_buffer>>2] = $9;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $10;
 (invoke_iiiii(218,($filePath|0),512,(29731|0),($vararg_buffer|0))|0);
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 L1: do {
  if (!($12)) {
   __THREW__ = 0;
   $13 = (invoke_iiii(179,($f|0),($filePath|0),(29546|0))|0);
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if (!($15)) {
    if (!($13)) {
     __THREW__ = 0;
     HEAP32[$vararg_buffer2>>2] = $filePath;
     invoke_vii(219,(29549|0),($vararg_buffer2|0));
     $16 = __THREW__; __THREW__ = 0;
     $17 = $16&1;
     if ($17) {
      break;
     }
     $5 = 1;
     __ZN4FileD2Ev($f);
     STACKTOP = sp;return;
    }
    HEAP32[708>>2] = $f;
    HEAP32[712>>2] = 1;
    __THREW__ = 0;
    invoke_vi(228,($7|0));
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    if (!($23)) {
     __THREW__ = 0;
     $24 = (invoke_i(229)|0);
     $25 = __THREW__; __THREW__ = 0;
     $26 = $25&1;
     if (!($26)) {
      $n = $24;
      $i = 0;
      while(1) {
       $27 = $i;
       $28 = $n;
       $29 = ($27|0)<($28|0);
       if (!($29)) {
        break;
       }
       __THREW__ = 0;
       $30 = (invoke_i(229)|0);
       $31 = __THREW__; __THREW__ = 0;
       $32 = $31&1;
       if ($32) {
        break L1;
       }
       $33 = $30&65535;
       $34 = $i;
       $35 = ((($7)) + 3804|0);
       $36 = (($35) + ($34<<1)|0);
       HEAP16[$36>>1] = $33;
       $37 = $i;
       $38 = (($37) + 1)|0;
       $i = $38;
      }
      $39 = ((($7)) + 4788|0);
      __THREW__ = 0;
      invoke_vii(222,($39|0),-2);
      $40 = __THREW__; __THREW__ = 0;
      $41 = $40&1;
      if (!($41)) {
       $42 = $2;
       $43 = $42&1;
       if ($43) {
        $44 = ((($7)) + 4440|0);
        HEAP8[$44>>0] = 1;
        $5 = 1;
        __ZN4FileD2Ev($f);
        STACKTOP = sp;return;
       }
       __THREW__ = 0;
       $45 = (invoke_i(229)|0);
       $46 = __THREW__; __THREW__ = 0;
       $47 = $46&1;
       if (!($47)) {
        $48 = ((($7)) + 10552|0);
        HEAP32[$48>>2] = $45;
        $i1 = 0;
        while(1) {
         $49 = $i1;
         $50 = ((($7)) + 10552|0);
         $51 = HEAP32[$50>>2]|0;
         $52 = ($49|0)<($51|0);
         if (!($52)) {
          break;
         }
         $53 = $i1;
         $54 = ((($7)) + 5252|0);
         $55 = (($54) + (($53*106)|0)|0);
         __THREW__ = 0;
         invoke_vi(223,($55|0));
         $56 = __THREW__; __THREW__ = 0;
         $57 = $56&1;
         if ($57) {
          break L1;
         }
         $58 = $i1;
         $59 = (($58) + 1)|0;
         $i1 = $59;
        }
        __THREW__ = 0;
        $60 = (invoke_i(229)|0);
        $61 = __THREW__; __THREW__ = 0;
        $62 = $61&1;
        if (!($62)) {
         $n = $60;
         $i2 = 0;
         while(1) {
          $63 = $i2;
          $64 = $n;
          $65 = ($63|0)<($64|0);
          __THREW__ = 0;
          $66 = (invoke_i(229)|0);
          $67 = __THREW__; __THREW__ = 0;
          $68 = $67&1;
          if (!($65)) {
           break;
          }
          if ($68) {
           break L1;
          }
          $69 = $i2;
          $70 = ((($7)) + 18964|0);
          $71 = (($70) + ($69<<2)|0);
          HEAP32[$71>>2] = $66;
          $72 = $i2;
          $73 = (($72) + 1)|0;
          $i2 = $73;
         }
         if (!($68)) {
          $n = $66;
          $74 = $n;
          $75 = (($74|0) % 10)&-1;
          $76 = ($75|0)==(0);
          if (!($76)) {
           __THREW__ = 0;
           invoke_viiii(161,(29588|0),(29500|0),272,(29602|0));
           $77 = __THREW__; __THREW__ = 0;
           break;
          }
          $i3 = 0;
          while(1) {
           $78 = $i3;
           $79 = $n;
           $80 = (($79|0) / 10)&-1;
           $81 = ($78|0)<($80|0);
           if (!($81)) {
            break;
           }
           $j = 0;
           while(1) {
            $82 = $j;
            $83 = ($82|0)<(10);
            if (!($83)) {
             break;
            }
            $84 = $j;
            $85 = $i3;
            $86 = ((($7)) + 15764|0);
            $87 = (($86) + (($85*160)|0)|0);
            $88 = (($87) + ($84<<4)|0);
            __THREW__ = 0;
            invoke_vi(224,($88|0));
            $89 = __THREW__; __THREW__ = 0;
            $90 = $89&1;
            if ($90) {
             break L1;
            }
            $91 = $j;
            $92 = (($91) + 1)|0;
            $j = $92;
           }
           $93 = $i3;
           $94 = (($93) + 1)|0;
           $i3 = $94;
          }
          __THREW__ = 0;
          $95 = (invoke_i(229)|0);
          $96 = __THREW__; __THREW__ = 0;
          $97 = $96&1;
          if (!($97)) {
           $n = $95;
           $i4 = 0;
           while(1) {
            $98 = $i4;
            $99 = $n;
            $100 = ($98|0)<($99|0);
            __THREW__ = 0;
            $101 = (invoke_i(229)|0);
            $102 = __THREW__; __THREW__ = 0;
            $103 = $102&1;
            if (!($100)) {
             break;
            }
            if ($103) {
             break L1;
            }
            $104 = $101&65535;
            $105 = $i4;
            $106 = ((($7)) + 3804|0);
            $107 = (($106) + ($105<<1)|0);
            HEAP16[$107>>1] = $104;
            $108 = $i4;
            $109 = (($108) + 1)|0;
            $i4 = $109;
           }
           if (!($103)) {
            $n = $101;
            $i5 = 0;
            while(1) {
             $110 = $i5;
             $111 = $n;
             $112 = ($110|0)<($111|0);
             if (!($112)) {
              break;
             }
             $113 = $i5;
             $114 = ((($7)) + 81860|0);
             $115 = (($114) + (($113*12)|0)|0);
             __THREW__ = 0;
             invoke_vi(225,($115|0));
             $116 = __THREW__; __THREW__ = 0;
             $117 = $116&1;
             if ($117) {
              break L1;
             }
             $118 = $i5;
             $119 = (($118) + 1)|0;
             $i5 = $119;
            }
            __THREW__ = 0;
            $120 = (invoke_i(229)|0);
            $121 = __THREW__; __THREW__ = 0;
            $122 = $121&1;
            if (!($122)) {
             $123 = ((($7)) + 5044|0);
             HEAP32[$123>>2] = $120;
             __THREW__ = 0;
             $124 = (invoke_i(229)|0);
             $125 = __THREW__; __THREW__ = 0;
             $126 = $125&1;
             if (!($126)) {
              $127 = ((($7)) + 5048|0);
              HEAP32[$127>>2] = $124;
              __THREW__ = 0;
              $128 = (invoke_i(229)|0);
              $129 = __THREW__; __THREW__ = 0;
              $130 = $129&1;
              if (!($130)) {
               $131 = ((($7)) + 4460|0);
               HEAP32[$131>>2] = $128;
               $132 = ((($7)) + 4460|0);
               $133 = HEAP32[$132>>2]|0;
               $134 = ((($7)) + 4464|0);
               HEAP32[$134>>2] = $133;
               $i6 = 0;
               while(1) {
                $135 = $i6;
                $136 = ($135|0)<(20);
                if (!($136)) {
                 break;
                }
                $137 = $i6;
                $138 = ((($7)) + 79048|0);
                $139 = (($138) + (($137*28)|0)|0);
                $140 = ((($139)) + 20|0);
                $141 = HEAP32[$140>>2]|0;
                __THREW__ = 0;
                invoke_vi(202,($141|0));
                $142 = __THREW__; __THREW__ = 0;
                $143 = $142&1;
                if ($143) {
                 break L1;
                }
                $144 = $i6;
                $145 = ((($7)) + 79048|0);
                $146 = (($145) + (($144*28)|0)|0);
                ;HEAP32[$146>>2]=0|0;HEAP32[$146+4>>2]=0|0;HEAP32[$146+8>>2]=0|0;HEAP32[$146+12>>2]=0|0;HEAP32[$146+16>>2]=0|0;HEAP32[$146+20>>2]=0|0;HEAP32[$146+24>>2]=0|0;
                $147 = $i6;
                $148 = (($147) + 1)|0;
                $i6 = $148;
               }
               $149 = ((($7)) + 79048|0);
               $150 = ((($7)) + 79608|0);
               __THREW__ = 0;
               invoke_vii(230,($149|0),($150|0));
               $151 = __THREW__; __THREW__ = 0;
               $152 = $151&1;
               if (!($152)) {
                __THREW__ = 0;
                $153 = (invoke_i(229)|0);
                $154 = __THREW__; __THREW__ = 0;
                $155 = $154&1;
                if (!($155)) {
                 $156 = ((($7)) + 4452|0);
                 HEAP32[$156>>2] = $153;
                 __THREW__ = 0;
                 (invoke_i(231)|0);
                 $157 = __THREW__; __THREW__ = 0;
                 $158 = $157&1;
                 if (!($158)) {
                  __THREW__ = 0;
                  $159 = (invoke_i(231)|0);
                  $160 = __THREW__; __THREW__ = 0;
                  $161 = $160&1;
                  if ($161) {
                   break;
                  }
                  $162 = ((($7)) + 4612|0);
                  HEAP32[$162>>2] = $159;
                  $163 = ((($7)) + 4616|0);
                  __THREW__ = 0;
                  invoke_vii(222,($163|0),-1);
                  $164 = __THREW__; __THREW__ = 0;
                  $165 = $164&1;
                  if ($165) {
                   break;
                  }
                  $166 = $1;
                  $167 = ((($7)) + 4788|0);
                  __THREW__ = 0;
                  HEAP32[$vararg_buffer5>>2] = $166;
                  $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
                  HEAP32[$vararg_ptr8>>2] = $167;
                  invoke_viii(209,1,(29612|0),($vararg_buffer5|0));
                  $168 = __THREW__; __THREW__ = 0;
                  $169 = $168&1;
                  if ($169) {
                   break;
                  }
                  $5 = 0;
                  __ZN4FileD2Ev($f);
                  STACKTOP = sp;return;
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $18 = ___cxa_find_matching_catch()|0;
 $19 = tempRet0;
 $3 = $18;
 $4 = $19;
 __THREW__ = 0;
 invoke_vi(177,($f|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $172 = ___cxa_find_matching_catch(0|0)|0;
  $173 = tempRet0;
  ___clang_call_terminate($172);
  // unreachable;
 } else {
  $170 = $3;
  $171 = $4;
  ___resumeException($170|0);
  // unreachable;
 }
}
function __ZL9saveInt16i($i) {
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $i;
 $1 = HEAP32[708>>2]|0;
 $2 = $0;
 $3 = $2&65535;
 __ZN4File13writeUint16LEEt($1,$3);
 STACKTOP = sp;return;
}
function __ZL13saveOrLoadStrPcs($s,$len) {
 $s = $s|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $countTermChar = 0, $storeLen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 4|0;
 $0 = $s;
 HEAP16[$1>>1] = $len;
 $2 = HEAP16[$1>>1]|0;
 $3 = $2 << 16 >> 16;
 $4 = ($3|0)==(-2);
 $5 = $4&1;
 $countTermChar = $5;
 $6 = HEAP16[$1>>1]|0;
 $7 = $6 << 16 >> 16;
 $8 = ($7|0)<(0);
 $9 = $8&1;
 $storeLen = $9;
 $10 = $storeLen;
 $11 = $10&1;
 if ($11) {
  $12 = $0;
  $13 = (_strlen($12)|0);
  $14 = $13&65535;
  HEAP16[$1>>1] = $14;
  $15 = $countTermChar;
  $16 = $15&1;
  if ($16) {
   $17 = HEAP16[$1>>1]|0;
   $18 = (($17) + 1)<<16>>16;
   HEAP16[$1>>1] = $18;
  }
  __ZL15saveOrLoadInt16Rs($1);
 }
 $19 = HEAP32[712>>2]|0;
 switch ($19|0) {
 case 0:  {
  $20 = $0;
  $21 = HEAP16[$1>>1]|0;
  $22 = $21 << 16 >> 16;
  __ZL7saveStrPvi($20,$22);
  STACKTOP = sp;return;
  break;
 }
 case 1:  {
  $23 = $0;
  $24 = HEAP16[$1>>1]|0;
  $25 = $24 << 16 >> 16;
  __ZL7loadStrPvi($23,$25);
  $26 = $storeLen;
  $27 = $26&1;
  if (!($27)) {
   STACKTOP = sp;return;
  }
  $28 = HEAP16[$1>>1]|0;
  $29 = $28 << 16 >> 16;
  $30 = $0;
  $31 = (($30) + ($29)|0);
  HEAP8[$31>>0] = 0;
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function __ZL22saveOrLoad_sceneObjectR11SceneObject($so) {
 $so = $so|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $j = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $so;
 $1 = $0;
 __ZL15saveOrLoadInt16Rs($1);
 $2 = $0;
 $3 = ((($2)) + 2|0);
 __ZL15saveOrLoadInt16Rs($3);
 $4 = $0;
 $5 = ((($4)) + 4|0);
 __ZL15saveOrLoadInt16Rs($5);
 $6 = $0;
 $7 = ((($6)) + 6|0);
 __ZL15saveOrLoadInt16Rs($7);
 $8 = $0;
 $9 = ((($8)) + 8|0);
 __ZL15saveOrLoadInt16Rs($9);
 $10 = $0;
 $11 = ((($10)) + 10|0);
 __ZL15saveOrLoadInt16Rs($11);
 $12 = $0;
 $13 = ((($12)) + 12|0);
 __ZL15saveOrLoadInt16Rs($13);
 $14 = $0;
 $15 = ((($14)) + 14|0);
 __ZL15saveOrLoadInt16Rs($15);
 $16 = $0;
 $17 = ((($16)) + 16|0);
 __ZL15saveOrLoadInt16Rs($17);
 $18 = $0;
 $19 = ((($18)) + 18|0);
 __ZL15saveOrLoadInt16Rs($19);
 $20 = $0;
 $21 = ((($20)) + 20|0);
 __ZL15saveOrLoadInt16Rs($21);
 $22 = $0;
 $23 = ((($22)) + 22|0);
 __ZL15saveOrLoadInt16Rs($23);
 $24 = $0;
 $25 = ((($24)) + 24|0);
 __ZL15saveOrLoadInt16Rs($25);
 $26 = $0;
 $27 = ((($26)) + 26|0);
 __ZL15saveOrLoadInt16Rs($27);
 $28 = $0;
 $29 = ((($28)) + 28|0);
 __ZL15saveOrLoadInt16Rs($29);
 $30 = $0;
 $31 = ((($30)) + 30|0);
 __ZL15saveOrLoadInt16Rs($31);
 $32 = $0;
 $33 = ((($32)) + 32|0);
 __ZL15saveOrLoadInt16Rs($33);
 $34 = $0;
 $35 = ((($34)) + 34|0);
 __ZL15saveOrLoadInt16Rs($35);
 $36 = $0;
 $37 = ((($36)) + 36|0);
 __ZL15saveOrLoadInt16Rs($37);
 $38 = $0;
 $39 = ((($38)) + 38|0);
 __ZL15saveOrLoadInt16Rs($39);
 $40 = $0;
 $41 = ((($40)) + 40|0);
 __ZL15saveOrLoadInt16Rs($41);
 $42 = $0;
 $43 = ((($42)) + 42|0);
 __ZL15saveOrLoadInt16Rs($43);
 $44 = $0;
 $45 = ((($44)) + 44|0);
 __ZL15saveOrLoadInt16Rs($45);
 $46 = $0;
 $47 = ((($46)) + 46|0);
 __ZL13saveOrLoadStrPcs($47,20);
 $48 = $0;
 $49 = ((($48)) + 66|0);
 __ZL13saveOrLoadStrPcs($49,20);
 $j = 0;
 while(1) {
  $50 = $j;
  $51 = ($50|0)<(10);
  if (!($51)) {
   break;
  }
  $52 = $j;
  $53 = $0;
  $54 = ((($53)) + 86|0);
  $55 = (($54) + ($52<<1)|0);
  __ZL15saveOrLoadInt16Rs($55);
  $56 = $j;
  $57 = (($56) + 1)|0;
  $j = $57;
 }
 STACKTOP = sp;return;
}
function __ZL14saveOrLoad_boxR3Box($b) {
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $b;
 $1 = $0;
 __ZL15saveOrLoadInt16Rs($1);
 $2 = $0;
 $3 = ((($2)) + 2|0);
 __ZL15saveOrLoadInt16Rs($3);
 $4 = $0;
 $5 = ((($4)) + 4|0);
 __ZL15saveOrLoadInt16Rs($5);
 $6 = $0;
 $7 = ((($6)) + 6|0);
 __ZL15saveOrLoadInt16Rs($7);
 $8 = $0;
 $9 = ((($8)) + 8|0);
 __ZL14saveOrLoadByteRh($9);
 $10 = $0;
 $11 = ((($10)) + 10|0);
 __ZL15saveOrLoadInt16Rs($11);
 $12 = $0;
 $13 = ((($12)) + 12|0);
 __ZL15saveOrLoadInt16Rs($13);
 $14 = $0;
 $15 = ((($14)) + 14|0);
 __ZL15saveOrLoadInt16Rs($15);
 STACKTOP = sp;return;
}
function __ZL28saveOrLoad_sceneObjectStatusR17SceneObjectStatus($sos) {
 $sos = $sos|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $sos;
 $1 = $0;
 __ZL15saveOrLoadInt16Rs($1);
 $2 = $0;
 $3 = ((($2)) + 2|0);
 __ZL15saveOrLoadInt16Rs($3);
 $4 = $0;
 $5 = ((($4)) + 4|0);
 __ZL15saveOrLoadInt16Rs($5);
 $6 = $0;
 $7 = ((($6)) + 6|0);
 __ZL15saveOrLoadInt16Rs($7);
 $8 = $0;
 $9 = ((($8)) + 8|0);
 __ZL15saveOrLoadInt16Rs($9);
 $10 = $0;
 $11 = ((($10)) + 10|0);
 __ZL15saveOrLoadInt16Rs($11);
 STACKTOP = sp;return;
}
function __ZL15save_bagObjectsP9BagObjecti($bo,$count) {
 $bo = $bo|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $i1 = 0, $i2 = 0, $offset = 0, $totalSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $bo;
 $1 = $count;
 $totalSize = 0;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = $1;
  $4 = ($2|0)<($3|0);
  if (!($4)) {
   break;
  }
  $5 = $i;
  $6 = $0;
  $7 = (($6) + (($5*28)|0)|0);
  $8 = ((($7)) + 24|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $totalSize;
  $11 = (($10) + ($9))|0;
  $totalSize = $11;
  $12 = $i;
  $13 = (($12) + 1)|0;
  $i = $13;
 }
 $14 = $totalSize;
 $15 = ($14|0)<(65535);
 if (!($15)) {
  ___assert_fail((29696|0),(29500|0),152,(29715|0));
  // unreachable;
 }
 $16 = $totalSize;
 __ZL9saveInt16i($16);
 $i1 = 0;
 while(1) {
  $17 = $i1;
  $18 = $1;
  $19 = ($17|0)<($18|0);
  if (!($19)) {
   break;
  }
  $20 = $i1;
  $21 = $0;
  $22 = (($21) + (($20*28)|0)|0);
  $23 = ((($22)) + 20|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $i1;
  $26 = $0;
  $27 = (($26) + (($25*28)|0)|0);
  $28 = ((($27)) + 24|0);
  $29 = HEAP32[$28>>2]|0;
  __ZL7saveStrPvi($24,$29);
  $30 = $i1;
  $31 = (($30) + 1)|0;
  $i1 = $31;
 }
 $32 = $1;
 __ZL9saveInt16i($32);
 $offset = 0;
 $i2 = 0;
 while(1) {
  $33 = $i2;
  $34 = $1;
  $35 = ($33|0)<($34|0);
  if (!($35)) {
   break;
  }
  $36 = $offset;
  __ZL9saveInt16i($36);
  $37 = $i2;
  $38 = $0;
  $39 = (($38) + (($37*28)|0)|0);
  __ZL7saveStrPvi($39,20);
  $40 = $i2;
  $41 = $0;
  $42 = (($41) + (($40*28)|0)|0);
  $43 = ((($42)) + 24|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = $offset;
  $46 = (($45) + ($44))|0;
  $offset = $46;
  $47 = $i2;
  $48 = (($47) + 1)|0;
  $i2 = $48;
 }
 STACKTOP = sp;return;
}
function __ZL9saveInt32i($i) {
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $i;
 $1 = HEAP32[708>>2]|0;
 $2 = $0;
 __ZN4File13writeUint32LEEj($1,$2);
 STACKTOP = sp;return;
}
function __ZL9loadInt16v() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[708>>2]|0;
 $1 = (__ZN4File12readUint16LEEv($0)|0);
 $2 = $1&65535;
 return ($2|0);
}
function __ZL15load_bagObjectsP9BagObjectRi($bo,$count) {
 $bo = $bo|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, $bagData = 0, $bagObjectsOffset = 0, $dataSize = 0, $i = 0, $i1 = 0, $totalSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $bagObjectsOffset = sp + 24|0;
 $0 = $bo;
 $1 = $count;
 $2 = (__ZL9loadInt16v()|0);
 $3 = $2&65535;
 $totalSize = $3;
 $4 = $totalSize;
 $5 = $4&65535;
 $6 = (_malloc($5)|0);
 $bagData = $6;
 $7 = $bagData;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = $bagData;
 $10 = $totalSize;
 $11 = $10&65535;
 __ZL7loadStrPvi($9,$11);
 $12 = (__ZL9loadInt16v()|0);
 $13 = $1;
 HEAP32[$13>>2] = $12;
 $14 = $1;
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)<=(20);
 if (!($16)) {
  ___assert_fail((29649|0),(29500|0),172,(29680|0));
  // unreachable;
 }
 $i = 0;
 while(1) {
  $17 = $i;
  $18 = $1;
  $19 = HEAP32[$18>>2]|0;
  $20 = ($17|0)<($19|0);
  if (!($20)) {
   break;
  }
  $21 = (__ZL9loadInt16v()|0);
  $22 = $21&65535;
  $23 = $i;
  $24 = (($bagObjectsOffset) + ($23<<1)|0);
  HEAP16[$24>>1] = $22;
  $25 = $i;
  $26 = $0;
  $27 = (($26) + (($25*28)|0)|0);
  __ZL7loadStrPvi($27,20);
  $28 = $i;
  $29 = (($28) + 1)|0;
  $i = $29;
 }
 $i1 = 0;
 while(1) {
  $30 = $i1;
  $31 = $1;
  $32 = HEAP32[$31>>2]|0;
  $33 = ($30|0)<($32|0);
  if (!($33)) {
   break;
  }
  $34 = $i1;
  $35 = $1;
  $36 = HEAP32[$35>>2]|0;
  $37 = (($36) - 1)|0;
  $38 = ($34|0)==($37|0);
  if ($38) {
   $39 = $totalSize;
   $45 = $39;
  } else {
   $40 = $i1;
   $41 = (($40) + 1)|0;
   $42 = (($bagObjectsOffset) + ($41<<1)|0);
   $43 = HEAP16[$42>>1]|0;
   $45 = $43;
  }
  $44 = $45&65535;
  $dataSize = $44;
  $46 = $i1;
  $47 = (($bagObjectsOffset) + ($46<<1)|0);
  $48 = HEAP16[$47>>1]|0;
  $49 = $48&65535;
  $50 = $dataSize;
  $51 = (($50) - ($49))|0;
  $dataSize = $51;
  $52 = $dataSize;
  $53 = (_malloc($52)|0);
  $54 = $i1;
  $55 = $0;
  $56 = (($55) + (($54*28)|0)|0);
  $57 = ((($56)) + 20|0);
  HEAP32[$57>>2] = $53;
  $58 = $i1;
  $59 = $0;
  $60 = (($59) + (($58*28)|0)|0);
  $61 = ((($60)) + 20|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = ($62|0)!=(0|0);
  if ($63) {
   $64 = $i1;
   $65 = $0;
   $66 = (($65) + (($64*28)|0)|0);
   $67 = ((($66)) + 20|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = $bagData;
   $70 = $i1;
   $71 = (($bagObjectsOffset) + ($70<<1)|0);
   $72 = HEAP16[$71>>1]|0;
   $73 = $72&65535;
   $74 = (($69) + ($73)|0);
   $75 = $dataSize;
   _memcpy(($68|0),($74|0),($75|0))|0;
   $76 = $dataSize;
   $77 = $i1;
   $78 = $0;
   $79 = (($78) + (($77*28)|0)|0);
   $80 = ((($79)) + 24|0);
   HEAP32[$80>>2] = $76;
  }
  $81 = $i1;
  $82 = (($81) + 1)|0;
  $i1 = $82;
 }
 $83 = $bagData;
 _free($83);
 STACKTOP = sp;return;
}
function __ZL9loadInt32v() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[708>>2]|0;
 $1 = (__ZN4File12readUint32LEEv($0)|0);
 return ($1|0);
}
function __ZL7loadStrPvi($s,$len) {
 $s = $s|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $len;
 $2 = HEAP32[708>>2]|0;
 $3 = $0;
 $4 = $1;
 (__ZN4File4readEPvj($2,$3,$4)|0);
 STACKTOP = sp;return;
}
function __ZL7saveStrPvi($s,$len) {
 $s = $s|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $len;
 $2 = HEAP32[708>>2]|0;
 $3 = $0;
 $4 = $1;
 __ZN4File5writeEPvj($2,$3,$4);
 STACKTOP = sp;return;
}
function __ZL15saveOrLoadInt16Rs($i) {
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $i;
 $1 = HEAP32[712>>2]|0;
 switch ($1|0) {
 case 0:  {
  $2 = $0;
  $3 = HEAP16[$2>>1]|0;
  $4 = $3 << 16 >> 16;
  __ZL9saveInt16i($4);
  break;
 }
 case 1:  {
  $5 = (__ZL9loadInt16v()|0);
  $6 = $5&65535;
  $7 = $0;
  HEAP16[$7>>1] = $6;
  break;
 }
 default: {
 }
 }
 STACKTOP = sp;return;
}
function __ZL14saveOrLoadByteRh($b) {
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $b;
 $1 = HEAP32[712>>2]|0;
 switch ($1|0) {
 case 0:  {
  $2 = $0;
  $3 = HEAP8[$2>>0]|0;
  __ZL8saveByteh($3);
  break;
 }
 case 1:  {
  $4 = (__ZL8loadBytev()|0);
  $5 = $0;
  HEAP8[$5>>0] = $4;
  break;
 }
 default: {
 }
 }
 STACKTOP = sp;return;
}
function __ZL8saveByteh($b) {
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $b;
 $1 = HEAP32[708>>2]|0;
 $2 = $0;
 __ZN4File9writeByteEh($1,$2);
 STACKTOP = sp;return;
}
function __ZL8loadBytev() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[708>>2]|0;
 $1 = (__ZN4File8readByteEv($0)|0);
 return ($1|0);
}
function __Z17stringToLowerCasePc($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 while(1) {
  $1 = $0;
  $2 = HEAP8[$1>>0]|0;
  $3 = ($2<<24>>24)!=(0);
  if (!($3)) {
   break;
  }
  $4 = $0;
  $5 = HEAP8[$4>>0]|0;
  $6 = $5 << 24 >> 24;
  $7 = ($6|0)>=(65);
  if ($7) {
   $8 = $0;
   $9 = HEAP8[$8>>0]|0;
   $10 = $9 << 24 >> 24;
   $11 = ($10|0)<=(90);
   if ($11) {
    $12 = $0;
    $13 = HEAP8[$12>>0]|0;
    $14 = $13 << 24 >> 24;
    $15 = (($14) + 32)|0;
    $16 = $15&255;
    HEAP8[$12>>0] = $16;
   }
  }
  $17 = $0;
  $18 = ((($17)) + 1|0);
  $0 = $18;
 }
 STACKTOP = sp;return;
}
function __Z17stringToUpperCasePc($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 while(1) {
  $1 = $0;
  $2 = HEAP8[$1>>0]|0;
  $3 = ($2<<24>>24)!=(0);
  if (!($3)) {
   break;
  }
  $4 = $0;
  $5 = HEAP8[$4>>0]|0;
  $6 = $5 << 24 >> 24;
  $7 = ($6|0)>=(97);
  if ($7) {
   $8 = $0;
   $9 = HEAP8[$8>>0]|0;
   $10 = $9 << 24 >> 24;
   $11 = ($10|0)<=(122);
   if ($11) {
    $12 = $0;
    $13 = HEAP8[$12>>0]|0;
    $14 = $13 << 24 >> 24;
    $15 = (($14) + -32)|0;
    $16 = $15&255;
    HEAP8[$12>>0] = $16;
   }
  }
  $17 = $0;
  $18 = ((($17)) + 1|0);
  $0 = $18;
 }
 STACKTOP = sp;return;
}
function __Z14stringTrimLeftPc($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 while(1) {
  $1 = $0;
  $2 = HEAP8[$1>>0]|0;
  $3 = ($2<<24>>24)!=(0);
  if ($3) {
   $4 = $0;
   $5 = HEAP8[$4>>0]|0;
   $6 = (__ZL12isWhitespacec($5)|0);
   $10 = $6;
  } else {
   $10 = 0;
  }
  $7 = $0;
  if (!($10)) {
   break;
  }
  HEAP8[$7>>0] = 0;
  $8 = $0;
  $9 = ((($8)) + 1|0);
  $0 = $9;
 }
 STACKTOP = sp;return ($7|0);
}
function __Z15stringNextTokenPPc($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $end = 0, $token = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (__Z14stringTrimLeftPc($2)|0);
 $token = $3;
 $4 = $token;
 $end = $4;
 $5 = $token;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  $39 = $token;
  STACKTOP = sp;return ($39|0);
 }
 $7 = $token;
 $8 = HEAP8[$7>>0]|0;
 $9 = $8 << 24 >> 24;
 $10 = ($9|0)==(34);
 L4: do {
  if ($10) {
   $11 = $token;
   $12 = ((($11)) + 1|0);
   $token = $12;
   while(1) {
    $13 = $end;
    $14 = HEAP8[$13>>0]|0;
    $15 = ($14<<24>>24)!=(0);
    if (!($15)) {
     break L4;
    }
    $16 = $end;
    $17 = HEAP8[$16>>0]|0;
    $18 = $17 << 24 >> 24;
    $19 = ($18|0)!=(34);
    if (!($19)) {
     break L4;
    }
    $20 = $end;
    $21 = ((($20)) + 1|0);
    $end = $21;
   }
  } else {
   while(1) {
    $22 = $end;
    $23 = HEAP8[$22>>0]|0;
    $24 = ($23<<24>>24)!=(0);
    if (!($24)) {
     break L4;
    }
    $25 = $end;
    $26 = HEAP8[$25>>0]|0;
    $27 = (__ZL12isWhitespacec($26)|0);
    $28 = $27 ^ 1;
    if (!($28)) {
     break L4;
    }
    $29 = $end;
    $30 = ((($29)) + 1|0);
    $end = $30;
   }
  }
 } while(0);
 $31 = $end;
 $32 = HEAP8[$31>>0]|0;
 $33 = ($32<<24>>24)!=(0);
 if ($33) {
  $34 = $end;
  HEAP8[$34>>0] = 0;
  $35 = $end;
  $36 = ((($35)) + 1|0);
  $37 = $0;
  HEAP32[$37>>2] = $36;
  $39 = $token;
  STACKTOP = sp;return ($39|0);
 } else {
  $38 = $0;
  HEAP32[$38>>2] = 0;
  $39 = $token;
  STACKTOP = sp;return ($39|0);
 }
 return (0)|0;
}
function __Z18stringNextTokenEOLPPc($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $token = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (__Z14stringTrimLeftPc($2)|0);
 $token = $3;
 $4 = $token;
 $5 = ($4|0)!=(0|0);
 do {
  if ($5) {
   $6 = $token;
   $7 = (_strstr($6,30003)|0);
   $buf = $7;
   $8 = $buf;
   $9 = ($8|0)!=(0|0);
   if ($9) {
    $10 = $buf;
    HEAP8[$10>>0] = 0;
    $11 = $buf;
    $12 = ((($11)) + 2|0);
    $13 = $0;
    HEAP32[$13>>2] = $12;
    break;
   } else {
    $14 = $0;
    HEAP32[$14>>2] = 0;
    break;
   }
  }
 } while(0);
 $15 = $token;
 STACKTOP = sp;return ($15|0);
}
function __Z19stringStripCommentsPc($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $cmt = 0, $cmt1 = 0, $eol = 0, $eol2 = 0, $str = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 $str = $1;
 while(1) {
  $2 = $str;
  $3 = HEAP8[$2>>0]|0;
  $4 = ($3<<24>>24)!=(0);
  if (!($4)) {
   break;
  }
  $5 = $str;
  $6 = HEAP8[$5>>0]|0;
  $7 = $6 << 24 >> 24;
  $8 = ($7|0)==(9);
  if ($8) {
   $9 = $str;
   HEAP8[$9>>0] = 32;
  }
  $10 = $str;
  $11 = ((($10)) + 1|0);
  $str = $11;
 }
 L7: while(1) {
  $12 = $0;
  $13 = (_strstr($12,30006)|0);
  $cmt = $13;
  $14 = $cmt;
  $15 = ($14|0)!=(0|0);
  if (!($15)) {
   break;
  }
  $16 = $cmt;
  $17 = (_strstr($16,30003)|0);
  $eol = $17;
  while(1) {
   $18 = $cmt;
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)!=(0);
   if (!($20)) {
    continue L7;
   }
   $21 = $cmt;
   $22 = $eol;
   $23 = ($21|0)!=($22|0);
   if (!($23)) {
    continue L7;
   }
   $24 = $cmt;
   $25 = ((($24)) + 1|0);
   $cmt = $25;
   HEAP8[$24>>0] = 32;
  }
 }
 $26 = $0;
 $cmt1 = $26;
 while(1) {
  $27 = $cmt1;
  $28 = HEAP8[$27>>0]|0;
  $29 = ($28<<24>>24)!=(0);
  if ($29) {
   $30 = $cmt1;
   $31 = HEAP8[$30>>0]|0;
   $32 = (__ZL12isWhitespacec($31)|0);
   $59 = $32;
  } else {
   $59 = 0;
  }
  $33 = $cmt1;
  if ($59) {
   $34 = ((($33)) + 1|0);
   $cmt1 = $34;
   continue;
  }
  $35 = HEAP8[$33>>0]|0;
  $36 = ($35<<24>>24)!=(0);
  if (!($36)) {
   label = 24;
   break;
  }
  $37 = $cmt1;
  $38 = (_strstr($37,30003)|0);
  $eol2 = $38;
  $39 = $cmt1;
  $40 = HEAP8[$39>>0]|0;
  $41 = $40 << 24 >> 24;
  $42 = ($41|0)==(59);
  if ($42) {
   label = 19;
  } else {
   $43 = $cmt1;
   $44 = HEAP8[$43>>0]|0;
   $45 = $44 << 24 >> 24;
   $46 = ($45|0)==(47);
   if ($46) {
    label = 19;
   }
  }
  L26: do {
   if ((label|0) == 19) {
    while(1) {
     label = 0;
     $47 = $cmt1;
     $48 = HEAP8[$47>>0]|0;
     $49 = ($48<<24>>24)!=(0);
     if (!($49)) {
      break L26;
     }
     $50 = $cmt1;
     $51 = $eol2;
     $52 = ($50|0)!=($51|0);
     if (!($52)) {
      break L26;
     }
     $53 = $cmt1;
     $54 = ((($53)) + 1|0);
     $cmt1 = $54;
     HEAP8[$53>>0] = 32;
     label = 19;
    }
   }
  } while(0);
  $55 = $eol2;
  $56 = ($55|0)!=(0|0);
  if (!($56)) {
   label = 24;
   break;
  }
  $57 = $eol2;
  $58 = ((($57)) + 2|0);
  $cmt1 = $58;
 }
 if ((label|0) == 24) {
  STACKTOP = sp;return;
 }
}
function __Z14stringEndsWithPKcS0_($p,$suf) {
 $p = $p|0;
 $suf = $suf|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $suf;
 $2 = $0;
 $3 = (_strlen($2)|0);
 $4 = $1;
 $5 = (_strlen($4)|0);
 $6 = (($3) - ($5))|0;
 $offs = $6;
 $7 = $offs;
 $8 = ($7|0)>=(0);
 if (!($8)) {
  $15 = 0;
  STACKTOP = sp;return ($15|0);
 }
 $9 = $0;
 $10 = $offs;
 $11 = (($9) + ($10)|0);
 $12 = $1;
 $13 = (_strcmp($11,$12)|0);
 $14 = ($13|0)==(0);
 $15 = $14;
 STACKTOP = sp;return ($15|0);
}
function __ZL12isWhitespacec($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $c;
 $1 = $0;
 $2 = $1 << 24 >> 24;
 $3 = ($2|0)==(32);
 if ($3) {
  $15 = 1;
 } else {
  $4 = $0;
  $5 = $4 << 24 >> 24;
  $6 = ($5|0)==(9);
  if ($6) {
   $15 = 1;
  } else {
   $7 = $0;
   $8 = $7 << 24 >> 24;
   $9 = ($8|0)==(13);
   if ($9) {
    $15 = 1;
   } else {
    $10 = $0;
    $11 = $10 << 24 >> 24;
    $12 = ($11|0)==(10);
    if ($12) {
     $15 = 1;
    } else {
     $13 = $0;
     $14 = (__ZL15isIgnorableCharc($13)|0);
     $15 = $14;
    }
   }
  }
 }
 STACKTOP = sp;return ($15|0);
}
function __ZL15isIgnorableCharc($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $c;
 $1 = $0;
 $2 = $1 << 24 >> 24;
 $3 = ($2|0)==(96);
 STACKTOP = sp;return ($3|0);
}
function __Z21SystemStub_SDL_createv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = (__Znwj(1112)|0);
 __THREW__ = 0;
 invoke_vi(232,($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch()|0;
  $6 = tempRet0;
  $0 = $5;
  $1 = $6;
  __ZdlPv($2);
  $7 = $0;
  $8 = $1;
  ___resumeException($7|0);
  // unreachable;
 } else {
  STACKTOP = sp;return ($2|0);
 }
 return (0)|0;
}
function __ZN14SystemStub_SDL4initEPKcii($this,$title,$w,$h) {
 $this = $this|0;
 $title = $title|0;
 $w = $w|0;
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bufferSize = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $title;
 $2 = $w;
 $3 = $h;
 $4 = $0;
 (_SDL_Init(48)|0);
 (_SDL_ShowCursor(0)|0);
 $5 = ((($4)) + 4|0);
 HEAP8[$5>>0] = 0;
 $6 = ((($4)) + 8|0);
 ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;HEAP32[$6+12>>2]=0|0;HEAP32[$6+16>>2]=0|0;HEAP32[$6+20>>2]=0|0;HEAP32[$6+24>>2]=0|0;HEAP32[$6+28>>2]=0|0;
 $7 = ((($4)) + 40|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 FUNCTION_TABLE_vi[$11 & 255]($8);
 $12 = $1;
 _SDL_WM_SetCaption(($12|0),(0|0));
 $13 = $2;
 $14 = ((($4)) + 1088|0);
 HEAP32[$14>>2] = $13;
 $15 = $3;
 $16 = ((($4)) + 1092|0);
 HEAP32[$16>>2] = $15;
 $17 = ((($4)) + 1088|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($4)) + 1092|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = Math_imul($18, $20)|0;
 $bufferSize = $21;
 $22 = $bufferSize;
 $23 = (_calloc($22,4)|0);
 $24 = ((($4)) + 56|0);
 HEAP32[$24>>2] = $23;
 $25 = ((($4)) + 56|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)!=(0|0);
 if (!($27)) {
  __Z5errorPKcz(30026,$vararg_buffer);
 }
 $28 = ((($4)) + 64|0);
 _memset(($28|0),0,1024)|0;
 $29 = ((($4)) + 1100|0);
 HEAP32[$29>>2] = 0;
 $30 = ((($4)) + 1096|0);
 HEAP32[$30>>2] = 0;
 $31 = ((($4)) + 1104|0);
 HEAP8[$31>>0] = 0;
 $32 = ((($4)) + 1104|0);
 $33 = HEAP8[$32>>0]|0;
 $34 = $33&1;
 __ZN14SystemStub_SDL13setFullscreenEb($4,$34);
 $35 = ((($4)) + 1108|0);
 HEAP32[$35>>2] = 0;
 _emscripten_SDL_SetEventHandler((233|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN14SystemStub_SDL13setFullscreenEb($this,$fullscreen) {
 $this = $this|0;
 $fullscreen = $fullscreen|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $2 = $fullscreen&1;
 $1 = $2;
 $3 = $0;
 $4 = ((($3)) + 1088|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($3)) + 1092|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $1;
 $9 = $8&1;
 $10 = $9 ? 8388608 : 0;
 $11 = (_SDL_SetVideoMode(($5|0),($7|0),32,($10|0))|0);
 $12 = ((($3)) + 44|0);
 HEAP32[$12>>2] = $11;
 $13 = ((($3)) + 44|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = ((($3)) + 44|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($17)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($3)) + 52|0);
 HEAP32[$20>>2] = $19;
 STACKTOP = sp;return;
}
function __ZN14SystemStub_SDL7destroyEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 FUNCTION_TABLE_vi[$6 & 255]($3);
 $7 = ((($1)) + 44|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = ((($1)) + 44|0);
  HEAP32[$10>>2] = 0;
 }
 $11 = ((($1)) + 56|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  _SDL_Quit();
  STACKTOP = sp;return;
 }
 $14 = ((($1)) + 56|0);
 $15 = HEAP32[$14>>2]|0;
 _free($15);
 $16 = ((($1)) + 56|0);
 HEAP32[$16>>2] = 0;
 _SDL_Quit();
 STACKTOP = sp;return;
}
function __ZN14SystemStub_SDL10setPaletteEPKhi($this,$pal,$n) {
 $this = $this|0;
 $pal = $pal|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $pal;
 $2 = $n;
 $3 = $0;
 $4 = $2;
 $5 = ($4|0)<=(256);
 if (!($5)) {
  ___assert_fail((30085|0),(30094|0),162,(30113|0));
  // unreachable;
 }
 $6 = ((($3)) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_SDL_MapRGB(($7|0),0,0,0)|0);
 $9 = ((($3)) + 64|0);
 HEAP32[$9>>2] = $8;
 $10 = $1;
 $11 = ((($10)) + 4|0);
 $1 = $11;
 $i = 1;
 while(1) {
  $12 = $i;
  $13 = $2;
  $14 = ($12|0)<($13|0);
  if (!($14)) {
   break;
  }
  $15 = ((($3)) + 52|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $1;
  $18 = ((($17)) + 2|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $1;
  $21 = ((($20)) + 1|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $1;
  $24 = HEAP8[$23>>0]|0;
  $25 = (_SDL_MapRGB(($16|0),($19|0),($22|0),($24|0))|0);
  $26 = $i;
  $27 = ((($3)) + 64|0);
  $28 = (($27) + ($26<<2)|0);
  HEAP32[$28>>2] = $25;
  $29 = $1;
  $30 = ((($29)) + 4|0);
  $1 = $30;
  $31 = $i;
  $32 = (($31) + 1)|0;
  $i = $32;
 }
 STACKTOP = sp;return;
}
function __ZN14SystemStub_SDL8fillRectEiiiih($this,$x,$y,$w,$h,$color) {
 $this = $this|0;
 $x = $x|0;
 $y = $y|0;
 $w = $w|0;
 $h = $h|0;
 $color = $color|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $fillColor = 0, $i = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $4 = sp + 12|0;
 $0 = $this;
 HEAP32[$1>>2] = $x;
 HEAP32[$2>>2] = $y;
 HEAP32[$3>>2] = $w;
 HEAP32[$4>>2] = $h;
 $5 = $color;
 $6 = $0;
 $7 = ((($6)) + 1088|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($6)) + 1092|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (__ZL8clipRectiiRiS_S_S_($8,$10,$1,$2,$3,$4)|0);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = $5;
 $13 = $12&255;
 $14 = ((($6)) + 64|0);
 $15 = (($14) + ($13<<2)|0);
 $16 = HEAP32[$15>>2]|0;
 $fillColor = $16;
 $17 = ((($6)) + 56|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = HEAP32[$2>>2]|0;
 $20 = ((($6)) + 1088|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = Math_imul($19, $21)|0;
 $23 = (($18) + ($22<<2)|0);
 $24 = HEAP32[$1>>2]|0;
 $25 = (($23) + ($24<<2)|0);
 $p = $25;
 while(1) {
  $26 = HEAP32[$4>>2]|0;
  $27 = (($26) + -1)|0;
  HEAP32[$4>>2] = $27;
  $28 = ($26|0)!=(0);
  if (!($28)) {
   break;
  }
  $i = 0;
  while(1) {
   $29 = $i;
   $30 = HEAP32[$3>>2]|0;
   $31 = ($29|0)<($30|0);
   if (!($31)) {
    break;
   }
   $32 = $fillColor;
   $33 = $i;
   $34 = $p;
   $35 = (($34) + ($33<<2)|0);
   HEAP32[$35>>2] = $32;
   $36 = $i;
   $37 = (($36) + 1)|0;
   $i = $37;
  }
  $38 = ((($6)) + 1088|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = $p;
  $41 = (($40) + ($39<<2)|0);
  $p = $41;
 }
 STACKTOP = sp;return;
}
function __ZN14SystemStub_SDL8copyRectEiiiiPKhib($this,$x,$y,$w,$h,$buf,$pitch,$transparent) {
 $this = $this|0;
 $x = $x|0;
 $y = $y|0;
 $w = $w|0;
 $h = $h|0;
 $buf = $buf|0;
 $pitch = $pitch|0;
 $transparent = $transparent|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 28|0;
 $2 = sp + 24|0;
 $3 = sp + 20|0;
 $4 = sp + 16|0;
 $0 = $this;
 HEAP32[$1>>2] = $x;
 HEAP32[$2>>2] = $y;
 HEAP32[$3>>2] = $w;
 HEAP32[$4>>2] = $h;
 $5 = $buf;
 $6 = $pitch;
 $8 = $transparent&1;
 $7 = $8;
 $9 = $0;
 $10 = ((($9)) + 1088|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($9)) + 1092|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (__ZL8clipRectiiRiS_S_S_($11,$13,$1,$2,$3,$4)|0);
 if (!($14)) {
  STACKTOP = sp;return;
 }
 $15 = ((($9)) + 56|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[$2>>2]|0;
 $18 = ((($9)) + 1088|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = Math_imul($17, $19)|0;
 $21 = (($16) + ($20<<2)|0);
 $22 = HEAP32[$1>>2]|0;
 $23 = (($21) + ($22<<2)|0);
 $p = $23;
 $24 = HEAP32[$4>>2]|0;
 $25 = $6;
 $26 = Math_imul($24, $25)|0;
 $27 = $5;
 $28 = (($27) + ($26)|0);
 $5 = $28;
 while(1) {
  $29 = HEAP32[$4>>2]|0;
  $30 = (($29) + -1)|0;
  HEAP32[$4>>2] = $30;
  $31 = ($29|0)!=(0);
  if (!($31)) {
   break;
  }
  $32 = $6;
  $33 = $5;
  $34 = (0 - ($32))|0;
  $35 = (($33) + ($34)|0);
  $5 = $35;
  $i = 0;
  while(1) {
   $36 = $i;
   $37 = HEAP32[$3>>2]|0;
   $38 = ($36|0)<($37|0);
   if (!($38)) {
    break;
   }
   $39 = $7;
   $40 = $39&1;
   if ($40) {
    $41 = $i;
    $42 = $5;
    $43 = (($42) + ($41)|0);
    $44 = HEAP8[$43>>0]|0;
    $45 = $44&255;
    $46 = ($45|0)!=(0);
    if ($46) {
     label = 8;
    }
   } else {
    label = 8;
   }
   if ((label|0) == 8) {
    label = 0;
    $47 = $i;
    $48 = $5;
    $49 = (($48) + ($47)|0);
    $50 = HEAP8[$49>>0]|0;
    $51 = $50&255;
    $52 = ((($9)) + 64|0);
    $53 = (($52) + ($51<<2)|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = $i;
    $56 = $p;
    $57 = (($56) + ($55<<2)|0);
    HEAP32[$57>>2] = $54;
   }
   $58 = $i;
   $59 = (($58) + 1)|0;
   $i = $59;
  }
  $60 = ((($9)) + 1088|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = $p;
  $63 = (($62) + ($61<<2)|0);
  $p = $63;
 }
 STACKTOP = sp;return;
}
function __ZN14SystemStub_SDL10darkenRectEiiii($this,$x,$y,$w,$h) {
 $this = $this|0;
 $x = $x|0;
 $y = $y|0;
 $w = $w|0;
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $color = 0, $greenMask = 0, $i = 0, $p = 0, $redBlueMask = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 32|0;
 $2 = sp + 28|0;
 $3 = sp + 24|0;
 $4 = sp + 20|0;
 $0 = $this;
 HEAP32[$1>>2] = $x;
 HEAP32[$2>>2] = $y;
 HEAP32[$3>>2] = $w;
 HEAP32[$4>>2] = $h;
 $5 = $0;
 $6 = ((($5)) + 1088|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($5)) + 1092|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__ZL8clipRectiiRiS_S_S_($7,$9,$1,$2,$3,$4)|0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = ((($5)) + 52|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($5)) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($16)) + 20|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $14 | $18;
 $redBlueMask = $19;
 $20 = ((($5)) + 52|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($21)) + 16|0);
 $23 = HEAP32[$22>>2]|0;
 $greenMask = $23;
 $24 = ((($5)) + 56|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = HEAP32[$2>>2]|0;
 $27 = ((($5)) + 1088|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = Math_imul($26, $28)|0;
 $30 = (($25) + ($29<<2)|0);
 $31 = HEAP32[$1>>2]|0;
 $32 = (($30) + ($31<<2)|0);
 $p = $32;
 while(1) {
  $33 = HEAP32[$4>>2]|0;
  $34 = (($33) + -1)|0;
  HEAP32[$4>>2] = $34;
  $35 = ($33|0)!=(0);
  if (!($35)) {
   break;
  }
  $i = 0;
  while(1) {
   $36 = $i;
   $37 = HEAP32[$3>>2]|0;
   $38 = ($36|0)<($37|0);
   if (!($38)) {
    break;
   }
   $39 = $i;
   $40 = $p;
   $41 = (($40) + ($39<<2)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = $redBlueMask;
   $44 = $42 & $43;
   $45 = $44 >>> 1;
   $46 = $redBlueMask;
   $47 = $45 & $46;
   $color = $47;
   $48 = $i;
   $49 = $p;
   $50 = (($49) + ($48<<2)|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = $greenMask;
   $53 = $51 & $52;
   $54 = $53 >>> 1;
   $55 = $greenMask;
   $56 = $54 & $55;
   $57 = $color;
   $58 = $57 | $56;
   $color = $58;
   $59 = $color;
   $60 = $i;
   $61 = $p;
   $62 = (($61) + ($60<<2)|0);
   HEAP32[$62>>2] = $59;
   $63 = $i;
   $64 = (($63) + 1)|0;
   $i = $64;
  }
  $65 = ((($5)) + 1088|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = $p;
  $68 = (($67) + ($66<<2)|0);
  $p = $68;
 }
 STACKTOP = sp;return;
}
function __ZN14SystemStub_SDL12updateScreenEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dst = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 44|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_SDL_LockSurface(($3|0))|0);
 $5 = ($4|0)==(0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $y = 0;
 while(1) {
  $6 = $y;
  $7 = ((($1)) + 1092|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($6|0)<($8|0);
  $10 = ((($1)) + 44|0);
  $11 = HEAP32[$10>>2]|0;
  if (!($9)) {
   break;
  }
  $12 = ((($11)) + 20|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $y;
  $15 = ((($1)) + 44|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($16)) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = Math_imul($14, $18)|0;
  $20 = (($13) + ($19)|0);
  $dst = $20;
  $21 = $dst;
  $22 = ((($1)) + 56|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $y;
  $25 = ((($1)) + 1088|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = Math_imul($24, $26)|0;
  $28 = (($23) + ($27<<2)|0);
  $29 = ((($1)) + 1088|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $30<<2;
  _memcpy(($21|0),($28|0),($31|0))|0;
  $32 = $y;
  $33 = (($32) + 1)|0;
  $y = $33;
 }
 _SDL_UnlockSurface(($11|0));
 $34 = ((($1)) + 44|0);
 $35 = HEAP32[$34>>2]|0;
 _SDL_UpdateRect(($35|0),0,0,0,0);
 STACKTOP = sp;return;
}
function __ZN14SystemStub_SDL6setYUVEbii($this,$flag,$w,$h) {
 $this = $this|0;
 $flag = $flag|0;
 $w = $w|0;
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $4 = $flag&1;
 $1 = $4;
 $2 = $w;
 $3 = $h;
 $5 = $0;
 $6 = $1;
 $7 = $6&1;
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = $2;
 $9 = ((($5)) + 1096|0);
 HEAP32[$9>>2] = $8;
 $10 = $2;
 $11 = ((($5)) + 1100|0);
 HEAP32[$11>>2] = $10;
 STACKTOP = sp;return;
}
function __ZN14SystemStub_SDL7lockYUVEPi($this,$pitch) {
 $this = $this|0;
 $pitch = $pitch|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $pitch;
 STACKTOP = sp;return (0|0);
}
function __ZN14SystemStub_SDL9unlockYUVEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN14SystemStub_SDL13processEventsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ev = 0, $paused = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $paused = sp + 52|0;
 $ev = sp;
 $0 = $this;
 $1 = $0;
 HEAP8[$paused>>0] = 0;
 while(1) {
  $2 = ((($1)) + 4|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = $3&1;
  $5 = $4 ^ 1;
  if (!($5)) {
   label = 7;
   break;
  }
  while(1) {
   $6 = (_SDL_PollEvent(($ev|0))|0);
   $7 = ($6|0)!=(0);
   if (!($7)) {
    break;
   }
   __ZN14SystemStub_SDL11handleEventERK9SDL_EventRb($1,$ev,$paused);
  }
  $8 = HEAP8[$paused>>0]|0;
  $9 = $8&1;
  if (!($9)) {
   label = 7;
   break;
  }
  _SDL_Delay(100);
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return;
 }
}
function __ZN14SystemStub_SDL11handleEventERK9SDL_EventRb($this,$ev,$paused) {
 $this = $this|0;
 $ev = $ev|0;
 $paused = $paused|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $switch$split12D = 0;
 var $switch$split2D = 0, $switch$split42D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $ev;
 $2 = $paused;
 $3 = $0;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $switch$split2D = ($5|0)<(1024);
 if (!($switch$split2D)) {
  $switch$split12D = ($5|0)<(1026);
  if ($switch$split12D) {
   switch ($5|0) {
   case 1025:  {
    $121 = $1;
    $122 = ((($121)) + 16|0);
    $123 = HEAP8[$122>>0]|0;
    $124 = $123&255;
    $125 = ($124|0)==(1);
    if ($125) {
     $126 = ((($3)) + 8|0);
     $127 = ((($126)) + 7|0);
     HEAP8[$127>>0] = 1;
    } else {
     $128 = $1;
     $129 = ((($128)) + 16|0);
     $130 = HEAP8[$129>>0]|0;
     $131 = $130&255;
     $132 = ($131|0)==(3);
     if ($132) {
      $133 = ((($3)) + 8|0);
      $134 = ((($133)) + 8|0);
      HEAP8[$134>>0] = 1;
     }
    }
    $135 = $1;
    $136 = ((($135)) + 20|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = ((($3)) + 8|0);
    $139 = ((($138)) + 12|0);
    HEAP32[$139>>2] = $137;
    $140 = $1;
    $141 = ((($140)) + 24|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = ((($3)) + 8|0);
    $144 = ((($143)) + 16|0);
    HEAP32[$144>>2] = $142;
    STACKTOP = sp;return;
    break;
   }
   case 1024:  {
    $169 = $1;
    $170 = ((($169)) + 20|0);
    $171 = HEAP32[$170>>2]|0;
    $172 = ((($3)) + 8|0);
    $173 = ((($172)) + 12|0);
    HEAP32[$173>>2] = $171;
    $174 = $1;
    $175 = ((($174)) + 24|0);
    $176 = HEAP32[$175>>2]|0;
    $177 = ((($3)) + 8|0);
    $178 = ((($177)) + 16|0);
    HEAP32[$178>>2] = $176;
    STACKTOP = sp;return;
    break;
   }
   default: {
    STACKTOP = sp;return;
   }
   }
  }
  $switch$split42D = ($5|0)<(28672);
  if (!($switch$split42D)) {
   switch ($5|0) {
   case 28672:  {
    break;
   }
   default: {
    STACKTOP = sp;return;
   }
   }
   $7 = $1;
   $8 = ((($7)) + 5|0);
   $9 = HEAP8[$8>>0]|0;
   $10 = $9&255;
   $11 = $10 & 2;
   $12 = ($11|0)!=(0);
   if (!($12)) {
    STACKTOP = sp;return;
   }
   $13 = $1;
   $14 = ((($13)) + 4|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = $15&255;
   $17 = ($16|0)==(0);
   $18 = $2;
   $19 = $17&1;
   HEAP8[$18>>0] = $19;
   $20 = $2;
   $21 = HEAP8[$20>>0]|0;
   $22 = $21&1;
   $23 = $22 ? 1 : 0;
   _SDL_PauseAudio(($23|0));
   STACKTOP = sp;return;
  }
  switch ($5|0) {
  case 1026:  {
   break;
  }
  default: {
   STACKTOP = sp;return;
  }
  }
  $145 = $1;
  $146 = ((($145)) + 16|0);
  $147 = HEAP8[$146>>0]|0;
  $148 = $147&255;
  $149 = ($148|0)==(1);
  if ($149) {
   $150 = ((($3)) + 8|0);
   $151 = ((($150)) + 7|0);
   HEAP8[$151>>0] = 0;
  } else {
   $152 = $1;
   $153 = ((($152)) + 16|0);
   $154 = HEAP8[$153>>0]|0;
   $155 = $154&255;
   $156 = ($155|0)==(3);
   if ($156) {
    $157 = ((($3)) + 8|0);
    $158 = ((($157)) + 8|0);
    HEAP8[$158>>0] = 0;
   }
  }
  $159 = $1;
  $160 = ((($159)) + 20|0);
  $161 = HEAP32[$160>>2]|0;
  $162 = ((($3)) + 8|0);
  $163 = ((($162)) + 12|0);
  HEAP32[$163>>2] = $161;
  $164 = $1;
  $165 = ((($164)) + 24|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = ((($3)) + 8|0);
  $168 = ((($167)) + 16|0);
  HEAP32[$168>>2] = $166;
  STACKTOP = sp;return;
 }
 switch ($5|0) {
 case 256:  {
  $6 = ((($3)) + 4|0);
  HEAP8[$6>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 case 769:  {
  $24 = $1;
  $25 = ((($24)) + 12|0);
  $26 = ((($25)) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  do {
   switch ($27|0) {
   case 1104:  {
    $28 = ((($3)) + 8|0);
    $29 = HEAP8[$28>>0]|0;
    $30 = $29&255;
    $31 = $30 & -5;
    $32 = $31&255;
    HEAP8[$28>>0] = $32;
    STACKTOP = sp;return;
    break;
   }
   case 1103:  {
    $33 = ((($3)) + 8|0);
    $34 = HEAP8[$33>>0]|0;
    $35 = $34&255;
    $36 = $35 & -9;
    $37 = $36&255;
    HEAP8[$33>>0] = $37;
    STACKTOP = sp;return;
    break;
   }
   case 1106:  {
    $38 = ((($3)) + 8|0);
    $39 = HEAP8[$38>>0]|0;
    $40 = $39&255;
    $41 = $40 & -2;
    $42 = $41&255;
    HEAP8[$38>>0] = $42;
    STACKTOP = sp;return;
    break;
   }
   case 1105:  {
    $43 = ((($3)) + 8|0);
    $44 = HEAP8[$43>>0]|0;
    $45 = $44&255;
    $46 = $45 & -3;
    $47 = $46&255;
    HEAP8[$43>>0] = $47;
    STACKTOP = sp;return;
    break;
   }
   case 13:  {
    $48 = ((($3)) + 8|0);
    $49 = ((($48)) + 1|0);
    HEAP8[$49>>0] = 0;
    STACKTOP = sp;return;
    break;
   }
   case 32:  {
    $50 = ((($3)) + 8|0);
    $51 = ((($50)) + 2|0);
    HEAP8[$51>>0] = 0;
    STACKTOP = sp;return;
    break;
   }
   case 1249: case 1253:  {
    $52 = ((($3)) + 8|0);
    $53 = ((($52)) + 3|0);
    HEAP8[$53>>0] = 0;
    STACKTOP = sp;return;
    break;
   }
   case 1248: case 1252:  {
    $54 = ((($3)) + 8|0);
    $55 = ((($54)) + 4|0);
    HEAP8[$55>>0] = 0;
    STACKTOP = sp;return;
    break;
   }
   case 9:  {
    $56 = ((($3)) + 8|0);
    $57 = ((($56)) + 5|0);
    HEAP8[$57>>0] = 0;
    STACKTOP = sp;return;
    break;
   }
   case 27:  {
    $58 = ((($3)) + 8|0);
    $59 = ((($58)) + 6|0);
    HEAP8[$59>>0] = 0;
    STACKTOP = sp;return;
    break;
   }
   default: {
    STACKTOP = sp;return;
   }
   }
  } while(0);
  break;
 }
 case 768:  {
  $60 = $1;
  $61 = ((($60)) + 12|0);
  $62 = ((($61)) + 4|0);
  $63 = HEAP32[$62>>2]|0;
  do {
   switch ($63|0) {
   case 1104:  {
    $64 = ((($3)) + 8|0);
    $65 = HEAP8[$64>>0]|0;
    $66 = $65&255;
    $67 = $66 | 4;
    $68 = $67&255;
    HEAP8[$64>>0] = $68;
    STACKTOP = sp;return;
    break;
   }
   case 1103:  {
    $69 = ((($3)) + 8|0);
    $70 = HEAP8[$69>>0]|0;
    $71 = $70&255;
    $72 = $71 | 8;
    $73 = $72&255;
    HEAP8[$69>>0] = $73;
    STACKTOP = sp;return;
    break;
   }
   case 1106:  {
    $74 = ((($3)) + 8|0);
    $75 = HEAP8[$74>>0]|0;
    $76 = $75&255;
    $77 = $76 | 1;
    $78 = $77&255;
    HEAP8[$74>>0] = $78;
    STACKTOP = sp;return;
    break;
   }
   case 1105:  {
    $79 = ((($3)) + 8|0);
    $80 = HEAP8[$79>>0]|0;
    $81 = $80&255;
    $82 = $81 | 2;
    $83 = $82&255;
    HEAP8[$79>>0] = $83;
    STACKTOP = sp;return;
    break;
   }
   case 13:  {
    $84 = ((($3)) + 8|0);
    $85 = ((($84)) + 1|0);
    HEAP8[$85>>0] = 1;
    STACKTOP = sp;return;
    break;
   }
   case 32:  {
    $86 = ((($3)) + 8|0);
    $87 = ((($86)) + 2|0);
    HEAP8[$87>>0] = 1;
    STACKTOP = sp;return;
    break;
   }
   case 1249: case 1253:  {
    $88 = ((($3)) + 8|0);
    $89 = ((($88)) + 3|0);
    HEAP8[$89>>0] = 1;
    STACKTOP = sp;return;
    break;
   }
   case 1248: case 1252:  {
    $90 = ((($3)) + 8|0);
    $91 = ((($90)) + 4|0);
    HEAP8[$91>>0] = 1;
    STACKTOP = sp;return;
    break;
   }
   case 9:  {
    $92 = ((($3)) + 8|0);
    $93 = ((($92)) + 5|0);
    HEAP8[$93>>0] = 1;
    STACKTOP = sp;return;
    break;
   }
   case 27:  {
    $94 = ((($3)) + 8|0);
    $95 = ((($94)) + 6|0);
    HEAP8[$95>>0] = 1;
    STACKTOP = sp;return;
    break;
   }
   case 102:  {
    $96 = ((($3)) + 8|0);
    $97 = ((($96)) + 28|0);
    $98 = HEAP8[$97>>0]|0;
    $99 = $98&1;
    $100 = $99 ^ 1;
    $101 = ((($3)) + 8|0);
    $102 = ((($101)) + 28|0);
    $103 = $100&1;
    HEAP8[$102>>0] = $103;
    STACKTOP = sp;return;
    break;
   }
   case 115:  {
    $104 = ((($3)) + 8|0);
    $105 = ((($104)) + 20|0);
    HEAP8[$105>>0] = 1;
    STACKTOP = sp;return;
    break;
   }
   case 108:  {
    $106 = ((($3)) + 8|0);
    $107 = ((($106)) + 21|0);
    HEAP8[$107>>0] = 1;
    STACKTOP = sp;return;
    break;
   }
   case 119:  {
    $108 = ((($3)) + 1104|0);
    $109 = HEAP8[$108>>0]|0;
    $110 = $109&1;
    $111 = $110 ^ 1;
    $112 = ((($3)) + 1104|0);
    $113 = $111&1;
    HEAP8[$112>>0] = $113;
    $114 = ((($3)) + 1104|0);
    $115 = HEAP8[$114>>0]|0;
    $116 = $115&1;
    __ZN14SystemStub_SDL13setFullscreenEb($3,$116);
    STACKTOP = sp;return;
    break;
   }
   case 1099: case 1111:  {
    $117 = ((($3)) + 8|0);
    $118 = ((($117)) + 24|0);
    HEAP32[$118>>2] = 1;
    STACKTOP = sp;return;
    break;
   }
   case 1102: case 1110:  {
    $119 = ((($3)) + 8|0);
    $120 = ((($119)) + 24|0);
    HEAP32[$120>>2] = -1;
    STACKTOP = sp;return;
    break;
   }
   default: {
    STACKTOP = sp;return;
   }
   }
  } while(0);
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function __ZN14SystemStub_SDL5sleepEi($this,$duration) {
 $this = $this|0;
 $duration = $duration|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $duration;
 $2 = $1;
 _SDL_Delay(($2|0));
 STACKTOP = sp;return;
}
function __ZN14SystemStub_SDL12getTimeStampEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (_SDL_GetTicks()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN14SystemStub_SDL9lockAudioEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 _SDL_LockAudio();
 STACKTOP = sp;return;
}
function __ZN14SystemStub_SDL11unlockAudioEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 _SDL_UnlockAudio();
 STACKTOP = sp;return;
}
function __ZN14SystemStub_SDL10startAudioEPFvPvPhiES0_($this,$callback,$param) {
 $this = $this|0;
 $callback = $callback|0;
 $param = $param|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $desired = 0, $obtained = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $desired = sp + 32|0;
 $obtained = sp + 8|0;
 $0 = $this;
 $1 = $callback;
 $2 = $param;
 $3 = $0;
 ;HEAP32[$desired>>2]=0|0;HEAP32[$desired+4>>2]=0|0;HEAP32[$desired+8>>2]=0|0;HEAP32[$desired+12>>2]=0|0;HEAP32[$desired+16>>2]=0|0;HEAP32[$desired+20>>2]=0|0;
 HEAP32[$desired>>2] = 22050;
 $4 = ((($desired)) + 4|0);
 HEAP16[$4>>1] = -32752;
 $5 = ((($desired)) + 6|0);
 HEAP8[$5>>0] = 2;
 $6 = ((($desired)) + 8|0);
 HEAP16[$6>>1] = 4096;
 $7 = $1;
 $8 = ((($desired)) + 16|0);
 HEAP32[$8>>2] = $7;
 $9 = $2;
 $10 = ((($desired)) + 20|0);
 HEAP32[$10>>2] = $9;
 $11 = (_SDL_OpenAudio(($desired|0),($obtained|0))|0);
 $12 = ($11|0)==(0);
 if ($12) {
  $13 = HEAP32[$obtained>>2]|0;
  $14 = ((($3)) + 1108|0);
  HEAP32[$14>>2] = $13;
  _SDL_PauseAudio(0);
  STACKTOP = sp;return;
 } else {
  __Z5errorPKcz(30124,$vararg_buffer);
  STACKTOP = sp;return;
 }
}
function __ZN14SystemStub_SDL9stopAudioEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 _SDL_CloseAudio();
 STACKTOP = sp;return;
}
function __ZN14SystemStub_SDL19getOutputSampleRateEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 1108|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN14SystemStub_SDLC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __ZN10SystemStubC2Ev($3);
 $4 = 1680;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 44|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($3)) + 48|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($3)) + 52|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($3)) + 56|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($3)) + 60|0);
 HEAP32[$9>>2] = 0;
 __THREW__ = 0;
 $10 = (invoke_ii(234,($3|0))|0);
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if (!($12)) {
  $13 = ((($3)) + 40|0);
  HEAP32[$13>>2] = $10;
  STACKTOP = sp;return;
 }
 $14 = ___cxa_find_matching_catch()|0;
 $15 = tempRet0;
 $1 = $14;
 $2 = $15;
 __THREW__ = 0;
 invoke_vi(134,($3|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $20 = ___cxa_find_matching_catch(0|0)|0;
  $21 = tempRet0;
  ___clang_call_terminate($20);
  // unreachable;
 } else {
  $18 = $1;
  $19 = $2;
  ___resumeException($18|0);
  // unreachable;
 }
}
function __ZL12eventHandlerPvP9SDL_Event($userdata,$ev) {
 $userdata = $userdata|0;
 $ev = $ev|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $paused = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $paused = sp + 8|0;
 $0 = $userdata;
 $1 = $ev;
 $2 = $0;
 $3 = $1;
 __ZN14SystemStub_SDL11handleEventERK9SDL_EventRb($2,$3,$paused);
 STACKTOP = sp;return 0;
}
function __ZL8clipRectiiRiS_S_S_($screenW,$screenH,$x,$y,$w,$h) {
 $screenW = $screenW|0;
 $screenH = $screenH|0;
 $x = $x|0;
 $y = $y|0;
 $w = $w|0;
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $screenW;
 $1 = $screenH;
 $2 = $x;
 $3 = $y;
 $4 = $w;
 $5 = $h;
 $6 = $2;
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)<(0);
 if ($8) {
  $9 = $2;
  HEAP32[$9>>2] = 0;
 }
 $10 = $2;
 $11 = HEAP32[$10>>2]|0;
 $12 = $4;
 $13 = HEAP32[$12>>2]|0;
 $14 = (($11) + ($13))|0;
 $15 = $0;
 $16 = ($14|0)>($15|0);
 if ($16) {
  $17 = $0;
  $18 = $2;
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) - ($19))|0;
  $21 = $4;
  HEAP32[$21>>2] = $20;
 }
 $22 = $3;
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)<(0);
 if ($24) {
  $25 = $3;
  HEAP32[$25>>2] = 0;
 }
 $26 = $3;
 $27 = HEAP32[$26>>2]|0;
 $28 = $5;
 $29 = HEAP32[$28>>2]|0;
 $30 = (($27) + ($29))|0;
 $31 = $1;
 $32 = ($30|0)>($31|0);
 if ($32) {
  $33 = $1;
  $34 = $3;
  $35 = HEAP32[$34>>2]|0;
  $36 = (($33) - ($35))|0;
  $37 = $5;
  HEAP32[$37>>2] = $36;
 }
 $38 = $4;
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)>(0);
 if (!($40)) {
  $44 = 0;
  STACKTOP = sp;return ($44|0);
 }
 $41 = $5;
 $42 = HEAP32[$41>>2]|0;
 $43 = ($42|0)>(0);
 $44 = $43;
 STACKTOP = sp;return ($44|0);
}
function __ZN14SystemStub_SDLD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 1680;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 40|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  __ZN10SystemStubD2Ev($3);
  STACKTOP = sp;return;
 }
 $8 = HEAP32[$6>>2]|0;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __THREW__ = 0;
 invoke_vi($10|0,($6|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if (!($12)) {
  __ZN10SystemStubD2Ev($3);
  STACKTOP = sp;return;
 }
 $13 = ___cxa_find_matching_catch()|0;
 $14 = tempRet0;
 $1 = $13;
 $2 = $14;
 __THREW__ = 0;
 invoke_vi(134,($3|0));
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if ($16) {
  $19 = ___cxa_find_matching_catch(0|0)|0;
  $20 = tempRet0;
  ___clang_call_terminate($19);
  // unreachable;
 } else {
  $17 = $1;
  $18 = $2;
  ___resumeException($17|0);
  // unreachable;
 }
}
function __ZN14SystemStub_SDLD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(113,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __ZN14SystemStub_SDL8getMixerEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN10SystemStubD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN10SystemStubC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 1772;
 HEAP32[$1>>2] = $2;
 STACKTOP = sp;return;
}
function __ZN10SystemStubD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(134,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  __ZdlPv($3);
  $8 = $1;
  $9 = $2;
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
}
function __Z5debugtPKcz($cm,$msg,$varargs) {
 $cm = $cm|0;
 $msg = $msg|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $va = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $buf = sp + 32|0;
 $va = sp + 8|0;
 $0 = $cm;
 $1 = $msg;
 $2 = $0;
 $3 = $2&65535;
 $4 = HEAP16[19248>>1]|0;
 $5 = $4&65535;
 $6 = $3 & $5;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 HEAP32[$va>>2] = $varargs;
 $8 = $1;
 (_vsprintf($buf,$8,$va)|0);
 HEAP32[$vararg_buffer>>2] = $buf;
 (_printf(30194,$vararg_buffer)|0);
 $9 = HEAP32[10164>>2]|0;
 (_fflush($9)|0);
 STACKTOP = sp;return;
}
function __Z5errorPKcz($msg,$varargs) {
 $msg = $msg|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $buf = 0, $va = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $buf = sp + 32|0;
 $va = sp + 8|0;
 $0 = $msg;
 HEAP32[$va>>2] = $varargs;
 $1 = $0;
 (_vsprintf($buf,$1,$va)|0);
 $2 = HEAP32[10172>>2]|0;
 HEAP32[$vararg_buffer>>2] = $buf;
 (_fprintf($2,30198,$vararg_buffer)|0);
 $3 = HEAP32[10172>>2]|0;
 (_fflush($3)|0);
 _exit(-1);
 // unreachable;
}
function __Z7warningPKcz($msg,$varargs) {
 $msg = $msg|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $buf = 0, $va = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $buf = sp + 32|0;
 $va = sp + 8|0;
 $0 = $msg;
 HEAP32[$va>>2] = $varargs;
 $1 = $0;
 (_vsprintf($buf,$1,$va)|0);
 $2 = HEAP32[10172>>2]|0;
 HEAP32[$vararg_buffer>>2] = $buf;
 (_fprintf($2,30210,$vararg_buffer)|0);
 $3 = HEAP32[10172>>2]|0;
 (_fflush($3)|0);
 STACKTOP = sp;return;
}
function __ZN4Game18win16_sndPlaySoundEiPv($this,$op,$data) {
 $this = $this|0;
 $op = $op|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $f = 0, $fileName = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $this;
 $2 = $op;
 $3 = $data;
 $4 = $1;
 $5 = $2;
 HEAP32[$vararg_buffer>>2] = $5;
 __Z5debugtPKcz(64,30224,$vararg_buffer);
 $6 = $2;
 L1: do {
  switch ($6|0) {
  case 22:  {
   $7 = ((($4)) + 28|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $10 = ((($9)) + 24|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ((($4)) + 48|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (FUNCTION_TABLE_iii[$11 & 255]($8,$13)|0);
   if (!($14)) {
    $0 = 1;
    $39 = $0;
    STACKTOP = sp;return ($39|0);
   }
   break;
  }
  case 3:  {
   $15 = $3;
   $fileName = $15;
   $16 = ((($4)) + 16|0);
   $17 = $fileName;
   $18 = (__ZN10FileSystem8openFileEPKcb($16,$17,0)|0);
   $f = $18;
   $19 = $f;
   $20 = ($19|0)!=(0|0);
   if ($20) {
    $21 = ((($4)) + 28|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($23)) + 16|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = $f;
    $27 = ((($4)) + 48|0);
    FUNCTION_TABLE_viii[$25 & 255]($22,$26,$27);
    $28 = ((($4)) + 16|0);
    $29 = $f;
    __ZN10FileSystem9closeFileEP4File($28,$29);
    break L1;
   } else {
    $30 = $fileName;
    HEAP32[$vararg_buffer1>>2] = $30;
    __Z7warningPKcz(30248,$vararg_buffer1);
    break L1;
   }
   break;
  }
  case 7: case 6:  {
   $31 = ((($4)) + 28|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($33)) + 28|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ((($4)) + 48|0);
   $37 = HEAP32[$36>>2]|0;
   FUNCTION_TABLE_vii[$35 & 255]($32,$37);
   break;
  }
  default: {
   $38 = $2;
   HEAP32[$vararg_buffer4>>2] = $38;
   __Z7warningPKcz(30277,$vararg_buffer4);
  }
  }
 } while(0);
 $0 = 0;
 $39 = $0;
 STACKTOP = sp;return ($39|0);
}
function __ZN4Game17win16_stretchBitsEP11SceneBitmapiiiiiiii($this,$bits,$srcHeight,$srcWidth,$srcY,$srcX,$dstHeight,$dstWidth,$dstY,$dstX) {
 $this = $this|0;
 $bits = $bits|0;
 $srcHeight = $srcHeight|0;
 $srcWidth = $srcWidth|0;
 $srcY = $srcY|0;
 $srcX = $srcX|0;
 $dstHeight = $dstHeight|0;
 $dstWidth = $dstWidth|0;
 $dstY = $dstY|0;
 $dstX = $dstX|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $src = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $bits;
 $2 = $srcHeight;
 $3 = $srcWidth;
 $4 = $srcY;
 $5 = $srcX;
 $6 = $dstHeight;
 $7 = $dstWidth;
 $8 = $dstY;
 $9 = $dstX;
 $10 = $0;
 $11 = $5;
 $12 = $4;
 $13 = $3;
 $14 = $2;
 HEAP32[$vararg_buffer>>2] = $11;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $12;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $13;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $14;
 __Z5debugtPKcz(64,30315,$vararg_buffer);
 $15 = $3;
 $16 = $7;
 $17 = ($15|0)==($16|0);
 if (!($17)) {
  ___assert_fail((30347|0),(30394|0),43,(30404|0));
  // unreachable;
 }
 $18 = $2;
 $19 = $6;
 $20 = ($18|0)==($19|0);
 if (!($20)) {
  ___assert_fail((30347|0),(30394|0),43,(30404|0));
  // unreachable;
 }
 $21 = $1;
 $22 = ((($21)) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $4;
 $25 = $1;
 $26 = ((($25)) + 4|0);
 $27 = HEAP16[$26>>1]|0;
 $28 = $27&65535;
 $29 = Math_imul($24, $28)|0;
 $30 = (($23) + ($29)|0);
 $31 = $5;
 $32 = (($30) + ($31)|0);
 $src = $32;
 $33 = $9;
 $34 = ($33|0)>=(640);
 if ($34) {
  STACKTOP = sp;return;
 }
 $35 = $9;
 $36 = $7;
 $37 = (($35) + ($36))|0;
 $38 = ($37|0)>(640);
 if ($38) {
  $39 = $9;
  $40 = (640 - ($39))|0;
  $7 = $40;
 }
 $41 = $8;
 $42 = ($41|0)>=(480);
 if ($42) {
  STACKTOP = sp;return;
 }
 $43 = $8;
 $44 = $6;
 $45 = (($43) + ($44))|0;
 $46 = ($45|0)>(480);
 if ($46) {
  $47 = $8;
  $48 = (480 - ($47))|0;
  $6 = $48;
 }
 $49 = ((($10)) + 24|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = HEAP32[$50>>2]|0;
 $52 = ((($51)) + 24|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = $9;
 $55 = $8;
 $56 = $7;
 $57 = $6;
 $58 = $src;
 $59 = $1;
 $60 = ((($59)) + 4|0);
 $61 = HEAP16[$60>>1]|0;
 $62 = $61&65535;
 FUNCTION_TABLE_viiiiiiii[$53 & 127]($50,$54,$55,$56,$57,$58,$62,0);
 STACKTOP = sp;return;
}
function _inflateInit_($strm,$version,$stream_size) {
 $strm = $strm|0;
 $version = $version|0;
 $stream_size = $stream_size|0;
 var $$0$i = 0, $$pre4$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($version|0)==(0|0);
 if ($0) {
  $$0$i = -6;
  return ($$0$i|0);
 }
 $1 = HEAP8[$version>>0]|0;
 $2 = ($1<<24>>24)!=(49);
 $3 = ($stream_size|0)!=(56);
 $or$cond$i = $3 | $2;
 if ($or$cond$i) {
  $$0$i = -6;
  return ($$0$i|0);
 }
 $4 = ($strm|0)==(0|0);
 if ($4) {
  $$0$i = -2;
  return ($$0$i|0);
 }
 $5 = ((($strm)) + 24|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($strm)) + 32|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  HEAP32[$6>>2] = 235;
  $9 = ((($strm)) + 40|0);
  HEAP32[$9>>2] = 0;
  $15 = 235;
 } else {
  $15 = $7;
 }
 $10 = ((($strm)) + 36|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  HEAP32[$10>>2] = 236;
 }
 $13 = ((($strm)) + 40|0);
 $14 = HEAP32[$13>>2]|0;
 $16 = (FUNCTION_TABLE_iiii[$15 & 255]($14,1,7116)|0);
 $17 = ($16|0)==(0|0);
 if ($17) {
  $$0$i = -4;
  return ($$0$i|0);
 }
 $18 = ((($strm)) + 28|0);
 HEAP32[$18>>2] = $16;
 $19 = ((($16)) + 52|0);
 HEAP32[$19>>2] = 0;
 $$pre4$i = ((($16)) + 36|0);
 $20 = ((($16)) + 8|0);
 HEAP32[$20>>2] = 1;
 HEAP32[$$pre4$i>>2] = 15;
 $21 = ((($16)) + 40|0);
 HEAP32[$21>>2] = 0;
 $22 = ((($16)) + 44|0);
 HEAP32[$22>>2] = 0;
 $23 = ((($16)) + 48|0);
 HEAP32[$23>>2] = 0;
 $24 = ((($16)) + 28|0);
 HEAP32[$24>>2] = 0;
 $25 = ((($strm)) + 20|0);
 HEAP32[$25>>2] = 0;
 $26 = ((($strm)) + 8|0);
 HEAP32[$26>>2] = 0;
 HEAP32[$5>>2] = 0;
 $27 = ((($strm)) + 48|0);
 HEAP32[$27>>2] = 1;
 HEAP32[$16>>2] = 0;
 $28 = ((($16)) + 4|0);
 HEAP32[$28>>2] = 0;
 $29 = ((($16)) + 12|0);
 HEAP32[$29>>2] = 0;
 $30 = ((($16)) + 20|0);
 HEAP32[$30>>2] = 32768;
 $31 = ((($16)) + 32|0);
 HEAP32[$31>>2] = 0;
 $32 = ((($16)) + 56|0);
 HEAP32[$32>>2] = 0;
 $33 = ((($16)) + 60|0);
 HEAP32[$33>>2] = 0;
 $34 = ((($16)) + 1328|0);
 $35 = ((($16)) + 108|0);
 HEAP32[$35>>2] = $34;
 $36 = ((($16)) + 80|0);
 HEAP32[$36>>2] = $34;
 $37 = ((($16)) + 76|0);
 HEAP32[$37>>2] = $34;
 $38 = ((($16)) + 7104|0);
 HEAP32[$38>>2] = 1;
 $39 = ((($16)) + 7108|0);
 HEAP32[$39>>2] = -1;
 $$0$i = 0;
 return ($$0$i|0);
}
function _inflate($strm,$flush) {
 $strm = $strm|0;
 $flush = $flush|0;
 var $$0 = 0, $$copy$7 = 0, $$hold$47 = 0, $$lcssa101 = 0, $$lcssa101$in = 0, $$lcssa164 = 0, $$lcssa164$in = 0, $$lcssa166 = 0, $$lcssa168 = 0, $$lcssa168$in = 0, $$lcssa170 = 0, $$lcssa176 = 0, $$lcssa180 = 0, $$lcssa194 = 0, $$lcssa194$in = 0, $$lcssa196 = 0, $$lcssa198 = 0, $$lcssa198$in = 0, $$lcssa200 = 0, $$lcssa206 = 0;
 var $$lcssa210 = 0, $$lcssa2637 = 0, $$lcssa2638 = 0, $$lcssa2639 = 0, $$lcssa2737 = 0, $$lcssa2738 = 0, $$lcssa2739 = 0, $$lcssa2740 = 0, $$lcssa2786 = 0, $$lcssa2789 = 0, $$lcssa2805 = 0, $$lcssa2807 = 0, $$lcssa563$pn = 0, $$lcssa95 = 0, $$pn = 0, $$pn1235 = 0, $$pn1237 = 0, $$pr21$pre = 0, $$pre = 0, $$pre1215 = 0;
 var $$pre1216 = 0, $$pre1217 = 0, $$pre1218 = 0, $$pre1220 = 0, $$pre1223 = 0, $$pre1225 = 0, $$pre1227 = 0, $$pre1229 = 0, $$pre1230 = 0, $$pre1232 = 0, $$pre1233 = 0, $$ret$8 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0;
 var $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0;
 var $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0;
 var $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0;
 var $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0;
 var $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0;
 var $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0;
 var $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0;
 var $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0;
 var $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0;
 var $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0;
 var $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0;
 var $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0;
 var $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0;
 var $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0;
 var $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0;
 var $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0;
 var $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0;
 var $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0;
 var $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0;
 var $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0;
 var $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0;
 var $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0;
 var $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0;
 var $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0;
 var $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0;
 var $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0;
 var $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0;
 var $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0;
 var $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bits$0 = 0, $bits$0$be = 0, $bits$0$lcssa2902 = 0, $bits$1$lcssa = 0;
 var $bits$10 = 0, $bits$11 = 0, $bits$12$lcssa = 0, $bits$12770 = 0, $bits$13 = 0, $bits$14714 = 0, $bits$15 = 0, $bits$15$lcssa = 0, $bits$16 = 0, $bits$17 = 0, $bits$1780 = 0, $bits$18$lcssa = 0, $bits$18$lcssa$lcssa = 0, $bits$18723 = 0, $bits$19$lcssa = 0, $bits$19703 = 0, $bits$2$lcssa = 0, $bits$20 = 0, $bits$21 = 0, $bits$22$lcssa = 0;
 var $bits$22519 = 0, $bits$23$lcssa = 0, $bits$23$ph1249 = 0, $bits$23539 = 0, $bits$24$lcssa = 0, $bits$24529 = 0, $bits$25$be = 0, $bits$25$be$lcssa = 0, $bits$25$lcssa1251 = 0, $bits$25$ph = 0, $bits$25601 = 0, $bits$26$lcssa = 0, $bits$26553 = 0, $bits$27$lcssa = 0, $bits$2733 = 0, $bits$27580 = 0, $bits$28$lcssa = 0, $bits$28570 = 0, $bits$29$lcssa = 0, $bits$29590 = 0;
 var $bits$30 = 0, $bits$30$lcssa = 0, $bits$32 = 0, $bits$33 = 0, $bits$34$lcssa = 0, $bits$34612 = 0, $bits$35$lcssa = 0, $bits$35634 = 0, $bits$36 = 0, $bits$37 = 0, $bits$3743 = 0, $bits$38$lcssa = 0, $bits$38647 = 0, $bits$39 = 0, $bits$40$lcssa = 0, $bits$40$ph = 0, $bits$40658 = 0, $bits$41$lcssa = 0, $bits$41679 = 0, $bits$42 = 0;
 var $bits$43 = 0, $bits$44$lcssa = 0, $bits$44692 = 0, $bits$45 = 0, $bits$46 = 0, $bits$47$lcssa = 0, $bits$47502 = 0, $bits$4752 = 0, $bits$48 = 0, $bits$49 = 0, $bits$5 = 0, $bits$50$lcssa = 0, $bits$50509 = 0, $bits$51 = 0, $bits$53 = 0, $bits$6761 = 0, $bits$7 = 0, $bits$8 = 0, $bits$9 = 0, $copy$1 = 0;
 var $copy$10 = 0, $copy$2 = 0, $copy$4 = 0, $copy$5 = 0, $copy$7 = 0, $copy$8 = 0, $exitcond = 0, $flush$off = 0, $from$0 = 0, $from$1 = 0, $from$2 = 0, $have$0 = 0, $have$0$be = 0, $have$0$lcssa2815 = 0, $have$1$lcssa = 0, $have$10 = 0, $have$11 = 0, $have$12 = 0, $have$13 = 0, $have$14 = 0;
 var $have$15 = 0, $have$16$lcssa = 0, $have$16768 = 0, $have$17 = 0, $have$1778 = 0, $have$18$lcssa = 0, $have$18712 = 0, $have$19 = 0, $have$19$lcssa = 0, $have$2$lcssa = 0, $have$20 = 0, $have$21 = 0, $have$22$lcssa = 0, $have$22$lcssa$lcssa = 0, $have$22721 = 0, $have$23$lcssa = 0, $have$23701 = 0, $have$24 = 0, $have$25 = 0, $have$25$ = 0;
 var $have$26$lcssa = 0, $have$26517 = 0, $have$27$lcssa = 0, $have$27$ph1247 = 0, $have$2731 = 0, $have$27537 = 0, $have$28$lcssa = 0, $have$28527 = 0, $have$29$be = 0, $have$29$be$lcssa = 0, $have$29$lcssa1253 = 0, $have$29$ph = 0, $have$29599 = 0, $have$3$lcssa = 0, $have$30$lcssa = 0, $have$30551 = 0, $have$31$lcssa = 0, $have$31$lcssa$lcssa = 0, $have$31578 = 0, $have$32$lcssa = 0;
 var $have$32568 = 0, $have$33$lcssa = 0, $have$33588 = 0, $have$34 = 0, $have$34$lcssa = 0, $have$36 = 0, $have$37 = 0, $have$3741 = 0, $have$38$lcssa = 0, $have$38610 = 0, $have$39$lcssa = 0, $have$39632 = 0, $have$4$lcssa = 0, $have$40 = 0, $have$41 = 0, $have$42$lcssa = 0, $have$42645 = 0, $have$43 = 0, $have$44$lcssa = 0, $have$44$ph = 0;
 var $have$44656 = 0, $have$45$lcssa = 0, $have$45677 = 0, $have$46 = 0, $have$47 = 0, $have$4750 = 0, $have$48$lcssa = 0, $have$48690 = 0, $have$49 = 0, $have$5 = 0, $have$50 = 0, $have$51$lcssa = 0, $have$51500 = 0, $have$52 = 0, $have$53 = 0, $have$54$lcssa = 0, $have$54507 = 0, $have$55 = 0, $have$57 = 0, $have$6$lcssa = 0;
 var $have$6759 = 0, $have$7 = 0, $have$8 = 0, $have$8$ = 0, $have$9 = 0, $hbuf = 0, $here$sroa$0$0 = 0, $here$sroa$0$1 = 0, $here$sroa$16$0 = 0, $here$sroa$16$1 = 0, $here$sroa$40$0 = 0, $here$sroa$40$1 = 0, $hold$0 = 0, $hold$0$be = 0, $hold$0$lcssa2873 = 0, $hold$1$lcssa = 0, $hold$10 = 0, $hold$11 = 0, $hold$12$lcssa = 0, $hold$12769 = 0;
 var $hold$13 = 0, $hold$14$lcssa = 0, $hold$14713 = 0, $hold$15 = 0, $hold$15$lcssa = 0, $hold$16 = 0, $hold$17 = 0, $hold$1779 = 0, $hold$18$lcssa = 0, $hold$18$lcssa$lcssa = 0, $hold$18722 = 0, $hold$19$lcssa = 0, $hold$19702 = 0, $hold$20 = 0, $hold$21 = 0, $hold$22$lcssa = 0, $hold$22518 = 0, $hold$23$lcssa = 0, $hold$23$ph1248 = 0, $hold$23538 = 0;
 var $hold$24$lcssa = 0, $hold$24528 = 0, $hold$25$be = 0, $hold$25$be$lcssa = 0, $hold$25$lcssa1252 = 0, $hold$25$ph = 0, $hold$25600 = 0, $hold$26$lcssa = 0, $hold$26552 = 0, $hold$27$lcssa = 0, $hold$2732 = 0, $hold$27579 = 0, $hold$28$lcssa = 0, $hold$28569 = 0, $hold$29$lcssa = 0, $hold$29589 = 0, $hold$3$lcssa = 0, $hold$30 = 0, $hold$30$lcssa = 0, $hold$32 = 0;
 var $hold$33 = 0, $hold$34$lcssa = 0, $hold$34611 = 0, $hold$35$lcssa = 0, $hold$35633 = 0, $hold$36 = 0, $hold$37 = 0, $hold$3742 = 0, $hold$38$lcssa = 0, $hold$38646 = 0, $hold$39 = 0, $hold$4$lcssa = 0, $hold$40$lcssa = 0, $hold$40$ph = 0, $hold$40657 = 0, $hold$41$lcssa = 0, $hold$41678 = 0, $hold$42 = 0, $hold$43 = 0, $hold$44$lcssa = 0;
 var $hold$44691 = 0, $hold$45 = 0, $hold$46 = 0, $hold$47$lcssa = 0, $hold$47501 = 0, $hold$4751 = 0, $hold$48 = 0, $hold$49 = 0, $hold$5 = 0, $hold$50$lcssa = 0, $hold$50508 = 0, $hold$51 = 0, $hold$53 = 0, $hold$6$lcssa = 0, $hold$6760 = 0, $hold$7 = 0, $hold$8 = 0, $hold$9 = 0, $left$0 = 0, $left$0$be = 0;
 var $left$0$copy$8 = 0, $left$0$lcssa2844 = 0, $left$0$lcssa2847 = 0, $left$0$lcssa2863 = 0, $left$0$lcssa2865 = 0, $len$0 = 0, $next$0 = 0, $next$0$be = 0, $next$0$lcssa2756 = 0, $next$1$lcssa = 0, $next$10 = 0, $next$11 = 0, $next$12 = 0, $next$13 = 0, $next$14 = 0, $next$15 = 0, $next$16$lcssa = 0, $next$16767 = 0, $next$17 = 0, $next$1777 = 0;
 var $next$18$lcssa = 0, $next$18711 = 0, $next$19 = 0, $next$19$lcssa = 0, $next$2$lcssa = 0, $next$20 = 0, $next$21 = 0, $next$22$lcssa = 0, $next$22$lcssa$lcssa = 0, $next$22720 = 0, $next$23$lcssa = 0, $next$23700 = 0, $next$24 = 0, $next$25 = 0, $next$26$lcssa = 0, $next$26516 = 0, $next$27$lcssa = 0, $next$27$ph1246 = 0, $next$2730 = 0, $next$27536 = 0;
 var $next$28$lcssa = 0, $next$28526 = 0, $next$29$be = 0, $next$29$be$lcssa = 0, $next$29$lcssa1254 = 0, $next$29$ph = 0, $next$29598 = 0, $next$3$lcssa = 0, $next$30$lcssa = 0, $next$30550 = 0, $next$31$lcssa = 0, $next$31$lcssa$lcssa = 0, $next$31577 = 0, $next$32$lcssa = 0, $next$32567 = 0, $next$33$lcssa = 0, $next$33587 = 0, $next$34 = 0, $next$34$lcssa = 0, $next$36 = 0;
 var $next$37 = 0, $next$3740 = 0, $next$38$lcssa = 0, $next$38609 = 0, $next$39$lcssa = 0, $next$39631 = 0, $next$4$lcssa = 0, $next$40 = 0, $next$41 = 0, $next$42$lcssa = 0, $next$42644 = 0, $next$43 = 0, $next$44$lcssa = 0, $next$44$ph = 0, $next$44655 = 0, $next$45$lcssa = 0, $next$45676 = 0, $next$46 = 0, $next$47 = 0, $next$4749 = 0;
 var $next$48$lcssa = 0, $next$48689 = 0, $next$49 = 0, $next$5 = 0, $next$50 = 0, $next$51$lcssa = 0, $next$51499 = 0, $next$52 = 0, $next$53 = 0, $next$54$lcssa = 0, $next$54506 = 0, $next$55 = 0, $next$57 = 0, $next$6$lcssa = 0, $next$6758 = 0, $next$7 = 0, $next$8 = 0, $next$9 = 0, $or$cond = 0, $or$cond10 = 0;
 var $or$cond12 = 0, $or$cond14 = 0, $or$cond16 = 0, $or$cond1695 = 0, $or$cond17 = 0, $or$cond18 = 0, $or$cond20 = 0, $or$cond6 = 0, $or$cond8 = 0, $out$0 = 0, $out$0$be = 0, $out$0$lcssa2931 = 0, $out$0$lcssa2952 = 0, $out$1 = 0, $out$2 = 0, $out$2$lcssa = 0, $out$4 = 0, $put$0$be = 0, $put$1 = 0, $ret$0 = 0;
 var $ret$0$be = 0, $ret$0$lcssa2981 = 0, $ret$1$ph = 0, $ret$2 = 0, $ret$3 = 0, $ret$4 = 0, $ret$5$ph = 0, $ret$6 = 0, $ret$7 = 0, $ret$8 = 0, $scevgep1213 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $hbuf = sp;
 $0 = ($strm|0)==(0|0);
 if ($0) {
  $$0 = -2;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = ((($strm)) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = -2;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = ((($strm)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$0 = -2;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = HEAP32[$strm>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $9 = ((($strm)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0);
  if (!($11)) {
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $12 = HEAP32[$2>>2]|0;
 $13 = ($12|0)==(11);
 if ($13) {
  HEAP32[$2>>2] = 12;
  $902 = 12;
 } else {
  $902 = $12;
 }
 $14 = ((($strm)) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($strm)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($2)) + 56|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($2)) + 60|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($2)) + 8|0);
 $23 = ((($2)) + 24|0);
 $24 = ((($hbuf)) + 1|0);
 $25 = ((($2)) + 16|0);
 $26 = ((($2)) + 32|0);
 $27 = ((($strm)) + 24|0);
 $28 = ((($2)) + 36|0);
 $29 = ((($2)) + 20|0);
 $30 = ((($strm)) + 48|0);
 $31 = ((($2)) + 64|0);
 $32 = ((($2)) + 12|0);
 $flush$off = (($flush) + -5)|0;
 $33 = ($flush$off>>>0)<(2);
 $34 = ((($2)) + 4|0);
 $35 = ((($2)) + 76|0);
 $36 = ((($2)) + 84|0);
 $37 = ((($2)) + 80|0);
 $38 = ((($2)) + 88|0);
 $39 = ($flush|0)==(6);
 $40 = ((($2)) + 7108|0);
 $41 = ((($2)) + 72|0);
 $42 = ((($2)) + 7112|0);
 $43 = ((($2)) + 68|0);
 $44 = ((($2)) + 44|0);
 $45 = ((($2)) + 7104|0);
 $46 = ((($2)) + 48|0);
 $47 = ((($2)) + 52|0);
 $48 = ((($2)) + 40|0);
 $49 = ((($strm)) + 20|0);
 $50 = ((($2)) + 28|0);
 $51 = ((($hbuf)) + 2|0);
 $52 = ((($hbuf)) + 3|0);
 $53 = ((($2)) + 104|0);
 $54 = ((($2)) + 96|0);
 $55 = ((($2)) + 100|0);
 $56 = ((($2)) + 624|0);
 $57 = ((($2)) + 1328|0);
 $58 = ((($2)) + 108|0);
 $59 = ((($2)) + 112|0);
 $60 = ((($2)) + 752|0);
 $61 = ((($2)) + 92|0);
 $381 = $5;$62 = $902;$bits$0 = $21;$have$0 = $17;$hold$0 = $19;$left$0 = $15;$next$0 = $7;$out$0 = $15;$ret$0 = 0;
 L17: while(1) {
  L19: do {
   switch ($62|0) {
   case 28:  {
    $848 = $381;$849 = $left$0;$bits$53 = $bits$0;$have$57 = $have$0;$hold$53 = $hold$0;$next$57 = $next$0;$out$4 = $out$0;$ret$8 = 1;
    break L17;
    break;
   }
   case 29:  {
    $$lcssa2786 = $381;$bits$0$lcssa2902 = $bits$0;$have$0$lcssa2815 = $have$0;$hold$0$lcssa2873 = $hold$0;$left$0$lcssa2844 = $left$0;$next$0$lcssa2756 = $next$0;$out$0$lcssa2931 = $out$0;
    label = 281;
    break L17;
    break;
   }
   case 30:  {
    $$0 = -4;
    label = 296;
    break L17;
    break;
   }
   case 0:  {
    $66 = HEAP32[$22>>2]|0;
    $67 = ($66|0)==(0);
    if ($67) {
     HEAP32[$2>>2] = 12;
     $bits$0$be = $bits$0;$have$0$be = $have$0;$hold$0$be = $hold$0;$left$0$be = $left$0;$next$0$be = $next$0;$out$0$be = $out$0;$put$0$be = $381;$ret$0$be = $ret$0;
     break L19;
    }
    $68 = ($bits$0>>>0)<(16);
    if ($68) {
     $bits$1780 = $bits$0;$have$1778 = $have$0;$hold$1779 = $hold$0;$next$1777 = $next$0;
     while(1) {
      $69 = ($have$1778|0)==(0);
      if ($69) {
       $848 = $381;$849 = $left$0;$bits$53 = $bits$1780;$have$57 = 0;$hold$53 = $hold$1779;$next$57 = $next$1777;$out$4 = $out$0;$ret$8 = $ret$0;
       break L17;
      }
      $70 = (($have$1778) + -1)|0;
      $71 = ((($next$1777)) + 1|0);
      $72 = HEAP8[$next$1777>>0]|0;
      $73 = $72&255;
      $74 = $73 << $bits$1780;
      $75 = (($74) + ($hold$1779))|0;
      $76 = (($bits$1780) + 8)|0;
      $77 = ($76>>>0)<(16);
      if ($77) {
       $bits$1780 = $76;$have$1778 = $70;$hold$1779 = $75;$next$1777 = $71;
      } else {
       $bits$1$lcssa = $76;$have$1$lcssa = $70;$hold$1$lcssa = $75;$next$1$lcssa = $71;
       break;
      }
     }
    } else {
     $bits$1$lcssa = $bits$0;$have$1$lcssa = $have$0;$hold$1$lcssa = $hold$0;$next$1$lcssa = $next$0;
    }
    $78 = $66 & 2;
    $79 = ($78|0)!=(0);
    $80 = ($hold$1$lcssa|0)==(35615);
    $or$cond = $80 & $79;
    if ($or$cond) {
     $81 = (_crc32(0,0,0)|0);
     HEAP32[$23>>2] = $81;
     HEAP8[$hbuf>>0] = 31;
     HEAP8[$24>>0] = -117;
     $82 = HEAP32[$23>>2]|0;
     $83 = (_crc32($82,$hbuf,2)|0);
     HEAP32[$23>>2] = $83;
     HEAP32[$2>>2] = 1;
     $bits$0$be = 0;$have$0$be = $have$1$lcssa;$hold$0$be = 0;$left$0$be = $left$0;$next$0$be = $next$1$lcssa;$out$0$be = $out$0;$put$0$be = $381;$ret$0$be = $ret$0;
     break L19;
    }
    HEAP32[$25>>2] = 0;
    $84 = HEAP32[$26>>2]|0;
    $85 = ($84|0)==(0|0);
    if (!($85)) {
     $86 = ((($84)) + 48|0);
     HEAP32[$86>>2] = -1;
    }
    $87 = $66 & 1;
    $88 = ($87|0)==(0);
    if (!($88)) {
     $89 = $hold$1$lcssa << 8;
     $90 = $89 & 65280;
     $91 = $hold$1$lcssa >>> 8;
     $92 = (($90) + ($91))|0;
     $93 = (($92>>>0) % 31)&-1;
     $94 = ($93|0)==(0);
     if ($94) {
      $95 = $hold$1$lcssa & 15;
      $96 = ($95|0)==(8);
      if (!($96)) {
       HEAP32[$27>>2] = 30445;
       HEAP32[$2>>2] = 29;
       $bits$0$be = $bits$1$lcssa;$have$0$be = $have$1$lcssa;$hold$0$be = $hold$1$lcssa;$left$0$be = $left$0;$next$0$be = $next$1$lcssa;$out$0$be = $out$0;$put$0$be = $381;$ret$0$be = $ret$0;
       break L19;
      }
      $97 = $hold$1$lcssa >>> 4;
      $98 = (($bits$1$lcssa) + -4)|0;
      $99 = $97 & 15;
      $100 = (($99) + 8)|0;
      $101 = HEAP32[$28>>2]|0;
      $102 = ($101|0)==(0);
      if ($102) {
       HEAP32[$28>>2] = $100;
      } else {
       $103 = ($100>>>0)>($101>>>0);
       if ($103) {
        HEAP32[$27>>2] = 30472;
        HEAP32[$2>>2] = 29;
        $bits$0$be = $98;$have$0$be = $have$1$lcssa;$hold$0$be = $97;$left$0$be = $left$0;$next$0$be = $next$1$lcssa;$out$0$be = $out$0;$put$0$be = $381;$ret$0$be = $ret$0;
        break L19;
       }
      }
      $104 = 1 << $100;
      HEAP32[$29>>2] = $104;
      $105 = (_adler32(0,0,0)|0);
      HEAP32[$23>>2] = $105;
      HEAP32[$30>>2] = $105;
      $106 = $hold$1$lcssa >>> 12;
      $107 = $106 & 2;
      $108 = $107 ^ 11;
      HEAP32[$2>>2] = $108;
      $bits$0$be = 0;$have$0$be = $have$1$lcssa;$hold$0$be = 0;$left$0$be = $left$0;$next$0$be = $next$1$lcssa;$out$0$be = $out$0;$put$0$be = $381;$ret$0$be = $ret$0;
      break L19;
     }
    }
    HEAP32[$27>>2] = 30422;
    HEAP32[$2>>2] = 29;
    $bits$0$be = $bits$1$lcssa;$have$0$be = $have$1$lcssa;$hold$0$be = $hold$1$lcssa;$left$0$be = $left$0;$next$0$be = $next$1$lcssa;$out$0$be = $out$0;$put$0$be = $381;$ret$0$be = $ret$0;
    break;
   }
   case 1:  {
    $65 = ($bits$0>>>0)<(16);
    if ($65) {
     $bits$2733 = $bits$0;$have$2731 = $have$0;$hold$2732 = $hold$0;$next$2730 = $next$0;
     while(1) {
      $109 = ($have$2731|0)==(0);
      if ($109) {
       $848 = $381;$849 = $left$0;$bits$53 = $bits$2733;$have$57 = 0;$hold$53 = $hold$2732;$next$57 = $next$2730;$out$4 = $out$0;$ret$8 = $ret$0;
       break L17;
      }
      $110 = (($have$2731) + -1)|0;
      $111 = ((($next$2730)) + 1|0);
      $112 = HEAP8[$next$2730>>0]|0;
      $113 = $112&255;
      $114 = $113 << $bits$2733;
      $115 = (($114) + ($hold$2732))|0;
      $116 = (($bits$2733) + 8)|0;
      $117 = ($116>>>0)<(16);
      if ($117) {
       $bits$2733 = $116;$have$2731 = $110;$hold$2732 = $115;$next$2730 = $111;
      } else {
       $118 = $115;$bits$2$lcssa = $116;$have$2$lcssa = $110;$next$2$lcssa = $111;
       break;
      }
     }
    } else {
     $118 = $hold$0;$bits$2$lcssa = $bits$0;$have$2$lcssa = $have$0;$next$2$lcssa = $next$0;
    }
    HEAP32[$25>>2] = $118;
    $119 = $118 & 255;
    $120 = ($119|0)==(8);
    if (!($120)) {
     HEAP32[$27>>2] = 30445;
     HEAP32[$2>>2] = 29;
     $bits$0$be = $bits$2$lcssa;$have$0$be = $have$2$lcssa;$hold$0$be = $118;$left$0$be = $left$0;$next$0$be = $next$2$lcssa;$out$0$be = $out$0;$put$0$be = $381;$ret$0$be = $ret$0;
     break L19;
    }
    $121 = $118 & 57344;
    $122 = ($121|0)==(0);
    if (!($122)) {
     HEAP32[$27>>2] = 30492;
     HEAP32[$2>>2] = 29;
     $bits$0$be = $bits$2$lcssa;$have$0$be = $have$2$lcssa;$hold$0$be = $118;$left$0$be = $left$0;$next$0$be = $next$2$lcssa;$out$0$be = $out$0;$put$0$be = $381;$ret$0$be = $ret$0;
     break L19;
    }
    $123 = HEAP32[$26>>2]|0;
    $124 = ($123|0)==(0|0);
    if (!($124)) {
     $125 = $118 >>> 8;
     $126 = $125 & 1;
     HEAP32[$123>>2] = $126;
    }
    $127 = $118 & 512;
    $128 = ($127|0)==(0);
    if (!($128)) {
     $129 = $118&255;
     HEAP8[$hbuf>>0] = $129;
     $130 = $118 >>> 8;
     $131 = $130&255;
     HEAP8[$24>>0] = $131;
     $132 = HEAP32[$23>>2]|0;
     $133 = (_crc32($132,$hbuf,2)|0);
     HEAP32[$23>>2] = $133;
    }
    HEAP32[$2>>2] = 2;
    $bits$3743 = 0;$have$3741 = $have$2$lcssa;$hold$3742 = 0;$next$3740 = $next$2$lcssa;
    label = 47;
    break;
   }
   case 2:  {
    $134 = ($bits$0>>>0)<(32);
    if ($134) {
     $bits$3743 = $bits$0;$have$3741 = $have$0;$hold$3742 = $hold$0;$next$3740 = $next$0;
     label = 47;
    } else {
     $have$3$lcssa = $have$0;$hold$3$lcssa = $hold$0;$next$3$lcssa = $next$0;
     label = 49;
    }
    break;
   }
   case 3:  {
    $159 = ($bits$0>>>0)<(16);
    if ($159) {
     $bits$4752 = $bits$0;$have$4750 = $have$0;$hold$4751 = $hold$0;$next$4749 = $next$0;
     label = 55;
    } else {
     $have$4$lcssa = $have$0;$hold$4$lcssa = $hold$0;$next$4$lcssa = $next$0;
     label = 57;
    }
    break;
   }
   case 4:  {
    $bits$5 = $bits$0;$have$5 = $have$0;$hold$5 = $hold$0;$next$5 = $next$0;
    label = 62;
    break;
   }
   case 5:  {
    $bits$8 = $bits$0;$have$8 = $have$0;$hold$8 = $hold$0;$next$8 = $next$0;
    label = 73;
    break;
   }
   case 6:  {
    $bits$9 = $bits$0;$have$11 = $have$0;$hold$9 = $hold$0;$next$11 = $next$0;
    label = 83;
    break;
   }
   case 7:  {
    $bits$10 = $bits$0;$have$13 = $have$0;$hold$10 = $hold$0;$next$13 = $next$0;
    label = 96;
    break;
   }
   case 8:  {
    $bits$11 = $bits$0;$have$15 = $have$0;$hold$11 = $hold$0;$next$15 = $next$0;
    label = 109;
    break;
   }
   case 9:  {
    $64 = ($bits$0>>>0)<(32);
    if ($64) {
     $bits$14714 = $bits$0;$have$18712 = $have$0;$hold$14713 = $hold$0;$next$18711 = $next$0;
     while(1) {
      $324 = ($have$18712|0)==(0);
      if ($324) {
       $848 = $381;$849 = $left$0;$bits$53 = $bits$14714;$have$57 = 0;$hold$53 = $hold$14713;$next$57 = $next$18711;$out$4 = $out$0;$ret$8 = $ret$0;
       break L17;
      }
      $325 = (($have$18712) + -1)|0;
      $326 = ((($next$18711)) + 1|0);
      $327 = HEAP8[$next$18711>>0]|0;
      $328 = $327&255;
      $329 = $328 << $bits$14714;
      $330 = (($329) + ($hold$14713))|0;
      $331 = (($bits$14714) + 8)|0;
      $332 = ($331>>>0)<(32);
      if ($332) {
       $bits$14714 = $331;$have$18712 = $325;$hold$14713 = $330;$next$18711 = $326;
      } else {
       $have$18$lcssa = $325;$hold$14$lcssa = $330;$next$18$lcssa = $326;
       break;
      }
     }
    } else {
     $have$18$lcssa = $have$0;$hold$14$lcssa = $hold$0;$next$18$lcssa = $next$0;
    }
    $333 = (_llvm_bswap_i32(($hold$14$lcssa|0))|0);
    HEAP32[$23>>2] = $333;
    HEAP32[$30>>2] = $333;
    HEAP32[$2>>2] = 10;
    $bits$15 = 0;$have$19 = $have$18$lcssa;$hold$15 = 0;$next$19 = $next$18$lcssa;
    label = 121;
    break;
   }
   case 10:  {
    $bits$15 = $bits$0;$have$19 = $have$0;$hold$15 = $hold$0;$next$19 = $next$0;
    label = 121;
    break;
   }
   case 11:  {
    $bits$16 = $bits$0;$have$20 = $have$0;$hold$16 = $hold$0;$next$20 = $next$0;
    label = 124;
    break;
   }
   case 12:  {
    $bits$17 = $bits$0;$have$21 = $have$0;$hold$17 = $hold$0;$next$21 = $next$0;
    label = 125;
    break;
   }
   case 13:  {
    $359 = $bits$0 & 7;
    $360 = $hold$0 >>> $359;
    $361 = (($bits$0) - ($359))|0;
    $362 = ($361>>>0)<(32);
    if ($362) {
     $bits$19703 = $361;$have$23701 = $have$0;$hold$19702 = $360;$next$23700 = $next$0;
     while(1) {
      $363 = ($have$23701|0)==(0);
      if ($363) {
       $848 = $381;$849 = $left$0;$bits$53 = $bits$19703;$have$57 = 0;$hold$53 = $hold$19702;$next$57 = $next$23700;$out$4 = $out$0;$ret$8 = $ret$0;
       break L17;
      }
      $364 = (($have$23701) + -1)|0;
      $365 = ((($next$23700)) + 1|0);
      $366 = HEAP8[$next$23700>>0]|0;
      $367 = $366&255;
      $368 = $367 << $bits$19703;
      $369 = (($368) + ($hold$19702))|0;
      $370 = (($bits$19703) + 8)|0;
      $371 = ($370>>>0)<(32);
      if ($371) {
       $bits$19703 = $370;$have$23701 = $364;$hold$19702 = $369;$next$23700 = $365;
      } else {
       $bits$19$lcssa = $370;$have$23$lcssa = $364;$hold$19$lcssa = $369;$next$23$lcssa = $365;
       break;
      }
     }
    } else {
     $bits$19$lcssa = $361;$have$23$lcssa = $have$0;$hold$19$lcssa = $360;$next$23$lcssa = $next$0;
    }
    $372 = $hold$19$lcssa & 65535;
    $373 = $hold$19$lcssa >>> 16;
    $374 = $373 ^ 65535;
    $375 = ($372|0)==($374|0);
    if ($375) {
     HEAP32[$31>>2] = $372;
     HEAP32[$2>>2] = 14;
     if ($39) {
      $848 = $381;$849 = $left$0;$bits$53 = 0;$have$57 = $have$23$lcssa;$hold$53 = 0;$next$57 = $next$23$lcssa;$out$4 = $out$0;$ret$8 = $ret$0;
      break L17;
     } else {
      $bits$20 = 0;$have$24 = $have$23$lcssa;$hold$20 = 0;$next$24 = $next$23$lcssa;
      label = 143;
      break L19;
     }
    } else {
     HEAP32[$27>>2] = 30556;
     HEAP32[$2>>2] = 29;
     $bits$0$be = $bits$19$lcssa;$have$0$be = $have$23$lcssa;$hold$0$be = $hold$19$lcssa;$left$0$be = $left$0;$next$0$be = $next$23$lcssa;$out$0$be = $out$0;$put$0$be = $381;$ret$0$be = $ret$0;
     break L19;
    }
    break;
   }
   case 14:  {
    $bits$20 = $bits$0;$have$24 = $have$0;$hold$20 = $hold$0;$next$24 = $next$0;
    label = 143;
    break;
   }
   case 15:  {
    $bits$21 = $bits$0;$have$25 = $have$0;$hold$21 = $hold$0;$next$25 = $next$0;
    label = 144;
    break;
   }
   case 16:  {
    $63 = ($bits$0>>>0)<(14);
    if ($63) {
     $bits$22519 = $bits$0;$have$26517 = $have$0;$hold$22518 = $hold$0;$next$26516 = $next$0;
     while(1) {
      $388 = ($have$26517|0)==(0);
      if ($388) {
       $848 = $381;$849 = $left$0;$bits$53 = $bits$22519;$have$57 = 0;$hold$53 = $hold$22518;$next$57 = $next$26516;$out$4 = $out$0;$ret$8 = $ret$0;
       break L17;
      }
      $389 = (($have$26517) + -1)|0;
      $390 = ((($next$26516)) + 1|0);
      $391 = HEAP8[$next$26516>>0]|0;
      $392 = $391&255;
      $393 = $392 << $bits$22519;
      $394 = (($393) + ($hold$22518))|0;
      $395 = (($bits$22519) + 8)|0;
      $396 = ($395>>>0)<(14);
      if ($396) {
       $bits$22519 = $395;$have$26517 = $389;$hold$22518 = $394;$next$26516 = $390;
      } else {
       $bits$22$lcssa = $395;$have$26$lcssa = $389;$hold$22$lcssa = $394;$next$26$lcssa = $390;
       break;
      }
     }
    } else {
     $bits$22$lcssa = $bits$0;$have$26$lcssa = $have$0;$hold$22$lcssa = $hold$0;$next$26$lcssa = $next$0;
    }
    $397 = $hold$22$lcssa & 31;
    $398 = (($397) + 257)|0;
    HEAP32[$54>>2] = $398;
    $399 = $hold$22$lcssa >>> 5;
    $400 = $399 & 31;
    $401 = (($400) + 1)|0;
    HEAP32[$55>>2] = $401;
    $402 = $hold$22$lcssa >>> 10;
    $403 = $402 & 15;
    $404 = (($403) + 4)|0;
    HEAP32[$61>>2] = $404;
    $405 = $hold$22$lcssa >>> 14;
    $406 = (($bits$22$lcssa) + -14)|0;
    $407 = ($398>>>0)>(286);
    $408 = ($401>>>0)>(30);
    $or$cond1695 = $407 | $408;
    if ($or$cond1695) {
     HEAP32[$27>>2] = 30585;
     HEAP32[$2>>2] = 29;
     $bits$0$be = $406;$have$0$be = $have$26$lcssa;$hold$0$be = $405;$left$0$be = $left$0;$next$0$be = $next$26$lcssa;$out$0$be = $out$0;$put$0$be = $381;$ret$0$be = $ret$0;
     break L19;
    } else {
     HEAP32[$53>>2] = 0;
     HEAP32[$2>>2] = 17;
     $432 = $404;$903 = 0;$bits$23$ph1249 = $406;$have$27$ph1247 = $have$26$lcssa;$hold$23$ph1248 = $405;$next$27$ph1246 = $next$26$lcssa;
     label = 154;
     break L19;
    }
    break;
   }
   case 17:  {
    $$pre1216 = HEAP32[$53>>2]|0;
    $$pre1217 = HEAP32[$61>>2]|0;
    $409 = ($$pre1216>>>0)<($$pre1217>>>0);
    if ($409) {
     $432 = $$pre1217;$903 = $$pre1216;$bits$23$ph1249 = $bits$0;$have$27$ph1247 = $have$0;$hold$23$ph1248 = $hold$0;$next$27$ph1246 = $next$0;
     label = 154;
    } else {
     $$lcssa95 = $$pre1216;$bits$23$lcssa = $bits$0;$have$27$lcssa = $have$0;$hold$23$lcssa = $hold$0;$next$27$lcssa = $next$0;
     label = 155;
    }
    break;
   }
   case 18:  {
    $$pre1218 = HEAP32[$53>>2]|0;
    $444 = $$pre1218;$bits$25$ph = $bits$0;$have$29$ph = $have$0;$hold$25$ph = $hold$0;$next$29$ph = $next$0;$ret$1$ph = $ret$0;
    label = 165;
    break;
   }
   case 19:  {
    $bits$32 = $bits$0;$have$36 = $have$0;$hold$32 = $hold$0;$next$36 = $next$0;$ret$2 = $ret$0;
    label = 199;
    break;
   }
   case 20:  {
    $bits$33 = $bits$0;$have$37 = $have$0;$hold$33 = $hold$0;$next$37 = $next$0;$ret$3 = $ret$0;
    label = 200;
    break;
   }
   case 21:  {
    $$pre1223 = HEAP32[$41>>2]|0;
    $645 = $$pre1223;$bits$37 = $bits$0;$have$41 = $have$0;$hold$37 = $hold$0;$next$41 = $next$0;$ret$4 = $ret$0;
    label = 218;
    break;
   }
   case 22:  {
    $bits$40$ph = $bits$0;$have$44$ph = $have$0;$hold$40$ph = $hold$0;$next$44$ph = $next$0;$ret$5$ph = $ret$0;
    label = 225;
    break;
   }
   case 23:  {
    $$pre1229 = HEAP32[$41>>2]|0;
    $738 = $$pre1229;$bits$43 = $bits$0;$have$47 = $have$0;$hold$43 = $hold$0;$next$47 = $next$0;$ret$6 = $ret$0;
    label = 237;
    break;
   }
   case 24:  {
    $bits$46 = $bits$0;$have$50 = $have$0;$hold$46 = $hold$0;$next$50 = $next$0;$ret$7 = $ret$0;
    label = 243;
    break;
   }
   case 25:  {
    $796 = ($left$0|0)==(0);
    if ($796) {
     $848 = $381;$849 = 0;$bits$53 = $bits$0;$have$57 = $have$0;$hold$53 = $hold$0;$next$57 = $next$0;$out$4 = $out$0;$ret$8 = $ret$0;
     break L17;
    }
    $797 = HEAP32[$31>>2]|0;
    $798 = $797&255;
    $799 = ((($381)) + 1|0);
    HEAP8[$381>>0] = $798;
    $800 = (($left$0) + -1)|0;
    HEAP32[$2>>2] = 20;
    $bits$0$be = $bits$0;$have$0$be = $have$0;$hold$0$be = $hold$0;$left$0$be = $800;$next$0$be = $next$0;$out$0$be = $out$0;$put$0$be = $799;$ret$0$be = $ret$0;
    break;
   }
   case 26:  {
    $801 = HEAP32[$22>>2]|0;
    $802 = ($801|0)==(0);
    if ($802) {
     $bits$48 = $bits$0;$have$52 = $have$0;$hold$48 = $hold$0;$next$52 = $next$0;$out$1 = $out$0;
    } else {
     $803 = ($bits$0>>>0)<(32);
     if ($803) {
      $bits$47502 = $bits$0;$have$51500 = $have$0;$hold$47501 = $hold$0;$next$51499 = $next$0;
      while(1) {
       $804 = ($have$51500|0)==(0);
       if ($804) {
        $848 = $381;$849 = $left$0;$bits$53 = $bits$47502;$have$57 = 0;$hold$53 = $hold$47501;$next$57 = $next$51499;$out$4 = $out$0;$ret$8 = $ret$0;
        break L17;
       }
       $805 = (($have$51500) + -1)|0;
       $806 = ((($next$51499)) + 1|0);
       $807 = HEAP8[$next$51499>>0]|0;
       $808 = $807&255;
       $809 = $808 << $bits$47502;
       $810 = (($809) + ($hold$47501))|0;
       $811 = (($bits$47502) + 8)|0;
       $812 = ($811>>>0)<(32);
       if ($812) {
        $bits$47502 = $811;$have$51500 = $805;$hold$47501 = $810;$next$51499 = $806;
       } else {
        $bits$47$lcssa = $811;$have$51$lcssa = $805;$hold$47$lcssa = $810;$next$51$lcssa = $806;
        break;
       }
      }
     } else {
      $bits$47$lcssa = $bits$0;$have$51$lcssa = $have$0;$hold$47$lcssa = $hold$0;$next$51$lcssa = $next$0;
     }
     $813 = (($out$0) - ($left$0))|0;
     $814 = HEAP32[$49>>2]|0;
     $815 = (($814) + ($813))|0;
     HEAP32[$49>>2] = $815;
     $816 = HEAP32[$50>>2]|0;
     $817 = (($816) + ($813))|0;
     HEAP32[$50>>2] = $817;
     $818 = ($out$0|0)==($left$0|0);
     if ($818) {
      $$pre1215 = HEAP32[$23>>2]|0;
      $831 = $$pre1215;
     } else {
      $819 = HEAP32[$25>>2]|0;
      $820 = ($819|0)==(0);
      $821 = HEAP32[$23>>2]|0;
      $822 = (0 - ($813))|0;
      $823 = (($381) + ($822)|0);
      if ($820) {
       $825 = (_adler32($821,$823,$813)|0);
       $826 = $825;
      } else {
       $824 = (_crc32($821,$823,$813)|0);
       $826 = $824;
      }
      HEAP32[$23>>2] = $826;
      HEAP32[$30>>2] = $826;
      $831 = $826;
     }
     $827 = HEAP32[$25>>2]|0;
     $828 = ($827|0)==(0);
     $829 = (_llvm_bswap_i32(($hold$47$lcssa|0))|0);
     $$hold$47 = $828 ? $829 : $hold$47$lcssa;
     $830 = ($$hold$47|0)==($831|0);
     if ($830) {
      $bits$48 = 0;$have$52 = $have$51$lcssa;$hold$48 = 0;$next$52 = $next$51$lcssa;$out$1 = $left$0;
     } else {
      HEAP32[$27>>2] = 30759;
      HEAP32[$2>>2] = 29;
      $bits$0$be = $bits$47$lcssa;$have$0$be = $have$51$lcssa;$hold$0$be = $hold$47$lcssa;$left$0$be = $left$0;$next$0$be = $next$51$lcssa;$out$0$be = $left$0;$put$0$be = $381;$ret$0$be = $ret$0;
      break L19;
     }
    }
    HEAP32[$2>>2] = 27;
    $bits$49 = $bits$48;$have$53 = $have$52;$hold$49 = $hold$48;$next$53 = $next$52;$out$2 = $out$1;
    label = 273;
    break;
   }
   case 27:  {
    $bits$49 = $bits$0;$have$53 = $have$0;$hold$49 = $hold$0;$next$53 = $next$0;$out$2 = $out$0;
    label = 273;
    break;
   }
   default: {
    label = 295;
    break L17;
   }
   }
  } while(0);
  if ((label|0) == 47) {
   while(1) {
    label = 0;
    $135 = ($have$3741|0)==(0);
    if ($135) {
     $848 = $381;$849 = $left$0;$bits$53 = $bits$3743;$have$57 = 0;$hold$53 = $hold$3742;$next$57 = $next$3740;$out$4 = $out$0;$ret$8 = $ret$0;
     break L17;
    }
    $136 = (($have$3741) + -1)|0;
    $137 = ((($next$3740)) + 1|0);
    $138 = HEAP8[$next$3740>>0]|0;
    $139 = $138&255;
    $140 = $139 << $bits$3743;
    $141 = (($140) + ($hold$3742))|0;
    $142 = (($bits$3743) + 8)|0;
    $143 = ($142>>>0)<(32);
    if ($143) {
     $bits$3743 = $142;$have$3741 = $136;$hold$3742 = $141;$next$3740 = $137;
     label = 47;
    } else {
     $have$3$lcssa = $136;$hold$3$lcssa = $141;$next$3$lcssa = $137;
     label = 49;
     break;
    }
   }
  }
  else if ((label|0) == 121) {
   label = 0;
   $334 = HEAP32[$32>>2]|0;
   $335 = ($334|0)==(0);
   if ($335) {
    $$lcssa2805 = $381;$bits$15$lcssa = $bits$15;$have$19$lcssa = $have$19;$hold$15$lcssa = $hold$15;$left$0$lcssa2863 = $left$0;$next$19$lcssa = $next$19;
    label = 122;
    break;
   }
   $336 = (_adler32(0,0,0)|0);
   HEAP32[$23>>2] = $336;
   HEAP32[$30>>2] = $336;
   HEAP32[$2>>2] = 11;
   $bits$16 = $bits$15;$have$20 = $have$19;$hold$16 = $hold$15;$next$20 = $next$19;
   label = 124;
  }
  else if ((label|0) == 143) {
   label = 0;
   HEAP32[$2>>2] = 15;
   $bits$21 = $bits$20;$have$25 = $have$24;$hold$21 = $hold$20;$next$25 = $next$24;
   label = 144;
  }
  else if ((label|0) == 154) {
   label = 0;
   $424 = $903;$bits$23539 = $bits$23$ph1249;$have$27537 = $have$27$ph1247;$hold$23538 = $hold$23$ph1248;$next$27536 = $next$27$ph1246;
   while(1) {
    $411 = ($bits$23539>>>0)<(3);
    if ($411) {
     $bits$24529 = $bits$23539;$have$28527 = $have$27537;$hold$24528 = $hold$23538;$next$28526 = $next$27536;
     while(1) {
      $412 = ($have$28527|0)==(0);
      if ($412) {
       $848 = $381;$849 = $left$0;$bits$53 = $bits$24529;$have$57 = 0;$hold$53 = $hold$24528;$next$57 = $next$28526;$out$4 = $out$0;$ret$8 = $ret$0;
       break L17;
      }
      $413 = (($have$28527) + -1)|0;
      $414 = ((($next$28526)) + 1|0);
      $415 = HEAP8[$next$28526>>0]|0;
      $416 = $415&255;
      $417 = $416 << $bits$24529;
      $418 = (($417) + ($hold$24528))|0;
      $419 = (($bits$24529) + 8)|0;
      $420 = ($419>>>0)<(3);
      if ($420) {
       $bits$24529 = $419;$have$28527 = $413;$hold$24528 = $418;$next$28526 = $414;
      } else {
       $bits$24$lcssa = $419;$have$28$lcssa = $413;$hold$24$lcssa = $418;$next$28$lcssa = $414;
       break;
      }
     }
    } else {
     $bits$24$lcssa = $bits$23539;$have$28$lcssa = $have$27537;$hold$24$lcssa = $hold$23538;$next$28$lcssa = $next$27536;
    }
    $421 = $hold$24$lcssa & 7;
    $422 = $421&65535;
    $423 = (($424) + 1)|0;
    HEAP32[$53>>2] = $423;
    $425 = (21426 + ($424<<1)|0);
    $426 = HEAP16[$425>>1]|0;
    $427 = $426&65535;
    $428 = (((($2)) + 112|0) + ($427<<1)|0);
    HEAP16[$428>>1] = $422;
    $429 = $hold$24$lcssa >>> 3;
    $430 = (($bits$24$lcssa) + -3)|0;
    $431 = ($423>>>0)<($432>>>0);
    if ($431) {
     $424 = $423;$bits$23539 = $430;$have$27537 = $have$28$lcssa;$hold$23538 = $429;$next$27536 = $next$28$lcssa;
    } else {
     $$lcssa95 = $423;$bits$23$lcssa = $430;$have$27$lcssa = $have$28$lcssa;$hold$23$lcssa = $429;$next$27$lcssa = $next$28$lcssa;
     label = 155;
     break;
    }
   }
  }
  else if ((label|0) == 273) {
   label = 0;
   $832 = HEAP32[$22>>2]|0;
   $833 = ($832|0)==(0);
   if ($833) {
    $$lcssa2789 = $381;$bits$51 = $bits$49;$have$55 = $have$53;$hold$51 = $hold$49;$left$0$lcssa2847 = $left$0;$next$55 = $next$53;$out$2$lcssa = $out$2;
    label = 280;
    break;
   }
   $834 = HEAP32[$25>>2]|0;
   $835 = ($834|0)==(0);
   if ($835) {
    $$lcssa2789 = $381;$bits$51 = $bits$49;$have$55 = $have$53;$hold$51 = $hold$49;$left$0$lcssa2847 = $left$0;$next$55 = $next$53;$out$2$lcssa = $out$2;
    label = 280;
    break;
   }
   $836 = ($bits$49>>>0)<(32);
   if ($836) {
    $bits$50509 = $bits$49;$have$54507 = $have$53;$hold$50508 = $hold$49;$next$54506 = $next$53;
    while(1) {
     $837 = ($have$54507|0)==(0);
     if ($837) {
      $848 = $381;$849 = $left$0;$bits$53 = $bits$50509;$have$57 = 0;$hold$53 = $hold$50508;$next$57 = $next$54506;$out$4 = $out$2;$ret$8 = $ret$0;
      break L17;
     }
     $838 = (($have$54507) + -1)|0;
     $839 = ((($next$54506)) + 1|0);
     $840 = HEAP8[$next$54506>>0]|0;
     $841 = $840&255;
     $842 = $841 << $bits$50509;
     $843 = (($842) + ($hold$50508))|0;
     $844 = (($bits$50509) + 8)|0;
     $845 = ($844>>>0)<(32);
     if ($845) {
      $bits$50509 = $844;$have$54507 = $838;$hold$50508 = $843;$next$54506 = $839;
     } else {
      $bits$50$lcssa = $844;$have$54$lcssa = $838;$hold$50$lcssa = $843;$next$54$lcssa = $839;
      break;
     }
    }
   } else {
    $bits$50$lcssa = $bits$49;$have$54$lcssa = $have$53;$hold$50$lcssa = $hold$49;$next$54$lcssa = $next$53;
   }
   $846 = HEAP32[$50>>2]|0;
   $847 = ($hold$50$lcssa|0)==($846|0);
   if ($847) {
    $$lcssa2789 = $381;$bits$51 = 0;$have$55 = $have$54$lcssa;$hold$51 = 0;$left$0$lcssa2847 = $left$0;$next$55 = $next$54$lcssa;$out$2$lcssa = $out$2;
    label = 280;
    break;
   }
   HEAP32[$27>>2] = 30780;
   HEAP32[$2>>2] = 29;
   $bits$0$be = $bits$50$lcssa;$have$0$be = $have$54$lcssa;$hold$0$be = $hold$50$lcssa;$left$0$be = $left$0;$next$0$be = $next$54$lcssa;$out$0$be = $out$2;$put$0$be = $381;$ret$0$be = $ret$0;
  }
  do {
   if ((label|0) == 49) {
    label = 0;
    $144 = HEAP32[$26>>2]|0;
    $145 = ($144|0)==(0|0);
    if (!($145)) {
     $146 = ((($144)) + 4|0);
     HEAP32[$146>>2] = $hold$3$lcssa;
    }
    $147 = HEAP32[$25>>2]|0;
    $148 = $147 & 512;
    $149 = ($148|0)==(0);
    if (!($149)) {
     $150 = $hold$3$lcssa&255;
     HEAP8[$hbuf>>0] = $150;
     $151 = $hold$3$lcssa >>> 8;
     $152 = $151&255;
     HEAP8[$24>>0] = $152;
     $153 = $hold$3$lcssa >>> 16;
     $154 = $153&255;
     HEAP8[$51>>0] = $154;
     $155 = $hold$3$lcssa >>> 24;
     $156 = $155&255;
     HEAP8[$52>>0] = $156;
     $157 = HEAP32[$23>>2]|0;
     $158 = (_crc32($157,$hbuf,4)|0);
     HEAP32[$23>>2] = $158;
    }
    HEAP32[$2>>2] = 3;
    $bits$4752 = 0;$have$4750 = $have$3$lcssa;$hold$4751 = 0;$next$4749 = $next$3$lcssa;
    label = 55;
   }
   else if ((label|0) == 124) {
    label = 0;
    if ($33) {
     $848 = $381;$849 = $left$0;$bits$53 = $bits$16;$have$57 = $have$20;$hold$53 = $hold$16;$next$57 = $next$20;$out$4 = $out$0;$ret$8 = $ret$0;
     break L17;
    } else {
     $bits$17 = $bits$16;$have$21 = $have$20;$hold$17 = $hold$16;$next$21 = $next$20;
     label = 125;
    }
   }
   else if ((label|0) == 144) {
    label = 0;
    $376 = HEAP32[$31>>2]|0;
    $377 = ($376|0)==(0);
    if ($377) {
     HEAP32[$2>>2] = 11;
     $bits$0$be = $bits$21;$have$0$be = $have$25;$hold$0$be = $hold$21;$left$0$be = $left$0;$next$0$be = $next$25;$out$0$be = $out$0;$put$0$be = $381;$ret$0$be = $ret$0;
     break;
    }
    $378 = ($376>>>0)>($have$25>>>0);
    $have$25$ = $378 ? $have$25 : $376;
    $379 = ($have$25$>>>0)>($left$0>>>0);
    $copy$4 = $379 ? $left$0 : $have$25$;
    $380 = ($copy$4|0)==(0);
    if ($380) {
     $848 = $381;$849 = $left$0;$bits$53 = $bits$21;$have$57 = $have$25;$hold$53 = $hold$21;$next$57 = $next$25;$out$4 = $out$0;$ret$8 = $ret$0;
     break L17;
    }
    _memcpy(($381|0),($next$25|0),($copy$4|0))|0;
    $382 = (($have$25) - ($copy$4))|0;
    $383 = (($next$25) + ($copy$4)|0);
    $384 = (($left$0) - ($copy$4))|0;
    $385 = (($381) + ($copy$4)|0);
    $386 = HEAP32[$31>>2]|0;
    $387 = (($386) - ($copy$4))|0;
    HEAP32[$31>>2] = $387;
    $bits$0$be = $bits$21;$have$0$be = $382;$hold$0$be = $hold$21;$left$0$be = $384;$next$0$be = $383;$out$0$be = $out$0;$put$0$be = $385;$ret$0$be = $ret$0;
   }
   else if ((label|0) == 155) {
    label = 0;
    $410 = ($$lcssa95>>>0)<(19);
    if ($410) {
     $434 = $$lcssa95;
     while(1) {
      $433 = (($434) + 1)|0;
      $435 = (21426 + ($434<<1)|0);
      $436 = HEAP16[$435>>1]|0;
      $437 = $436&65535;
      $438 = (((($2)) + 112|0) + ($437<<1)|0);
      HEAP16[$438>>1] = 0;
      $exitcond = ($433|0)==(19);
      if ($exitcond) {
       break;
      } else {
       $434 = $433;
      }
     }
     HEAP32[$53>>2] = 19;
    }
    HEAP32[$58>>2] = $57;
    HEAP32[$35>>2] = $57;
    HEAP32[$36>>2] = 7;
    $439 = (_inflate_table(0,$59,19,$58,$36,$60)|0);
    $440 = ($439|0)==(0);
    if ($440) {
     HEAP32[$53>>2] = 0;
     HEAP32[$2>>2] = 18;
     $444 = 0;$bits$25$ph = $bits$23$lcssa;$have$29$ph = $have$27$lcssa;$hold$25$ph = $hold$23$lcssa;$next$29$ph = $next$27$lcssa;$ret$1$ph = 0;
     label = 165;
     break;
    } else {
     HEAP32[$27>>2] = 30621;
     HEAP32[$2>>2] = 29;
     $bits$0$be = $bits$23$lcssa;$have$0$be = $have$27$lcssa;$hold$0$be = $hold$23$lcssa;$left$0$be = $left$0;$next$0$be = $next$27$lcssa;$out$0$be = $out$0;$put$0$be = $381;$ret$0$be = $439;
     break;
    }
   }
  } while(0);
  L162: do {
   if ((label|0) == 55) {
    while(1) {
     label = 0;
     $160 = ($have$4750|0)==(0);
     if ($160) {
      $848 = $381;$849 = $left$0;$bits$53 = $bits$4752;$have$57 = 0;$hold$53 = $hold$4751;$next$57 = $next$4749;$out$4 = $out$0;$ret$8 = $ret$0;
      break L17;
     }
     $161 = (($have$4750) + -1)|0;
     $162 = ((($next$4749)) + 1|0);
     $163 = HEAP8[$next$4749>>0]|0;
     $164 = $163&255;
     $165 = $164 << $bits$4752;
     $166 = (($165) + ($hold$4751))|0;
     $167 = (($bits$4752) + 8)|0;
     $168 = ($167>>>0)<(16);
     if ($168) {
      $bits$4752 = $167;$have$4750 = $161;$hold$4751 = $166;$next$4749 = $162;
      label = 55;
     } else {
      $have$4$lcssa = $161;$hold$4$lcssa = $166;$next$4$lcssa = $162;
      label = 57;
      break;
     }
    }
   }
   else if ((label|0) == 125) {
    label = 0;
    $337 = HEAP32[$34>>2]|0;
    $338 = ($337|0)==(0);
    if (!($338)) {
     $340 = $bits$17 & 7;
     $341 = $hold$17 >>> $340;
     $342 = (($bits$17) - ($340))|0;
     HEAP32[$2>>2] = 26;
     $bits$0$be = $342;$have$0$be = $have$21;$hold$0$be = $341;$left$0$be = $left$0;$next$0$be = $next$21;$out$0$be = $out$0;$put$0$be = $381;$ret$0$be = $ret$0;
     break;
    }
    $339 = ($bits$17>>>0)<(3);
    if ($339) {
     $bits$18723 = $bits$17;$have$22721 = $have$21;$hold$18722 = $hold$17;$next$22720 = $next$21;
     while(1) {
      $343 = ($have$22721|0)==(0);
      if ($343) {
       $848 = $381;$849 = $left$0;$bits$53 = $bits$18723;$have$57 = 0;$hold$53 = $hold$18722;$next$57 = $next$22720;$out$4 = $out$0;$ret$8 = $ret$0;
       break L17;
      }
      $344 = (($have$22721) + -1)|0;
      $345 = ((($next$22720)) + 1|0);
      $346 = HEAP8[$next$22720>>0]|0;
      $347 = $346&255;
      $348 = $347 << $bits$18723;
      $349 = (($348) + ($hold$18722))|0;
      $350 = (($bits$18723) + 8)|0;
      $351 = ($350>>>0)<(3);
      if ($351) {
       $bits$18723 = $350;$have$22721 = $344;$hold$18722 = $349;$next$22720 = $345;
      } else {
       $bits$18$lcssa = $350;$have$22$lcssa = $344;$hold$18$lcssa = $349;$next$22$lcssa = $345;
       break;
      }
     }
    } else {
     $bits$18$lcssa = $bits$17;$have$22$lcssa = $have$21;$hold$18$lcssa = $hold$17;$next$22$lcssa = $next$21;
    }
    $352 = $hold$18$lcssa & 1;
    HEAP32[$34>>2] = $352;
    $353 = $hold$18$lcssa >>> 1;
    $354 = $353 & 3;
    switch ($354|0) {
    case 0:  {
     HEAP32[$2>>2] = 13;
     break;
    }
    case 1:  {
     HEAP32[$35>>2] = 19250;
     HEAP32[$36>>2] = 9;
     HEAP32[$37>>2] = 21298;
     HEAP32[$38>>2] = 5;
     HEAP32[$2>>2] = 19;
     if ($39) {
      $$lcssa2807 = $381;$bits$18$lcssa$lcssa = $bits$18$lcssa;$have$22$lcssa$lcssa = $have$22$lcssa;$hold$18$lcssa$lcssa = $hold$18$lcssa;$left$0$lcssa2865 = $left$0;$next$22$lcssa$lcssa = $next$22$lcssa;$out$0$lcssa2952 = $out$0;$ret$0$lcssa2981 = $ret$0;
      label = 133;
      break L17;
     }
     break;
    }
    case 2:  {
     HEAP32[$2>>2] = 16;
     break;
    }
    case 3:  {
     HEAP32[$27>>2] = 30537;
     HEAP32[$2>>2] = 29;
     break;
    }
    default: {
    }
    }
    $357 = $hold$18$lcssa >>> 3;
    $358 = (($bits$18$lcssa) + -3)|0;
    $bits$0$be = $358;$have$0$be = $have$22$lcssa;$hold$0$be = $357;$left$0$be = $left$0;$next$0$be = $next$22$lcssa;$out$0$be = $out$0;$put$0$be = $381;$ret$0$be = $ret$0;
   }
   else if ((label|0) == 165) {
    label = 0;
    $441 = HEAP32[$54>>2]|0;
    $442 = HEAP32[$55>>2]|0;
    $443 = (($442) + ($441))|0;
    $445 = ($444>>>0)<($443>>>0);
    do {
     if ($445) {
      $472 = $444;$537 = $441;$538 = $442;$bits$25601 = $bits$25$ph;$have$29599 = $have$29$ph;$hold$25600 = $hold$25$ph;$next$29598 = $next$29$ph;
      L183: while(1) {
       $446 = HEAP32[$36>>2]|0;
       $447 = 1 << $446;
       $448 = (($447) + -1)|0;
       $449 = $448 & $hold$25600;
       $450 = HEAP32[$35>>2]|0;
       $451 = (((($450) + ($449<<2)|0)) + 1|0);
       $452 = HEAP8[$451>>0]|0;
       $453 = $452&255;
       $454 = ($bits$25601>>>0)<($453>>>0);
       if ($454) {
        $bits$26553 = $bits$25601;$have$30551 = $have$29599;$hold$26552 = $hold$25600;$next$30550 = $next$29598;
        while(1) {
         $455 = ($have$30551|0)==(0);
         if ($455) {
          $848 = $381;$849 = $left$0;$bits$53 = $bits$26553;$have$57 = 0;$hold$53 = $hold$26552;$next$57 = $next$30550;$out$4 = $out$0;$ret$8 = $ret$1$ph;
          break L17;
         }
         $456 = (($have$30551) + -1)|0;
         $457 = ((($next$30550)) + 1|0);
         $458 = HEAP8[$next$30550>>0]|0;
         $459 = $458&255;
         $460 = $459 << $bits$26553;
         $461 = (($460) + ($hold$26552))|0;
         $462 = (($bits$26553) + 8)|0;
         $463 = $448 & $461;
         $464 = (((($450) + ($463<<2)|0)) + 1|0);
         $465 = HEAP8[$464>>0]|0;
         $466 = $465&255;
         $467 = ($462>>>0)<($466>>>0);
         if ($467) {
          $bits$26553 = $462;$have$30551 = $456;$hold$26552 = $461;$next$30550 = $457;
         } else {
          $$lcssa563$pn = $466;$$pn1237 = $463;$bits$26$lcssa = $462;$have$30$lcssa = $456;$hold$26$lcssa = $461;$next$30$lcssa = $457;
          break;
         }
        }
       } else {
        $$lcssa563$pn = $453;$$pn1237 = $449;$bits$26$lcssa = $bits$25601;$have$30$lcssa = $have$29599;$hold$26$lcssa = $hold$25600;$next$30$lcssa = $next$29598;
       }
       $$lcssa101$in = (((($450) + ($$pn1237<<2)|0)) + 2|0);
       $$lcssa101 = HEAP16[$$lcssa101$in>>1]|0;
       $468 = ($$lcssa101&65535)<(16);
       if ($468) {
        $469 = $hold$26$lcssa >>> $$lcssa563$pn;
        $470 = (($bits$26$lcssa) - ($$lcssa563$pn))|0;
        $471 = (($472) + 1)|0;
        HEAP32[$53>>2] = $471;
        $473 = (((($2)) + 112|0) + ($472<<1)|0);
        HEAP16[$473>>1] = $$lcssa101;
        $bits$25$be = $470;$have$29$be = $have$30$lcssa;$hold$25$be = $469;$next$29$be = $next$30$lcssa;
       } else {
        switch ($$lcssa101<<16>>16) {
        case 16:  {
         $481 = (($$lcssa563$pn) + 2)|0;
         $482 = ($bits$26$lcssa>>>0)<($481>>>0);
         if ($482) {
          $bits$27580 = $bits$26$lcssa;$have$31578 = $have$30$lcssa;$hold$27579 = $hold$26$lcssa;$next$31577 = $next$30$lcssa;
          while(1) {
           $485 = ($have$31578|0)==(0);
           if ($485) {
            $848 = $381;$849 = $left$0;$bits$53 = $bits$27580;$have$57 = 0;$hold$53 = $hold$27579;$next$57 = $next$31577;$out$4 = $out$0;$ret$8 = $ret$1$ph;
            break L17;
           }
           $486 = (($have$31578) + -1)|0;
           $487 = ((($next$31577)) + 1|0);
           $488 = HEAP8[$next$31577>>0]|0;
           $489 = $488&255;
           $490 = $489 << $bits$27580;
           $491 = (($490) + ($hold$27579))|0;
           $492 = (($bits$27580) + 8)|0;
           $493 = ($492>>>0)<($481>>>0);
           if ($493) {
            $bits$27580 = $492;$have$31578 = $486;$hold$27579 = $491;$next$31577 = $487;
           } else {
            $bits$27$lcssa = $492;$have$31$lcssa = $486;$hold$27$lcssa = $491;$next$31$lcssa = $487;
            break;
           }
          }
         } else {
          $bits$27$lcssa = $bits$26$lcssa;$have$31$lcssa = $have$30$lcssa;$hold$27$lcssa = $hold$26$lcssa;$next$31$lcssa = $next$30$lcssa;
         }
         $494 = $hold$27$lcssa >>> $$lcssa563$pn;
         $495 = (($bits$27$lcssa) - ($$lcssa563$pn))|0;
         $496 = ($472|0)==(0);
         if ($496) {
          $$lcssa2637 = $494;$$lcssa2638 = $495;$have$31$lcssa$lcssa = $have$31$lcssa;$next$31$lcssa$lcssa = $next$31$lcssa;
          label = 179;
          break L183;
         }
         $497 = (($472) + -1)|0;
         $498 = (((($2)) + 112|0) + ($497<<1)|0);
         $499 = HEAP16[$498>>1]|0;
         $500 = $499&65535;
         $501 = $494 & 3;
         $502 = (($501) + 3)|0;
         $503 = $494 >>> 2;
         $504 = (($495) + -2)|0;
         $bits$30 = $504;$copy$5 = $502;$have$34 = $have$31$lcssa;$hold$30 = $503;$len$0 = $500;$next$34 = $next$31$lcssa;
         break;
        }
        case 17:  {
         $479 = (($$lcssa563$pn) + 3)|0;
         $480 = ($bits$26$lcssa>>>0)<($479>>>0);
         if ($480) {
          $bits$28570 = $bits$26$lcssa;$have$32568 = $have$30$lcssa;$hold$28569 = $hold$26$lcssa;$next$32567 = $next$30$lcssa;
          while(1) {
           $505 = ($have$32568|0)==(0);
           if ($505) {
            $848 = $381;$849 = $left$0;$bits$53 = $bits$28570;$have$57 = 0;$hold$53 = $hold$28569;$next$57 = $next$32567;$out$4 = $out$0;$ret$8 = $ret$1$ph;
            break L17;
           }
           $506 = (($have$32568) + -1)|0;
           $507 = ((($next$32567)) + 1|0);
           $508 = HEAP8[$next$32567>>0]|0;
           $509 = $508&255;
           $510 = $509 << $bits$28570;
           $511 = (($510) + ($hold$28569))|0;
           $512 = (($bits$28570) + 8)|0;
           $513 = ($512>>>0)<($479>>>0);
           if ($513) {
            $bits$28570 = $512;$have$32568 = $506;$hold$28569 = $511;$next$32567 = $507;
           } else {
            $bits$28$lcssa = $512;$have$32$lcssa = $506;$hold$28$lcssa = $511;$next$32$lcssa = $507;
            break;
           }
          }
         } else {
          $bits$28$lcssa = $bits$26$lcssa;$have$32$lcssa = $have$30$lcssa;$hold$28$lcssa = $hold$26$lcssa;$next$32$lcssa = $next$30$lcssa;
         }
         $514 = $hold$28$lcssa >>> $$lcssa563$pn;
         $515 = $514 & 7;
         $516 = (($515) + 3)|0;
         $517 = $514 >>> 3;
         $518 = (-3 - ($$lcssa563$pn))|0;
         $519 = (($518) + ($bits$28$lcssa))|0;
         $bits$30 = $519;$copy$5 = $516;$have$34 = $have$32$lcssa;$hold$30 = $517;$len$0 = 0;$next$34 = $next$32$lcssa;
         break;
        }
        default: {
         $483 = (($$lcssa563$pn) + 7)|0;
         $484 = ($bits$26$lcssa>>>0)<($483>>>0);
         if ($484) {
          $bits$29590 = $bits$26$lcssa;$have$33588 = $have$30$lcssa;$hold$29589 = $hold$26$lcssa;$next$33587 = $next$30$lcssa;
          while(1) {
           $520 = ($have$33588|0)==(0);
           if ($520) {
            $848 = $381;$849 = $left$0;$bits$53 = $bits$29590;$have$57 = 0;$hold$53 = $hold$29589;$next$57 = $next$33587;$out$4 = $out$0;$ret$8 = $ret$1$ph;
            break L17;
           }
           $521 = (($have$33588) + -1)|0;
           $522 = ((($next$33587)) + 1|0);
           $523 = HEAP8[$next$33587>>0]|0;
           $524 = $523&255;
           $525 = $524 << $bits$29590;
           $526 = (($525) + ($hold$29589))|0;
           $527 = (($bits$29590) + 8)|0;
           $528 = ($527>>>0)<($483>>>0);
           if ($528) {
            $bits$29590 = $527;$have$33588 = $521;$hold$29589 = $526;$next$33587 = $522;
           } else {
            $bits$29$lcssa = $527;$have$33$lcssa = $521;$hold$29$lcssa = $526;$next$33$lcssa = $522;
            break;
           }
          }
         } else {
          $bits$29$lcssa = $bits$26$lcssa;$have$33$lcssa = $have$30$lcssa;$hold$29$lcssa = $hold$26$lcssa;$next$33$lcssa = $next$30$lcssa;
         }
         $529 = $hold$29$lcssa >>> $$lcssa563$pn;
         $530 = $529 & 127;
         $531 = (($530) + 11)|0;
         $532 = $529 >>> 7;
         $533 = (-7 - ($$lcssa563$pn))|0;
         $534 = (($533) + ($bits$29$lcssa))|0;
         $bits$30 = $534;$copy$5 = $531;$have$34 = $have$33$lcssa;$hold$30 = $532;$len$0 = 0;$next$34 = $next$33$lcssa;
        }
        }
        $535 = (($472) + ($copy$5))|0;
        $536 = (($538) + ($537))|0;
        $539 = ($535>>>0)>($536>>>0);
        if ($539) {
         $bits$30$lcssa = $bits$30;$have$34$lcssa = $have$34;$hold$30$lcssa = $hold$30;$next$34$lcssa = $next$34;
         label = 189;
         break;
        }
        $540 = $len$0&65535;
        $541 = (($copy$5) + -1)|0;
        $542 = (($472) + 1)|0;
        HEAP32[$53>>2] = $542;
        $543 = (((($2)) + 112|0) + ($472<<1)|0);
        HEAP16[$543>>1] = $540;
        $544 = ($541|0)==(0);
        if ($544) {
         $bits$25$be = $bits$30;$have$29$be = $have$34;$hold$25$be = $hold$30;$next$29$be = $next$34;
        } else {
         $546 = $541;
         while(1) {
          $$pre1220 = HEAP32[$53>>2]|0;
          $545 = (($546) + -1)|0;
          $547 = (($$pre1220) + 1)|0;
          HEAP32[$53>>2] = $547;
          $548 = (((($2)) + 112|0) + ($$pre1220<<1)|0);
          HEAP16[$548>>1] = $540;
          $549 = ($545|0)==(0);
          if ($549) {
           $bits$25$be = $bits$30;$have$29$be = $have$34;$hold$25$be = $hold$30;$next$29$be = $next$34;
           break;
          } else {
           $546 = $545;
          }
         }
        }
       }
       $474 = HEAP32[$53>>2]|0;
       $475 = HEAP32[$54>>2]|0;
       $476 = HEAP32[$55>>2]|0;
       $477 = (($476) + ($475))|0;
       $478 = ($474>>>0)<($477>>>0);
       if ($478) {
        $472 = $474;$537 = $475;$538 = $476;$bits$25601 = $bits$25$be;$have$29599 = $have$29$be;$hold$25600 = $hold$25$be;$next$29598 = $next$29$be;
       } else {
        $$lcssa2639 = $475;$bits$25$be$lcssa = $bits$25$be;$have$29$be$lcssa = $have$29$be;$hold$25$be$lcssa = $hold$25$be;$next$29$be$lcssa = $next$29$be;
        label = 191;
        break;
       }
      }
      if ((label|0) == 179) {
       label = 0;
       HEAP32[$27>>2] = 30646;
       HEAP32[$2>>2] = 29;
       $bits$0$be = $$lcssa2638;$have$0$be = $have$31$lcssa$lcssa;$hold$0$be = $$lcssa2637;$left$0$be = $left$0;$next$0$be = $next$31$lcssa$lcssa;$out$0$be = $out$0;$put$0$be = $381;$ret$0$be = $ret$1$ph;
       break L162;
      }
      else if ((label|0) == 189) {
       label = 0;
       HEAP32[$27>>2] = 30646;
       HEAP32[$2>>2] = 29;
       $bits$0$be = $bits$30$lcssa;$have$0$be = $have$34$lcssa;$hold$0$be = $hold$30$lcssa;$left$0$be = $left$0;$next$0$be = $next$34$lcssa;$out$0$be = $out$0;$put$0$be = $381;$ret$0$be = $ret$1$ph;
       break L162;
      }
      else if ((label|0) == 191) {
       label = 0;
       $$pr21$pre = HEAP32[$2>>2]|0;
       $550 = ($$pr21$pre|0)==(29);
       if ($550) {
        $bits$0$be = $bits$25$be$lcssa;$have$0$be = $have$29$be$lcssa;$hold$0$be = $hold$25$be$lcssa;$left$0$be = $left$0;$next$0$be = $next$29$be$lcssa;$out$0$be = $out$0;$put$0$be = $381;$ret$0$be = $ret$1$ph;
        break L162;
       } else {
        $553 = $$lcssa2639;$bits$25$lcssa1251 = $bits$25$be$lcssa;$have$29$lcssa1253 = $have$29$be$lcssa;$hold$25$lcssa1252 = $hold$25$be$lcssa;$next$29$lcssa1254 = $next$29$be$lcssa;
        break;
       }
      }
     } else {
      $553 = $441;$bits$25$lcssa1251 = $bits$25$ph;$have$29$lcssa1253 = $have$29$ph;$hold$25$lcssa1252 = $hold$25$ph;$next$29$lcssa1254 = $next$29$ph;
     }
    } while(0);
    $551 = HEAP16[$56>>1]|0;
    $552 = ($551<<16>>16)==(0);
    if ($552) {
     HEAP32[$27>>2] = 30672;
     HEAP32[$2>>2] = 29;
     $bits$0$be = $bits$25$lcssa1251;$have$0$be = $have$29$lcssa1253;$hold$0$be = $hold$25$lcssa1252;$left$0$be = $left$0;$next$0$be = $next$29$lcssa1254;$out$0$be = $out$0;$put$0$be = $381;$ret$0$be = $ret$1$ph;
     break;
    }
    HEAP32[$58>>2] = $57;
    HEAP32[$35>>2] = $57;
    HEAP32[$36>>2] = 9;
    $554 = (_inflate_table(1,$59,$553,$58,$36,$60)|0);
    $555 = ($554|0)==(0);
    if (!($555)) {
     HEAP32[$27>>2] = 30709;
     HEAP32[$2>>2] = 29;
     $bits$0$be = $bits$25$lcssa1251;$have$0$be = $have$29$lcssa1253;$hold$0$be = $hold$25$lcssa1252;$left$0$be = $left$0;$next$0$be = $next$29$lcssa1254;$out$0$be = $out$0;$put$0$be = $381;$ret$0$be = $554;
     break;
    }
    $556 = HEAP32[$58>>2]|0;
    HEAP32[$37>>2] = $556;
    HEAP32[$38>>2] = 6;
    $557 = HEAP32[$54>>2]|0;
    $558 = (((($2)) + 112|0) + ($557<<1)|0);
    $559 = HEAP32[$55>>2]|0;
    $560 = (_inflate_table(2,$558,$559,$58,$38,$60)|0);
    $561 = ($560|0)==(0);
    if ($561) {
     HEAP32[$2>>2] = 19;
     if ($39) {
      $848 = $381;$849 = $left$0;$bits$53 = $bits$25$lcssa1251;$have$57 = $have$29$lcssa1253;$hold$53 = $hold$25$lcssa1252;$next$57 = $next$29$lcssa1254;$out$4 = $out$0;$ret$8 = 0;
      break L17;
     } else {
      $bits$32 = $bits$25$lcssa1251;$have$36 = $have$29$lcssa1253;$hold$32 = $hold$25$lcssa1252;$next$36 = $next$29$lcssa1254;$ret$2 = 0;
      label = 199;
      break;
     }
    } else {
     HEAP32[$27>>2] = 30737;
     HEAP32[$2>>2] = 29;
     $bits$0$be = $bits$25$lcssa1251;$have$0$be = $have$29$lcssa1253;$hold$0$be = $hold$25$lcssa1252;$left$0$be = $left$0;$next$0$be = $next$29$lcssa1254;$out$0$be = $out$0;$put$0$be = $381;$ret$0$be = $560;
     break;
    }
   }
  } while(0);
  if ((label|0) == 57) {
   label = 0;
   $169 = HEAP32[$26>>2]|0;
   $170 = ($169|0)==(0|0);
   if (!($170)) {
    $171 = $hold$4$lcssa & 255;
    $172 = ((($169)) + 8|0);
    HEAP32[$172>>2] = $171;
    $173 = $hold$4$lcssa >>> 8;
    $174 = ((($169)) + 12|0);
    HEAP32[$174>>2] = $173;
   }
   $175 = HEAP32[$25>>2]|0;
   $176 = $175 & 512;
   $177 = ($176|0)==(0);
   if (!($177)) {
    $178 = $hold$4$lcssa&255;
    HEAP8[$hbuf>>0] = $178;
    $179 = $hold$4$lcssa >>> 8;
    $180 = $179&255;
    HEAP8[$24>>0] = $180;
    $181 = HEAP32[$23>>2]|0;
    $182 = (_crc32($181,$hbuf,2)|0);
    HEAP32[$23>>2] = $182;
   }
   HEAP32[$2>>2] = 4;
   $bits$5 = 0;$have$5 = $have$4$lcssa;$hold$5 = 0;$next$5 = $next$4$lcssa;
   label = 62;
  }
  else if ((label|0) == 199) {
   label = 0;
   HEAP32[$2>>2] = 20;
   $bits$33 = $bits$32;$have$37 = $have$36;$hold$33 = $hold$32;$next$37 = $next$36;$ret$3 = $ret$2;
   label = 200;
  }
  do {
   if ((label|0) == 62) {
    label = 0;
    $183 = HEAP32[$25>>2]|0;
    $184 = $183 & 1024;
    $185 = ($184|0)==(0);
    if ($185) {
     $206 = HEAP32[$26>>2]|0;
     $207 = ($206|0)==(0|0);
     if ($207) {
      $bits$7 = $bits$5;$have$7 = $have$5;$hold$7 = $hold$5;$next$7 = $next$5;
     } else {
      $208 = ((($206)) + 16|0);
      HEAP32[$208>>2] = 0;
      $bits$7 = $bits$5;$have$7 = $have$5;$hold$7 = $hold$5;$next$7 = $next$5;
     }
    } else {
     $186 = ($bits$5>>>0)<(16);
     if ($186) {
      $bits$6761 = $bits$5;$have$6759 = $have$5;$hold$6760 = $hold$5;$next$6758 = $next$5;
      while(1) {
       $187 = ($have$6759|0)==(0);
       if ($187) {
        $848 = $381;$849 = $left$0;$bits$53 = $bits$6761;$have$57 = 0;$hold$53 = $hold$6760;$next$57 = $next$6758;$out$4 = $out$0;$ret$8 = $ret$0;
        break L17;
       }
       $188 = (($have$6759) + -1)|0;
       $189 = ((($next$6758)) + 1|0);
       $190 = HEAP8[$next$6758>>0]|0;
       $191 = $190&255;
       $192 = $191 << $bits$6761;
       $193 = (($192) + ($hold$6760))|0;
       $194 = (($bits$6761) + 8)|0;
       $195 = ($194>>>0)<(16);
       if ($195) {
        $bits$6761 = $194;$have$6759 = $188;$hold$6760 = $193;$next$6758 = $189;
       } else {
        $have$6$lcssa = $188;$hold$6$lcssa = $193;$next$6$lcssa = $189;
        break;
       }
      }
     } else {
      $have$6$lcssa = $have$5;$hold$6$lcssa = $hold$5;$next$6$lcssa = $next$5;
     }
     HEAP32[$31>>2] = $hold$6$lcssa;
     $196 = HEAP32[$26>>2]|0;
     $197 = ($196|0)==(0|0);
     if (!($197)) {
      $198 = ((($196)) + 20|0);
      HEAP32[$198>>2] = $hold$6$lcssa;
     }
     $199 = $183 & 512;
     $200 = ($199|0)==(0);
     if ($200) {
      $bits$7 = 0;$have$7 = $have$6$lcssa;$hold$7 = 0;$next$7 = $next$6$lcssa;
     } else {
      $201 = $hold$6$lcssa&255;
      HEAP8[$hbuf>>0] = $201;
      $202 = $hold$6$lcssa >>> 8;
      $203 = $202&255;
      HEAP8[$24>>0] = $203;
      $204 = HEAP32[$23>>2]|0;
      $205 = (_crc32($204,$hbuf,2)|0);
      HEAP32[$23>>2] = $205;
      $bits$7 = 0;$have$7 = $have$6$lcssa;$hold$7 = 0;$next$7 = $next$6$lcssa;
     }
    }
    HEAP32[$2>>2] = 5;
    $bits$8 = $bits$7;$have$8 = $have$7;$hold$8 = $hold$7;$next$8 = $next$7;
    label = 73;
   }
   else if ((label|0) == 200) {
    label = 0;
    $562 = ($have$37>>>0)>(5);
    $563 = ($left$0>>>0)>(257);
    $or$cond6 = $563 & $562;
    if ($or$cond6) {
     HEAP32[$4>>2] = $381;
     HEAP32[$14>>2] = $left$0;
     HEAP32[$strm>>2] = $next$37;
     HEAP32[$16>>2] = $have$37;
     HEAP32[$18>>2] = $hold$33;
     HEAP32[$20>>2] = $bits$33;
     _inflate_fast($strm,$out$0);
     $564 = HEAP32[$4>>2]|0;
     $565 = HEAP32[$14>>2]|0;
     $566 = HEAP32[$strm>>2]|0;
     $567 = HEAP32[$16>>2]|0;
     $568 = HEAP32[$18>>2]|0;
     $569 = HEAP32[$20>>2]|0;
     $570 = HEAP32[$2>>2]|0;
     $571 = ($570|0)==(11);
     if (!($571)) {
      $bits$0$be = $569;$have$0$be = $567;$hold$0$be = $568;$left$0$be = $565;$next$0$be = $566;$out$0$be = $out$0;$put$0$be = $564;$ret$0$be = $ret$3;
      break;
     }
     HEAP32[$40>>2] = -1;
     $bits$0$be = $569;$have$0$be = $567;$hold$0$be = $568;$left$0$be = $565;$next$0$be = $566;$out$0$be = $out$0;$put$0$be = $564;$ret$0$be = $ret$3;
     break;
    }
    HEAP32[$40>>2] = 0;
    $572 = HEAP32[$36>>2]|0;
    $573 = 1 << $572;
    $574 = (($573) + -1)|0;
    $575 = $574 & $hold$33;
    $576 = HEAP32[$35>>2]|0;
    $577 = (((($576) + ($575<<2)|0)) + 1|0);
    $578 = HEAP8[$577>>0]|0;
    $579 = $578&255;
    $580 = ($579>>>0)>($bits$33>>>0);
    if ($580) {
     $bits$34612 = $bits$33;$have$38610 = $have$37;$hold$34611 = $hold$33;$next$38609 = $next$37;
     while(1) {
      $581 = ($have$38610|0)==(0);
      if ($581) {
       $848 = $381;$849 = $left$0;$bits$53 = $bits$34612;$have$57 = 0;$hold$53 = $hold$34611;$next$57 = $next$38609;$out$4 = $out$0;$ret$8 = $ret$3;
       break L17;
      }
      $582 = (($have$38610) + -1)|0;
      $583 = ((($next$38609)) + 1|0);
      $584 = HEAP8[$next$38609>>0]|0;
      $585 = $584&255;
      $586 = $585 << $bits$34612;
      $587 = (($586) + ($hold$34611))|0;
      $588 = (($bits$34612) + 8)|0;
      $589 = $574 & $587;
      $590 = (((($576) + ($589<<2)|0)) + 1|0);
      $591 = HEAP8[$590>>0]|0;
      $592 = $591&255;
      $593 = ($592>>>0)>($588>>>0);
      if ($593) {
       $bits$34612 = $588;$have$38610 = $582;$hold$34611 = $587;$next$38609 = $583;
      } else {
       $$lcssa166 = $591;$$lcssa170 = $592;$$pn1235 = $589;$bits$34$lcssa = $588;$have$38$lcssa = $582;$hold$34$lcssa = $587;$next$38$lcssa = $583;
       break;
      }
     }
    } else {
     $$lcssa166 = $578;$$lcssa170 = $579;$$pn1235 = $575;$bits$34$lcssa = $bits$33;$have$38$lcssa = $have$37;$hold$34$lcssa = $hold$33;$next$38$lcssa = $next$37;
    }
    $$lcssa164$in = (($576) + ($$pn1235<<2)|0);
    $$lcssa168$in = (((($576) + ($$pn1235<<2)|0)) + 2|0);
    $$lcssa164 = HEAP8[$$lcssa164$in>>0]|0;
    $$lcssa168 = HEAP16[$$lcssa168$in>>1]|0;
    $594 = $$lcssa164&255;
    $595 = ($$lcssa164<<24>>24)!=(0);
    $596 = $594 & 240;
    $597 = ($596|0)==(0);
    $or$cond20 = $595 & $597;
    if ($or$cond20) {
     $598 = $$lcssa168&65535;
     $599 = (($$lcssa170) + ($594))|0;
     $600 = 1 << $599;
     $601 = (($600) + -1)|0;
     $602 = $hold$34$lcssa & $601;
     $603 = $602 >>> $$lcssa170;
     $604 = (($603) + ($598))|0;
     $605 = (((($576) + ($604<<2)|0)) + 1|0);
     $606 = HEAP8[$605>>0]|0;
     $607 = $606&255;
     $608 = (($607) + ($$lcssa170))|0;
     $609 = ($608>>>0)>($bits$34$lcssa>>>0);
     if ($609) {
      $bits$35634 = $bits$34$lcssa;$have$39632 = $have$38$lcssa;$hold$35633 = $hold$34$lcssa;$next$39631 = $next$38$lcssa;
      while(1) {
       $610 = ($have$39632|0)==(0);
       if ($610) {
        $848 = $381;$849 = $left$0;$bits$53 = $bits$35634;$have$57 = 0;$hold$53 = $hold$35633;$next$57 = $next$39631;$out$4 = $out$0;$ret$8 = $ret$3;
        break L17;
       }
       $611 = (($have$39632) + -1)|0;
       $612 = ((($next$39631)) + 1|0);
       $613 = HEAP8[$next$39631>>0]|0;
       $614 = $613&255;
       $615 = $614 << $bits$35634;
       $616 = (($615) + ($hold$35633))|0;
       $617 = (($bits$35634) + 8)|0;
       $618 = $616 & $601;
       $619 = $618 >>> $$lcssa170;
       $620 = (($619) + ($598))|0;
       $621 = (((($576) + ($620<<2)|0)) + 1|0);
       $622 = HEAP8[$621>>0]|0;
       $623 = $622&255;
       $624 = (($623) + ($$lcssa170))|0;
       $625 = ($624>>>0)>($617>>>0);
       if ($625) {
        $bits$35634 = $617;$have$39632 = $611;$hold$35633 = $616;$next$39631 = $612;
       } else {
        $$lcssa176 = $620;$$lcssa180 = $622;$bits$35$lcssa = $617;$have$39$lcssa = $611;$hold$35$lcssa = $616;$next$39$lcssa = $612;
        break;
       }
      }
     } else {
      $$lcssa176 = $604;$$lcssa180 = $606;$bits$35$lcssa = $bits$34$lcssa;$have$39$lcssa = $have$38$lcssa;$hold$35$lcssa = $hold$34$lcssa;$next$39$lcssa = $next$38$lcssa;
     }
     $626 = (((($576) + ($$lcssa176<<2)|0)) + 2|0);
     $627 = HEAP16[$626>>1]|0;
     $628 = (($576) + ($$lcssa176<<2)|0);
     $629 = HEAP8[$628>>0]|0;
     $630 = $hold$35$lcssa >>> $$lcssa170;
     $631 = (($bits$35$lcssa) - ($$lcssa170))|0;
     HEAP32[$40>>2] = $$lcssa170;
     $636 = $$lcssa170;$bits$36 = $631;$have$40 = $have$39$lcssa;$here$sroa$0$0 = $629;$here$sroa$16$0 = $$lcssa180;$here$sroa$40$0 = $627;$hold$36 = $630;$next$40 = $next$39$lcssa;
    } else {
     $636 = 0;$bits$36 = $bits$34$lcssa;$have$40 = $have$38$lcssa;$here$sroa$0$0 = $$lcssa164;$here$sroa$16$0 = $$lcssa166;$here$sroa$40$0 = $$lcssa168;$hold$36 = $hold$34$lcssa;$next$40 = $next$38$lcssa;
    }
    $632 = $here$sroa$16$0&255;
    $633 = $hold$36 >>> $632;
    $634 = (($bits$36) - ($632))|0;
    $635 = (($636) + ($632))|0;
    HEAP32[$40>>2] = $635;
    $637 = $here$sroa$40$0&65535;
    HEAP32[$31>>2] = $637;
    $638 = $here$sroa$0$0&255;
    $639 = ($here$sroa$0$0<<24>>24)==(0);
    if ($639) {
     HEAP32[$2>>2] = 25;
     $bits$0$be = $634;$have$0$be = $have$40;$hold$0$be = $633;$left$0$be = $left$0;$next$0$be = $next$40;$out$0$be = $out$0;$put$0$be = $381;$ret$0$be = $ret$3;
     break;
    }
    $640 = $638 & 32;
    $641 = ($640|0)==(0);
    if (!($641)) {
     HEAP32[$40>>2] = -1;
     HEAP32[$2>>2] = 11;
     $bits$0$be = $634;$have$0$be = $have$40;$hold$0$be = $633;$left$0$be = $left$0;$next$0$be = $next$40;$out$0$be = $out$0;$put$0$be = $381;$ret$0$be = $ret$3;
     break;
    }
    $642 = $638 & 64;
    $643 = ($642|0)==(0);
    if ($643) {
     $644 = $638 & 15;
     HEAP32[$41>>2] = $644;
     HEAP32[$2>>2] = 21;
     $645 = $644;$bits$37 = $634;$have$41 = $have$40;$hold$37 = $633;$next$41 = $next$40;$ret$4 = $ret$3;
     label = 218;
     break;
    } else {
     HEAP32[$27>>2] = 30855;
     HEAP32[$2>>2] = 29;
     $bits$0$be = $634;$have$0$be = $have$40;$hold$0$be = $633;$left$0$be = $left$0;$next$0$be = $next$40;$out$0$be = $out$0;$put$0$be = $381;$ret$0$be = $ret$3;
     break;
    }
   }
  } while(0);
  if ((label|0) == 73) {
   label = 0;
   $209 = HEAP32[$25>>2]|0;
   $210 = $209 & 1024;
   $211 = ($210|0)==(0);
   if ($211) {
    $have$10 = $have$8;$next$10 = $next$8;
   } else {
    $212 = HEAP32[$31>>2]|0;
    $213 = ($212>>>0)>($have$8>>>0);
    $have$8$ = $213 ? $have$8 : $212;
    $214 = ($have$8$|0)==(0);
    if ($214) {
     $239 = $212;$have$9 = $have$8;$next$9 = $next$8;
    } else {
     $215 = HEAP32[$26>>2]|0;
     $216 = ($215|0)==(0|0);
     if ($216) {
      $231 = $209;
     } else {
      $217 = ((($215)) + 16|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = ($218|0)==(0|0);
      if ($219) {
       $231 = $209;
      } else {
       $220 = ((($215)) + 20|0);
       $221 = HEAP32[$220>>2]|0;
       $222 = (($221) - ($212))|0;
       $223 = (($218) + ($222)|0);
       $224 = (($222) + ($have$8$))|0;
       $225 = ((($215)) + 24|0);
       $226 = HEAP32[$225>>2]|0;
       $227 = ($224>>>0)>($226>>>0);
       $228 = (($226) - ($222))|0;
       $229 = $227 ? $228 : $have$8$;
       _memcpy(($223|0),($next$8|0),($229|0))|0;
       $$pre1230 = HEAP32[$25>>2]|0;
       $231 = $$pre1230;
      }
     }
     $230 = $231 & 512;
     $232 = ($230|0)==(0);
     if (!($232)) {
      $233 = HEAP32[$23>>2]|0;
      $234 = (_crc32($233,$next$8,$have$8$)|0);
      HEAP32[$23>>2] = $234;
     }
     $235 = (($have$8) - ($have$8$))|0;
     $236 = (($next$8) + ($have$8$)|0);
     $237 = HEAP32[$31>>2]|0;
     $238 = (($237) - ($have$8$))|0;
     HEAP32[$31>>2] = $238;
     $239 = $238;$have$9 = $235;$next$9 = $236;
    }
    $240 = ($239|0)==(0);
    if ($240) {
     $have$10 = $have$9;$next$10 = $next$9;
    } else {
     $848 = $381;$849 = $left$0;$bits$53 = $bits$8;$have$57 = $have$9;$hold$53 = $hold$8;$next$57 = $next$9;$out$4 = $out$0;$ret$8 = $ret$0;
     break;
    }
   }
   HEAP32[$31>>2] = 0;
   HEAP32[$2>>2] = 6;
   $bits$9 = $bits$8;$have$11 = $have$10;$hold$9 = $hold$8;$next$11 = $next$10;
   label = 83;
  }
  else if ((label|0) == 218) {
   label = 0;
   $646 = ($645|0)==(0);
   if ($646) {
    $$pre1225 = HEAP32[$31>>2]|0;
    $666 = $$pre1225;$bits$39 = $bits$37;$have$43 = $have$41;$hold$39 = $hold$37;$next$43 = $next$41;
   } else {
    $647 = ($bits$37>>>0)<($645>>>0);
    if ($647) {
     $bits$38647 = $bits$37;$have$42645 = $have$41;$hold$38646 = $hold$37;$next$42644 = $next$41;
     while(1) {
      $648 = ($have$42645|0)==(0);
      if ($648) {
       $848 = $381;$849 = $left$0;$bits$53 = $bits$38647;$have$57 = 0;$hold$53 = $hold$38646;$next$57 = $next$42644;$out$4 = $out$0;$ret$8 = $ret$4;
       break L17;
      }
      $649 = (($have$42645) + -1)|0;
      $650 = ((($next$42644)) + 1|0);
      $651 = HEAP8[$next$42644>>0]|0;
      $652 = $651&255;
      $653 = $652 << $bits$38647;
      $654 = (($653) + ($hold$38646))|0;
      $655 = (($bits$38647) + 8)|0;
      $656 = ($655>>>0)<($645>>>0);
      if ($656) {
       $bits$38647 = $655;$have$42645 = $649;$hold$38646 = $654;$next$42644 = $650;
      } else {
       $bits$38$lcssa = $655;$have$42$lcssa = $649;$hold$38$lcssa = $654;$next$42$lcssa = $650;
       break;
      }
     }
    } else {
     $bits$38$lcssa = $bits$37;$have$42$lcssa = $have$41;$hold$38$lcssa = $hold$37;$next$42$lcssa = $next$41;
    }
    $657 = 1 << $645;
    $658 = (($657) + -1)|0;
    $659 = $658 & $hold$38$lcssa;
    $660 = HEAP32[$31>>2]|0;
    $661 = (($660) + ($659))|0;
    HEAP32[$31>>2] = $661;
    $662 = $hold$38$lcssa >>> $645;
    $663 = (($bits$38$lcssa) - ($645))|0;
    $664 = HEAP32[$40>>2]|0;
    $665 = (($664) + ($645))|0;
    HEAP32[$40>>2] = $665;
    $666 = $661;$bits$39 = $663;$have$43 = $have$42$lcssa;$hold$39 = $662;$next$43 = $next$42$lcssa;
   }
   HEAP32[$42>>2] = $666;
   HEAP32[$2>>2] = 22;
   $bits$40$ph = $bits$39;$have$44$ph = $have$43;$hold$40$ph = $hold$39;$next$44$ph = $next$43;$ret$5$ph = $ret$4;
   label = 225;
  }
  do {
   if ((label|0) == 83) {
    label = 0;
    $241 = HEAP32[$25>>2]|0;
    $242 = $241 & 2048;
    $243 = ($242|0)==(0);
    if ($243) {
     $268 = HEAP32[$26>>2]|0;
     $269 = ($268|0)==(0|0);
     if ($269) {
      $have$12 = $have$11;$next$12 = $next$11;
     } else {
      $270 = ((($268)) + 28|0);
      HEAP32[$270>>2] = 0;
      $have$12 = $have$11;$next$12 = $next$11;
     }
    } else {
     $244 = ($have$11|0)==(0);
     if ($244) {
      $848 = $381;$849 = $left$0;$bits$53 = $bits$9;$have$57 = 0;$hold$53 = $hold$9;$next$57 = $next$11;$out$4 = $out$0;$ret$8 = $ret$0;
      break L17;
     } else {
      $copy$1 = 0;
     }
     while(1) {
      $245 = (($copy$1) + 1)|0;
      $246 = (($next$11) + ($copy$1)|0);
      $247 = HEAP8[$246>>0]|0;
      $248 = HEAP32[$26>>2]|0;
      $249 = ($248|0)==(0|0);
      if (!($249)) {
       $250 = ((($248)) + 28|0);
       $251 = HEAP32[$250>>2]|0;
       $252 = ($251|0)==(0|0);
       if (!($252)) {
        $253 = HEAP32[$31>>2]|0;
        $254 = ((($248)) + 32|0);
        $255 = HEAP32[$254>>2]|0;
        $256 = ($253>>>0)<($255>>>0);
        if ($256) {
         $257 = (($253) + 1)|0;
         HEAP32[$31>>2] = $257;
         $258 = (($251) + ($253)|0);
         HEAP8[$258>>0] = $247;
        }
       }
      }
      $259 = ($247<<24>>24)!=(0);
      $260 = ($have$11>>>0)>($245>>>0);
      $or$cond17 = $259 & $260;
      if ($or$cond17) {
       $copy$1 = $245;
      } else {
       $$lcssa2737 = $245;$$lcssa2738 = $259;
       break;
      }
     }
     $261 = HEAP32[$25>>2]|0;
     $262 = $261 & 512;
     $263 = ($262|0)==(0);
     if (!($263)) {
      $264 = HEAP32[$23>>2]|0;
      $265 = (_crc32($264,$next$11,$$lcssa2737)|0);
      HEAP32[$23>>2] = $265;
     }
     $266 = (($have$11) - ($$lcssa2737))|0;
     $267 = (($next$11) + ($$lcssa2737)|0);
     if ($$lcssa2738) {
      $848 = $381;$849 = $left$0;$bits$53 = $bits$9;$have$57 = $266;$hold$53 = $hold$9;$next$57 = $267;$out$4 = $out$0;$ret$8 = $ret$0;
      break L17;
     } else {
      $have$12 = $266;$next$12 = $267;
     }
    }
    HEAP32[$31>>2] = 0;
    HEAP32[$2>>2] = 7;
    $bits$10 = $bits$9;$have$13 = $have$12;$hold$10 = $hold$9;$next$13 = $next$12;
    label = 96;
   }
   else if ((label|0) == 225) {
    label = 0;
    $667 = HEAP32[$38>>2]|0;
    $668 = 1 << $667;
    $669 = (($668) + -1)|0;
    $670 = $669 & $hold$40$ph;
    $671 = HEAP32[$37>>2]|0;
    $672 = (((($671) + ($670<<2)|0)) + 1|0);
    $673 = HEAP8[$672>>0]|0;
    $674 = $673&255;
    $675 = ($674>>>0)>($bits$40$ph>>>0);
    if ($675) {
     $bits$40658 = $bits$40$ph;$have$44656 = $have$44$ph;$hold$40657 = $hold$40$ph;$next$44655 = $next$44$ph;
     while(1) {
      $676 = ($have$44656|0)==(0);
      if ($676) {
       $848 = $381;$849 = $left$0;$bits$53 = $bits$40658;$have$57 = 0;$hold$53 = $hold$40657;$next$57 = $next$44655;$out$4 = $out$0;$ret$8 = $ret$5$ph;
       break L17;
      }
      $677 = (($have$44656) + -1)|0;
      $678 = ((($next$44655)) + 1|0);
      $679 = HEAP8[$next$44655>>0]|0;
      $680 = $679&255;
      $681 = $680 << $bits$40658;
      $682 = (($681) + ($hold$40657))|0;
      $683 = (($bits$40658) + 8)|0;
      $684 = $669 & $682;
      $685 = (((($671) + ($684<<2)|0)) + 1|0);
      $686 = HEAP8[$685>>0]|0;
      $687 = $686&255;
      $688 = ($687>>>0)>($683>>>0);
      if ($688) {
       $bits$40658 = $683;$have$44656 = $677;$hold$40657 = $682;$next$44655 = $678;
      } else {
       $$lcssa196 = $686;$$lcssa200 = $687;$$pn = $684;$bits$40$lcssa = $683;$have$44$lcssa = $677;$hold$40$lcssa = $682;$next$44$lcssa = $678;
       break;
      }
     }
    } else {
     $$lcssa196 = $673;$$lcssa200 = $674;$$pn = $670;$bits$40$lcssa = $bits$40$ph;$have$44$lcssa = $have$44$ph;$hold$40$lcssa = $hold$40$ph;$next$44$lcssa = $next$44$ph;
    }
    $$lcssa194$in = (($671) + ($$pn<<2)|0);
    $$lcssa198$in = (((($671) + ($$pn<<2)|0)) + 2|0);
    $$lcssa194 = HEAP8[$$lcssa194$in>>0]|0;
    $$lcssa198 = HEAP16[$$lcssa198$in>>1]|0;
    $689 = $$lcssa194&255;
    $690 = $689 & 240;
    $691 = ($690|0)==(0);
    if ($691) {
     $692 = $$lcssa198&65535;
     $693 = (($$lcssa200) + ($689))|0;
     $694 = 1 << $693;
     $695 = (($694) + -1)|0;
     $696 = $hold$40$lcssa & $695;
     $697 = $696 >>> $$lcssa200;
     $698 = (($697) + ($692))|0;
     $699 = (((($671) + ($698<<2)|0)) + 1|0);
     $700 = HEAP8[$699>>0]|0;
     $701 = $700&255;
     $702 = (($701) + ($$lcssa200))|0;
     $703 = ($702>>>0)>($bits$40$lcssa>>>0);
     if ($703) {
      $bits$41679 = $bits$40$lcssa;$have$45677 = $have$44$lcssa;$hold$41678 = $hold$40$lcssa;$next$45676 = $next$44$lcssa;
      while(1) {
       $704 = ($have$45677|0)==(0);
       if ($704) {
        $848 = $381;$849 = $left$0;$bits$53 = $bits$41679;$have$57 = 0;$hold$53 = $hold$41678;$next$57 = $next$45676;$out$4 = $out$0;$ret$8 = $ret$5$ph;
        break L17;
       }
       $705 = (($have$45677) + -1)|0;
       $706 = ((($next$45676)) + 1|0);
       $707 = HEAP8[$next$45676>>0]|0;
       $708 = $707&255;
       $709 = $708 << $bits$41679;
       $710 = (($709) + ($hold$41678))|0;
       $711 = (($bits$41679) + 8)|0;
       $712 = $710 & $695;
       $713 = $712 >>> $$lcssa200;
       $714 = (($713) + ($692))|0;
       $715 = (((($671) + ($714<<2)|0)) + 1|0);
       $716 = HEAP8[$715>>0]|0;
       $717 = $716&255;
       $718 = (($717) + ($$lcssa200))|0;
       $719 = ($718>>>0)>($711>>>0);
       if ($719) {
        $bits$41679 = $711;$have$45677 = $705;$hold$41678 = $710;$next$45676 = $706;
       } else {
        $$lcssa206 = $714;$$lcssa210 = $716;$bits$41$lcssa = $711;$have$45$lcssa = $705;$hold$41$lcssa = $710;$next$45$lcssa = $706;
        break;
       }
      }
     } else {
      $$lcssa206 = $698;$$lcssa210 = $700;$bits$41$lcssa = $bits$40$lcssa;$have$45$lcssa = $have$44$lcssa;$hold$41$lcssa = $hold$40$lcssa;$next$45$lcssa = $next$44$lcssa;
     }
     $720 = (((($671) + ($$lcssa206<<2)|0)) + 2|0);
     $721 = HEAP16[$720>>1]|0;
     $722 = (($671) + ($$lcssa206<<2)|0);
     $723 = HEAP8[$722>>0]|0;
     $724 = $hold$41$lcssa >>> $$lcssa200;
     $725 = (($bits$41$lcssa) - ($$lcssa200))|0;
     $726 = HEAP32[$40>>2]|0;
     $727 = (($726) + ($$lcssa200))|0;
     HEAP32[$40>>2] = $727;
     $732 = $727;$bits$42 = $725;$have$46 = $have$45$lcssa;$here$sroa$0$1 = $723;$here$sroa$16$1 = $$lcssa210;$here$sroa$40$1 = $721;$hold$42 = $724;$next$46 = $next$45$lcssa;
    } else {
     $$pre1227 = HEAP32[$40>>2]|0;
     $732 = $$pre1227;$bits$42 = $bits$40$lcssa;$have$46 = $have$44$lcssa;$here$sroa$0$1 = $$lcssa194;$here$sroa$16$1 = $$lcssa196;$here$sroa$40$1 = $$lcssa198;$hold$42 = $hold$40$lcssa;$next$46 = $next$44$lcssa;
    }
    $728 = $here$sroa$16$1&255;
    $729 = $hold$42 >>> $728;
    $730 = (($bits$42) - ($728))|0;
    $731 = (($732) + ($728))|0;
    HEAP32[$40>>2] = $731;
    $733 = $here$sroa$0$1&255;
    $734 = $733 & 64;
    $735 = ($734|0)==(0);
    if ($735) {
     $736 = $here$sroa$40$1&65535;
     HEAP32[$43>>2] = $736;
     $737 = $733 & 15;
     HEAP32[$41>>2] = $737;
     HEAP32[$2>>2] = 23;
     $738 = $737;$bits$43 = $730;$have$47 = $have$46;$hold$43 = $729;$next$47 = $next$46;$ret$6 = $ret$5$ph;
     label = 237;
     break;
    } else {
     HEAP32[$27>>2] = 30833;
     HEAP32[$2>>2] = 29;
     $bits$0$be = $730;$have$0$be = $have$46;$hold$0$be = $729;$left$0$be = $left$0;$next$0$be = $next$46;$out$0$be = $out$0;$put$0$be = $381;$ret$0$be = $ret$5$ph;
     break;
    }
   }
  } while(0);
  if ((label|0) == 96) {
   label = 0;
   $271 = HEAP32[$25>>2]|0;
   $272 = $271 & 4096;
   $273 = ($272|0)==(0);
   if ($273) {
    $298 = HEAP32[$26>>2]|0;
    $299 = ($298|0)==(0|0);
    if ($299) {
     $have$14 = $have$13;$next$14 = $next$13;
    } else {
     $300 = ((($298)) + 36|0);
     HEAP32[$300>>2] = 0;
     $have$14 = $have$13;$next$14 = $next$13;
    }
   } else {
    $274 = ($have$13|0)==(0);
    if ($274) {
     $848 = $381;$849 = $left$0;$bits$53 = $bits$10;$have$57 = 0;$hold$53 = $hold$10;$next$57 = $next$13;$out$4 = $out$0;$ret$8 = $ret$0;
     break;
    } else {
     $copy$2 = 0;
    }
    while(1) {
     $275 = (($copy$2) + 1)|0;
     $276 = (($next$13) + ($copy$2)|0);
     $277 = HEAP8[$276>>0]|0;
     $278 = HEAP32[$26>>2]|0;
     $279 = ($278|0)==(0|0);
     if (!($279)) {
      $280 = ((($278)) + 36|0);
      $281 = HEAP32[$280>>2]|0;
      $282 = ($281|0)==(0|0);
      if (!($282)) {
       $283 = HEAP32[$31>>2]|0;
       $284 = ((($278)) + 40|0);
       $285 = HEAP32[$284>>2]|0;
       $286 = ($283>>>0)<($285>>>0);
       if ($286) {
        $287 = (($283) + 1)|0;
        HEAP32[$31>>2] = $287;
        $288 = (($281) + ($283)|0);
        HEAP8[$288>>0] = $277;
       }
      }
     }
     $289 = ($277<<24>>24)!=(0);
     $290 = ($have$13>>>0)>($275>>>0);
     $or$cond18 = $289 & $290;
     if ($or$cond18) {
      $copy$2 = $275;
     } else {
      $$lcssa2739 = $275;$$lcssa2740 = $289;
      break;
     }
    }
    $291 = HEAP32[$25>>2]|0;
    $292 = $291 & 512;
    $293 = ($292|0)==(0);
    if (!($293)) {
     $294 = HEAP32[$23>>2]|0;
     $295 = (_crc32($294,$next$13,$$lcssa2739)|0);
     HEAP32[$23>>2] = $295;
    }
    $296 = (($have$13) - ($$lcssa2739))|0;
    $297 = (($next$13) + ($$lcssa2739)|0);
    if ($$lcssa2740) {
     $848 = $381;$849 = $left$0;$bits$53 = $bits$10;$have$57 = $296;$hold$53 = $hold$10;$next$57 = $297;$out$4 = $out$0;$ret$8 = $ret$0;
     break;
    } else {
     $have$14 = $296;$next$14 = $297;
    }
   }
   HEAP32[$2>>2] = 8;
   $bits$11 = $bits$10;$have$15 = $have$14;$hold$11 = $hold$10;$next$15 = $next$14;
   label = 109;
  }
  else if ((label|0) == 237) {
   label = 0;
   $739 = ($738|0)==(0);
   if ($739) {
    $bits$45 = $bits$43;$have$49 = $have$47;$hold$45 = $hold$43;$next$49 = $next$47;
   } else {
    $740 = ($bits$43>>>0)<($738>>>0);
    if ($740) {
     $bits$44692 = $bits$43;$have$48690 = $have$47;$hold$44691 = $hold$43;$next$48689 = $next$47;
     while(1) {
      $741 = ($have$48690|0)==(0);
      if ($741) {
       $848 = $381;$849 = $left$0;$bits$53 = $bits$44692;$have$57 = 0;$hold$53 = $hold$44691;$next$57 = $next$48689;$out$4 = $out$0;$ret$8 = $ret$6;
       break L17;
      }
      $742 = (($have$48690) + -1)|0;
      $743 = ((($next$48689)) + 1|0);
      $744 = HEAP8[$next$48689>>0]|0;
      $745 = $744&255;
      $746 = $745 << $bits$44692;
      $747 = (($746) + ($hold$44691))|0;
      $748 = (($bits$44692) + 8)|0;
      $749 = ($748>>>0)<($738>>>0);
      if ($749) {
       $bits$44692 = $748;$have$48690 = $742;$hold$44691 = $747;$next$48689 = $743;
      } else {
       $bits$44$lcssa = $748;$have$48$lcssa = $742;$hold$44$lcssa = $747;$next$48$lcssa = $743;
       break;
      }
     }
    } else {
     $bits$44$lcssa = $bits$43;$have$48$lcssa = $have$47;$hold$44$lcssa = $hold$43;$next$48$lcssa = $next$47;
    }
    $750 = 1 << $738;
    $751 = (($750) + -1)|0;
    $752 = $751 & $hold$44$lcssa;
    $753 = HEAP32[$43>>2]|0;
    $754 = (($753) + ($752))|0;
    HEAP32[$43>>2] = $754;
    $755 = $hold$44$lcssa >>> $738;
    $756 = (($bits$44$lcssa) - ($738))|0;
    $757 = HEAP32[$40>>2]|0;
    $758 = (($757) + ($738))|0;
    HEAP32[$40>>2] = $758;
    $bits$45 = $756;$have$49 = $have$48$lcssa;$hold$45 = $755;$next$49 = $next$48$lcssa;
   }
   HEAP32[$2>>2] = 24;
   $bits$46 = $bits$45;$have$50 = $have$49;$hold$46 = $hold$45;$next$50 = $next$49;$ret$7 = $ret$6;
   label = 243;
  }
  do {
   if ((label|0) == 109) {
    label = 0;
    $301 = HEAP32[$25>>2]|0;
    $302 = $301 & 512;
    $303 = ($302|0)==(0);
    if ($303) {
     $bits$13 = $bits$11;$have$17 = $have$15;$hold$13 = $hold$11;$next$17 = $next$15;
    } else {
     $304 = ($bits$11>>>0)<(16);
     if ($304) {
      $bits$12770 = $bits$11;$have$16768 = $have$15;$hold$12769 = $hold$11;$next$16767 = $next$15;
      while(1) {
       $305 = ($have$16768|0)==(0);
       if ($305) {
        $848 = $381;$849 = $left$0;$bits$53 = $bits$12770;$have$57 = 0;$hold$53 = $hold$12769;$next$57 = $next$16767;$out$4 = $out$0;$ret$8 = $ret$0;
        break L17;
       }
       $306 = (($have$16768) + -1)|0;
       $307 = ((($next$16767)) + 1|0);
       $308 = HEAP8[$next$16767>>0]|0;
       $309 = $308&255;
       $310 = $309 << $bits$12770;
       $311 = (($310) + ($hold$12769))|0;
       $312 = (($bits$12770) + 8)|0;
       $313 = ($312>>>0)<(16);
       if ($313) {
        $bits$12770 = $312;$have$16768 = $306;$hold$12769 = $311;$next$16767 = $307;
       } else {
        $bits$12$lcssa = $312;$have$16$lcssa = $306;$hold$12$lcssa = $311;$next$16$lcssa = $307;
        break;
       }
      }
     } else {
      $bits$12$lcssa = $bits$11;$have$16$lcssa = $have$15;$hold$12$lcssa = $hold$11;$next$16$lcssa = $next$15;
     }
     $314 = HEAP32[$23>>2]|0;
     $315 = $314 & 65535;
     $316 = ($hold$12$lcssa|0)==($315|0);
     if ($316) {
      $bits$13 = 0;$have$17 = $have$16$lcssa;$hold$13 = 0;$next$17 = $next$16$lcssa;
     } else {
      HEAP32[$27>>2] = 30517;
      HEAP32[$2>>2] = 29;
      $bits$0$be = $bits$12$lcssa;$have$0$be = $have$16$lcssa;$hold$0$be = $hold$12$lcssa;$left$0$be = $left$0;$next$0$be = $next$16$lcssa;$out$0$be = $out$0;$put$0$be = $381;$ret$0$be = $ret$0;
      break;
     }
    }
    $317 = HEAP32[$26>>2]|0;
    $318 = ($317|0)==(0|0);
    if (!($318)) {
     $319 = $301 >>> 9;
     $320 = $319 & 1;
     $321 = ((($317)) + 44|0);
     HEAP32[$321>>2] = $320;
     $322 = ((($317)) + 48|0);
     HEAP32[$322>>2] = 1;
    }
    $323 = (_crc32(0,0,0)|0);
    HEAP32[$23>>2] = $323;
    HEAP32[$30>>2] = $323;
    HEAP32[$2>>2] = 11;
    $bits$0$be = $bits$13;$have$0$be = $have$17;$hold$0$be = $hold$13;$left$0$be = $left$0;$next$0$be = $next$17;$out$0$be = $out$0;$put$0$be = $381;$ret$0$be = $ret$0;
   }
   else if ((label|0) == 243) {
    label = 0;
    $759 = ($left$0|0)==(0);
    if ($759) {
     $848 = $381;$849 = 0;$bits$53 = $bits$46;$have$57 = $have$50;$hold$53 = $hold$46;$next$57 = $next$50;$out$4 = $out$0;$ret$8 = $ret$7;
     break L17;
    }
    $760 = (($out$0) - ($left$0))|0;
    $761 = HEAP32[$43>>2]|0;
    $762 = ($761>>>0)>($760>>>0);
    if ($762) {
     $763 = (($761) - ($760))|0;
     $764 = HEAP32[$44>>2]|0;
     $765 = ($763>>>0)>($764>>>0);
     if ($765) {
      $766 = HEAP32[$45>>2]|0;
      $767 = ($766|0)==(0);
      if (!($767)) {
       HEAP32[$27>>2] = 30803;
       HEAP32[$2>>2] = 29;
       $bits$0$be = $bits$46;$have$0$be = $have$50;$hold$0$be = $hold$46;$left$0$be = $left$0;$next$0$be = $next$50;$out$0$be = $out$0;$put$0$be = $381;$ret$0$be = $ret$7;
       break;
      }
     }
     $768 = HEAP32[$46>>2]|0;
     $769 = ($763>>>0)>($768>>>0);
     if ($769) {
      $770 = (($763) - ($768))|0;
      $771 = HEAP32[$47>>2]|0;
      $772 = HEAP32[$48>>2]|0;
      $773 = (($772) - ($770))|0;
      $774 = (($771) + ($773)|0);
      $copy$7 = $770;$from$0 = $774;
     } else {
      $775 = HEAP32[$47>>2]|0;
      $776 = (($768) - ($763))|0;
      $777 = (($775) + ($776)|0);
      $copy$7 = $763;$from$0 = $777;
     }
     $778 = HEAP32[$31>>2]|0;
     $779 = ($copy$7>>>0)>($778>>>0);
     $$copy$7 = $779 ? $778 : $copy$7;
     $785 = $778;$copy$8 = $$copy$7;$from$1 = $from$0;
    } else {
     $780 = (0 - ($761))|0;
     $781 = (($381) + ($780)|0);
     $782 = HEAP32[$31>>2]|0;
     $785 = $782;$copy$8 = $782;$from$1 = $781;
    }
    $783 = ($copy$8>>>0)>($left$0>>>0);
    $left$0$copy$8 = $783 ? $left$0 : $copy$8;
    $784 = (($785) - ($left$0$copy$8))|0;
    HEAP32[$31>>2] = $784;
    $786 = ($copy$8>>>0)>($left$0>>>0);
    $787 = $786 ? $left$0 : $copy$8;
    $copy$10 = $left$0$copy$8;$from$2 = $from$1;$put$1 = $381;
    while(1) {
     $788 = ((($from$2)) + 1|0);
     $789 = HEAP8[$from$2>>0]|0;
     $790 = ((($put$1)) + 1|0);
     HEAP8[$put$1>>0] = $789;
     $791 = (($copy$10) + -1)|0;
     $792 = ($791|0)==(0);
     if ($792) {
      break;
     } else {
      $copy$10 = $791;$from$2 = $788;$put$1 = $790;
     }
    }
    $793 = (($left$0) - ($left$0$copy$8))|0;
    $scevgep1213 = (($381) + ($787)|0);
    $794 = HEAP32[$31>>2]|0;
    $795 = ($794|0)==(0);
    if ($795) {
     HEAP32[$2>>2] = 20;
     $bits$0$be = $bits$46;$have$0$be = $have$50;$hold$0$be = $hold$46;$left$0$be = $793;$next$0$be = $next$50;$out$0$be = $out$0;$put$0$be = $scevgep1213;$ret$0$be = $ret$7;
    } else {
     $bits$0$be = $bits$46;$have$0$be = $have$50;$hold$0$be = $hold$46;$left$0$be = $793;$next$0$be = $next$50;$out$0$be = $out$0;$put$0$be = $scevgep1213;$ret$0$be = $ret$7;
    }
   }
  } while(0);
  $$pre = HEAP32[$2>>2]|0;
  $381 = $put$0$be;$62 = $$pre;$bits$0 = $bits$0$be;$have$0 = $have$0$be;$hold$0 = $hold$0$be;$left$0 = $left$0$be;$next$0 = $next$0$be;$out$0 = $out$0$be;$ret$0 = $ret$0$be;
 }
 if ((label|0) == 122) {
  HEAP32[$4>>2] = $$lcssa2805;
  HEAP32[$14>>2] = $left$0$lcssa2863;
  HEAP32[$strm>>2] = $next$19$lcssa;
  HEAP32[$16>>2] = $have$19$lcssa;
  HEAP32[$18>>2] = $hold$15$lcssa;
  HEAP32[$20>>2] = $bits$15$lcssa;
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 133) {
  $355 = $hold$18$lcssa$lcssa >>> 3;
  $356 = (($bits$18$lcssa$lcssa) + -3)|0;
  $848 = $$lcssa2807;$849 = $left$0$lcssa2865;$bits$53 = $356;$have$57 = $have$22$lcssa$lcssa;$hold$53 = $355;$next$57 = $next$22$lcssa$lcssa;$out$4 = $out$0$lcssa2952;$ret$8 = $ret$0$lcssa2981;
 }
 else if ((label|0) == 280) {
  HEAP32[$2>>2] = 28;
  $848 = $$lcssa2789;$849 = $left$0$lcssa2847;$bits$53 = $bits$51;$have$57 = $have$55;$hold$53 = $hold$51;$next$57 = $next$55;$out$4 = $out$2$lcssa;$ret$8 = 1;
 }
 else if ((label|0) == 281) {
  $848 = $$lcssa2786;$849 = $left$0$lcssa2844;$bits$53 = $bits$0$lcssa2902;$have$57 = $have$0$lcssa2815;$hold$53 = $hold$0$lcssa2873;$next$57 = $next$0$lcssa2756;$out$4 = $out$0$lcssa2931;$ret$8 = -3;
 }
 else if ((label|0) == 295) {
  $$0 = -2;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 296) {
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$4>>2] = $848;
 HEAP32[$14>>2] = $849;
 HEAP32[$strm>>2] = $next$57;
 HEAP32[$16>>2] = $have$57;
 HEAP32[$18>>2] = $hold$53;
 HEAP32[$20>>2] = $bits$53;
 $850 = HEAP32[$48>>2]|0;
 $851 = ($850|0)==(0);
 if ($851) {
  $852 = ($out$4|0)==($849|0);
  if ($852) {
   $861 = $have$57;$863 = $849;
  } else {
   $853 = HEAP32[$2>>2]|0;
   $854 = ($853>>>0)<(29);
   if ($854) {
    $855 = ($853>>>0)<(26);
    $856 = ($flush|0)!=(4);
    $or$cond8 = $856 | $855;
    if ($or$cond8) {
     label = 286;
    } else {
     $861 = $have$57;$863 = $849;
    }
   } else {
    $861 = $have$57;$863 = $849;
   }
  }
 } else {
  label = 286;
 }
 do {
  if ((label|0) == 286) {
   $857 = (($out$4) - ($849))|0;
   $858 = (_updatewindow($strm,$848,$857)|0);
   $859 = ($858|0)==(0);
   if ($859) {
    $$pre1232 = HEAP32[$16>>2]|0;
    $$pre1233 = HEAP32[$14>>2]|0;
    $861 = $$pre1232;$863 = $$pre1233;
    break;
   }
   HEAP32[$2>>2] = 30;
   $$0 = -4;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $860 = (($17) - ($861))|0;
 $862 = (($out$4) - ($863))|0;
 $864 = ((($strm)) + 8|0);
 $865 = HEAP32[$864>>2]|0;
 $866 = (($860) + ($865))|0;
 HEAP32[$864>>2] = $866;
 $867 = HEAP32[$49>>2]|0;
 $868 = (($867) + ($862))|0;
 HEAP32[$49>>2] = $868;
 $869 = HEAP32[$50>>2]|0;
 $870 = (($869) + ($862))|0;
 HEAP32[$50>>2] = $870;
 $871 = HEAP32[$22>>2]|0;
 $872 = ($871|0)!=(0);
 $873 = ($out$4|0)!=($863|0);
 $or$cond10 = $873 & $872;
 if ($or$cond10) {
  $874 = HEAP32[$25>>2]|0;
  $875 = ($874|0)==(0);
  $876 = HEAP32[$23>>2]|0;
  $877 = HEAP32[$4>>2]|0;
  $878 = (0 - ($862))|0;
  $879 = (($877) + ($878)|0);
  if ($875) {
   $881 = (_adler32($876,$879,$862)|0);
   $882 = $881;
  } else {
   $880 = (_crc32($876,$879,$862)|0);
   $882 = $880;
  }
  HEAP32[$23>>2] = $882;
  HEAP32[$30>>2] = $882;
 }
 $883 = HEAP32[$20>>2]|0;
 $884 = HEAP32[$34>>2]|0;
 $885 = ($884|0)!=(0);
 $886 = $885 ? 64 : 0;
 $887 = (($886) + ($883))|0;
 $888 = HEAP32[$2>>2]|0;
 $889 = ($888|0)==(11);
 $890 = $889 ? 128 : 0;
 $891 = (($887) + ($890))|0;
 $892 = ($888|0)==(19);
 $893 = ($888|0)==(14);
 $894 = $892 | $893;
 $895 = $894 ? 256 : 0;
 $896 = (($891) + ($895))|0;
 $897 = ((($strm)) + 44|0);
 HEAP32[$897>>2] = $896;
 $898 = ($17|0)==($861|0);
 $899 = ($out$4|0)==($863|0);
 $or$cond12 = $898 & $899;
 $900 = ($flush|0)==(4);
 $or$cond14 = $900 | $or$cond12;
 $901 = ($ret$8|0)==(0);
 $or$cond16 = $901 & $or$cond14;
 $$ret$8 = $or$cond16 ? -5 : $ret$8;
 $$0 = $$ret$8;
 STACKTOP = sp;return ($$0|0);
}
function _inflateEnd($strm) {
 $strm = $strm|0;
 var $$0 = 0, $$pre = 0, $$pre1 = 0, $$pre2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($strm|0)==(0|0);
 if ($0) {
  $$0 = -2;
  return ($$0|0);
 }
 $1 = ((($strm)) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = -2;
  return ($$0|0);
 }
 $4 = ((($strm)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$0 = -2;
  return ($$0|0);
 }
 $7 = ((($2)) + 52|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 $$pre2 = ((($strm)) + 40|0);
 if ($9) {
  $12 = $5;$13 = $2;
 } else {
  $10 = HEAP32[$$pre2>>2]|0;
  FUNCTION_TABLE_vii[$5 & 255]($10,$8);
  $$pre = HEAP32[$4>>2]|0;
  $$pre1 = HEAP32[$1>>2]|0;
  $12 = $$pre;$13 = $$pre1;
 }
 $11 = HEAP32[$$pre2>>2]|0;
 FUNCTION_TABLE_vii[$12 & 255]($11,$13);
 HEAP32[$1>>2] = 0;
 $$0 = 0;
 return ($$0|0);
}
function _updatewindow($strm,$end,$copy) {
 $strm = $strm|0;
 $end = $end|0;
 $copy = $copy|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $copy$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($strm)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 52|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $5 = ((($strm)) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($strm)) + 40|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($1)) + 36|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = 1 << $10;
  $12 = (FUNCTION_TABLE_iiii[$6 & 255]($8,$11,1)|0);
  HEAP32[$2>>2] = $12;
  $13 = ($12|0)==(0|0);
  if ($13) {
   $$0 = 1;
   return ($$0|0);
  } else {
   $26 = $12;
  }
 } else {
  $26 = $3;
 }
 $14 = ((($1)) + 40|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0);
 if ($16) {
  $17 = ((($1)) + 36|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = 1 << $18;
  HEAP32[$14>>2] = $19;
  $20 = ((($1)) + 48|0);
  HEAP32[$20>>2] = 0;
  $21 = ((($1)) + 44|0);
  HEAP32[$21>>2] = 0;
  $22 = $19;
 } else {
  $22 = $15;
 }
 $23 = ($22>>>0)>($copy>>>0);
 if (!($23)) {
  $24 = (0 - ($22))|0;
  $25 = (($end) + ($24)|0);
  _memcpy(($26|0),($25|0),($22|0))|0;
  $27 = ((($1)) + 48|0);
  HEAP32[$27>>2] = 0;
  $28 = HEAP32[$14>>2]|0;
  $29 = ((($1)) + 44|0);
  HEAP32[$29>>2] = $28;
  $$0 = 0;
  return ($$0|0);
 }
 $30 = ((($1)) + 48|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($22) - ($31))|0;
 $33 = ($32>>>0)>($copy>>>0);
 $copy$ = $33 ? $copy : $32;
 $34 = (($26) + ($31)|0);
 $35 = (0 - ($copy))|0;
 $36 = (($end) + ($35)|0);
 _memcpy(($34|0),($36|0),($copy$|0))|0;
 $37 = (($copy) - ($copy$))|0;
 $38 = ($copy$|0)==($copy|0);
 if (!($38)) {
  $39 = HEAP32[$2>>2]|0;
  $40 = (0 - ($37))|0;
  $41 = (($end) + ($40)|0);
  _memcpy(($39|0),($41|0),($37|0))|0;
  HEAP32[$30>>2] = $37;
  $42 = HEAP32[$14>>2]|0;
  $43 = ((($1)) + 44|0);
  HEAP32[$43>>2] = $42;
  $$0 = 0;
  return ($$0|0);
 }
 $44 = HEAP32[$30>>2]|0;
 $45 = (($44) + ($copy))|0;
 $46 = HEAP32[$14>>2]|0;
 $47 = ($45|0)==($46|0);
 $$ = $47 ? 0 : $45;
 HEAP32[$30>>2] = $$;
 $48 = ((($1)) + 44|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ($49>>>0)<($46>>>0);
 if (!($50)) {
  $$0 = 0;
  return ($$0|0);
 }
 $51 = (($49) + ($copy))|0;
 HEAP32[$48>>2] = $51;
 $$0 = 0;
 return ($$0|0);
}
function _inflate_table($type,$lens,$codes,$table,$bits,$work) {
 $type = $type|0;
 $lens = $lens|0;
 $codes = $codes|0;
 $table = $table|0;
 $bits = $bits|0;
 $work = $work|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa117 = 0, $$lcssa118 = 0, $$ph = 0, $$ph21 = 0, $$ph21$in = 0, $$ph22 = 0, $$ph83 = 0, $$ph84 = 0, $$phi$trans$insert = 0, $$phi$trans$insert80 = 0, $$phi$trans$insert80$1 = 0, $$phi$trans$insert80$10 = 0, $$phi$trans$insert80$11 = 0, $$phi$trans$insert80$12 = 0, $$phi$trans$insert80$2 = 0, $$phi$trans$insert80$3 = 0, $$phi$trans$insert80$4 = 0, $$phi$trans$insert80$5 = 0;
 var $$phi$trans$insert80$6 = 0, $$phi$trans$insert80$7 = 0, $$phi$trans$insert80$8 = 0, $$phi$trans$insert80$9 = 0, $$pre = 0, $$pre81 = 0, $$pre81$1 = 0, $$pre81$10 = 0, $$pre81$11 = 0, $$pre81$12 = 0, $$pre81$2 = 0, $$pre81$3 = 0, $$pre81$4 = 0, $$pre81$5 = 0, $$pre81$6 = 0, $$pre81$7 = 0, $$pre81$8 = 0, $$pre81$9 = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $base$01320$ph = 0, $count = 0, $curr$0$ph = 0, $curr$1$lcssa = 0, $curr$139 = 0, $drop$0$ph = 0, $end$01518$ph = 0, $exitcond = 0, $exitcond76 = 0, $extra$01419$ph = 0, $fill$0 = 0, $here$sroa$0$0 = 0, $here$sroa$12$0 = 0, $huff$0 = 0, $huff$0$ph = 0, $huff$1 = 0, $huff$1$lcssa = 0, $huff$1$lcssa115 = 0;
 var $incr$0 = 0, $incr$0$lcssa = 0, $left$140 = 0, $len$3 = 0, $len$3$ph = 0, $len$4 = 0, $len$4$lcssa = 0, $low$0$ph = 0, $max$0$85 = 0, $max$0$88 = 0, $max$0$91 = 0, $max$056$lcssa$ph = 0, $max$056$lcssa86 = 0, $min$0$lcssa = 0, $min$0$max$0$ = 0, $min$0$max$0$$drop$0 = 0, $min$049 = 0, $next$0$ph = 0, $next$0$ph24 = 0, $next$0$ph24$lcssa = 0;
 var $offs = 0, $or$cond = 0, $or$cond10 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $sym$057 = 0, $sym$143 = 0, $sym$2 = 0, $sym$2$ph = 0, $used$0$ph23 = 0, $used$0$ph23$lcssa = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $count = sp + 32|0;
 $offs = sp;
 dest=$count; stop=dest+32|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 $0 = ($codes|0)==(0);
 if ($0) {
  $1 = HEAP32[$bits>>2]|0;
  $314 = $1;
  label = 5;
 } else {
  $sym$057 = 0;
  while(1) {
   $2 = (($lens) + ($sym$057<<1)|0);
   $3 = HEAP16[$2>>1]|0;
   $4 = $3&65535;
   $5 = (($count) + ($4<<1)|0);
   $6 = HEAP16[$5>>1]|0;
   $7 = (($6) + 1)<<16>>16;
   HEAP16[$5>>1] = $7;
   $8 = (($sym$057) + 1)|0;
   $exitcond76 = ($8|0)==($codes|0);
   if ($exitcond76) {
    break;
   } else {
    $sym$057 = $8;
   }
  }
  $$phi$trans$insert = ((($count)) + 30|0);
  $$pre = HEAP16[$$phi$trans$insert>>1]|0;
  $9 = HEAP32[$bits>>2]|0;
  $10 = ($$pre<<16>>16)==(0);
  if ($10) {
   $314 = $9;
   label = 5;
  } else {
   $$ph83 = $9;$$ph84 = $$pre;$max$056$lcssa$ph = 15;
   label = 6;
  }
 }
 do {
  if ((label|0) == 5) {
   $11 = ((($count)) + 28|0);
   $12 = HEAP16[$11>>1]|0;
   $13 = ($12<<16>>16)==(0);
   if ($13) {
    $275 = ((($count)) + 26|0);
    $276 = HEAP16[$275>>1]|0;
    $277 = ($276<<16>>16)==(0);
    if ($277) {
     $278 = ((($count)) + 24|0);
     $279 = HEAP16[$278>>1]|0;
     $280 = ($279<<16>>16)==(0);
     if ($280) {
      $281 = ((($count)) + 22|0);
      $282 = HEAP16[$281>>1]|0;
      $283 = ($282<<16>>16)==(0);
      if ($283) {
       $284 = ((($count)) + 20|0);
       $285 = HEAP16[$284>>1]|0;
       $286 = ($285<<16>>16)==(0);
       if ($286) {
        $287 = ((($count)) + 18|0);
        $288 = HEAP16[$287>>1]|0;
        $289 = ($288<<16>>16)==(0);
        if ($289) {
         $290 = ((($count)) + 16|0);
         $291 = HEAP16[$290>>1]|0;
         $292 = ($291<<16>>16)==(0);
         if ($292) {
          $293 = ((($count)) + 14|0);
          $294 = HEAP16[$293>>1]|0;
          $295 = ($294<<16>>16)==(0);
          if ($295) {
           $296 = ((($count)) + 12|0);
           $297 = HEAP16[$296>>1]|0;
           $298 = ($297<<16>>16)==(0);
           if ($298) {
            $299 = ((($count)) + 10|0);
            $300 = HEAP16[$299>>1]|0;
            $301 = ($300<<16>>16)==(0);
            if ($301) {
             $302 = ((($count)) + 8|0);
             $303 = HEAP16[$302>>1]|0;
             $304 = ($303<<16>>16)==(0);
             if ($304) {
              $305 = ((($count)) + 6|0);
              $306 = HEAP16[$305>>1]|0;
              $307 = ($306<<16>>16)==(0);
              if ($307) {
               $308 = ((($count)) + 4|0);
               $309 = HEAP16[$308>>1]|0;
               $310 = ($309<<16>>16)==(0);
               if ($310) {
                $311 = ((($count)) + 2|0);
                $312 = HEAP16[$311>>1]|0;
                $313 = ($312<<16>>16)==(0);
                if (!($313)) {
                 $315 = ($314>>>0)>(1);
                 $max$0$91 = $315 ? 1 : $314;
                 $271 = 0;$max$0$88 = $max$0$91;$max$056$lcssa86 = 1;$min$0$lcssa = 1;
                 break;
                }
                $316 = HEAP32[$table>>2]|0;
                $317 = ((($316)) + 4|0);
                HEAP32[$table>>2] = $317;
                HEAP8[$316>>0] = 64;
                $318 = ((($316)) + 1|0);
                HEAP8[$318>>0] = 1;
                $319 = ((($316)) + 2|0);
                HEAP16[$319>>1] = 0;
                $320 = HEAP32[$table>>2]|0;
                $321 = ((($320)) + 4|0);
                HEAP32[$table>>2] = $321;
                HEAP8[$320>>0] = 64;
                $322 = ((($320)) + 1|0);
                HEAP8[$322>>0] = 1;
                $323 = ((($320)) + 2|0);
                HEAP16[$323>>1] = 0;
                HEAP32[$bits>>2] = 1;
                $$0 = 0;
                STACKTOP = sp;return ($$0|0);
               } else {
                $$ph83 = $314;$$ph84 = 0;$max$056$lcssa$ph = 2;
                label = 6;
               }
              } else {
               $$ph83 = $314;$$ph84 = 0;$max$056$lcssa$ph = 3;
               label = 6;
              }
             } else {
              $$ph83 = $314;$$ph84 = 0;$max$056$lcssa$ph = 4;
              label = 6;
             }
            } else {
             $$ph83 = $314;$$ph84 = 0;$max$056$lcssa$ph = 5;
             label = 6;
            }
           } else {
            $$ph83 = $314;$$ph84 = 0;$max$056$lcssa$ph = 6;
            label = 6;
           }
          } else {
           $$ph83 = $314;$$ph84 = 0;$max$056$lcssa$ph = 7;
           label = 6;
          }
         } else {
          $$ph83 = $314;$$ph84 = 0;$max$056$lcssa$ph = 8;
          label = 6;
         }
        } else {
         $$ph83 = $314;$$ph84 = 0;$max$056$lcssa$ph = 9;
         label = 6;
        }
       } else {
        $$ph83 = $314;$$ph84 = 0;$max$056$lcssa$ph = 10;
        label = 6;
       }
      } else {
       $$ph83 = $314;$$ph84 = 0;$max$056$lcssa$ph = 11;
       label = 6;
      }
     } else {
      $$ph83 = $314;$$ph84 = 0;$max$056$lcssa$ph = 12;
      label = 6;
     }
    } else {
     $$ph83 = $314;$$ph84 = 0;$max$056$lcssa$ph = 13;
     label = 6;
    }
   } else {
    $$ph83 = $314;$$ph84 = 0;$max$056$lcssa$ph = 14;
    label = 6;
   }
  }
 } while(0);
 L25: do {
  if ((label|0) == 6) {
   $14 = ($$ph83>>>0)>($max$056$lcssa$ph>>>0);
   $max$0$85 = $14 ? $max$056$lcssa$ph : $$ph83;
   $min$049 = 1;
   while(1) {
    $15 = (($count) + ($min$049<<1)|0);
    $16 = HEAP16[$15>>1]|0;
    $17 = ($16<<16>>16)==(0);
    if (!($17)) {
     $271 = $$ph84;$max$0$88 = $max$0$85;$max$056$lcssa86 = $max$056$lcssa$ph;$min$0$lcssa = $min$049;
     break L25;
    }
    $18 = (($min$049) + 1)|0;
    $19 = ($18>>>0)<($max$056$lcssa$ph>>>0);
    if ($19) {
     $min$049 = $18;
    } else {
     $271 = $$ph84;$max$0$88 = $max$0$85;$max$056$lcssa86 = $max$056$lcssa$ph;$min$0$lcssa = $18;
     break;
    }
   }
  }
 } while(0);
 $20 = ($max$0$88>>>0)<($min$0$lcssa>>>0);
 $min$0$max$0$ = $20 ? $min$0$lcssa : $max$0$88;
 $21 = ((($count)) + 2|0);
 $22 = HEAP16[$21>>1]|0;
 $23 = $22&65535;
 $24 = (2 - ($23))|0;
 $25 = ($24|0)<(0);
 if ($25) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $26 = $24 << 1;
 $27 = ((($count)) + 4|0);
 $28 = HEAP16[$27>>1]|0;
 $29 = $28&65535;
 $30 = (($26) - ($29))|0;
 $31 = ($30|0)<(0);
 if ($31) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $197 = $30 << 1;
 $198 = ((($count)) + 6|0);
 $199 = HEAP16[$198>>1]|0;
 $200 = $199&65535;
 $201 = (($197) - ($200))|0;
 $202 = ($201|0)<(0);
 if ($202) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $203 = $201 << 1;
 $204 = ((($count)) + 8|0);
 $205 = HEAP16[$204>>1]|0;
 $206 = $205&65535;
 $207 = (($203) - ($206))|0;
 $208 = ($207|0)<(0);
 if ($208) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $209 = $207 << 1;
 $210 = ((($count)) + 10|0);
 $211 = HEAP16[$210>>1]|0;
 $212 = $211&65535;
 $213 = (($209) - ($212))|0;
 $214 = ($213|0)<(0);
 if ($214) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $215 = $213 << 1;
 $216 = ((($count)) + 12|0);
 $217 = HEAP16[$216>>1]|0;
 $218 = $217&65535;
 $219 = (($215) - ($218))|0;
 $220 = ($219|0)<(0);
 if ($220) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $221 = $219 << 1;
 $222 = ((($count)) + 14|0);
 $223 = HEAP16[$222>>1]|0;
 $224 = $223&65535;
 $225 = (($221) - ($224))|0;
 $226 = ($225|0)<(0);
 if ($226) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $227 = $225 << 1;
 $228 = ((($count)) + 16|0);
 $229 = HEAP16[$228>>1]|0;
 $230 = $229&65535;
 $231 = (($227) - ($230))|0;
 $232 = ($231|0)<(0);
 if ($232) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $233 = $231 << 1;
 $234 = ((($count)) + 18|0);
 $235 = HEAP16[$234>>1]|0;
 $236 = $235&65535;
 $237 = (($233) - ($236))|0;
 $238 = ($237|0)<(0);
 if ($238) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $239 = $237 << 1;
 $240 = ((($count)) + 20|0);
 $241 = HEAP16[$240>>1]|0;
 $242 = $241&65535;
 $243 = (($239) - ($242))|0;
 $244 = ($243|0)<(0);
 if ($244) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $245 = $243 << 1;
 $246 = ((($count)) + 22|0);
 $247 = HEAP16[$246>>1]|0;
 $248 = $247&65535;
 $249 = (($245) - ($248))|0;
 $250 = ($249|0)<(0);
 if ($250) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $251 = $249 << 1;
 $252 = ((($count)) + 24|0);
 $253 = HEAP16[$252>>1]|0;
 $254 = $253&65535;
 $255 = (($251) - ($254))|0;
 $256 = ($255|0)<(0);
 if ($256) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $257 = $255 << 1;
 $258 = ((($count)) + 26|0);
 $259 = HEAP16[$258>>1]|0;
 $260 = $259&65535;
 $261 = (($257) - ($260))|0;
 $262 = ($261|0)<(0);
 if ($262) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $263 = $261 << 1;
 $264 = ((($count)) + 28|0);
 $265 = HEAP16[$264>>1]|0;
 $266 = $265&65535;
 $267 = (($263) - ($266))|0;
 $268 = ($267|0)<(0);
 if ($268) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $269 = $267 << 1;
 $270 = $271&65535;
 $272 = (($269) - ($270))|0;
 $273 = ($272|0)<(0);
 if ($273) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $274 = ($272|0)>(0);
 if ($274) {
  $32 = ($type|0)==(0);
  $33 = ($max$056$lcssa86|0)!=(1);
  $or$cond = $32 | $33;
  if ($or$cond) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $34 = ((($offs)) + 2|0);
 HEAP16[$34>>1] = 0;
 $35 = $22&65535;
 $36 = ((($offs)) + 4|0);
 HEAP16[$36>>1] = $22;
 $$phi$trans$insert80 = ((($count)) + 4|0);
 $$pre81 = HEAP16[$$phi$trans$insert80>>1]|0;
 $37 = $35 & 65535;
 $38 = $$pre81&65535;
 $39 = (($38) + ($37))|0;
 $40 = $39&65535;
 $41 = ((($offs)) + 6|0);
 HEAP16[$41>>1] = $40;
 $$phi$trans$insert80$1 = ((($count)) + 6|0);
 $$pre81$1 = HEAP16[$$phi$trans$insert80$1>>1]|0;
 $42 = $39 & 65535;
 $43 = $$pre81$1&65535;
 $44 = (($43) + ($42))|0;
 $45 = $44&65535;
 $46 = ((($offs)) + 8|0);
 HEAP16[$46>>1] = $45;
 $$phi$trans$insert80$2 = ((($count)) + 8|0);
 $$pre81$2 = HEAP16[$$phi$trans$insert80$2>>1]|0;
 $47 = $44 & 65535;
 $48 = $$pre81$2&65535;
 $49 = (($48) + ($47))|0;
 $50 = $49&65535;
 $51 = ((($offs)) + 10|0);
 HEAP16[$51>>1] = $50;
 $$phi$trans$insert80$3 = ((($count)) + 10|0);
 $$pre81$3 = HEAP16[$$phi$trans$insert80$3>>1]|0;
 $52 = $49 & 65535;
 $53 = $$pre81$3&65535;
 $54 = (($53) + ($52))|0;
 $55 = $54&65535;
 $56 = ((($offs)) + 12|0);
 HEAP16[$56>>1] = $55;
 $$phi$trans$insert80$4 = ((($count)) + 12|0);
 $$pre81$4 = HEAP16[$$phi$trans$insert80$4>>1]|0;
 $57 = $54 & 65535;
 $58 = $$pre81$4&65535;
 $59 = (($58) + ($57))|0;
 $60 = $59&65535;
 $61 = ((($offs)) + 14|0);
 HEAP16[$61>>1] = $60;
 $$phi$trans$insert80$5 = ((($count)) + 14|0);
 $$pre81$5 = HEAP16[$$phi$trans$insert80$5>>1]|0;
 $62 = $59 & 65535;
 $63 = $$pre81$5&65535;
 $64 = (($63) + ($62))|0;
 $65 = $64&65535;
 $66 = ((($offs)) + 16|0);
 HEAP16[$66>>1] = $65;
 $$phi$trans$insert80$6 = ((($count)) + 16|0);
 $$pre81$6 = HEAP16[$$phi$trans$insert80$6>>1]|0;
 $67 = $64 & 65535;
 $68 = $$pre81$6&65535;
 $69 = (($68) + ($67))|0;
 $70 = $69&65535;
 $71 = ((($offs)) + 18|0);
 HEAP16[$71>>1] = $70;
 $$phi$trans$insert80$7 = ((($count)) + 18|0);
 $$pre81$7 = HEAP16[$$phi$trans$insert80$7>>1]|0;
 $72 = $69 & 65535;
 $73 = $$pre81$7&65535;
 $74 = (($73) + ($72))|0;
 $75 = $74&65535;
 $76 = ((($offs)) + 20|0);
 HEAP16[$76>>1] = $75;
 $$phi$trans$insert80$8 = ((($count)) + 20|0);
 $$pre81$8 = HEAP16[$$phi$trans$insert80$8>>1]|0;
 $77 = $74 & 65535;
 $78 = $$pre81$8&65535;
 $79 = (($78) + ($77))|0;
 $80 = $79&65535;
 $81 = ((($offs)) + 22|0);
 HEAP16[$81>>1] = $80;
 $$phi$trans$insert80$9 = ((($count)) + 22|0);
 $$pre81$9 = HEAP16[$$phi$trans$insert80$9>>1]|0;
 $82 = $79 & 65535;
 $83 = $$pre81$9&65535;
 $84 = (($83) + ($82))|0;
 $85 = $84&65535;
 $86 = ((($offs)) + 24|0);
 HEAP16[$86>>1] = $85;
 $$phi$trans$insert80$10 = ((($count)) + 24|0);
 $$pre81$10 = HEAP16[$$phi$trans$insert80$10>>1]|0;
 $87 = $84 & 65535;
 $88 = $$pre81$10&65535;
 $89 = (($88) + ($87))|0;
 $90 = $89&65535;
 $91 = ((($offs)) + 26|0);
 HEAP16[$91>>1] = $90;
 $$phi$trans$insert80$11 = ((($count)) + 26|0);
 $$pre81$11 = HEAP16[$$phi$trans$insert80$11>>1]|0;
 $92 = $89 & 65535;
 $93 = $$pre81$11&65535;
 $94 = (($93) + ($92))|0;
 $95 = $94&65535;
 $96 = ((($offs)) + 28|0);
 HEAP16[$96>>1] = $95;
 $$phi$trans$insert80$12 = ((($count)) + 28|0);
 $$pre81$12 = HEAP16[$$phi$trans$insert80$12>>1]|0;
 $97 = $94 & 65535;
 $98 = $$pre81$12&65535;
 $99 = (($98) + ($97))|0;
 $100 = $99&65535;
 $101 = ((($offs)) + 30|0);
 HEAP16[$101>>1] = $100;
 if (!($0)) {
  $sym$143 = 0;
  while(1) {
   $102 = (($lens) + ($sym$143<<1)|0);
   $103 = HEAP16[$102>>1]|0;
   $104 = ($103<<16>>16)==(0);
   if (!($104)) {
    $105 = $103&65535;
    $106 = $sym$143&65535;
    $107 = (($offs) + ($105<<1)|0);
    $108 = HEAP16[$107>>1]|0;
    $109 = (($108) + 1)<<16>>16;
    HEAP16[$107>>1] = $109;
    $110 = $108&65535;
    $111 = (($work) + ($110<<1)|0);
    HEAP16[$111>>1] = $106;
   }
   $112 = (($sym$143) + 1)|0;
   $exitcond = ($112|0)==($codes|0);
   if ($exitcond) {
    break;
   } else {
    $sym$143 = $112;
   }
  }
 }
 switch ($type|0) {
 case 0:  {
  $$ph = 0;$$ph22 = 0;$base$01320$ph = $work;$end$01518$ph = 19;$extra$01419$ph = $work;
  break;
 }
 case 1:  {
  $113 = ($min$0$max$0$>>>0)>(9);
  if ($113) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$ph = 0;$$ph22 = 1;$base$01320$ph = (21014);$end$01518$ph = 256;$extra$01419$ph = (21140);
  }
  break;
 }
 default: {
  $114 = ($min$0$max$0$>>>0)>(9);
  $115 = ($type|0)==(2);
  $or$cond5 = $115 & $114;
  if ($or$cond5) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$ph = $115;$$ph22 = 0;$base$01320$ph = 21464;$end$01518$ph = -1;$extra$01419$ph = 21590;
  }
 }
 }
 $$ph21$in = 1 << $min$0$max$0$;
 $next$0$ph = HEAP32[$table>>2]|0;
 $$ph21 = (($$ph21$in) + -1)|0;
 $116 = $min$0$max$0$&255;
 $curr$0$ph = $min$0$max$0$;$drop$0$ph = 0;$huff$0$ph = 0;$len$3$ph = $min$0$lcssa;$low$0$ph = -1;$next$0$ph24 = $next$0$ph;$sym$2$ph = 0;$used$0$ph23 = $$ph21$in;
 L93: while(1) {
  $117 = 1 << $curr$0$ph;
  $huff$0 = $huff$0$ph;$len$3 = $len$3$ph;$sym$2 = $sym$2$ph;
  while(1) {
   $118 = (($len$3) - ($drop$0$ph))|0;
   $119 = $118&255;
   $120 = (($work) + ($sym$2<<1)|0);
   $121 = HEAP16[$120>>1]|0;
   $122 = $121&65535;
   $123 = ($122|0)<($end$01518$ph|0);
   do {
    if ($123) {
     $here$sroa$0$0 = 0;$here$sroa$12$0 = $121;
    } else {
     $124 = ($122|0)>($end$01518$ph|0);
     if (!($124)) {
      $here$sroa$0$0 = 96;$here$sroa$12$0 = 0;
      break;
     }
     $125 = (($extra$01419$ph) + ($122<<1)|0);
     $126 = HEAP16[$125>>1]|0;
     $127 = $126&255;
     $128 = (($base$01320$ph) + ($122<<1)|0);
     $129 = HEAP16[$128>>1]|0;
     $here$sroa$0$0 = $127;$here$sroa$12$0 = $129;
    }
   } while(0);
   $130 = 1 << $118;
   $131 = $huff$0 >>> $drop$0$ph;
   $fill$0 = $117;
   while(1) {
    $132 = (($fill$0) - ($130))|0;
    $133 = (($132) + ($131))|0;
    $134 = (($next$0$ph24) + ($133<<2)|0);
    HEAP8[$134>>0] = $here$sroa$0$0;
    $135 = (((($next$0$ph24) + ($133<<2)|0)) + 1|0);
    HEAP8[$135>>0] = $119;
    $136 = (((($next$0$ph24) + ($133<<2)|0)) + 2|0);
    HEAP16[$136>>1] = $here$sroa$12$0;
    $137 = ($fill$0|0)==($130|0);
    if ($137) {
     break;
    } else {
     $fill$0 = $132;
    }
   }
   $138 = (($len$3) + -1)|0;
   $139 = 1 << $138;
   $incr$0 = $139;
   while(1) {
    $140 = $incr$0 & $huff$0;
    $141 = ($140|0)==(0);
    $142 = $incr$0 >>> 1;
    if ($141) {
     $incr$0$lcssa = $incr$0;
     break;
    } else {
     $incr$0 = $142;
    }
   }
   $143 = ($incr$0$lcssa|0)==(0);
   if ($143) {
    $huff$1 = 0;
   } else {
    $144 = (($incr$0$lcssa) + -1)|0;
    $145 = $144 & $huff$0;
    $146 = (($145) + ($incr$0$lcssa))|0;
    $huff$1 = $146;
   }
   $147 = (($sym$2) + 1)|0;
   $148 = (($count) + ($len$3<<1)|0);
   $149 = HEAP16[$148>>1]|0;
   $150 = (($149) + -1)<<16>>16;
   HEAP16[$148>>1] = $150;
   $151 = ($150<<16>>16)==(0);
   if ($151) {
    $152 = ($len$3|0)==($max$056$lcssa86|0);
    if ($152) {
     $$lcssa = $119;$huff$1$lcssa = $huff$1;$next$0$ph24$lcssa = $next$0$ph24;$used$0$ph23$lcssa = $used$0$ph23;
     break L93;
    }
    $153 = (($work) + ($147<<1)|0);
    $154 = HEAP16[$153>>1]|0;
    $155 = $154&65535;
    $156 = (($lens) + ($155<<1)|0);
    $157 = HEAP16[$156>>1]|0;
    $158 = $157&65535;
    $len$4 = $158;
   } else {
    $len$4 = $len$3;
   }
   $159 = ($len$4>>>0)>($min$0$max$0$>>>0);
   if (!($159)) {
    $huff$0 = $huff$1;$len$3 = $len$4;$sym$2 = $147;
    continue;
   }
   $160 = $huff$1 & $$ph21;
   $161 = ($160|0)==($low$0$ph|0);
   if ($161) {
    $huff$0 = $huff$1;$len$3 = $len$4;$sym$2 = $147;
   } else {
    $$lcssa117 = $147;$$lcssa118 = $160;$huff$1$lcssa115 = $huff$1;$len$4$lcssa = $len$4;
    break;
   }
  }
  $162 = ($drop$0$ph|0)==(0);
  $min$0$max$0$$drop$0 = $162 ? $min$0$max$0$ : $drop$0$ph;
  $163 = (($next$0$ph24) + ($117<<2)|0);
  $164 = (($len$4$lcssa) - ($min$0$max$0$$drop$0))|0;
  $165 = ($len$4$lcssa>>>0)<($max$056$lcssa86>>>0);
  L116: do {
   if ($165) {
    $166 = 1 << $164;
    $168 = $len$4$lcssa;$curr$139 = $164;$left$140 = $166;
    while(1) {
     $167 = (($count) + ($168<<1)|0);
     $169 = HEAP16[$167>>1]|0;
     $170 = $169&65535;
     $171 = (($left$140) - ($170))|0;
     $172 = ($171|0)<(1);
     if ($172) {
      $curr$1$lcssa = $curr$139;
      break L116;
     }
     $173 = (($curr$139) + 1)|0;
     $174 = $171 << 1;
     $175 = (($173) + ($min$0$max$0$$drop$0))|0;
     $176 = ($175>>>0)<($max$056$lcssa86>>>0);
     if ($176) {
      $168 = $175;$curr$139 = $173;$left$140 = $174;
     } else {
      $curr$1$lcssa = $173;
      break;
     }
    }
   } else {
    $curr$1$lcssa = $164;
   }
  } while(0);
  $177 = 1 << $curr$1$lcssa;
  $178 = (($177) + ($used$0$ph23))|0;
  $179 = ($178>>>0)>(852);
  $or$cond7 = $$ph22 & $179;
  $180 = ($178>>>0)>(592);
  $or$cond9 = $$ph & $180;
  $or$cond10 = $or$cond7 | $or$cond9;
  if ($or$cond10) {
   $$0 = 1;
   label = 44;
   break;
  }
  $181 = $curr$1$lcssa&255;
  $182 = HEAP32[$table>>2]|0;
  $183 = (($182) + ($$lcssa118<<2)|0);
  HEAP8[$183>>0] = $181;
  $184 = (((($182) + ($$lcssa118<<2)|0)) + 1|0);
  HEAP8[$184>>0] = $116;
  $185 = $163;
  $186 = $182;
  $187 = (($185) - ($186))|0;
  $188 = $187 >>> 2;
  $189 = $188&65535;
  $190 = (((($182) + ($$lcssa118<<2)|0)) + 2|0);
  HEAP16[$190>>1] = $189;
  $curr$0$ph = $curr$1$lcssa;$drop$0$ph = $min$0$max$0$$drop$0;$huff$0$ph = $huff$1$lcssa115;$len$3$ph = $len$4$lcssa;$low$0$ph = $$lcssa118;$next$0$ph24 = $163;$sym$2$ph = $$lcssa117;$used$0$ph23 = $178;
 }
 if ((label|0) == 44) {
  STACKTOP = sp;return ($$0|0);
 }
 $191 = ($huff$1$lcssa|0)==(0);
 if (!($191)) {
  $192 = (($next$0$ph24$lcssa) + ($huff$1$lcssa<<2)|0);
  HEAP8[$192>>0] = 64;
  $193 = (((($next$0$ph24$lcssa) + ($huff$1$lcssa<<2)|0)) + 1|0);
  HEAP8[$193>>0] = $$lcssa;
  $194 = (((($next$0$ph24$lcssa) + ($huff$1$lcssa<<2)|0)) + 2|0);
  HEAP16[$194>>1] = 0;
 }
 $195 = HEAP32[$table>>2]|0;
 $196 = (($195) + ($used$0$ph23$lcssa<<2)|0);
 HEAP32[$table>>2] = $196;
 HEAP32[$bits>>2] = $min$0$max$0$;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _zcalloc($opaque,$items,$size) {
 $opaque = $opaque|0;
 $items = $items|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = Math_imul($size, $items)|0;
 $1 = (_malloc($0)|0);
 return ($1|0);
}
function _zcfree($opaque,$ptr) {
 $opaque = $opaque|0;
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($ptr);
 return;
}
function _adler32($adler,$buf,$len) {
 $adler = $adler|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$ = 0, $$$16 = 0, $$010 = 0, $$0117 = 0, $$018 = 0, $$1$lcssa6469 = 0, $$12$lcssa6568 = 0, $$1239 = 0, $$140 = 0, $$16$lcssa = 0, $$1616 = 0, $$23 = 0, $$231 = 0, $$323 = 0, $$3430 = 0, $$38$lcssa6667 = 0, $$3838 = 0, $$422 = 0, $$49 = 0, $$529 = 0;
 var $$6$lcssa = 0, $$621 = 0, $$7 = 0, $$lcssa105 = 0, $$lcssa106 = 0, $$lcssa107 = 0, $$lcssa108 = 0, $$lcssa109 = 0, $$lcssa110 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $n$0 = 0, $scevgep = 0, $scevgep61 = 0, $scevgep62 = 0, $sum2$0 = 0, $sum2$1$lcssa = 0, $sum2$119 = 0, $sum2$2$lcssa6370 = 0, $sum2$241 = 0, $sum2$3 = 0, $sum2$432 = 0, $sum2$5$lcssa = 0;
 var $sum2$524 = 0, $sum2$6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $adler >>> 16;
 $1 = $adler & 65535;
 $2 = ($len|0)==(1);
 if ($2) {
  $3 = HEAP8[$buf>>0]|0;
  $4 = $3&255;
  $5 = (($4) + ($1))|0;
  $6 = ($5>>>0)>(65520);
  $7 = (($5) + -65521)|0;
  $$ = $6 ? $7 : $5;
  $8 = (($$) + ($0))|0;
  $9 = ($8>>>0)>(65520);
  $10 = (($8) + 15)|0;
  $sum2$0 = $9 ? $10 : $8;
  $11 = $sum2$0 << 16;
  $12 = $11 | $$;
  $$010 = $12;
  return ($$010|0);
 }
 $13 = ($buf|0)==(0|0);
 if ($13) {
  $$010 = 1;
  return ($$010|0);
 }
 $14 = ($len>>>0)<(16);
 if ($14) {
  $20 = ($len|0)==(0);
  if ($20) {
   $$16$lcssa = $1;$sum2$1$lcssa = $0;
  } else {
   $$0117 = $buf;$$018 = $len;$$1616 = $1;$sum2$119 = $0;
   while(1) {
    $21 = (($$018) + -1)|0;
    $22 = ((($$0117)) + 1|0);
    $23 = HEAP8[$$0117>>0]|0;
    $24 = $23&255;
    $25 = (($24) + ($$1616))|0;
    $26 = (($25) + ($sum2$119))|0;
    $27 = ($21|0)==(0);
    if ($27) {
     $$16$lcssa = $25;$sum2$1$lcssa = $26;
     break;
    } else {
     $$0117 = $22;$$018 = $21;$$1616 = $25;$sum2$119 = $26;
    }
   }
  }
  $28 = ($$16$lcssa>>>0)>(65520);
  $29 = (($$16$lcssa) + -65521)|0;
  $$$16 = $28 ? $29 : $$16$lcssa;
  $30 = (($sum2$1$lcssa>>>0) % 65521)&-1;
  $31 = $30 << 16;
  $32 = $31 | $$$16;
  $$010 = $32;
  return ($$010|0);
 }
 $15 = ($len>>>0)>(5551);
 if ($15) {
  $16 = (($len) + -5552)|0;
  $17 = (($16>>>0) % 5552)&-1;
  $18 = (($16) - ($17))|0;
  $19 = (($18) + 5552)|0;
  $$1239 = $buf;$$140 = $len;$$3838 = $1;$sum2$241 = $0;
  while(1) {
   $33 = (($$140) + -5552)|0;
   $$23 = $$1239;$$49 = $$3838;$n$0 = 347;$sum2$3 = $sum2$241;
   while(1) {
    $34 = HEAP8[$$23>>0]|0;
    $35 = $34&255;
    $36 = (($35) + ($$49))|0;
    $37 = (($36) + ($sum2$3))|0;
    $38 = ((($$23)) + 1|0);
    $39 = HEAP8[$38>>0]|0;
    $40 = $39&255;
    $41 = (($36) + ($40))|0;
    $42 = (($37) + ($41))|0;
    $43 = ((($$23)) + 2|0);
    $44 = HEAP8[$43>>0]|0;
    $45 = $44&255;
    $46 = (($41) + ($45))|0;
    $47 = (($42) + ($46))|0;
    $48 = ((($$23)) + 3|0);
    $49 = HEAP8[$48>>0]|0;
    $50 = $49&255;
    $51 = (($46) + ($50))|0;
    $52 = (($47) + ($51))|0;
    $53 = ((($$23)) + 4|0);
    $54 = HEAP8[$53>>0]|0;
    $55 = $54&255;
    $56 = (($51) + ($55))|0;
    $57 = (($52) + ($56))|0;
    $58 = ((($$23)) + 5|0);
    $59 = HEAP8[$58>>0]|0;
    $60 = $59&255;
    $61 = (($56) + ($60))|0;
    $62 = (($57) + ($61))|0;
    $63 = ((($$23)) + 6|0);
    $64 = HEAP8[$63>>0]|0;
    $65 = $64&255;
    $66 = (($61) + ($65))|0;
    $67 = (($62) + ($66))|0;
    $68 = ((($$23)) + 7|0);
    $69 = HEAP8[$68>>0]|0;
    $70 = $69&255;
    $71 = (($66) + ($70))|0;
    $72 = (($67) + ($71))|0;
    $73 = ((($$23)) + 8|0);
    $74 = HEAP8[$73>>0]|0;
    $75 = $74&255;
    $76 = (($71) + ($75))|0;
    $77 = (($72) + ($76))|0;
    $78 = ((($$23)) + 9|0);
    $79 = HEAP8[$78>>0]|0;
    $80 = $79&255;
    $81 = (($76) + ($80))|0;
    $82 = (($77) + ($81))|0;
    $83 = ((($$23)) + 10|0);
    $84 = HEAP8[$83>>0]|0;
    $85 = $84&255;
    $86 = (($81) + ($85))|0;
    $87 = (($82) + ($86))|0;
    $88 = ((($$23)) + 11|0);
    $89 = HEAP8[$88>>0]|0;
    $90 = $89&255;
    $91 = (($86) + ($90))|0;
    $92 = (($87) + ($91))|0;
    $93 = ((($$23)) + 12|0);
    $94 = HEAP8[$93>>0]|0;
    $95 = $94&255;
    $96 = (($91) + ($95))|0;
    $97 = (($92) + ($96))|0;
    $98 = ((($$23)) + 13|0);
    $99 = HEAP8[$98>>0]|0;
    $100 = $99&255;
    $101 = (($96) + ($100))|0;
    $102 = (($97) + ($101))|0;
    $103 = ((($$23)) + 14|0);
    $104 = HEAP8[$103>>0]|0;
    $105 = $104&255;
    $106 = (($101) + ($105))|0;
    $107 = (($102) + ($106))|0;
    $108 = ((($$23)) + 15|0);
    $109 = HEAP8[$108>>0]|0;
    $110 = $109&255;
    $111 = (($106) + ($110))|0;
    $112 = (($107) + ($111))|0;
    $113 = ((($$23)) + 16|0);
    $114 = (($n$0) + -1)|0;
    $115 = ($114|0)==(0);
    if ($115) {
     $$lcssa107 = $111;$$lcssa108 = $112;
     break;
    } else {
     $$23 = $113;$$49 = $111;$n$0 = $114;$sum2$3 = $112;
    }
   }
   $scevgep61 = ((($$1239)) + 5552|0);
   $116 = (($$lcssa107>>>0) % 65521)&-1;
   $117 = (($$lcssa108>>>0) % 65521)&-1;
   $118 = ($33>>>0)>(5551);
   if ($118) {
    $$1239 = $scevgep61;$$140 = $33;$$3838 = $116;$sum2$241 = $117;
   } else {
    $$lcssa109 = $116;$$lcssa110 = $117;
    break;
   }
  }
  $scevgep62 = (($buf) + ($19)|0);
  $119 = ($17|0)==(0);
  if ($119) {
   $$7 = $$lcssa109;$sum2$6 = $$lcssa110;
  } else {
   $120 = ($17>>>0)>(15);
   if ($120) {
    $$1$lcssa6469 = $17;$$12$lcssa6568 = $scevgep62;$$38$lcssa6667 = $$lcssa109;$sum2$2$lcssa6370 = $$lcssa110;
    label = 15;
   } else {
    $$323 = $17;$$422 = $scevgep62;$$621 = $$lcssa109;$sum2$524 = $$lcssa110;
    label = 18;
   }
  }
 } else {
  $$1$lcssa6469 = $len;$$12$lcssa6568 = $buf;$$38$lcssa6667 = $1;$sum2$2$lcssa6370 = $0;
  label = 15;
 }
 if ((label|0) == 15) {
  $121 = (($$1$lcssa6469) + -16)|0;
  $122 = $121 & -16;
  $123 = (($122) + 16)|0;
  $scevgep = (($$12$lcssa6568) + ($123)|0);
  $$231 = $$1$lcssa6469;$$3430 = $$12$lcssa6568;$$529 = $$38$lcssa6667;$sum2$432 = $sum2$2$lcssa6370;
  while(1) {
   $126 = (($$231) + -16)|0;
   $127 = HEAP8[$$3430>>0]|0;
   $128 = $127&255;
   $129 = (($128) + ($$529))|0;
   $130 = (($129) + ($sum2$432))|0;
   $131 = ((($$3430)) + 1|0);
   $132 = HEAP8[$131>>0]|0;
   $133 = $132&255;
   $134 = (($129) + ($133))|0;
   $135 = (($130) + ($134))|0;
   $136 = ((($$3430)) + 2|0);
   $137 = HEAP8[$136>>0]|0;
   $138 = $137&255;
   $139 = (($134) + ($138))|0;
   $140 = (($135) + ($139))|0;
   $141 = ((($$3430)) + 3|0);
   $142 = HEAP8[$141>>0]|0;
   $143 = $142&255;
   $144 = (($139) + ($143))|0;
   $145 = (($140) + ($144))|0;
   $146 = ((($$3430)) + 4|0);
   $147 = HEAP8[$146>>0]|0;
   $148 = $147&255;
   $149 = (($144) + ($148))|0;
   $150 = (($145) + ($149))|0;
   $151 = ((($$3430)) + 5|0);
   $152 = HEAP8[$151>>0]|0;
   $153 = $152&255;
   $154 = (($149) + ($153))|0;
   $155 = (($150) + ($154))|0;
   $156 = ((($$3430)) + 6|0);
   $157 = HEAP8[$156>>0]|0;
   $158 = $157&255;
   $159 = (($154) + ($158))|0;
   $160 = (($155) + ($159))|0;
   $161 = ((($$3430)) + 7|0);
   $162 = HEAP8[$161>>0]|0;
   $163 = $162&255;
   $164 = (($159) + ($163))|0;
   $165 = (($160) + ($164))|0;
   $166 = ((($$3430)) + 8|0);
   $167 = HEAP8[$166>>0]|0;
   $168 = $167&255;
   $169 = (($164) + ($168))|0;
   $170 = (($165) + ($169))|0;
   $171 = ((($$3430)) + 9|0);
   $172 = HEAP8[$171>>0]|0;
   $173 = $172&255;
   $174 = (($169) + ($173))|0;
   $175 = (($170) + ($174))|0;
   $176 = ((($$3430)) + 10|0);
   $177 = HEAP8[$176>>0]|0;
   $178 = $177&255;
   $179 = (($174) + ($178))|0;
   $180 = (($175) + ($179))|0;
   $181 = ((($$3430)) + 11|0);
   $182 = HEAP8[$181>>0]|0;
   $183 = $182&255;
   $184 = (($179) + ($183))|0;
   $185 = (($180) + ($184))|0;
   $186 = ((($$3430)) + 12|0);
   $187 = HEAP8[$186>>0]|0;
   $188 = $187&255;
   $189 = (($184) + ($188))|0;
   $190 = (($185) + ($189))|0;
   $191 = ((($$3430)) + 13|0);
   $192 = HEAP8[$191>>0]|0;
   $193 = $192&255;
   $194 = (($189) + ($193))|0;
   $195 = (($190) + ($194))|0;
   $196 = ((($$3430)) + 14|0);
   $197 = HEAP8[$196>>0]|0;
   $198 = $197&255;
   $199 = (($194) + ($198))|0;
   $200 = (($195) + ($199))|0;
   $201 = ((($$3430)) + 15|0);
   $202 = HEAP8[$201>>0]|0;
   $203 = $202&255;
   $204 = (($199) + ($203))|0;
   $205 = (($200) + ($204))|0;
   $206 = ((($$3430)) + 16|0);
   $207 = ($126>>>0)>(15);
   if ($207) {
    $$231 = $126;$$3430 = $206;$$529 = $204;$sum2$432 = $205;
   } else {
    $$lcssa105 = $204;$$lcssa106 = $205;
    break;
   }
  }
  $124 = (($121) - ($122))|0;
  $125 = ($121|0)==($122|0);
  if ($125) {
   $$6$lcssa = $$lcssa105;$sum2$5$lcssa = $$lcssa106;
   label = 19;
  } else {
   $$323 = $124;$$422 = $scevgep;$$621 = $$lcssa105;$sum2$524 = $$lcssa106;
   label = 18;
  }
 }
 if ((label|0) == 18) {
  while(1) {
   label = 0;
   $208 = (($$323) + -1)|0;
   $209 = ((($$422)) + 1|0);
   $210 = HEAP8[$$422>>0]|0;
   $211 = $210&255;
   $212 = (($211) + ($$621))|0;
   $213 = (($212) + ($sum2$524))|0;
   $214 = ($208|0)==(0);
   if ($214) {
    $$6$lcssa = $212;$sum2$5$lcssa = $213;
    label = 19;
    break;
   } else {
    $$323 = $208;$$422 = $209;$$621 = $212;$sum2$524 = $213;
    label = 18;
   }
  }
 }
 if ((label|0) == 19) {
  $215 = (($$6$lcssa>>>0) % 65521)&-1;
  $216 = (($sum2$5$lcssa>>>0) % 65521)&-1;
  $$7 = $215;$sum2$6 = $216;
 }
 $217 = $sum2$6 << 16;
 $218 = $217 | $$7;
 $$010 = $218;
 return ($$010|0);
}
function _crc32($crc,$buf,$len) {
 $crc = $crc|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $$0116$i = 0, $$0116$i$lcssa = 0, $$017$i = 0, $$017$i$lcssa = 0, $$1$lcssa$i = 0, $$12$i = 0, $$19$i = 0, $$2$lcssa$i = 0, $$24$i = 0, $$3$i = 0, $$lcssa35 = 0, $$lcssa36 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf4$0$lcssa$i = 0, $buf4$011$i = 0, $buf4$1$lcssa$i = 0, $buf4$16$i = 0;
 var $c$0$masked$i = 0, $c$018$i = 0, $c$018$i$lcssa = 0, $c$1$lcssa$i = 0, $c$110$i = 0, $c$2$lcssa$i = 0, $c$25$i = 0, $c$3$i = 0, $c$3$masked$i = 0, $c$4$i = 0, $scevgep$i = 0, $scevgep40$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($buf|0)==(0|0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = $crc ^ -1;
 $2 = ($len|0)==(0);
 L4: do {
  if ($2) {
   $c$4$i = $1;
  } else {
   $$0116$i = $buf;$$017$i = $len;$c$018$i = $1;
   while(1) {
    $3 = $$0116$i;
    $4 = $3 & 3;
    $5 = ($4|0)==(0);
    if ($5) {
     $$0116$i$lcssa = $$0116$i;$$017$i$lcssa = $$017$i;$c$018$i$lcssa = $c$018$i;
     break;
    }
    $6 = ((($$0116$i)) + 1|0);
    $7 = HEAP8[$$0116$i>>0]|0;
    $8 = $7&255;
    $c$0$masked$i = $c$018$i & 255;
    $9 = $8 ^ $c$0$masked$i;
    $10 = (1856 + ($9<<2)|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = $c$018$i >>> 8;
    $13 = $11 ^ $12;
    $14 = (($$017$i) + -1)|0;
    $15 = ($14|0)==(0);
    if ($15) {
     $c$4$i = $13;
     break L4;
    } else {
     $$0116$i = $6;$$017$i = $14;$c$018$i = $13;
    }
   }
   $16 = ($$017$i$lcssa>>>0)>(31);
   if ($16) {
    $17 = (($$017$i$lcssa) + -32)|0;
    $18 = $17 & -32;
    $19 = (($18) + 32)|0;
    $$19$i = $$017$i$lcssa;$buf4$011$i = $$0116$i$lcssa;$c$110$i = $c$018$i$lcssa;
    while(1) {
     $25 = ((($buf4$011$i)) + 4|0);
     $26 = HEAP32[$buf4$011$i>>2]|0;
     $27 = $26 ^ $c$110$i;
     $28 = $27 & 255;
     $29 = (4928 + ($28<<2)|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = $27 >>> 8;
     $32 = $31 & 255;
     $33 = (3904 + ($32<<2)|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = $34 ^ $30;
     $36 = $27 >>> 16;
     $37 = $36 & 255;
     $38 = (2880 + ($37<<2)|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = $35 ^ $39;
     $41 = $27 >>> 24;
     $42 = (1856 + ($41<<2)|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = $40 ^ $43;
     $45 = ((($buf4$011$i)) + 8|0);
     $46 = HEAP32[$25>>2]|0;
     $47 = $44 ^ $46;
     $48 = $47 & 255;
     $49 = (4928 + ($48<<2)|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = $47 >>> 8;
     $52 = $51 & 255;
     $53 = (3904 + ($52<<2)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = $54 ^ $50;
     $56 = $47 >>> 16;
     $57 = $56 & 255;
     $58 = (2880 + ($57<<2)|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = $55 ^ $59;
     $61 = $47 >>> 24;
     $62 = (1856 + ($61<<2)|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = $60 ^ $63;
     $65 = ((($buf4$011$i)) + 12|0);
     $66 = HEAP32[$45>>2]|0;
     $67 = $64 ^ $66;
     $68 = $67 & 255;
     $69 = (4928 + ($68<<2)|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = $67 >>> 8;
     $72 = $71 & 255;
     $73 = (3904 + ($72<<2)|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = $74 ^ $70;
     $76 = $67 >>> 16;
     $77 = $76 & 255;
     $78 = (2880 + ($77<<2)|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = $75 ^ $79;
     $81 = $67 >>> 24;
     $82 = (1856 + ($81<<2)|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = $80 ^ $83;
     $85 = ((($buf4$011$i)) + 16|0);
     $86 = HEAP32[$65>>2]|0;
     $87 = $84 ^ $86;
     $88 = $87 & 255;
     $89 = (4928 + ($88<<2)|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = $87 >>> 8;
     $92 = $91 & 255;
     $93 = (3904 + ($92<<2)|0);
     $94 = HEAP32[$93>>2]|0;
     $95 = $94 ^ $90;
     $96 = $87 >>> 16;
     $97 = $96 & 255;
     $98 = (2880 + ($97<<2)|0);
     $99 = HEAP32[$98>>2]|0;
     $100 = $95 ^ $99;
     $101 = $87 >>> 24;
     $102 = (1856 + ($101<<2)|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = $100 ^ $103;
     $105 = ((($buf4$011$i)) + 20|0);
     $106 = HEAP32[$85>>2]|0;
     $107 = $104 ^ $106;
     $108 = $107 & 255;
     $109 = (4928 + ($108<<2)|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = $107 >>> 8;
     $112 = $111 & 255;
     $113 = (3904 + ($112<<2)|0);
     $114 = HEAP32[$113>>2]|0;
     $115 = $114 ^ $110;
     $116 = $107 >>> 16;
     $117 = $116 & 255;
     $118 = (2880 + ($117<<2)|0);
     $119 = HEAP32[$118>>2]|0;
     $120 = $115 ^ $119;
     $121 = $107 >>> 24;
     $122 = (1856 + ($121<<2)|0);
     $123 = HEAP32[$122>>2]|0;
     $124 = $120 ^ $123;
     $125 = ((($buf4$011$i)) + 24|0);
     $126 = HEAP32[$105>>2]|0;
     $127 = $124 ^ $126;
     $128 = $127 & 255;
     $129 = (4928 + ($128<<2)|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = $127 >>> 8;
     $132 = $131 & 255;
     $133 = (3904 + ($132<<2)|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 ^ $130;
     $136 = $127 >>> 16;
     $137 = $136 & 255;
     $138 = (2880 + ($137<<2)|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = $135 ^ $139;
     $141 = $127 >>> 24;
     $142 = (1856 + ($141<<2)|0);
     $143 = HEAP32[$142>>2]|0;
     $144 = $140 ^ $143;
     $145 = ((($buf4$011$i)) + 28|0);
     $146 = HEAP32[$125>>2]|0;
     $147 = $144 ^ $146;
     $148 = $147 & 255;
     $149 = (4928 + ($148<<2)|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = $147 >>> 8;
     $152 = $151 & 255;
     $153 = (3904 + ($152<<2)|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = $154 ^ $150;
     $156 = $147 >>> 16;
     $157 = $156 & 255;
     $158 = (2880 + ($157<<2)|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = $155 ^ $159;
     $161 = $147 >>> 24;
     $162 = (1856 + ($161<<2)|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = $160 ^ $163;
     $165 = ((($buf4$011$i)) + 32|0);
     $166 = HEAP32[$145>>2]|0;
     $167 = $164 ^ $166;
     $168 = $167 & 255;
     $169 = (4928 + ($168<<2)|0);
     $170 = HEAP32[$169>>2]|0;
     $171 = $167 >>> 8;
     $172 = $171 & 255;
     $173 = (3904 + ($172<<2)|0);
     $174 = HEAP32[$173>>2]|0;
     $175 = $174 ^ $170;
     $176 = $167 >>> 16;
     $177 = $176 & 255;
     $178 = (2880 + ($177<<2)|0);
     $179 = HEAP32[$178>>2]|0;
     $180 = $175 ^ $179;
     $181 = $167 >>> 24;
     $182 = (1856 + ($181<<2)|0);
     $183 = HEAP32[$182>>2]|0;
     $184 = $180 ^ $183;
     $185 = (($$19$i) + -32)|0;
     $186 = ($185>>>0)>(31);
     if ($186) {
      $$19$i = $185;$buf4$011$i = $165;$c$110$i = $184;
     } else {
      $$lcssa36 = $184;
      break;
     }
    }
    $scevgep40$i = (($$0116$i$lcssa) + ($19)|0);
    $20 = (($17) - ($18))|0;
    $$1$lcssa$i = $20;$buf4$0$lcssa$i = $scevgep40$i;$c$1$lcssa$i = $$lcssa36;
   } else {
    $$1$lcssa$i = $$017$i$lcssa;$buf4$0$lcssa$i = $$0116$i$lcssa;$c$1$lcssa$i = $c$018$i$lcssa;
   }
   $21 = ($$1$lcssa$i>>>0)>(3);
   if ($21) {
    $22 = (($$1$lcssa$i) + -4)|0;
    $23 = $22 >>> 2;
    $24 = $23 << 2;
    $$24$i = $$1$lcssa$i;$buf4$16$i = $buf4$0$lcssa$i;$c$25$i = $c$1$lcssa$i;
    while(1) {
     $187 = ((($buf4$16$i)) + 4|0);
     $188 = HEAP32[$buf4$16$i>>2]|0;
     $189 = $188 ^ $c$25$i;
     $190 = $189 & 255;
     $191 = (4928 + ($190<<2)|0);
     $192 = HEAP32[$191>>2]|0;
     $193 = $189 >>> 8;
     $194 = $193 & 255;
     $195 = (3904 + ($194<<2)|0);
     $196 = HEAP32[$195>>2]|0;
     $197 = $196 ^ $192;
     $198 = $189 >>> 16;
     $199 = $198 & 255;
     $200 = (2880 + ($199<<2)|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = $197 ^ $201;
     $203 = $189 >>> 24;
     $204 = (1856 + ($203<<2)|0);
     $205 = HEAP32[$204>>2]|0;
     $206 = $202 ^ $205;
     $207 = (($$24$i) + -4)|0;
     $208 = ($207>>>0)>(3);
     if ($208) {
      $$24$i = $207;$buf4$16$i = $187;$c$25$i = $206;
     } else {
      $$lcssa35 = $206;
      break;
     }
    }
    $209 = (($23) + 1)|0;
    $210 = (($22) - ($24))|0;
    $scevgep$i = (($buf4$0$lcssa$i) + ($209<<2)|0);
    $$2$lcssa$i = $210;$buf4$1$lcssa$i = $scevgep$i;$c$2$lcssa$i = $$lcssa35;
   } else {
    $$2$lcssa$i = $$1$lcssa$i;$buf4$1$lcssa$i = $buf4$0$lcssa$i;$c$2$lcssa$i = $c$1$lcssa$i;
   }
   $211 = ($$2$lcssa$i|0)==(0);
   if ($211) {
    $c$4$i = $c$2$lcssa$i;
   } else {
    $$12$i = $buf4$1$lcssa$i;$$3$i = $$2$lcssa$i;$c$3$i = $c$2$lcssa$i;
    while(1) {
     $212 = ((($$12$i)) + 1|0);
     $213 = HEAP8[$$12$i>>0]|0;
     $214 = $213&255;
     $c$3$masked$i = $c$3$i & 255;
     $215 = $214 ^ $c$3$masked$i;
     $216 = (1856 + ($215<<2)|0);
     $217 = HEAP32[$216>>2]|0;
     $218 = $c$3$i >>> 8;
     $219 = $217 ^ $218;
     $220 = (($$3$i) + -1)|0;
     $221 = ($220|0)==(0);
     if ($221) {
      $c$4$i = $219;
      break;
     } else {
      $$12$i = $212;$$3$i = $220;$c$3$i = $219;
     }
    }
   }
  }
 } while(0);
 $222 = $c$4$i ^ -1;
 $$0 = $222;
 return ($$0|0);
}
function _inflate_fast($strm,$start) {
 $strm = $strm|0;
 $start = $start|0;
 var $$lcssa = 0, $$lcssa23 = 0, $$lcssa244 = 0, $$lcssa245 = 0, $$lcssa247 = 0, $$lcssa248 = 0, $$lcssa250 = 0, $$lcssa251 = 0, $$lcssa255 = 0, $$lcssa256 = 0, $$lcssa257 = 0, $$lcssa259 = 0, $$lcssa272 = 0, $$lcssa273 = 0, $$lcssa30 = 0, $$lcssa32 = 0, $$lcssa34 = 0, $$sum = 0, $$sum1 = 0, $$sum10 = 0;
 var $$sum11 = 0, $$sum2 = 0, $$sum3 = 0, $$sum5 = 0, $$sum6 = 0, $$sum7 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bits$0 = 0, $bits$1 = 0, $bits$3 = 0, $bits$4 = 0, $bits$5 = 0, $bits$7 = 0, $bits$8 = 0, $bits$9 = 0, $extract$t = 0, $extract$t83 = 0;
 var $from$0 = 0, $from$1 = 0, $from$2 = 0, $from$3 = 0, $from$4$lcssa = 0, $from$4$ph = 0, $from$477 = 0, $from$5 = 0, $here$sroa$0$0 = 0, $here$sroa$0$0$in = 0, $here$sroa$0$0$in52 = 0, $here$sroa$0$055 = 0, $here$sroa$0$1 = 0, $here$sroa$0$1$in = 0, $here$sroa$0$1$in61 = 0, $here$sroa$0$164 = 0, $here$sroa$6$0 = 0, $here$sroa$6$0$in = 0, $here$sroa$6$0$in53 = 0, $here$sroa$6$056 = 0;
 var $here$sroa$6$1 = 0, $here$sroa$6$1$in = 0, $here$sroa$6$1$in62 = 0, $here$sroa$6$165 = 0, $here$sroa$8$0 = 0, $here$sroa$8$0$in = 0, $here$sroa$8$0$in54 = 0, $here$sroa$8$0$lcssa = 0, $here$sroa$8$0$lcssa$off0 = 0, $here$sroa$8$057 = 0, $here$sroa$8$058 = 0, $here$sroa$8$058$lcssa = 0, $here$sroa$8$1 = 0, $here$sroa$8$1$in = 0, $here$sroa$8$1$in63 = 0, $here$sroa$8$1$lcssa = 0, $here$sroa$8$166 = 0, $here$sroa$8$167 = 0, $hold$0 = 0, $hold$1 = 0;
 var $hold$3 = 0, $hold$4 = 0, $hold$5 = 0, $hold$7 = 0, $hold$8 = 0, $hold$9 = 0, $in$0 = 0, $in$1 = 0, $in$1$lcssa269 = 0, $in$2 = 0, $in$3 = 0, $in$4 = 0, $in$4$lcssa = 0, $in$5 = 0, $in$5$lcssa = 0, $in$6 = 0, $in$7 = 0, $len$0 = 0, $len$1$lcssa = 0, $len$1$ph = 0;
 var $len$176 = 0, $len$2 = 0, $op$0 = 0, $op$1 = 0, $op$2 = 0, $op$3 = 0, $or$cond = 0, $out$0 = 0, $out$0$lcssa = 0, $out$0$lcssa265 = 0, $out$0$lcssa266 = 0, $out$1 = 0, $out$2 = 0, $out$3 = 0, $out$4 = 0, $out$5$lcssa = 0, $out$5$ph = 0, $out$575 = 0, $out$6 = 0, $out$7 = 0;
 var $out$8 = 0, $scevgep$sum = 0, $scevgep124 = 0, $scevgep125$sum = 0, $scevgep125$sum152 = 0, $scevgep126$sum = 0, $scevgep126$sum153 = 0, $scevgep127$sum = 0, $scevgep128 = 0, $scevgep129$sum = 0, $scevgep130$sum = 0, $scevgep132$sum = 0, $scevgep133 = 0, $scevgep137$sum = 0, $scevgep138 = 0, $scevgep139$sum = 0, $scevgep140$sum = 0, $scevgep143$sum = 0, $scevgep144 = 0, $scevgep145$sum = 0;
 var $scevgep146$sum = 0, $scevgep148$sum = 0, $scevgep149 = 0, $scevgep150$sum = 0, $scevgep151 = 0, $umax = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($strm)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$strm>>2]|0;
 $3 = ((($2)) + -1|0);
 $4 = ((($strm)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $$sum = (($5) + -6)|0;
 $6 = (($2) + ($$sum)|0);
 $7 = ((($strm)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + -1|0);
 $10 = ((($strm)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $start ^ -1;
 $$sum1 = (($11) + ($12))|0;
 $13 = (($8) + ($$sum1)|0);
 $$sum2 = (($11) + -258)|0;
 $14 = (($8) + ($$sum2)|0);
 $15 = ((($1)) + 40|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($1)) + 44|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($1)) + 48|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($1)) + 52|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($1)) + 56|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($1)) + 60|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($1)) + 76|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($1)) + 80|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($1)) + 84|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = 1 << $32;
 $34 = (($33) + -1)|0;
 $35 = ((($1)) + 88|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = 1 << $36;
 $38 = (($37) + -1)|0;
 $39 = $13;
 $40 = ((($1)) + 7104|0);
 $41 = ((($22)) + -1|0);
 $42 = ($20|0)==(0);
 $43 = (($16) + -1)|0;
 $44 = (($43) + ($20))|0;
 $45 = (($20) + -1)|0;
 $46 = (($39) + -1)|0;
 $47 = (($39) - ($20))|0;
 $48 = (($39) + -2)|0;
 $bits$0 = $26;$hold$0 = $24;$in$0 = $3;$out$0 = $9;
 L1: while(1) {
  $49 = ($bits$0>>>0)<(15);
  if ($49) {
   $50 = ((($in$0)) + 1|0);
   $51 = HEAP8[$50>>0]|0;
   $52 = $51&255;
   $53 = $52 << $bits$0;
   $54 = (($53) + ($hold$0))|0;
   $55 = (($bits$0) + 8)|0;
   $56 = ((($in$0)) + 2|0);
   $57 = HEAP8[$56>>0]|0;
   $58 = $57&255;
   $59 = $58 << $55;
   $60 = (($54) + ($59))|0;
   $61 = (($bits$0) + 16)|0;
   $bits$1 = $61;$hold$1 = $60;$in$1 = $56;
  } else {
   $bits$1 = $bits$0;$hold$1 = $hold$0;$in$1 = $in$0;
  }
  $62 = $hold$1 & $34;
  $here$sroa$0$0$in52 = (($28) + ($62<<2)|0);
  $here$sroa$6$0$in53 = (((($28) + ($62<<2)|0)) + 1|0);
  $here$sroa$8$0$in54 = (((($28) + ($62<<2)|0)) + 2|0);
  $here$sroa$0$055 = HEAP8[$here$sroa$0$0$in52>>0]|0;
  $here$sroa$6$056 = HEAP8[$here$sroa$6$0$in53>>0]|0;
  $here$sroa$8$057 = HEAP16[$here$sroa$8$0$in54>>1]|0;
  $63 = $here$sroa$6$056&255;
  $64 = $hold$1 >>> $63;
  $65 = (($bits$1) - ($63))|0;
  $66 = ($here$sroa$0$055<<24>>24)==(0);
  $extract$t83 = $here$sroa$8$057&255;
  do {
   if ($66) {
    $$lcssa = $64;$$lcssa23 = $65;$here$sroa$8$0$lcssa$off0 = $extract$t83;
    label = 7;
   } else {
    $67 = $here$sroa$0$055&255;
    $252 = $64;$257 = $65;$70 = $67;$here$sroa$8$058 = $here$sroa$8$057;
    while(1) {
     $69 = $70 & 16;
     $71 = ($69|0)==(0);
     if (!($71)) {
      $$lcssa244 = $70;$$lcssa247 = $257;$$lcssa250 = $252;$here$sroa$8$058$lcssa = $here$sroa$8$058;
      break;
     }
     $246 = $70 & 64;
     $247 = ($246|0)==(0);
     if (!($247)) {
      $$lcssa245 = $70;$$lcssa248 = $257;$$lcssa251 = $252;$in$1$lcssa269 = $in$1;$out$0$lcssa266 = $out$0;
      label = 57;
      break L1;
     }
     $248 = $here$sroa$8$058&65535;
     $249 = 1 << $70;
     $250 = (($249) + -1)|0;
     $251 = $252 & $250;
     $253 = (($251) + ($248))|0;
     $here$sroa$0$0$in = (($28) + ($253<<2)|0);
     $here$sroa$6$0$in = (((($28) + ($253<<2)|0)) + 1|0);
     $here$sroa$8$0$in = (((($28) + ($253<<2)|0)) + 2|0);
     $here$sroa$0$0 = HEAP8[$here$sroa$0$0$in>>0]|0;
     $here$sroa$6$0 = HEAP8[$here$sroa$6$0$in>>0]|0;
     $here$sroa$8$0 = HEAP16[$here$sroa$8$0$in>>1]|0;
     $254 = $here$sroa$6$0&255;
     $255 = $252 >>> $254;
     $256 = (($257) - ($254))|0;
     $258 = $here$sroa$0$0&255;
     $259 = ($here$sroa$0$0<<24>>24)==(0);
     if ($259) {
      $$lcssa255 = $255;$$lcssa256 = $256;$here$sroa$8$0$lcssa = $here$sroa$8$0;
      label = 6;
      break;
     } else {
      $252 = $255;$257 = $256;$70 = $258;$here$sroa$8$058 = $here$sroa$8$0;
     }
    }
    if ((label|0) == 6) {
     label = 0;
     $extract$t = $here$sroa$8$0$lcssa&255;
     $$lcssa = $$lcssa255;$$lcssa23 = $$lcssa256;$here$sroa$8$0$lcssa$off0 = $extract$t;
     label = 7;
     break;
    }
    $72 = $here$sroa$8$058$lcssa&65535;
    $73 = $$lcssa244 & 15;
    $74 = ($73|0)==(0);
    if ($74) {
     $bits$4 = $$lcssa247;$hold$4 = $$lcssa250;$in$3 = $in$1;$len$0 = $72;
    } else {
     $75 = ($$lcssa247>>>0)<($73>>>0);
     if ($75) {
      $76 = ((($in$1)) + 1|0);
      $77 = HEAP8[$76>>0]|0;
      $78 = $77&255;
      $79 = $78 << $$lcssa247;
      $80 = (($79) + ($$lcssa250))|0;
      $81 = (($$lcssa247) + 8)|0;
      $bits$3 = $81;$hold$3 = $80;$in$2 = $76;
     } else {
      $bits$3 = $$lcssa247;$hold$3 = $$lcssa250;$in$2 = $in$1;
     }
     $82 = 1 << $73;
     $83 = (($82) + -1)|0;
     $84 = $hold$3 & $83;
     $85 = (($84) + ($72))|0;
     $86 = $hold$3 >>> $73;
     $87 = (($bits$3) - ($73))|0;
     $bits$4 = $87;$hold$4 = $86;$in$3 = $in$2;$len$0 = $85;
    }
    $88 = ($bits$4>>>0)<(15);
    if ($88) {
     $89 = ((($in$3)) + 1|0);
     $90 = HEAP8[$89>>0]|0;
     $91 = $90&255;
     $92 = $91 << $bits$4;
     $93 = (($92) + ($hold$4))|0;
     $94 = (($bits$4) + 8)|0;
     $95 = ((($in$3)) + 2|0);
     $96 = HEAP8[$95>>0]|0;
     $97 = $96&255;
     $98 = $97 << $94;
     $99 = (($93) + ($98))|0;
     $100 = (($bits$4) + 16)|0;
     $bits$5 = $100;$hold$5 = $99;$in$4 = $95;
    } else {
     $bits$5 = $bits$4;$hold$5 = $hold$4;$in$4 = $in$3;
    }
    $101 = $hold$5 & $38;
    $here$sroa$0$1$in61 = (($30) + ($101<<2)|0);
    $here$sroa$6$1$in62 = (((($30) + ($101<<2)|0)) + 1|0);
    $here$sroa$8$1$in63 = (((($30) + ($101<<2)|0)) + 2|0);
    $here$sroa$0$164 = HEAP8[$here$sroa$0$1$in61>>0]|0;
    $here$sroa$6$165 = HEAP8[$here$sroa$6$1$in62>>0]|0;
    $here$sroa$8$166 = HEAP16[$here$sroa$8$1$in63>>1]|0;
    $102 = $here$sroa$6$165&255;
    $103 = $hold$5 >>> $102;
    $104 = (($bits$5) - ($102))|0;
    $105 = $here$sroa$0$164&255;
    $106 = $105 & 16;
    $107 = ($106|0)==(0);
    if ($107) {
     $230 = $105;$236 = $103;$241 = $104;$here$sroa$8$167 = $here$sroa$8$166;
     while(1) {
      $229 = $230 & 64;
      $231 = ($229|0)==(0);
      if (!($231)) {
       $$lcssa257 = $241;$$lcssa259 = $236;$in$4$lcssa = $in$4;$out$0$lcssa = $out$0;
       label = 54;
       break L1;
      }
      $232 = $here$sroa$8$167&65535;
      $233 = 1 << $230;
      $234 = (($233) + -1)|0;
      $235 = $236 & $234;
      $237 = (($235) + ($232))|0;
      $here$sroa$0$1$in = (($30) + ($237<<2)|0);
      $here$sroa$6$1$in = (((($30) + ($237<<2)|0)) + 1|0);
      $here$sroa$8$1$in = (((($30) + ($237<<2)|0)) + 2|0);
      $here$sroa$0$1 = HEAP8[$here$sroa$0$1$in>>0]|0;
      $here$sroa$6$1 = HEAP8[$here$sroa$6$1$in>>0]|0;
      $here$sroa$8$1 = HEAP16[$here$sroa$8$1$in>>1]|0;
      $238 = $here$sroa$6$1&255;
      $239 = $236 >>> $238;
      $240 = (($241) - ($238))|0;
      $242 = $here$sroa$0$1&255;
      $243 = $242 & 16;
      $244 = ($243|0)==(0);
      if ($244) {
       $230 = $242;$236 = $239;$241 = $240;$here$sroa$8$167 = $here$sroa$8$1;
      } else {
       $$lcssa30 = $239;$$lcssa32 = $240;$$lcssa34 = $242;$here$sroa$8$1$lcssa = $here$sroa$8$1;
       break;
      }
     }
    } else {
     $$lcssa30 = $103;$$lcssa32 = $104;$$lcssa34 = $105;$here$sroa$8$1$lcssa = $here$sroa$8$166;
    }
    $108 = $here$sroa$8$1$lcssa&65535;
    $109 = $$lcssa34 & 15;
    $110 = ($$lcssa32>>>0)<($109>>>0);
    if ($110) {
     $111 = ((($in$4)) + 1|0);
     $112 = HEAP8[$111>>0]|0;
     $113 = $112&255;
     $114 = $113 << $$lcssa32;
     $115 = (($114) + ($$lcssa30))|0;
     $116 = (($$lcssa32) + 8)|0;
     $117 = ($116>>>0)<($109>>>0);
     if ($117) {
      $118 = ((($in$4)) + 2|0);
      $119 = HEAP8[$118>>0]|0;
      $120 = $119&255;
      $121 = $120 << $116;
      $122 = (($121) + ($115))|0;
      $123 = (($$lcssa32) + 16)|0;
      $bits$7 = $123;$hold$7 = $122;$in$5 = $118;
     } else {
      $bits$7 = $116;$hold$7 = $115;$in$5 = $111;
     }
    } else {
     $bits$7 = $$lcssa32;$hold$7 = $$lcssa30;$in$5 = $in$4;
    }
    $124 = 1 << $109;
    $125 = (($124) + -1)|0;
    $126 = $hold$7 & $125;
    $127 = (($126) + ($108))|0;
    $128 = $hold$7 >>> $109;
    $129 = (($bits$7) - ($109))|0;
    $130 = $out$0;
    $131 = (($130) - ($39))|0;
    $132 = ($127>>>0)>($131>>>0);
    if (!($132)) {
     $200 = (0 - ($127))|0;
     $201 = (($out$0) + ($200)|0);
     $202 = (2 - ($len$0))|0;
     $203 = ($202>>>0)>(4294967293);
     $umax = $203 ? $202 : -3;
     $204 = (($len$0) + ($umax))|0;
     $205 = (($204>>>0) % 3)&-1;
     $206 = (($204) - ($205))|0;
     $207 = (($206) - ($127))|0;
     $from$5 = $201;$len$2 = $len$0;$out$6 = $out$0;
     while(1) {
      $208 = ((($from$5)) + 1|0);
      $209 = HEAP8[$208>>0]|0;
      $210 = ((($out$6)) + 1|0);
      HEAP8[$210>>0] = $209;
      $211 = ((($from$5)) + 2|0);
      $212 = HEAP8[$211>>0]|0;
      $213 = ((($out$6)) + 2|0);
      HEAP8[$213>>0] = $212;
      $214 = ((($from$5)) + 3|0);
      $215 = HEAP8[$214>>0]|0;
      $216 = ((($out$6)) + 3|0);
      HEAP8[$216>>0] = $215;
      $217 = (($len$2) + -3)|0;
      $218 = ($217>>>0)>(2);
      if ($218) {
       $from$5 = $214;$len$2 = $217;$out$6 = $216;
      } else {
       break;
      }
     }
     $219 = (($len$0) + -3)|0;
     $scevgep$sum = (($206) + 3)|0;
     $scevgep124 = (($out$0) + ($scevgep$sum)|0);
     $220 = ($219|0)==($206|0);
     if ($220) {
      $bits$8 = $129;$hold$8 = $128;$in$6 = $in$5;$out$7 = $scevgep124;
      break;
     }
     $221 = (($219) - ($206))|0;
     $scevgep125$sum = (($207) + 4)|0;
     $222 = (($out$0) + ($scevgep125$sum)|0);
     $223 = HEAP8[$222>>0]|0;
     $scevgep126$sum = (($206) + 4)|0;
     $224 = (($out$0) + ($scevgep126$sum)|0);
     HEAP8[$224>>0] = $223;
     $225 = ($221>>>0)>(1);
     if (!($225)) {
      $bits$8 = $129;$hold$8 = $128;$in$6 = $in$5;$out$7 = $224;
      break;
     }
     $scevgep125$sum152 = (($207) + 5)|0;
     $226 = (($out$0) + ($scevgep125$sum152)|0);
     $227 = HEAP8[$226>>0]|0;
     $scevgep126$sum153 = (($206) + 5)|0;
     $228 = (($out$0) + ($scevgep126$sum153)|0);
     HEAP8[$228>>0] = $227;
     $bits$8 = $129;$hold$8 = $128;$in$6 = $in$5;$out$7 = $228;
     break;
    }
    $133 = (($127) - ($131))|0;
    $134 = ($133>>>0)>($18>>>0);
    if ($134) {
     $135 = HEAP32[$40>>2]|0;
     $136 = ($135|0)==(0);
     if (!($136)) {
      $$lcssa272 = $128;$$lcssa273 = $129;$in$5$lcssa = $in$5;$out$0$lcssa265 = $out$0;
      label = 22;
      break L1;
     }
    }
    do {
     if ($42) {
      $$sum10 = (($43) - ($133))|0;
      $138 = (($22) + ($$sum10)|0);
      $139 = ($len$0>>>0)>($133>>>0);
      if ($139) {
       $140 = (($len$0) - ($133))|0;
       $141 = (($127) - ($130))|0;
       $from$0 = $138;$op$0 = $133;$out$1 = $out$0;
       while(1) {
        $142 = ((($from$0)) + 1|0);
        $143 = HEAP8[$142>>0]|0;
        $144 = ((($out$1)) + 1|0);
        HEAP8[$144>>0] = $143;
        $145 = (($op$0) + -1)|0;
        $146 = ($145|0)==(0);
        if ($146) {
         break;
        } else {
         $from$0 = $142;$op$0 = $145;$out$1 = $144;
        }
       }
       $scevgep143$sum = (($39) + ($141))|0;
       $scevgep144 = (($out$0) + ($scevgep143$sum)|0);
       $scevgep145$sum = (($46) + ($141))|0;
       $$sum11 = (1 - ($127))|0;
       $scevgep146$sum = (($scevgep145$sum) + ($$sum11))|0;
       $147 = (($out$0) + ($scevgep146$sum)|0);
       $from$4$ph = $147;$len$1$ph = $140;$out$5$ph = $scevgep144;
      } else {
       $from$4$ph = $138;$len$1$ph = $len$0;$out$5$ph = $out$0;
      }
     } else {
      $148 = ($133>>>0)>($20>>>0);
      if (!($148)) {
       $$sum5 = (($45) - ($133))|0;
       $167 = (($22) + ($$sum5)|0);
       $168 = ($len$0>>>0)>($133>>>0);
       if (!($168)) {
        $from$4$ph = $167;$len$1$ph = $len$0;$out$5$ph = $out$0;
        break;
       }
       $169 = (($len$0) - ($133))|0;
       $170 = (($127) - ($130))|0;
       $from$3 = $167;$op$3 = $133;$out$4 = $out$0;
       while(1) {
        $171 = ((($from$3)) + 1|0);
        $172 = HEAP8[$171>>0]|0;
        $173 = ((($out$4)) + 1|0);
        HEAP8[$173>>0] = $172;
        $174 = (($op$3) + -1)|0;
        $175 = ($174|0)==(0);
        if ($175) {
         break;
        } else {
         $from$3 = $171;$op$3 = $174;$out$4 = $173;
        }
       }
       $scevgep127$sum = (($39) + ($170))|0;
       $scevgep128 = (($out$0) + ($scevgep127$sum)|0);
       $scevgep129$sum = (($46) + ($170))|0;
       $$sum6 = (1 - ($127))|0;
       $scevgep130$sum = (($scevgep129$sum) + ($$sum6))|0;
       $176 = (($out$0) + ($scevgep130$sum)|0);
       $from$4$ph = $176;$len$1$ph = $169;$out$5$ph = $scevgep128;
       break;
      }
      $$sum7 = (($44) - ($133))|0;
      $149 = (($22) + ($$sum7)|0);
      $150 = (($133) - ($20))|0;
      $151 = ($len$0>>>0)>($150>>>0);
      if ($151) {
       $152 = (($len$0) - ($150))|0;
       $153 = (($127) - ($130))|0;
       $from$1 = $149;$op$1 = $150;$out$2 = $out$0;
       while(1) {
        $154 = ((($from$1)) + 1|0);
        $155 = HEAP8[$154>>0]|0;
        $156 = ((($out$2)) + 1|0);
        HEAP8[$156>>0] = $155;
        $157 = (($op$1) + -1)|0;
        $158 = ($157|0)==(0);
        if ($158) {
         break;
        } else {
         $from$1 = $154;$op$1 = $157;$out$2 = $156;
        }
       }
       $scevgep132$sum = (($47) + ($153))|0;
       $scevgep133 = (($out$0) + ($scevgep132$sum)|0);
       $159 = ($152>>>0)>($20>>>0);
       if ($159) {
        $160 = (($152) - ($20))|0;
        $from$2 = $41;$op$2 = $20;$out$3 = $scevgep133;
        while(1) {
         $161 = ((($from$2)) + 1|0);
         $162 = HEAP8[$161>>0]|0;
         $163 = ((($out$3)) + 1|0);
         HEAP8[$163>>0] = $162;
         $164 = (($op$2) + -1)|0;
         $165 = ($164|0)==(0);
         if ($165) {
          break;
         } else {
          $from$2 = $161;$op$2 = $164;$out$3 = $163;
         }
        }
        $scevgep137$sum = (($39) + ($153))|0;
        $scevgep138 = (($out$0) + ($scevgep137$sum)|0);
        $scevgep139$sum = (($48) + ($153))|0;
        $$sum9 = (2 - ($127))|0;
        $scevgep140$sum = (($scevgep139$sum) + ($$sum9))|0;
        $166 = (($out$0) + ($scevgep140$sum)|0);
        $from$4$ph = $166;$len$1$ph = $160;$out$5$ph = $scevgep138;
       } else {
        $from$4$ph = $41;$len$1$ph = $152;$out$5$ph = $scevgep133;
       }
      } else {
       $from$4$ph = $149;$len$1$ph = $len$0;$out$5$ph = $out$0;
      }
     }
    } while(0);
    $177 = ($len$1$ph>>>0)>(2);
    if ($177) {
     $178 = (($len$1$ph) + -3)|0;
     $179 = (($178>>>0) % 3)&-1;
     $180 = (($178) - ($179))|0;
     $from$477 = $from$4$ph;$len$176 = $len$1$ph;$out$575 = $out$5$ph;
     while(1) {
      $181 = ((($from$477)) + 1|0);
      $182 = HEAP8[$181>>0]|0;
      $183 = ((($out$575)) + 1|0);
      HEAP8[$183>>0] = $182;
      $184 = ((($from$477)) + 2|0);
      $185 = HEAP8[$184>>0]|0;
      $186 = ((($out$575)) + 2|0);
      HEAP8[$186>>0] = $185;
      $187 = ((($from$477)) + 3|0);
      $188 = HEAP8[$187>>0]|0;
      $189 = ((($out$575)) + 3|0);
      HEAP8[$189>>0] = $188;
      $190 = (($len$176) + -3)|0;
      $191 = ($190>>>0)>(2);
      if ($191) {
       $from$477 = $187;$len$176 = $190;$out$575 = $189;
      } else {
       break;
      }
     }
     $scevgep148$sum = (($180) + 3)|0;
     $scevgep149 = (($out$5$ph) + ($scevgep148$sum)|0);
     $scevgep150$sum = (($180) + 3)|0;
     $scevgep151 = (($from$4$ph) + ($scevgep150$sum)|0);
     $from$4$lcssa = $scevgep151;$len$1$lcssa = $179;$out$5$lcssa = $scevgep149;
    } else {
     $from$4$lcssa = $from$4$ph;$len$1$lcssa = $len$1$ph;$out$5$lcssa = $out$5$ph;
    }
    $192 = ($len$1$lcssa|0)==(0);
    if ($192) {
     $bits$8 = $129;$hold$8 = $128;$in$6 = $in$5;$out$7 = $out$5$lcssa;
    } else {
     $193 = ((($from$4$lcssa)) + 1|0);
     $194 = HEAP8[$193>>0]|0;
     $195 = ((($out$5$lcssa)) + 1|0);
     HEAP8[$195>>0] = $194;
     $196 = ($len$1$lcssa>>>0)>(1);
     if ($196) {
      $197 = ((($from$4$lcssa)) + 2|0);
      $198 = HEAP8[$197>>0]|0;
      $199 = ((($out$5$lcssa)) + 2|0);
      HEAP8[$199>>0] = $198;
      $bits$8 = $129;$hold$8 = $128;$in$6 = $in$5;$out$7 = $199;
     } else {
      $bits$8 = $129;$hold$8 = $128;$in$6 = $in$5;$out$7 = $195;
     }
    }
   }
  } while(0);
  if ((label|0) == 7) {
   label = 0;
   $68 = ((($out$0)) + 1|0);
   HEAP8[$68>>0] = $here$sroa$8$0$lcssa$off0;
   $bits$8 = $$lcssa23;$hold$8 = $$lcssa;$in$6 = $in$1;$out$7 = $68;
  }
  $263 = ($in$6>>>0)<($6>>>0);
  $264 = ($out$7>>>0)<($14>>>0);
  $or$cond = $264 & $263;
  if ($or$cond) {
   $bits$0 = $bits$8;$hold$0 = $hold$8;$in$0 = $in$6;$out$0 = $out$7;
  } else {
   $bits$9 = $bits$8;$hold$9 = $hold$8;$in$7 = $in$6;$out$8 = $out$7;
   break;
  }
 }
 do {
  if ((label|0) == 22) {
   $137 = ((($strm)) + 24|0);
   HEAP32[$137>>2] = 30803;
   HEAP32[$1>>2] = 29;
   $bits$9 = $$lcssa273;$hold$9 = $$lcssa272;$in$7 = $in$5$lcssa;$out$8 = $out$0$lcssa265;
  }
  else if ((label|0) == 54) {
   $245 = ((($strm)) + 24|0);
   HEAP32[$245>>2] = 30833;
   HEAP32[$1>>2] = 29;
   $bits$9 = $$lcssa257;$hold$9 = $$lcssa259;$in$7 = $in$4$lcssa;$out$8 = $out$0$lcssa;
  }
  else if ((label|0) == 57) {
   $260 = $$lcssa245 & 32;
   $261 = ($260|0)==(0);
   if ($261) {
    $262 = ((($strm)) + 24|0);
    HEAP32[$262>>2] = 30855;
    HEAP32[$1>>2] = 29;
    $bits$9 = $$lcssa248;$hold$9 = $$lcssa251;$in$7 = $in$1$lcssa269;$out$8 = $out$0$lcssa266;
    break;
   } else {
    HEAP32[$1>>2] = 11;
    $bits$9 = $$lcssa248;$hold$9 = $$lcssa251;$in$7 = $in$1$lcssa269;$out$8 = $out$0$lcssa266;
    break;
   }
  }
 } while(0);
 $265 = $bits$9 >>> 3;
 $266 = (0 - ($265))|0;
 $267 = (($in$7) + ($266)|0);
 $268 = $265 << 3;
 $269 = (($bits$9) - ($268))|0;
 $270 = 1 << $269;
 $271 = (($270) + -1)|0;
 $272 = $271 & $hold$9;
 $$sum3 = (1 - ($265))|0;
 $273 = (($in$7) + ($$sum3)|0);
 HEAP32[$strm>>2] = $273;
 $274 = ((($out$8)) + 1|0);
 HEAP32[$7>>2] = $274;
 $275 = $6;
 $276 = $267;
 $277 = (($275) + 5)|0;
 $278 = (($277) - ($276))|0;
 HEAP32[$4>>2] = $278;
 $279 = $14;
 $280 = $out$8;
 $281 = (($279) + 257)|0;
 $282 = (($281) - ($280))|0;
 HEAP32[$10>>2] = $282;
 HEAP32[$23>>2] = $272;
 HEAP32[$25>>2] = $269;
 return;
}
function _abort_message($format,$varargs) {
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $list = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $list = sp;
 HEAP32[$list>>2] = $varargs;
 $0 = HEAP32[10172>>2]|0;
 (_vfprintf($0,$format,$list)|0);
 (_fputc(10,$0)|0);
 _abort();
 // unreachable;
}
function ___cxa_get_globals_fast() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_pthread_once((10160|0),(237|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = HEAP32[10156>>2]|0;
  $3 = (_pthread_getspecific(($2|0))|0);
  STACKTOP = sp;return ($3|0);
 } else {
  _abort_message(31096,$vararg_buffer);
  // unreachable;
 }
 return (0)|0;
}
function __Znwj($size) {
 $size = $size|0;
 var $$lcssa = 0, $$size = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($size|0)==(0);
 $$size = $0 ? 1 : $size;
 $1 = (_malloc($$size)|0);
 $2 = ($1|0)==(0|0);
 L1: do {
  if ($2) {
   while(1) {
    $3 = (__ZSt15get_new_handlerv()|0);
    $4 = ($3|0)==(0|0);
    if ($4) {
     break;
    }
    FUNCTION_TABLE_v[$3 & 255]();
    $5 = (_malloc($$size)|0);
    $6 = ($5|0)==(0|0);
    if (!($6)) {
     $$lcssa = $5;
     break L1;
    }
   }
   $7 = (___cxa_allocate_exception(4)|0);
   HEAP32[$7>>2] = (10060);
   ___cxa_throw(($7|0),(128|0),(137|0));
   // unreachable;
  } else {
   $$lcssa = $1;
  }
 } while(0);
 return ($$lcssa|0);
}
function __ZdlPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($ptr);
 return;
}
function __ZNSt9bad_allocD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9bad_allocD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt9bad_alloc4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (31145|0);
}
function __ZSt11__terminatePFvvE($func) {
 $func = $func|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 __THREW__ = 0;
 invoke_v($func|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if (!($1)) {
  __THREW__ = 0;
  invoke_vii(238,(31160|0),($vararg_buffer|0));
  $2 = __THREW__; __THREW__ = 0;
 }
 $3 = ___cxa_find_matching_catch(0|0)|0;
 $4 = tempRet0;
 (___cxa_begin_catch(($3|0))|0);
 __THREW__ = 0;
 invoke_vii(238,(31200|0),($vararg_buffer1|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = ___cxa_find_matching_catch(0|0)|0;
 $7 = tempRet0;
 __THREW__ = 0;
 invoke_v(239);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $10 = ___cxa_find_matching_catch(0|0)|0;
  $11 = tempRet0;
  ___clang_call_terminate($10);
  // unreachable;
 } else {
  ___clang_call_terminate($6);
  // unreachable;
 }
}
function __ZSt9terminatev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(240)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $21 = ___cxa_find_matching_catch(0|0)|0;
  $22 = tempRet0;
  ___clang_call_terminate($21);
  // unreachable;
 }
 $3 = ($0|0)==(0|0);
 if (!($3)) {
  $4 = HEAP32[$0>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   $6 = ((($4)) + 48|0);
   $7 = $6;
   $8 = $7;
   $9 = HEAP32[$8>>2]|0;
   $10 = (($7) + 4)|0;
   $11 = $10;
   $12 = HEAP32[$11>>2]|0;
   $13 = $9 & -256;
   $14 = ($13|0)==(1126902528);
   $15 = ($12|0)==(1129074247);
   $16 = $14 & $15;
   if ($16) {
    $17 = ((($4)) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    __ZSt11__terminatePFvvE($18);
    // unreachable;
   }
  }
 }
 $19 = HEAP32[2512]|0;HEAP32[2512] = (($19+0)|0);
 $20 = $19;
 __ZSt11__terminatePFvvE($20);
 // unreachable;
}
function __ZSt15get_new_handlerv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[10072>>2]|0;HEAP32[10072>>2] = (($0+0)|0);
 $1 = $0;
 return ($1|0);
}
function __ZNSt9exceptionD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $adjustedPtr = $adjustedPtr|0;
 var $$0 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $info = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = ($this|0)==($thrown_type|0);
 if ($0) {
  $$1 = 1;
 } else {
  $1 = ($thrown_type|0)==(0|0);
  if ($1) {
   $$1 = 0;
  } else {
   $2 = (___dynamic_cast($thrown_type,160,176,0)|0);
   $3 = ($2|0)==(0|0);
   if ($3) {
    $$1 = 0;
   } else {
    dest=$info; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    HEAP32[$info>>2] = $2;
    $4 = ((($info)) + 8|0);
    HEAP32[$4>>2] = $this;
    $5 = ((($info)) + 12|0);
    HEAP32[$5>>2] = -1;
    $6 = ((($info)) + 48|0);
    HEAP32[$6>>2] = 1;
    $7 = HEAP32[$2>>2]|0;
    $8 = ((($7)) + 28|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = HEAP32[$adjustedPtr>>2]|0;
    FUNCTION_TABLE_viiii[$9 & 255]($2,$info,$10,1);
    $11 = ((($info)) + 24|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(1);
    if ($13) {
     $14 = ((($info)) + 16|0);
     $15 = HEAP32[$14>>2]|0;
     HEAP32[$adjustedPtr>>2] = $15;
     $$0 = 1;
    } else {
     $$0 = 0;
    }
    $$1 = $$0;
   }
  }
 }
 STACKTOP = sp;return ($$1|0);
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   HEAP32[$0>>2] = $adjustedPtr;
   $3 = ((($info)) + 24|0);
   HEAP32[$3>>2] = $path_below;
   $4 = ((($info)) + 36|0);
   HEAP32[$4>>2] = 1;
  } else {
   $5 = ($1|0)==($adjustedPtr|0);
   if (!($5)) {
    $9 = ((($info)) + 36|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + 1)|0;
    HEAP32[$9>>2] = $11;
    $12 = ((($info)) + 24|0);
    HEAP32[$12>>2] = 2;
    $13 = ((($info)) + 54|0);
    HEAP8[$13>>0] = 1;
    break;
   }
   $6 = ((($info)) + 24|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(2);
   if ($8) {
    HEAP32[$6>>2] = $path_below;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 } else {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiii[$7 & 255]($4,$info,$adjustedPtr,$path_below);
 }
 return;
}
function ___dynamic_cast($static_ptr,$static_type,$dst_type,$src2dst_offset) {
 $static_ptr = $static_ptr|0;
 $static_type = $static_type|0;
 $dst_type = $dst_type|0;
 $src2dst_offset = $src2dst_offset|0;
 var $$ = 0, $$8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dst_ptr$0 = 0, $info = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = HEAP32[$static_ptr>>2]|0;
 $1 = ((($0)) + -8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = (($static_ptr) + ($3)|0);
 $5 = ((($0)) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$info>>2] = $dst_type;
 $7 = ((($info)) + 4|0);
 HEAP32[$7>>2] = $static_ptr;
 $8 = ((($info)) + 8|0);
 HEAP32[$8>>2] = $static_type;
 $9 = ((($info)) + 12|0);
 HEAP32[$9>>2] = $src2dst_offset;
 $10 = ((($info)) + 16|0);
 $11 = ((($info)) + 20|0);
 $12 = ((($info)) + 24|0);
 $13 = ((($info)) + 28|0);
 $14 = ((($info)) + 32|0);
 $15 = ((($info)) + 40|0);
 $16 = ($6|0)==($dst_type|0);
 dest=$10; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$10+36>>1]=0|0;HEAP8[$10+38>>0]=0|0;
 L1: do {
  if ($16) {
   $17 = ((($info)) + 48|0);
   HEAP32[$17>>2] = 1;
   $18 = HEAP32[$dst_type>>2]|0;
   $19 = ((($18)) + 20|0);
   $20 = HEAP32[$19>>2]|0;
   FUNCTION_TABLE_viiiiii[$20 & 255]($dst_type,$info,$4,$4,1,0);
   $21 = HEAP32[$12>>2]|0;
   $22 = ($21|0)==(1);
   $$ = $22 ? $4 : 0;
   $dst_ptr$0 = $$;
  } else {
   $23 = ((($info)) + 36|0);
   $24 = HEAP32[$6>>2]|0;
   $25 = ((($24)) + 24|0);
   $26 = HEAP32[$25>>2]|0;
   FUNCTION_TABLE_viiiii[$26 & 255]($6,$info,$4,1,0);
   $27 = HEAP32[$23>>2]|0;
   switch ($27|0) {
   case 0:  {
    $28 = HEAP32[$15>>2]|0;
    $29 = ($28|0)==(1);
    $30 = HEAP32[$13>>2]|0;
    $31 = ($30|0)==(1);
    $or$cond = $29 & $31;
    $32 = HEAP32[$14>>2]|0;
    $33 = ($32|0)==(1);
    $or$cond3 = $or$cond & $33;
    $34 = HEAP32[$11>>2]|0;
    $$8 = $or$cond3 ? $34 : 0;
    $dst_ptr$0 = $$8;
    break L1;
    break;
   }
   case 1:  {
    break;
   }
   default: {
    $dst_ptr$0 = 0;
    break L1;
   }
   }
   $35 = HEAP32[$12>>2]|0;
   $36 = ($35|0)==(1);
   if (!($36)) {
    $37 = HEAP32[$15>>2]|0;
    $38 = ($37|0)==(0);
    $39 = HEAP32[$13>>2]|0;
    $40 = ($39|0)==(1);
    $or$cond5 = $38 & $40;
    $41 = HEAP32[$14>>2]|0;
    $42 = ($41|0)==(1);
    $or$cond7 = $or$cond5 & $42;
    if (!($or$cond7)) {
     $dst_ptr$0 = 0;
     break;
    }
   }
   $43 = HEAP32[$10>>2]|0;
   $dst_ptr$0 = $43;
  }
 } while(0);
 STACKTOP = sp;return ($dst_ptr$0|0);
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($this,$info,$dst_ptr,$current_ptr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 53|0);
 HEAP8[$0>>0] = 1;
 $1 = ((($info)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==($current_ptr|0);
 do {
  if ($3) {
   $4 = ((($info)) + 52|0);
   HEAP8[$4>>0] = 1;
   $5 = ((($info)) + 16|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0|0);
   if ($7) {
    HEAP32[$5>>2] = $dst_ptr;
    $8 = ((($info)) + 24|0);
    HEAP32[$8>>2] = $path_below;
    $9 = ((($info)) + 36|0);
    HEAP32[$9>>2] = 1;
    $10 = ((($info)) + 48|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==(1);
    $13 = ($path_below|0)==(1);
    $or$cond = $12 & $13;
    if (!($or$cond)) {
     break;
    }
    $14 = ((($info)) + 54|0);
    HEAP8[$14>>0] = 1;
    break;
   }
   $15 = ($6|0)==($dst_ptr|0);
   if (!($15)) {
    $25 = ((($info)) + 36|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (($26) + 1)|0;
    HEAP32[$25>>2] = $27;
    $28 = ((($info)) + 54|0);
    HEAP8[$28>>0] = 1;
    break;
   }
   $16 = ((($info)) + 24|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(2);
   if ($18) {
    HEAP32[$16>>2] = $path_below;
    $22 = $path_below;
   } else {
    $22 = $17;
   }
   $19 = ((($info)) + 48|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(1);
   $23 = ($22|0)==(1);
   $or$cond1 = $21 & $23;
   if ($or$cond1) {
    $24 = ((($info)) + 54|0);
    HEAP8[$24>>0] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $is_dst_type_derived_from_static_type$0$off01 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 L1: do {
  if ($2) {
   $3 = ((($info)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = ((($info)) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if (!($10)) {
    $43 = ((($this)) + 8|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = HEAP32[$44>>2]|0;
    $46 = ((($45)) + 24|0);
    $47 = HEAP32[$46>>2]|0;
    FUNCTION_TABLE_viiiii[$47 & 255]($44,$info,$current_ptr,$path_below,$use_strcmp);
    break;
   }
   $11 = ((($info)) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==($current_ptr|0);
   if (!($13)) {
    $14 = ((($info)) + 20|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==($current_ptr|0);
    if (!($16)) {
     $19 = ((($info)) + 32|0);
     HEAP32[$19>>2] = $path_below;
     $20 = ((($info)) + 44|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)==(4);
     if ($22) {
      break;
     }
     $23 = ((($info)) + 52|0);
     HEAP8[$23>>0] = 0;
     $24 = ((($info)) + 53|0);
     HEAP8[$24>>0] = 0;
     $25 = ((($this)) + 8|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = HEAP32[$26>>2]|0;
     $28 = ((($27)) + 20|0);
     $29 = HEAP32[$28>>2]|0;
     FUNCTION_TABLE_viiiiii[$29 & 255]($26,$info,$current_ptr,$current_ptr,1,$use_strcmp);
     $30 = HEAP8[$24>>0]|0;
     $31 = ($30<<24>>24)==(0);
     if ($31) {
      $is_dst_type_derived_from_static_type$0$off01 = 0;
      label = 13;
     } else {
      $32 = HEAP8[$23>>0]|0;
      $not$ = ($32<<24>>24)==(0);
      if ($not$) {
       $is_dst_type_derived_from_static_type$0$off01 = 1;
       label = 13;
      }
     }
     do {
      if ((label|0) == 13) {
       HEAP32[$14>>2] = $current_ptr;
       $33 = ((($info)) + 40|0);
       $34 = HEAP32[$33>>2]|0;
       $35 = (($34) + 1)|0;
       HEAP32[$33>>2] = $35;
       $36 = ((($info)) + 36|0);
       $37 = HEAP32[$36>>2]|0;
       $38 = ($37|0)==(1);
       if ($38) {
        $39 = ((($info)) + 24|0);
        $40 = HEAP32[$39>>2]|0;
        $41 = ($40|0)==(2);
        if ($41) {
         $42 = ((($info)) + 54|0);
         HEAP8[$42>>0] = 1;
         if ($is_dst_type_derived_from_static_type$0$off01) {
          break;
         }
        } else {
         label = 16;
        }
       } else {
        label = 16;
       }
       if ((label|0) == 16) {
        if ($is_dst_type_derived_from_static_type$0$off01) {
         break;
        }
       }
       HEAP32[$20>>2] = 4;
       break L1;
      }
     } while(0);
     HEAP32[$20>>2] = 3;
     break;
    }
   }
   $17 = ($path_below|0)==(1);
   if ($17) {
    $18 = ((($info)) + 32|0);
    HEAP32[$18>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 do {
  if ($2) {
   $3 = ((($info)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = ((($info)) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if ($10) {
    $11 = ((($info)) + 16|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==($current_ptr|0);
    if (!($13)) {
     $14 = ((($info)) + 20|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)==($current_ptr|0);
     if (!($16)) {
      $19 = ((($info)) + 32|0);
      HEAP32[$19>>2] = $path_below;
      HEAP32[$14>>2] = $current_ptr;
      $20 = ((($info)) + 40|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = (($21) + 1)|0;
      HEAP32[$20>>2] = $22;
      $23 = ((($info)) + 36|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = ($24|0)==(1);
      if ($25) {
       $26 = ((($info)) + 24|0);
       $27 = HEAP32[$26>>2]|0;
       $28 = ($27|0)==(2);
       if ($28) {
        $29 = ((($info)) + 54|0);
        HEAP8[$29>>0] = 1;
       }
      }
      $30 = ((($info)) + 44|0);
      HEAP32[$30>>2] = 4;
      break;
     }
    }
    $17 = ($path_below|0)==(1);
    if ($17) {
     $18 = ((($info)) + 32|0);
     HEAP32[$18>>2] = 1;
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 } else {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiiiii[$7 & 255]($4,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 }
 return;
}
function ___cxa_can_catch($catchType,$excpType,$thrown) {
 $catchType = $catchType|0;
 $excpType = $excpType|0;
 $thrown = $thrown|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $temp = sp;
 $0 = HEAP32[$thrown>>2]|0;
 HEAP32[$temp>>2] = $0;
 $1 = HEAP32[$catchType>>2]|0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiii[$3 & 255]($catchType,$excpType,$temp)|0);
 $5 = $4&1;
 if ($4) {
  $6 = HEAP32[$temp>>2]|0;
  HEAP32[$thrown>>2] = $6;
 }
 STACKTOP = sp;return ($5|0);
}
function ___cxa_is_pointer_type($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type|0)==(0|0);
 if ($0) {
  $3 = 0;
 } else {
  $1 = (___dynamic_cast($type,160,208,0)|0);
  $phitmp = ($1|0)!=(0|0);
  $3 = $phitmp;
 }
 $2 = $3&1;
 return ($2|0);
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $thrown_object = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $thrown_object = sp + 36|0;
 $0 = (___cxa_get_globals_fast()|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = HEAP32[$0>>2]|0;
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $4 = ((($2)) + 80|0);
   $5 = ((($2)) + 48|0);
   $6 = $5;
   $7 = $6;
   $8 = HEAP32[$7>>2]|0;
   $9 = (($6) + 4)|0;
   $10 = $9;
   $11 = HEAP32[$10>>2]|0;
   $12 = $8 & -256;
   $13 = ($12|0)==(1126902528);
   $14 = ($11|0)==(1129074247);
   $15 = $13 & $14;
   if (!($15)) {
    HEAP32[$vararg_buffer7>>2] = 31489;
    _abort_message(31439,$vararg_buffer7);
    // unreachable;
   }
   $16 = ($8|0)==(1126902529);
   $17 = ($11|0)==(1129074247);
   $18 = $16 & $17;
   if ($18) {
    $19 = ((($2)) + 44|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $20;
   } else {
    $21 = $4;
   }
   HEAP32[$thrown_object>>2] = $21;
   $22 = HEAP32[$2>>2]|0;
   $23 = ((($22)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = HEAP32[144>>2]|0;
   $26 = ((($25)) + 16|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (FUNCTION_TABLE_iiii[$27 & 255](144,$22,$thrown_object)|0);
   if ($28) {
    $29 = HEAP32[$thrown_object>>2]|0;
    $30 = HEAP32[$29>>2]|0;
    $31 = ((($30)) + 8|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (FUNCTION_TABLE_ii[$32 & 255]($29)|0);
    HEAP32[$vararg_buffer>>2] = 31489;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $24;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $33;
    _abort_message(31353,$vararg_buffer);
    // unreachable;
   } else {
    HEAP32[$vararg_buffer3>>2] = 31489;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $24;
    _abort_message(31398,$vararg_buffer3);
    // unreachable;
   }
  }
 }
 _abort_message(31477,$vararg_buffer10);
 // unreachable;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_pthread_key_create((10156|0),(241|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 } else {
  _abort_message(31250,$vararg_buffer);
  // unreachable;
 }
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 _free($p);
 $0 = HEAP32[10156>>2]|0;
 $1 = (_pthread_setspecific(($0|0),(0|0))|0);
 $2 = ($1|0)==(0);
 if ($2) {
  STACKTOP = sp;return;
 } else {
  _abort_message(31300,$vararg_buffer);
  // unreachable;
 }
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$3$i = 0, $$lcssa = 0, $$lcssa211 = 0, $$lcssa215 = 0, $$lcssa216 = 0, $$lcssa217 = 0, $$lcssa219 = 0, $$lcssa222 = 0, $$lcssa224 = 0, $$lcssa226 = 0, $$lcssa228 = 0, $$lcssa230 = 0, $$lcssa232 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i22$i = 0, $$pre$i25 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i23$iZ2D = 0;
 var $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre105 = 0, $$pre106 = 0, $$pre14$i$i = 0, $$pre43$i = 0, $$pre56$i$i = 0, $$pre57$i$i = 0, $$pre8$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0, $$sum$i13$i = 0, $$sum$i15$i = 0, $$sum$i17$i = 0, $$sum$i19$i = 0;
 var $$sum$i2334 = 0, $$sum$i32 = 0, $$sum$i35 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i14$i = 0, $$sum1$i20$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum11$i = 0, $$sum11$i$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum116$i = 0;
 var $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum120$i = 0, $$sum121$i = 0, $$sum122$i = 0, $$sum123$i = 0, $$sum124$i = 0, $$sum125$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0;
 var $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i16$i = 0, $$sum2$i18$i = 0, $$sum2$i21$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0, $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i27 = 0;
 var $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0, $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0;
 var $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0;
 var $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0;
 var $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0;
 var $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0;
 var $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0;
 var $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0;
 var $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0;
 var $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0;
 var $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0;
 var $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0;
 var $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0;
 var $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0;
 var $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0;
 var $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0;
 var $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0;
 var $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0;
 var $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0;
 var $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0;
 var $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0;
 var $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0;
 var $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0;
 var $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0;
 var $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0;
 var $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0;
 var $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0;
 var $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0;
 var $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0;
 var $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0;
 var $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0;
 var $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0;
 var $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0;
 var $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0;
 var $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0;
 var $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0;
 var $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0;
 var $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0;
 var $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0;
 var $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0;
 var $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0;
 var $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0;
 var $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$029$i = 0, $K2$07$i$i = 0, $K8$051$i$i = 0;
 var $R$0$i = 0, $R$0$i$i = 0, $R$0$i$i$lcssa = 0, $R$0$i$lcssa = 0, $R$0$i18 = 0, $R$0$i18$lcssa = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i$i$lcssa = 0, $RP$0$i$lcssa = 0, $RP$0$i17 = 0, $RP$0$i17$lcssa = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i25$i = 0, $T$028$i = 0, $T$028$i$lcssa = 0;
 var $T$050$i$i = 0, $T$050$i$i$lcssa = 0, $T$06$i$i = 0, $T$06$i$i$lcssa = 0, $br$0$ph$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0, $not$$i = 0, $not$$i$i = 0, $not$$i26$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i30 = 0, $or$cond1$i = 0;
 var $or$cond19$i = 0, $or$cond2$i = 0, $or$cond3$i = 0, $or$cond5$i = 0, $or$cond57$i = 0, $or$cond6$i = 0, $or$cond8$i = 0, $or$cond9$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i15 = 0, $rsize$1$i = 0, $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0;
 var $sp$0$i$i$i = 0, $sp$084$i = 0, $sp$084$i$lcssa = 0, $sp$183$i = 0, $sp$183$i$lcssa = 0, $ssize$0$$i = 0, $ssize$0$i = 0, $ssize$1$ph$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0, $t$230$i = 0, $tbase$255$i = 0, $tsize$0$ph$i = 0, $tsize$0323944$i = 0, $tsize$1$i = 0, $tsize$254$i = 0;
 var $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$3$ph$i = 0, $v$332$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   $2 = (($bytes) + 11)|0;
   $3 = $2 & -8;
   $4 = $1 ? 16 : $3;
   $5 = $4 >>> 3;
   $6 = HEAP32[10220>>2]|0;
   $7 = $6 >>> $5;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($5))|0;
    $13 = $12 << 1;
    $14 = (10260 + ($13<<2)|0);
    $$sum10 = (($13) + 2)|0;
    $15 = (10260 + ($$sum10<<2)|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[10220>>2] = $22;
     } else {
      $23 = HEAP32[(10236)>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if (!($24)) {
       $25 = ((($18)) + 12|0);
       $26 = HEAP32[$25>>2]|0;
       $27 = ($26|0)==($16|0);
       if ($27) {
        HEAP32[$25>>2] = $14;
        HEAP32[$15>>2] = $18;
        break;
       }
      }
      _abort();
      // unreachable;
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = ((($16)) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    break;
   }
   $34 = HEAP32[(10228)>>2]|0;
   $35 = ($4>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $5;
     $38 = 2 << $5;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = (10260 + ($65<<2)|0);
     $$sum4 = (($65) + 2)|0;
     $67 = (10260 + ($$sum4<<2)|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ((($68)) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[10220>>2] = $74;
       $88 = $34;
      } else {
       $75 = HEAP32[(10236)>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if (!($76)) {
        $77 = ((($70)) + 12|0);
        $78 = HEAP32[$77>>2]|0;
        $79 = ($78|0)==($68|0);
        if ($79) {
         HEAP32[$77>>2] = $66;
         HEAP32[$67>>2] = $70;
         $$pre = HEAP32[(10228)>>2]|0;
         $88 = $$pre;
         break;
        }
       }
       _abort();
       // unreachable;
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($4))|0;
     $82 = $4 | 3;
     $83 = ((($68)) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($4)|0);
     $85 = $81 | 1;
     $$sum56 = $4 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $89 = ($88|0)==(0);
     if (!($89)) {
      $90 = HEAP32[(10240)>>2]|0;
      $91 = $88 >>> 3;
      $92 = $91 << 1;
      $93 = (10260 + ($92<<2)|0);
      $94 = HEAP32[10220>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[10220>>2] = $98;
       $$pre105 = (($92) + 2)|0;
       $$pre106 = (10260 + ($$pre105<<2)|0);
       $$pre$phiZ2D = $$pre106;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = (10260 + ($$sum9<<2)|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[(10236)>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = ((($F4$0)) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = ((($90)) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = ((($90)) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[(10228)>>2] = $81;
     HEAP32[(10240)>>2] = $84;
     $mem$0 = $69;
     break;
    }
    $106 = HEAP32[(10224)>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $4;
     label = 154;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = (10524 + ($130<<2)|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ((($132)) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($4))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = ((($t$0$i)) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = ((($t$0$i)) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        $rsize$0$i$lcssa = $rsize$0$i;$v$0$i$lcssa = $v$0$i;
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = ((($144)) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($4))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[(10236)>>2]|0;
     $150 = ($v$0$i$lcssa>>>0)<($149>>>0);
     if (!($150)) {
      $151 = (($v$0$i$lcssa) + ($4)|0);
      $152 = ($v$0$i$lcssa>>>0)<($151>>>0);
      if ($152) {
       $153 = ((($v$0$i$lcssa)) + 24|0);
       $154 = HEAP32[$153>>2]|0;
       $155 = ((($v$0$i$lcssa)) + 12|0);
       $156 = HEAP32[$155>>2]|0;
       $157 = ($156|0)==($v$0$i$lcssa|0);
       do {
        if ($157) {
         $167 = ((($v$0$i$lcssa)) + 20|0);
         $168 = HEAP32[$167>>2]|0;
         $169 = ($168|0)==(0|0);
         if ($169) {
          $170 = ((($v$0$i$lcssa)) + 16|0);
          $171 = HEAP32[$170>>2]|0;
          $172 = ($171|0)==(0|0);
          if ($172) {
           $R$1$i = 0;
           break;
          } else {
           $R$0$i = $171;$RP$0$i = $170;
          }
         } else {
          $R$0$i = $168;$RP$0$i = $167;
         }
         while(1) {
          $173 = ((($R$0$i)) + 20|0);
          $174 = HEAP32[$173>>2]|0;
          $175 = ($174|0)==(0|0);
          if (!($175)) {
           $R$0$i = $174;$RP$0$i = $173;
           continue;
          }
          $176 = ((($R$0$i)) + 16|0);
          $177 = HEAP32[$176>>2]|0;
          $178 = ($177|0)==(0|0);
          if ($178) {
           $R$0$i$lcssa = $R$0$i;$RP$0$i$lcssa = $RP$0$i;
           break;
          } else {
           $R$0$i = $177;$RP$0$i = $176;
          }
         }
         $179 = ($RP$0$i$lcssa>>>0)<($149>>>0);
         if ($179) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i$lcssa>>2] = 0;
          $R$1$i = $R$0$i$lcssa;
          break;
         }
        } else {
         $158 = ((($v$0$i$lcssa)) + 8|0);
         $159 = HEAP32[$158>>2]|0;
         $160 = ($159>>>0)<($149>>>0);
         if (!($160)) {
          $161 = ((($159)) + 12|0);
          $162 = HEAP32[$161>>2]|0;
          $163 = ($162|0)==($v$0$i$lcssa|0);
          if ($163) {
           $164 = ((($156)) + 8|0);
           $165 = HEAP32[$164>>2]|0;
           $166 = ($165|0)==($v$0$i$lcssa|0);
           if ($166) {
            HEAP32[$161>>2] = $156;
            HEAP32[$164>>2] = $159;
            $R$1$i = $156;
            break;
           }
          }
         }
         _abort();
         // unreachable;
        }
       } while(0);
       $180 = ($154|0)==(0|0);
       do {
        if (!($180)) {
         $181 = ((($v$0$i$lcssa)) + 28|0);
         $182 = HEAP32[$181>>2]|0;
         $183 = (10524 + ($182<<2)|0);
         $184 = HEAP32[$183>>2]|0;
         $185 = ($v$0$i$lcssa|0)==($184|0);
         if ($185) {
          HEAP32[$183>>2] = $R$1$i;
          $cond$i = ($R$1$i|0)==(0|0);
          if ($cond$i) {
           $186 = 1 << $182;
           $187 = $186 ^ -1;
           $188 = HEAP32[(10224)>>2]|0;
           $189 = $188 & $187;
           HEAP32[(10224)>>2] = $189;
           break;
          }
         } else {
          $190 = HEAP32[(10236)>>2]|0;
          $191 = ($154>>>0)<($190>>>0);
          if ($191) {
           _abort();
           // unreachable;
          }
          $192 = ((($154)) + 16|0);
          $193 = HEAP32[$192>>2]|0;
          $194 = ($193|0)==($v$0$i$lcssa|0);
          if ($194) {
           HEAP32[$192>>2] = $R$1$i;
          } else {
           $195 = ((($154)) + 20|0);
           HEAP32[$195>>2] = $R$1$i;
          }
          $196 = ($R$1$i|0)==(0|0);
          if ($196) {
           break;
          }
         }
         $197 = HEAP32[(10236)>>2]|0;
         $198 = ($R$1$i>>>0)<($197>>>0);
         if ($198) {
          _abort();
          // unreachable;
         }
         $199 = ((($R$1$i)) + 24|0);
         HEAP32[$199>>2] = $154;
         $200 = ((($v$0$i$lcssa)) + 16|0);
         $201 = HEAP32[$200>>2]|0;
         $202 = ($201|0)==(0|0);
         do {
          if (!($202)) {
           $203 = ($201>>>0)<($197>>>0);
           if ($203) {
            _abort();
            // unreachable;
           } else {
            $204 = ((($R$1$i)) + 16|0);
            HEAP32[$204>>2] = $201;
            $205 = ((($201)) + 24|0);
            HEAP32[$205>>2] = $R$1$i;
            break;
           }
          }
         } while(0);
         $206 = ((($v$0$i$lcssa)) + 20|0);
         $207 = HEAP32[$206>>2]|0;
         $208 = ($207|0)==(0|0);
         if (!($208)) {
          $209 = HEAP32[(10236)>>2]|0;
          $210 = ($207>>>0)<($209>>>0);
          if ($210) {
           _abort();
           // unreachable;
          } else {
           $211 = ((($R$1$i)) + 20|0);
           HEAP32[$211>>2] = $207;
           $212 = ((($207)) + 24|0);
           HEAP32[$212>>2] = $R$1$i;
           break;
          }
         }
        }
       } while(0);
       $213 = ($rsize$0$i$lcssa>>>0)<(16);
       if ($213) {
        $214 = (($rsize$0$i$lcssa) + ($4))|0;
        $215 = $214 | 3;
        $216 = ((($v$0$i$lcssa)) + 4|0);
        HEAP32[$216>>2] = $215;
        $$sum4$i = (($214) + 4)|0;
        $217 = (($v$0$i$lcssa) + ($$sum4$i)|0);
        $218 = HEAP32[$217>>2]|0;
        $219 = $218 | 1;
        HEAP32[$217>>2] = $219;
       } else {
        $220 = $4 | 3;
        $221 = ((($v$0$i$lcssa)) + 4|0);
        HEAP32[$221>>2] = $220;
        $222 = $rsize$0$i$lcssa | 1;
        $$sum$i35 = $4 | 4;
        $223 = (($v$0$i$lcssa) + ($$sum$i35)|0);
        HEAP32[$223>>2] = $222;
        $$sum1$i = (($rsize$0$i$lcssa) + ($4))|0;
        $224 = (($v$0$i$lcssa) + ($$sum1$i)|0);
        HEAP32[$224>>2] = $rsize$0$i$lcssa;
        $225 = HEAP32[(10228)>>2]|0;
        $226 = ($225|0)==(0);
        if (!($226)) {
         $227 = HEAP32[(10240)>>2]|0;
         $228 = $225 >>> 3;
         $229 = $228 << 1;
         $230 = (10260 + ($229<<2)|0);
         $231 = HEAP32[10220>>2]|0;
         $232 = 1 << $228;
         $233 = $231 & $232;
         $234 = ($233|0)==(0);
         if ($234) {
          $235 = $231 | $232;
          HEAP32[10220>>2] = $235;
          $$pre$i = (($229) + 2)|0;
          $$pre8$i = (10260 + ($$pre$i<<2)|0);
          $$pre$phi$iZ2D = $$pre8$i;$F1$0$i = $230;
         } else {
          $$sum3$i = (($229) + 2)|0;
          $236 = (10260 + ($$sum3$i<<2)|0);
          $237 = HEAP32[$236>>2]|0;
          $238 = HEAP32[(10236)>>2]|0;
          $239 = ($237>>>0)<($238>>>0);
          if ($239) {
           _abort();
           // unreachable;
          } else {
           $$pre$phi$iZ2D = $236;$F1$0$i = $237;
          }
         }
         HEAP32[$$pre$phi$iZ2D>>2] = $227;
         $240 = ((($F1$0$i)) + 12|0);
         HEAP32[$240>>2] = $227;
         $241 = ((($227)) + 8|0);
         HEAP32[$241>>2] = $F1$0$i;
         $242 = ((($227)) + 12|0);
         HEAP32[$242>>2] = $230;
        }
        HEAP32[(10228)>>2] = $rsize$0$i$lcssa;
        HEAP32[(10240)>>2] = $151;
       }
       $243 = ((($v$0$i$lcssa)) + 8|0);
       $mem$0 = $243;
       break;
      }
     }
     _abort();
     // unreachable;
    }
   } else {
    $nb$0 = $4;
    label = 154;
   }
  } else {
   $244 = ($bytes>>>0)>(4294967231);
   if ($244) {
    $nb$0 = -1;
    label = 154;
   } else {
    $245 = (($bytes) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[(10224)>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $nb$0 = $246;
     label = 154;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $idx$0$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $idx$0$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $idx$0$i = $274;
      }
     }
     $275 = (10524 + ($idx$0$i<<2)|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L110: do {
      if ($277) {
       $rsize$2$i = $249;$t$1$i = 0;$v$2$i = 0;
       label = 86;
      } else {
       $278 = ($idx$0$i|0)==(31);
       $279 = $idx$0$i >>> 1;
       $280 = (25 - ($279))|0;
       $281 = $278 ? 0 : $280;
       $282 = $246 << $281;
       $rsize$0$i15 = $249;$rst$0$i = 0;$sizebits$0$i = $282;$t$0$i14 = $276;$v$0$i16 = 0;
       while(1) {
        $283 = ((($t$0$i14)) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($rsize$0$i15>>>0);
        if ($287) {
         $288 = ($285|0)==($246|0);
         if ($288) {
          $rsize$331$i = $286;$t$230$i = $t$0$i14;$v$332$i = $t$0$i14;
          label = 90;
          break L110;
         } else {
          $rsize$1$i = $286;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $289 = ((($t$0$i14)) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $sizebits$0$i >>> 31;
        $292 = (((($t$0$i14)) + 16|0) + ($291<<2)|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond19$i = $294 | $295;
        $rst$1$i = $or$cond19$i ? $rst$0$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $sizebits$0$i << 1;
        if ($296) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         label = 86;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $297;$t$0$i14 = $293;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 86) {
      $298 = ($t$1$i|0)==(0|0);
      $299 = ($v$2$i|0)==(0|0);
      $or$cond$i = $298 & $299;
      if ($or$cond$i) {
       $300 = 2 << $idx$0$i;
       $301 = (0 - ($300))|0;
       $302 = $300 | $301;
       $303 = $247 & $302;
       $304 = ($303|0)==(0);
       if ($304) {
        $nb$0 = $246;
        label = 154;
        break;
       }
       $305 = (0 - ($303))|0;
       $306 = $303 & $305;
       $307 = (($306) + -1)|0;
       $308 = $307 >>> 12;
       $309 = $308 & 16;
       $310 = $307 >>> $309;
       $311 = $310 >>> 5;
       $312 = $311 & 8;
       $313 = $312 | $309;
       $314 = $310 >>> $312;
       $315 = $314 >>> 2;
       $316 = $315 & 4;
       $317 = $313 | $316;
       $318 = $314 >>> $316;
       $319 = $318 >>> 1;
       $320 = $319 & 2;
       $321 = $317 | $320;
       $322 = $318 >>> $320;
       $323 = $322 >>> 1;
       $324 = $323 & 1;
       $325 = $321 | $324;
       $326 = $322 >>> $324;
       $327 = (($325) + ($326))|0;
       $328 = (10524 + ($327<<2)|0);
       $329 = HEAP32[$328>>2]|0;
       $t$2$ph$i = $329;$v$3$ph$i = 0;
      } else {
       $t$2$ph$i = $t$1$i;$v$3$ph$i = $v$2$i;
      }
      $330 = ($t$2$ph$i|0)==(0|0);
      if ($330) {
       $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$3$ph$i;
      } else {
       $rsize$331$i = $rsize$2$i;$t$230$i = $t$2$ph$i;$v$332$i = $v$3$ph$i;
       label = 90;
      }
     }
     if ((label|0) == 90) {
      while(1) {
       label = 0;
       $331 = ((($t$230$i)) + 4|0);
       $332 = HEAP32[$331>>2]|0;
       $333 = $332 & -8;
       $334 = (($333) - ($246))|0;
       $335 = ($334>>>0)<($rsize$331$i>>>0);
       $$rsize$3$i = $335 ? $334 : $rsize$331$i;
       $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
       $336 = ((($t$230$i)) + 16|0);
       $337 = HEAP32[$336>>2]|0;
       $338 = ($337|0)==(0|0);
       if (!($338)) {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $337;$v$332$i = $t$2$v$3$i;
        label = 90;
        continue;
       }
       $339 = ((($t$230$i)) + 20|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($340|0)==(0|0);
       if ($341) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $340;$v$332$i = $t$2$v$3$i;
        label = 90;
       }
      }
     }
     $342 = ($v$3$lcssa$i|0)==(0|0);
     if ($342) {
      $nb$0 = $246;
      label = 154;
     } else {
      $343 = HEAP32[(10228)>>2]|0;
      $344 = (($343) - ($246))|0;
      $345 = ($rsize$3$lcssa$i>>>0)<($344>>>0);
      if ($345) {
       $346 = HEAP32[(10236)>>2]|0;
       $347 = ($v$3$lcssa$i>>>0)<($346>>>0);
       if (!($347)) {
        $348 = (($v$3$lcssa$i) + ($246)|0);
        $349 = ($v$3$lcssa$i>>>0)<($348>>>0);
        if ($349) {
         $350 = ((($v$3$lcssa$i)) + 24|0);
         $351 = HEAP32[$350>>2]|0;
         $352 = ((($v$3$lcssa$i)) + 12|0);
         $353 = HEAP32[$352>>2]|0;
         $354 = ($353|0)==($v$3$lcssa$i|0);
         do {
          if ($354) {
           $364 = ((($v$3$lcssa$i)) + 20|0);
           $365 = HEAP32[$364>>2]|0;
           $366 = ($365|0)==(0|0);
           if ($366) {
            $367 = ((($v$3$lcssa$i)) + 16|0);
            $368 = HEAP32[$367>>2]|0;
            $369 = ($368|0)==(0|0);
            if ($369) {
             $R$1$i20 = 0;
             break;
            } else {
             $R$0$i18 = $368;$RP$0$i17 = $367;
            }
           } else {
            $R$0$i18 = $365;$RP$0$i17 = $364;
           }
           while(1) {
            $370 = ((($R$0$i18)) + 20|0);
            $371 = HEAP32[$370>>2]|0;
            $372 = ($371|0)==(0|0);
            if (!($372)) {
             $R$0$i18 = $371;$RP$0$i17 = $370;
             continue;
            }
            $373 = ((($R$0$i18)) + 16|0);
            $374 = HEAP32[$373>>2]|0;
            $375 = ($374|0)==(0|0);
            if ($375) {
             $R$0$i18$lcssa = $R$0$i18;$RP$0$i17$lcssa = $RP$0$i17;
             break;
            } else {
             $R$0$i18 = $374;$RP$0$i17 = $373;
            }
           }
           $376 = ($RP$0$i17$lcssa>>>0)<($346>>>0);
           if ($376) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$RP$0$i17$lcssa>>2] = 0;
            $R$1$i20 = $R$0$i18$lcssa;
            break;
           }
          } else {
           $355 = ((($v$3$lcssa$i)) + 8|0);
           $356 = HEAP32[$355>>2]|0;
           $357 = ($356>>>0)<($346>>>0);
           if (!($357)) {
            $358 = ((($356)) + 12|0);
            $359 = HEAP32[$358>>2]|0;
            $360 = ($359|0)==($v$3$lcssa$i|0);
            if ($360) {
             $361 = ((($353)) + 8|0);
             $362 = HEAP32[$361>>2]|0;
             $363 = ($362|0)==($v$3$lcssa$i|0);
             if ($363) {
              HEAP32[$358>>2] = $353;
              HEAP32[$361>>2] = $356;
              $R$1$i20 = $353;
              break;
             }
            }
           }
           _abort();
           // unreachable;
          }
         } while(0);
         $377 = ($351|0)==(0|0);
         do {
          if (!($377)) {
           $378 = ((($v$3$lcssa$i)) + 28|0);
           $379 = HEAP32[$378>>2]|0;
           $380 = (10524 + ($379<<2)|0);
           $381 = HEAP32[$380>>2]|0;
           $382 = ($v$3$lcssa$i|0)==($381|0);
           if ($382) {
            HEAP32[$380>>2] = $R$1$i20;
            $cond$i21 = ($R$1$i20|0)==(0|0);
            if ($cond$i21) {
             $383 = 1 << $379;
             $384 = $383 ^ -1;
             $385 = HEAP32[(10224)>>2]|0;
             $386 = $385 & $384;
             HEAP32[(10224)>>2] = $386;
             break;
            }
           } else {
            $387 = HEAP32[(10236)>>2]|0;
            $388 = ($351>>>0)<($387>>>0);
            if ($388) {
             _abort();
             // unreachable;
            }
            $389 = ((($351)) + 16|0);
            $390 = HEAP32[$389>>2]|0;
            $391 = ($390|0)==($v$3$lcssa$i|0);
            if ($391) {
             HEAP32[$389>>2] = $R$1$i20;
            } else {
             $392 = ((($351)) + 20|0);
             HEAP32[$392>>2] = $R$1$i20;
            }
            $393 = ($R$1$i20|0)==(0|0);
            if ($393) {
             break;
            }
           }
           $394 = HEAP32[(10236)>>2]|0;
           $395 = ($R$1$i20>>>0)<($394>>>0);
           if ($395) {
            _abort();
            // unreachable;
           }
           $396 = ((($R$1$i20)) + 24|0);
           HEAP32[$396>>2] = $351;
           $397 = ((($v$3$lcssa$i)) + 16|0);
           $398 = HEAP32[$397>>2]|0;
           $399 = ($398|0)==(0|0);
           do {
            if (!($399)) {
             $400 = ($398>>>0)<($394>>>0);
             if ($400) {
              _abort();
              // unreachable;
             } else {
              $401 = ((($R$1$i20)) + 16|0);
              HEAP32[$401>>2] = $398;
              $402 = ((($398)) + 24|0);
              HEAP32[$402>>2] = $R$1$i20;
              break;
             }
            }
           } while(0);
           $403 = ((($v$3$lcssa$i)) + 20|0);
           $404 = HEAP32[$403>>2]|0;
           $405 = ($404|0)==(0|0);
           if (!($405)) {
            $406 = HEAP32[(10236)>>2]|0;
            $407 = ($404>>>0)<($406>>>0);
            if ($407) {
             _abort();
             // unreachable;
            } else {
             $408 = ((($R$1$i20)) + 20|0);
             HEAP32[$408>>2] = $404;
             $409 = ((($404)) + 24|0);
             HEAP32[$409>>2] = $R$1$i20;
             break;
            }
           }
          }
         } while(0);
         $410 = ($rsize$3$lcssa$i>>>0)<(16);
         L179: do {
          if ($410) {
           $411 = (($rsize$3$lcssa$i) + ($246))|0;
           $412 = $411 | 3;
           $413 = ((($v$3$lcssa$i)) + 4|0);
           HEAP32[$413>>2] = $412;
           $$sum18$i = (($411) + 4)|0;
           $414 = (($v$3$lcssa$i) + ($$sum18$i)|0);
           $415 = HEAP32[$414>>2]|0;
           $416 = $415 | 1;
           HEAP32[$414>>2] = $416;
          } else {
           $417 = $246 | 3;
           $418 = ((($v$3$lcssa$i)) + 4|0);
           HEAP32[$418>>2] = $417;
           $419 = $rsize$3$lcssa$i | 1;
           $$sum$i2334 = $246 | 4;
           $420 = (($v$3$lcssa$i) + ($$sum$i2334)|0);
           HEAP32[$420>>2] = $419;
           $$sum1$i24 = (($rsize$3$lcssa$i) + ($246))|0;
           $421 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
           HEAP32[$421>>2] = $rsize$3$lcssa$i;
           $422 = $rsize$3$lcssa$i >>> 3;
           $423 = ($rsize$3$lcssa$i>>>0)<(256);
           if ($423) {
            $424 = $422 << 1;
            $425 = (10260 + ($424<<2)|0);
            $426 = HEAP32[10220>>2]|0;
            $427 = 1 << $422;
            $428 = $426 & $427;
            $429 = ($428|0)==(0);
            if ($429) {
             $430 = $426 | $427;
             HEAP32[10220>>2] = $430;
             $$pre$i25 = (($424) + 2)|0;
             $$pre43$i = (10260 + ($$pre$i25<<2)|0);
             $$pre$phi$i26Z2D = $$pre43$i;$F5$0$i = $425;
            } else {
             $$sum17$i = (($424) + 2)|0;
             $431 = (10260 + ($$sum17$i<<2)|0);
             $432 = HEAP32[$431>>2]|0;
             $433 = HEAP32[(10236)>>2]|0;
             $434 = ($432>>>0)<($433>>>0);
             if ($434) {
              _abort();
              // unreachable;
             } else {
              $$pre$phi$i26Z2D = $431;$F5$0$i = $432;
             }
            }
            HEAP32[$$pre$phi$i26Z2D>>2] = $348;
            $435 = ((($F5$0$i)) + 12|0);
            HEAP32[$435>>2] = $348;
            $$sum15$i = (($246) + 8)|0;
            $436 = (($v$3$lcssa$i) + ($$sum15$i)|0);
            HEAP32[$436>>2] = $F5$0$i;
            $$sum16$i = (($246) + 12)|0;
            $437 = (($v$3$lcssa$i) + ($$sum16$i)|0);
            HEAP32[$437>>2] = $425;
            break;
           }
           $438 = $rsize$3$lcssa$i >>> 8;
           $439 = ($438|0)==(0);
           if ($439) {
            $I7$0$i = 0;
           } else {
            $440 = ($rsize$3$lcssa$i>>>0)>(16777215);
            if ($440) {
             $I7$0$i = 31;
            } else {
             $441 = (($438) + 1048320)|0;
             $442 = $441 >>> 16;
             $443 = $442 & 8;
             $444 = $438 << $443;
             $445 = (($444) + 520192)|0;
             $446 = $445 >>> 16;
             $447 = $446 & 4;
             $448 = $447 | $443;
             $449 = $444 << $447;
             $450 = (($449) + 245760)|0;
             $451 = $450 >>> 16;
             $452 = $451 & 2;
             $453 = $448 | $452;
             $454 = (14 - ($453))|0;
             $455 = $449 << $452;
             $456 = $455 >>> 15;
             $457 = (($454) + ($456))|0;
             $458 = $457 << 1;
             $459 = (($457) + 7)|0;
             $460 = $rsize$3$lcssa$i >>> $459;
             $461 = $460 & 1;
             $462 = $461 | $458;
             $I7$0$i = $462;
            }
           }
           $463 = (10524 + ($I7$0$i<<2)|0);
           $$sum2$i = (($246) + 28)|0;
           $464 = (($v$3$lcssa$i) + ($$sum2$i)|0);
           HEAP32[$464>>2] = $I7$0$i;
           $$sum3$i27 = (($246) + 16)|0;
           $465 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
           $$sum4$i28 = (($246) + 20)|0;
           $466 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
           HEAP32[$466>>2] = 0;
           HEAP32[$465>>2] = 0;
           $467 = HEAP32[(10224)>>2]|0;
           $468 = 1 << $I7$0$i;
           $469 = $467 & $468;
           $470 = ($469|0)==(0);
           if ($470) {
            $471 = $467 | $468;
            HEAP32[(10224)>>2] = $471;
            HEAP32[$463>>2] = $348;
            $$sum5$i = (($246) + 24)|0;
            $472 = (($v$3$lcssa$i) + ($$sum5$i)|0);
            HEAP32[$472>>2] = $463;
            $$sum6$i = (($246) + 12)|0;
            $473 = (($v$3$lcssa$i) + ($$sum6$i)|0);
            HEAP32[$473>>2] = $348;
            $$sum7$i = (($246) + 8)|0;
            $474 = (($v$3$lcssa$i) + ($$sum7$i)|0);
            HEAP32[$474>>2] = $348;
            break;
           }
           $475 = HEAP32[$463>>2]|0;
           $476 = ((($475)) + 4|0);
           $477 = HEAP32[$476>>2]|0;
           $478 = $477 & -8;
           $479 = ($478|0)==($rsize$3$lcssa$i|0);
           L197: do {
            if ($479) {
             $T$0$lcssa$i = $475;
            } else {
             $480 = ($I7$0$i|0)==(31);
             $481 = $I7$0$i >>> 1;
             $482 = (25 - ($481))|0;
             $483 = $480 ? 0 : $482;
             $484 = $rsize$3$lcssa$i << $483;
             $K12$029$i = $484;$T$028$i = $475;
             while(1) {
              $491 = $K12$029$i >>> 31;
              $492 = (((($T$028$i)) + 16|0) + ($491<<2)|0);
              $487 = HEAP32[$492>>2]|0;
              $493 = ($487|0)==(0|0);
              if ($493) {
               $$lcssa232 = $492;$T$028$i$lcssa = $T$028$i;
               break;
              }
              $485 = $K12$029$i << 1;
              $486 = ((($487)) + 4|0);
              $488 = HEAP32[$486>>2]|0;
              $489 = $488 & -8;
              $490 = ($489|0)==($rsize$3$lcssa$i|0);
              if ($490) {
               $T$0$lcssa$i = $487;
               break L197;
              } else {
               $K12$029$i = $485;$T$028$i = $487;
              }
             }
             $494 = HEAP32[(10236)>>2]|0;
             $495 = ($$lcssa232>>>0)<($494>>>0);
             if ($495) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$$lcssa232>>2] = $348;
              $$sum11$i = (($246) + 24)|0;
              $496 = (($v$3$lcssa$i) + ($$sum11$i)|0);
              HEAP32[$496>>2] = $T$028$i$lcssa;
              $$sum12$i = (($246) + 12)|0;
              $497 = (($v$3$lcssa$i) + ($$sum12$i)|0);
              HEAP32[$497>>2] = $348;
              $$sum13$i = (($246) + 8)|0;
              $498 = (($v$3$lcssa$i) + ($$sum13$i)|0);
              HEAP32[$498>>2] = $348;
              break L179;
             }
            }
           } while(0);
           $499 = ((($T$0$lcssa$i)) + 8|0);
           $500 = HEAP32[$499>>2]|0;
           $501 = HEAP32[(10236)>>2]|0;
           $502 = ($500>>>0)>=($501>>>0);
           $not$$i = ($T$0$lcssa$i>>>0)>=($501>>>0);
           $503 = $502 & $not$$i;
           if ($503) {
            $504 = ((($500)) + 12|0);
            HEAP32[$504>>2] = $348;
            HEAP32[$499>>2] = $348;
            $$sum8$i = (($246) + 8)|0;
            $505 = (($v$3$lcssa$i) + ($$sum8$i)|0);
            HEAP32[$505>>2] = $500;
            $$sum9$i = (($246) + 12)|0;
            $506 = (($v$3$lcssa$i) + ($$sum9$i)|0);
            HEAP32[$506>>2] = $T$0$lcssa$i;
            $$sum10$i = (($246) + 24)|0;
            $507 = (($v$3$lcssa$i) + ($$sum10$i)|0);
            HEAP32[$507>>2] = 0;
            break;
           } else {
            _abort();
            // unreachable;
           }
          }
         } while(0);
         $508 = ((($v$3$lcssa$i)) + 8|0);
         $mem$0 = $508;
         break;
        }
       }
       _abort();
       // unreachable;
      } else {
       $nb$0 = $246;
       label = 154;
      }
     }
    }
   }
  }
 } while(0);
 L212: do {
  if ((label|0) == 154) {
   $509 = HEAP32[(10228)>>2]|0;
   $510 = ($509>>>0)<($nb$0>>>0);
   if (!($510)) {
    $511 = (($509) - ($nb$0))|0;
    $512 = HEAP32[(10240)>>2]|0;
    $513 = ($511>>>0)>(15);
    if ($513) {
     $514 = (($512) + ($nb$0)|0);
     HEAP32[(10240)>>2] = $514;
     HEAP32[(10228)>>2] = $511;
     $515 = $511 | 1;
     $$sum2 = (($nb$0) + 4)|0;
     $516 = (($512) + ($$sum2)|0);
     HEAP32[$516>>2] = $515;
     $517 = (($512) + ($509)|0);
     HEAP32[$517>>2] = $511;
     $518 = $nb$0 | 3;
     $519 = ((($512)) + 4|0);
     HEAP32[$519>>2] = $518;
    } else {
     HEAP32[(10228)>>2] = 0;
     HEAP32[(10240)>>2] = 0;
     $520 = $509 | 3;
     $521 = ((($512)) + 4|0);
     HEAP32[$521>>2] = $520;
     $$sum1 = (($509) + 4)|0;
     $522 = (($512) + ($$sum1)|0);
     $523 = HEAP32[$522>>2]|0;
     $524 = $523 | 1;
     HEAP32[$522>>2] = $524;
    }
    $525 = ((($512)) + 8|0);
    $mem$0 = $525;
    break;
   }
   $526 = HEAP32[(10232)>>2]|0;
   $527 = ($526>>>0)>($nb$0>>>0);
   if ($527) {
    $528 = (($526) - ($nb$0))|0;
    HEAP32[(10232)>>2] = $528;
    $529 = HEAP32[(10244)>>2]|0;
    $530 = (($529) + ($nb$0)|0);
    HEAP32[(10244)>>2] = $530;
    $531 = $528 | 1;
    $$sum = (($nb$0) + 4)|0;
    $532 = (($529) + ($$sum)|0);
    HEAP32[$532>>2] = $531;
    $533 = $nb$0 | 3;
    $534 = ((($529)) + 4|0);
    HEAP32[$534>>2] = $533;
    $535 = ((($529)) + 8|0);
    $mem$0 = $535;
    break;
   }
   $536 = HEAP32[10692>>2]|0;
   $537 = ($536|0)==(0);
   if ($537) {
    _init_mparams();
   }
   $538 = (($nb$0) + 48)|0;
   $539 = HEAP32[(10700)>>2]|0;
   $540 = (($nb$0) + 47)|0;
   $541 = (($539) + ($540))|0;
   $542 = (0 - ($539))|0;
   $543 = $541 & $542;
   $544 = ($543>>>0)>($nb$0>>>0);
   if ($544) {
    $545 = HEAP32[(10660)>>2]|0;
    $546 = ($545|0)==(0);
    if (!($546)) {
     $547 = HEAP32[(10652)>>2]|0;
     $548 = (($547) + ($543))|0;
     $549 = ($548>>>0)<=($547>>>0);
     $550 = ($548>>>0)>($545>>>0);
     $or$cond1$i = $549 | $550;
     if ($or$cond1$i) {
      $mem$0 = 0;
      break;
     }
    }
    $551 = HEAP32[(10664)>>2]|0;
    $552 = $551 & 4;
    $553 = ($552|0)==(0);
    L231: do {
     if ($553) {
      $554 = HEAP32[(10244)>>2]|0;
      $555 = ($554|0)==(0|0);
      L233: do {
       if ($555) {
        label = 172;
       } else {
        $sp$0$i$i = (10668);
        while(1) {
         $556 = HEAP32[$sp$0$i$i>>2]|0;
         $557 = ($556>>>0)>($554>>>0);
         if (!($557)) {
          $558 = ((($sp$0$i$i)) + 4|0);
          $559 = HEAP32[$558>>2]|0;
          $560 = (($556) + ($559)|0);
          $561 = ($560>>>0)>($554>>>0);
          if ($561) {
           $$lcssa228 = $sp$0$i$i;$$lcssa230 = $558;
           break;
          }
         }
         $562 = ((($sp$0$i$i)) + 8|0);
         $563 = HEAP32[$562>>2]|0;
         $564 = ($563|0)==(0|0);
         if ($564) {
          label = 172;
          break L233;
         } else {
          $sp$0$i$i = $563;
         }
        }
        $587 = HEAP32[(10232)>>2]|0;
        $588 = (($541) - ($587))|0;
        $589 = $588 & $542;
        $590 = ($589>>>0)<(2147483647);
        if ($590) {
         $591 = (_sbrk(($589|0))|0);
         $592 = HEAP32[$$lcssa228>>2]|0;
         $593 = HEAP32[$$lcssa230>>2]|0;
         $594 = (($592) + ($593)|0);
         $595 = ($591|0)==($594|0);
         $$3$i = $595 ? $589 : 0;
         if ($595) {
          $596 = ($591|0)==((-1)|0);
          if ($596) {
           $tsize$0323944$i = $$3$i;
          } else {
           $tbase$255$i = $591;$tsize$254$i = $$3$i;
           label = 192;
           break L231;
          }
         } else {
          $br$0$ph$i = $591;$ssize$1$ph$i = $589;$tsize$0$ph$i = $$3$i;
          label = 182;
         }
        } else {
         $tsize$0323944$i = 0;
        }
       }
      } while(0);
      do {
       if ((label|0) == 172) {
        $565 = (_sbrk(0)|0);
        $566 = ($565|0)==((-1)|0);
        if ($566) {
         $tsize$0323944$i = 0;
        } else {
         $567 = $565;
         $568 = HEAP32[(10696)>>2]|0;
         $569 = (($568) + -1)|0;
         $570 = $569 & $567;
         $571 = ($570|0)==(0);
         if ($571) {
          $ssize$0$i = $543;
         } else {
          $572 = (($569) + ($567))|0;
          $573 = (0 - ($568))|0;
          $574 = $572 & $573;
          $575 = (($543) - ($567))|0;
          $576 = (($575) + ($574))|0;
          $ssize$0$i = $576;
         }
         $577 = HEAP32[(10652)>>2]|0;
         $578 = (($577) + ($ssize$0$i))|0;
         $579 = ($ssize$0$i>>>0)>($nb$0>>>0);
         $580 = ($ssize$0$i>>>0)<(2147483647);
         $or$cond$i30 = $579 & $580;
         if ($or$cond$i30) {
          $581 = HEAP32[(10660)>>2]|0;
          $582 = ($581|0)==(0);
          if (!($582)) {
           $583 = ($578>>>0)<=($577>>>0);
           $584 = ($578>>>0)>($581>>>0);
           $or$cond2$i = $583 | $584;
           if ($or$cond2$i) {
            $tsize$0323944$i = 0;
            break;
           }
          }
          $585 = (_sbrk(($ssize$0$i|0))|0);
          $586 = ($585|0)==($565|0);
          $ssize$0$$i = $586 ? $ssize$0$i : 0;
          if ($586) {
           $tbase$255$i = $565;$tsize$254$i = $ssize$0$$i;
           label = 192;
           break L231;
          } else {
           $br$0$ph$i = $585;$ssize$1$ph$i = $ssize$0$i;$tsize$0$ph$i = $ssize$0$$i;
           label = 182;
          }
         } else {
          $tsize$0323944$i = 0;
         }
        }
       }
      } while(0);
      L253: do {
       if ((label|0) == 182) {
        $597 = (0 - ($ssize$1$ph$i))|0;
        $598 = ($br$0$ph$i|0)!=((-1)|0);
        $599 = ($ssize$1$ph$i>>>0)<(2147483647);
        $or$cond5$i = $599 & $598;
        $600 = ($538>>>0)>($ssize$1$ph$i>>>0);
        $or$cond6$i = $600 & $or$cond5$i;
        do {
         if ($or$cond6$i) {
          $601 = HEAP32[(10700)>>2]|0;
          $602 = (($540) - ($ssize$1$ph$i))|0;
          $603 = (($602) + ($601))|0;
          $604 = (0 - ($601))|0;
          $605 = $603 & $604;
          $606 = ($605>>>0)<(2147483647);
          if ($606) {
           $607 = (_sbrk(($605|0))|0);
           $608 = ($607|0)==((-1)|0);
           if ($608) {
            (_sbrk(($597|0))|0);
            $tsize$0323944$i = $tsize$0$ph$i;
            break L253;
           } else {
            $609 = (($605) + ($ssize$1$ph$i))|0;
            $ssize$2$i = $609;
            break;
           }
          } else {
           $ssize$2$i = $ssize$1$ph$i;
          }
         } else {
          $ssize$2$i = $ssize$1$ph$i;
         }
        } while(0);
        $610 = ($br$0$ph$i|0)==((-1)|0);
        if ($610) {
         $tsize$0323944$i = $tsize$0$ph$i;
        } else {
         $tbase$255$i = $br$0$ph$i;$tsize$254$i = $ssize$2$i;
         label = 192;
         break L231;
        }
       }
      } while(0);
      $611 = HEAP32[(10664)>>2]|0;
      $612 = $611 | 4;
      HEAP32[(10664)>>2] = $612;
      $tsize$1$i = $tsize$0323944$i;
      label = 189;
     } else {
      $tsize$1$i = 0;
      label = 189;
     }
    } while(0);
    if ((label|0) == 189) {
     $613 = ($543>>>0)<(2147483647);
     if ($613) {
      $614 = (_sbrk(($543|0))|0);
      $615 = (_sbrk(0)|0);
      $616 = ($614|0)!=((-1)|0);
      $617 = ($615|0)!=((-1)|0);
      $or$cond3$i = $616 & $617;
      $618 = ($614>>>0)<($615>>>0);
      $or$cond8$i = $618 & $or$cond3$i;
      if ($or$cond8$i) {
       $619 = $615;
       $620 = $614;
       $621 = (($619) - ($620))|0;
       $622 = (($nb$0) + 40)|0;
       $623 = ($621>>>0)>($622>>>0);
       $$tsize$1$i = $623 ? $621 : $tsize$1$i;
       if ($623) {
        $tbase$255$i = $614;$tsize$254$i = $$tsize$1$i;
        label = 192;
       }
      }
     }
    }
    if ((label|0) == 192) {
     $624 = HEAP32[(10652)>>2]|0;
     $625 = (($624) + ($tsize$254$i))|0;
     HEAP32[(10652)>>2] = $625;
     $626 = HEAP32[(10656)>>2]|0;
     $627 = ($625>>>0)>($626>>>0);
     if ($627) {
      HEAP32[(10656)>>2] = $625;
     }
     $628 = HEAP32[(10244)>>2]|0;
     $629 = ($628|0)==(0|0);
     L272: do {
      if ($629) {
       $630 = HEAP32[(10236)>>2]|0;
       $631 = ($630|0)==(0|0);
       $632 = ($tbase$255$i>>>0)<($630>>>0);
       $or$cond9$i = $631 | $632;
       if ($or$cond9$i) {
        HEAP32[(10236)>>2] = $tbase$255$i;
       }
       HEAP32[(10668)>>2] = $tbase$255$i;
       HEAP32[(10672)>>2] = $tsize$254$i;
       HEAP32[(10680)>>2] = 0;
       $633 = HEAP32[10692>>2]|0;
       HEAP32[(10256)>>2] = $633;
       HEAP32[(10252)>>2] = -1;
       $i$02$i$i = 0;
       while(1) {
        $634 = $i$02$i$i << 1;
        $635 = (10260 + ($634<<2)|0);
        $$sum$i13$i = (($634) + 3)|0;
        $636 = (10260 + ($$sum$i13$i<<2)|0);
        HEAP32[$636>>2] = $635;
        $$sum1$i14$i = (($634) + 2)|0;
        $637 = (10260 + ($$sum1$i14$i<<2)|0);
        HEAP32[$637>>2] = $635;
        $638 = (($i$02$i$i) + 1)|0;
        $exitcond$i$i = ($638|0)==(32);
        if ($exitcond$i$i) {
         break;
        } else {
         $i$02$i$i = $638;
        }
       }
       $639 = (($tsize$254$i) + -40)|0;
       $640 = ((($tbase$255$i)) + 8|0);
       $641 = $640;
       $642 = $641 & 7;
       $643 = ($642|0)==(0);
       $644 = (0 - ($641))|0;
       $645 = $644 & 7;
       $646 = $643 ? 0 : $645;
       $647 = (($tbase$255$i) + ($646)|0);
       $648 = (($639) - ($646))|0;
       HEAP32[(10244)>>2] = $647;
       HEAP32[(10232)>>2] = $648;
       $649 = $648 | 1;
       $$sum$i15$i = (($646) + 4)|0;
       $650 = (($tbase$255$i) + ($$sum$i15$i)|0);
       HEAP32[$650>>2] = $649;
       $$sum2$i16$i = (($tsize$254$i) + -36)|0;
       $651 = (($tbase$255$i) + ($$sum2$i16$i)|0);
       HEAP32[$651>>2] = 40;
       $652 = HEAP32[(10708)>>2]|0;
       HEAP32[(10248)>>2] = $652;
      } else {
       $sp$084$i = (10668);
       while(1) {
        $653 = HEAP32[$sp$084$i>>2]|0;
        $654 = ((($sp$084$i)) + 4|0);
        $655 = HEAP32[$654>>2]|0;
        $656 = (($653) + ($655)|0);
        $657 = ($tbase$255$i|0)==($656|0);
        if ($657) {
         $$lcssa222 = $653;$$lcssa224 = $654;$$lcssa226 = $655;$sp$084$i$lcssa = $sp$084$i;
         label = 202;
         break;
        }
        $658 = ((($sp$084$i)) + 8|0);
        $659 = HEAP32[$658>>2]|0;
        $660 = ($659|0)==(0|0);
        if ($660) {
         break;
        } else {
         $sp$084$i = $659;
        }
       }
       if ((label|0) == 202) {
        $661 = ((($sp$084$i$lcssa)) + 12|0);
        $662 = HEAP32[$661>>2]|0;
        $663 = $662 & 8;
        $664 = ($663|0)==(0);
        if ($664) {
         $665 = ($628>>>0)>=($$lcssa222>>>0);
         $666 = ($628>>>0)<($tbase$255$i>>>0);
         $or$cond57$i = $666 & $665;
         if ($or$cond57$i) {
          $667 = (($$lcssa226) + ($tsize$254$i))|0;
          HEAP32[$$lcssa224>>2] = $667;
          $668 = HEAP32[(10232)>>2]|0;
          $669 = (($668) + ($tsize$254$i))|0;
          $670 = ((($628)) + 8|0);
          $671 = $670;
          $672 = $671 & 7;
          $673 = ($672|0)==(0);
          $674 = (0 - ($671))|0;
          $675 = $674 & 7;
          $676 = $673 ? 0 : $675;
          $677 = (($628) + ($676)|0);
          $678 = (($669) - ($676))|0;
          HEAP32[(10244)>>2] = $677;
          HEAP32[(10232)>>2] = $678;
          $679 = $678 | 1;
          $$sum$i17$i = (($676) + 4)|0;
          $680 = (($628) + ($$sum$i17$i)|0);
          HEAP32[$680>>2] = $679;
          $$sum2$i18$i = (($669) + 4)|0;
          $681 = (($628) + ($$sum2$i18$i)|0);
          HEAP32[$681>>2] = 40;
          $682 = HEAP32[(10708)>>2]|0;
          HEAP32[(10248)>>2] = $682;
          break;
         }
        }
       }
       $683 = HEAP32[(10236)>>2]|0;
       $684 = ($tbase$255$i>>>0)<($683>>>0);
       if ($684) {
        HEAP32[(10236)>>2] = $tbase$255$i;
        $748 = $tbase$255$i;
       } else {
        $748 = $683;
       }
       $685 = (($tbase$255$i) + ($tsize$254$i)|0);
       $sp$183$i = (10668);
       while(1) {
        $686 = HEAP32[$sp$183$i>>2]|0;
        $687 = ($686|0)==($685|0);
        if ($687) {
         $$lcssa219 = $sp$183$i;$sp$183$i$lcssa = $sp$183$i;
         label = 210;
         break;
        }
        $688 = ((($sp$183$i)) + 8|0);
        $689 = HEAP32[$688>>2]|0;
        $690 = ($689|0)==(0|0);
        if ($690) {
         $sp$0$i$i$i = (10668);
         break;
        } else {
         $sp$183$i = $689;
        }
       }
       if ((label|0) == 210) {
        $691 = ((($sp$183$i$lcssa)) + 12|0);
        $692 = HEAP32[$691>>2]|0;
        $693 = $692 & 8;
        $694 = ($693|0)==(0);
        if ($694) {
         HEAP32[$$lcssa219>>2] = $tbase$255$i;
         $695 = ((($sp$183$i$lcssa)) + 4|0);
         $696 = HEAP32[$695>>2]|0;
         $697 = (($696) + ($tsize$254$i))|0;
         HEAP32[$695>>2] = $697;
         $698 = ((($tbase$255$i)) + 8|0);
         $699 = $698;
         $700 = $699 & 7;
         $701 = ($700|0)==(0);
         $702 = (0 - ($699))|0;
         $703 = $702 & 7;
         $704 = $701 ? 0 : $703;
         $705 = (($tbase$255$i) + ($704)|0);
         $$sum112$i = (($tsize$254$i) + 8)|0;
         $706 = (($tbase$255$i) + ($$sum112$i)|0);
         $707 = $706;
         $708 = $707 & 7;
         $709 = ($708|0)==(0);
         $710 = (0 - ($707))|0;
         $711 = $710 & 7;
         $712 = $709 ? 0 : $711;
         $$sum113$i = (($712) + ($tsize$254$i))|0;
         $713 = (($tbase$255$i) + ($$sum113$i)|0);
         $714 = $713;
         $715 = $705;
         $716 = (($714) - ($715))|0;
         $$sum$i19$i = (($704) + ($nb$0))|0;
         $717 = (($tbase$255$i) + ($$sum$i19$i)|0);
         $718 = (($716) - ($nb$0))|0;
         $719 = $nb$0 | 3;
         $$sum1$i20$i = (($704) + 4)|0;
         $720 = (($tbase$255$i) + ($$sum1$i20$i)|0);
         HEAP32[$720>>2] = $719;
         $721 = ($713|0)==($628|0);
         L297: do {
          if ($721) {
           $722 = HEAP32[(10232)>>2]|0;
           $723 = (($722) + ($718))|0;
           HEAP32[(10232)>>2] = $723;
           HEAP32[(10244)>>2] = $717;
           $724 = $723 | 1;
           $$sum42$i$i = (($$sum$i19$i) + 4)|0;
           $725 = (($tbase$255$i) + ($$sum42$i$i)|0);
           HEAP32[$725>>2] = $724;
          } else {
           $726 = HEAP32[(10240)>>2]|0;
           $727 = ($713|0)==($726|0);
           if ($727) {
            $728 = HEAP32[(10228)>>2]|0;
            $729 = (($728) + ($718))|0;
            HEAP32[(10228)>>2] = $729;
            HEAP32[(10240)>>2] = $717;
            $730 = $729 | 1;
            $$sum40$i$i = (($$sum$i19$i) + 4)|0;
            $731 = (($tbase$255$i) + ($$sum40$i$i)|0);
            HEAP32[$731>>2] = $730;
            $$sum41$i$i = (($729) + ($$sum$i19$i))|0;
            $732 = (($tbase$255$i) + ($$sum41$i$i)|0);
            HEAP32[$732>>2] = $729;
            break;
           }
           $$sum2$i21$i = (($tsize$254$i) + 4)|0;
           $$sum114$i = (($$sum2$i21$i) + ($712))|0;
           $733 = (($tbase$255$i) + ($$sum114$i)|0);
           $734 = HEAP32[$733>>2]|0;
           $735 = $734 & 3;
           $736 = ($735|0)==(1);
           if ($736) {
            $737 = $734 & -8;
            $738 = $734 >>> 3;
            $739 = ($734>>>0)<(256);
            L305: do {
             if ($739) {
              $$sum3738$i$i = $712 | 8;
              $$sum124$i = (($$sum3738$i$i) + ($tsize$254$i))|0;
              $740 = (($tbase$255$i) + ($$sum124$i)|0);
              $741 = HEAP32[$740>>2]|0;
              $$sum39$i$i = (($tsize$254$i) + 12)|0;
              $$sum125$i = (($$sum39$i$i) + ($712))|0;
              $742 = (($tbase$255$i) + ($$sum125$i)|0);
              $743 = HEAP32[$742>>2]|0;
              $744 = $738 << 1;
              $745 = (10260 + ($744<<2)|0);
              $746 = ($741|0)==($745|0);
              do {
               if (!($746)) {
                $747 = ($741>>>0)<($748>>>0);
                if (!($747)) {
                 $749 = ((($741)) + 12|0);
                 $750 = HEAP32[$749>>2]|0;
                 $751 = ($750|0)==($713|0);
                 if ($751) {
                  break;
                 }
                }
                _abort();
                // unreachable;
               }
              } while(0);
              $752 = ($743|0)==($741|0);
              if ($752) {
               $753 = 1 << $738;
               $754 = $753 ^ -1;
               $755 = HEAP32[10220>>2]|0;
               $756 = $755 & $754;
               HEAP32[10220>>2] = $756;
               break;
              }
              $757 = ($743|0)==($745|0);
              do {
               if ($757) {
                $$pre57$i$i = ((($743)) + 8|0);
                $$pre$phi58$i$iZ2D = $$pre57$i$i;
               } else {
                $758 = ($743>>>0)<($748>>>0);
                if (!($758)) {
                 $759 = ((($743)) + 8|0);
                 $760 = HEAP32[$759>>2]|0;
                 $761 = ($760|0)==($713|0);
                 if ($761) {
                  $$pre$phi58$i$iZ2D = $759;
                  break;
                 }
                }
                _abort();
                // unreachable;
               }
              } while(0);
              $762 = ((($741)) + 12|0);
              HEAP32[$762>>2] = $743;
              HEAP32[$$pre$phi58$i$iZ2D>>2] = $741;
             } else {
              $$sum34$i$i = $712 | 24;
              $$sum115$i = (($$sum34$i$i) + ($tsize$254$i))|0;
              $763 = (($tbase$255$i) + ($$sum115$i)|0);
              $764 = HEAP32[$763>>2]|0;
              $$sum5$i$i = (($tsize$254$i) + 12)|0;
              $$sum116$i = (($$sum5$i$i) + ($712))|0;
              $765 = (($tbase$255$i) + ($$sum116$i)|0);
              $766 = HEAP32[$765>>2]|0;
              $767 = ($766|0)==($713|0);
              L324: do {
               if ($767) {
                $$sum67$i$i = $712 | 16;
                $$sum122$i = (($$sum2$i21$i) + ($$sum67$i$i))|0;
                $777 = (($tbase$255$i) + ($$sum122$i)|0);
                $778 = HEAP32[$777>>2]|0;
                $779 = ($778|0)==(0|0);
                if ($779) {
                 $$sum123$i = (($$sum67$i$i) + ($tsize$254$i))|0;
                 $780 = (($tbase$255$i) + ($$sum123$i)|0);
                 $781 = HEAP32[$780>>2]|0;
                 $782 = ($781|0)==(0|0);
                 if ($782) {
                  $R$1$i$i = 0;
                  break;
                 } else {
                  $R$0$i$i = $781;$RP$0$i$i = $780;
                 }
                } else {
                 $R$0$i$i = $778;$RP$0$i$i = $777;
                }
                while(1) {
                 $783 = ((($R$0$i$i)) + 20|0);
                 $784 = HEAP32[$783>>2]|0;
                 $785 = ($784|0)==(0|0);
                 if (!($785)) {
                  $R$0$i$i = $784;$RP$0$i$i = $783;
                  continue;
                 }
                 $786 = ((($R$0$i$i)) + 16|0);
                 $787 = HEAP32[$786>>2]|0;
                 $788 = ($787|0)==(0|0);
                 if ($788) {
                  $R$0$i$i$lcssa = $R$0$i$i;$RP$0$i$i$lcssa = $RP$0$i$i;
                  break;
                 } else {
                  $R$0$i$i = $787;$RP$0$i$i = $786;
                 }
                }
                $789 = ($RP$0$i$i$lcssa>>>0)<($748>>>0);
                if ($789) {
                 _abort();
                 // unreachable;
                } else {
                 HEAP32[$RP$0$i$i$lcssa>>2] = 0;
                 $R$1$i$i = $R$0$i$i$lcssa;
                 break;
                }
               } else {
                $$sum3536$i$i = $712 | 8;
                $$sum117$i = (($$sum3536$i$i) + ($tsize$254$i))|0;
                $768 = (($tbase$255$i) + ($$sum117$i)|0);
                $769 = HEAP32[$768>>2]|0;
                $770 = ($769>>>0)<($748>>>0);
                do {
                 if (!($770)) {
                  $771 = ((($769)) + 12|0);
                  $772 = HEAP32[$771>>2]|0;
                  $773 = ($772|0)==($713|0);
                  if (!($773)) {
                   break;
                  }
                  $774 = ((($766)) + 8|0);
                  $775 = HEAP32[$774>>2]|0;
                  $776 = ($775|0)==($713|0);
                  if (!($776)) {
                   break;
                  }
                  HEAP32[$771>>2] = $766;
                  HEAP32[$774>>2] = $769;
                  $R$1$i$i = $766;
                  break L324;
                 }
                } while(0);
                _abort();
                // unreachable;
               }
              } while(0);
              $790 = ($764|0)==(0|0);
              if ($790) {
               break;
              }
              $$sum30$i$i = (($tsize$254$i) + 28)|0;
              $$sum118$i = (($$sum30$i$i) + ($712))|0;
              $791 = (($tbase$255$i) + ($$sum118$i)|0);
              $792 = HEAP32[$791>>2]|0;
              $793 = (10524 + ($792<<2)|0);
              $794 = HEAP32[$793>>2]|0;
              $795 = ($713|0)==($794|0);
              do {
               if ($795) {
                HEAP32[$793>>2] = $R$1$i$i;
                $cond$i$i = ($R$1$i$i|0)==(0|0);
                if (!($cond$i$i)) {
                 break;
                }
                $796 = 1 << $792;
                $797 = $796 ^ -1;
                $798 = HEAP32[(10224)>>2]|0;
                $799 = $798 & $797;
                HEAP32[(10224)>>2] = $799;
                break L305;
               } else {
                $800 = HEAP32[(10236)>>2]|0;
                $801 = ($764>>>0)<($800>>>0);
                if ($801) {
                 _abort();
                 // unreachable;
                }
                $802 = ((($764)) + 16|0);
                $803 = HEAP32[$802>>2]|0;
                $804 = ($803|0)==($713|0);
                if ($804) {
                 HEAP32[$802>>2] = $R$1$i$i;
                } else {
                 $805 = ((($764)) + 20|0);
                 HEAP32[$805>>2] = $R$1$i$i;
                }
                $806 = ($R$1$i$i|0)==(0|0);
                if ($806) {
                 break L305;
                }
               }
              } while(0);
              $807 = HEAP32[(10236)>>2]|0;
              $808 = ($R$1$i$i>>>0)<($807>>>0);
              if ($808) {
               _abort();
               // unreachable;
              }
              $809 = ((($R$1$i$i)) + 24|0);
              HEAP32[$809>>2] = $764;
              $$sum3132$i$i = $712 | 16;
              $$sum119$i = (($$sum3132$i$i) + ($tsize$254$i))|0;
              $810 = (($tbase$255$i) + ($$sum119$i)|0);
              $811 = HEAP32[$810>>2]|0;
              $812 = ($811|0)==(0|0);
              do {
               if (!($812)) {
                $813 = ($811>>>0)<($807>>>0);
                if ($813) {
                 _abort();
                 // unreachable;
                } else {
                 $814 = ((($R$1$i$i)) + 16|0);
                 HEAP32[$814>>2] = $811;
                 $815 = ((($811)) + 24|0);
                 HEAP32[$815>>2] = $R$1$i$i;
                 break;
                }
               }
              } while(0);
              $$sum120$i = (($$sum2$i21$i) + ($$sum3132$i$i))|0;
              $816 = (($tbase$255$i) + ($$sum120$i)|0);
              $817 = HEAP32[$816>>2]|0;
              $818 = ($817|0)==(0|0);
              if ($818) {
               break;
              }
              $819 = HEAP32[(10236)>>2]|0;
              $820 = ($817>>>0)<($819>>>0);
              if ($820) {
               _abort();
               // unreachable;
              } else {
               $821 = ((($R$1$i$i)) + 20|0);
               HEAP32[$821>>2] = $817;
               $822 = ((($817)) + 24|0);
               HEAP32[$822>>2] = $R$1$i$i;
               break;
              }
             }
            } while(0);
            $$sum9$i$i = $737 | $712;
            $$sum121$i = (($$sum9$i$i) + ($tsize$254$i))|0;
            $823 = (($tbase$255$i) + ($$sum121$i)|0);
            $824 = (($737) + ($718))|0;
            $oldfirst$0$i$i = $823;$qsize$0$i$i = $824;
           } else {
            $oldfirst$0$i$i = $713;$qsize$0$i$i = $718;
           }
           $825 = ((($oldfirst$0$i$i)) + 4|0);
           $826 = HEAP32[$825>>2]|0;
           $827 = $826 & -2;
           HEAP32[$825>>2] = $827;
           $828 = $qsize$0$i$i | 1;
           $$sum10$i$i = (($$sum$i19$i) + 4)|0;
           $829 = (($tbase$255$i) + ($$sum10$i$i)|0);
           HEAP32[$829>>2] = $828;
           $$sum11$i$i = (($qsize$0$i$i) + ($$sum$i19$i))|0;
           $830 = (($tbase$255$i) + ($$sum11$i$i)|0);
           HEAP32[$830>>2] = $qsize$0$i$i;
           $831 = $qsize$0$i$i >>> 3;
           $832 = ($qsize$0$i$i>>>0)<(256);
           if ($832) {
            $833 = $831 << 1;
            $834 = (10260 + ($833<<2)|0);
            $835 = HEAP32[10220>>2]|0;
            $836 = 1 << $831;
            $837 = $835 & $836;
            $838 = ($837|0)==(0);
            do {
             if ($838) {
              $839 = $835 | $836;
              HEAP32[10220>>2] = $839;
              $$pre$i22$i = (($833) + 2)|0;
              $$pre56$i$i = (10260 + ($$pre$i22$i<<2)|0);
              $$pre$phi$i23$iZ2D = $$pre56$i$i;$F4$0$i$i = $834;
             } else {
              $$sum29$i$i = (($833) + 2)|0;
              $840 = (10260 + ($$sum29$i$i<<2)|0);
              $841 = HEAP32[$840>>2]|0;
              $842 = HEAP32[(10236)>>2]|0;
              $843 = ($841>>>0)<($842>>>0);
              if (!($843)) {
               $$pre$phi$i23$iZ2D = $840;$F4$0$i$i = $841;
               break;
              }
              _abort();
              // unreachable;
             }
            } while(0);
            HEAP32[$$pre$phi$i23$iZ2D>>2] = $717;
            $844 = ((($F4$0$i$i)) + 12|0);
            HEAP32[$844>>2] = $717;
            $$sum27$i$i = (($$sum$i19$i) + 8)|0;
            $845 = (($tbase$255$i) + ($$sum27$i$i)|0);
            HEAP32[$845>>2] = $F4$0$i$i;
            $$sum28$i$i = (($$sum$i19$i) + 12)|0;
            $846 = (($tbase$255$i) + ($$sum28$i$i)|0);
            HEAP32[$846>>2] = $834;
            break;
           }
           $847 = $qsize$0$i$i >>> 8;
           $848 = ($847|0)==(0);
           do {
            if ($848) {
             $I7$0$i$i = 0;
            } else {
             $849 = ($qsize$0$i$i>>>0)>(16777215);
             if ($849) {
              $I7$0$i$i = 31;
              break;
             }
             $850 = (($847) + 1048320)|0;
             $851 = $850 >>> 16;
             $852 = $851 & 8;
             $853 = $847 << $852;
             $854 = (($853) + 520192)|0;
             $855 = $854 >>> 16;
             $856 = $855 & 4;
             $857 = $856 | $852;
             $858 = $853 << $856;
             $859 = (($858) + 245760)|0;
             $860 = $859 >>> 16;
             $861 = $860 & 2;
             $862 = $857 | $861;
             $863 = (14 - ($862))|0;
             $864 = $858 << $861;
             $865 = $864 >>> 15;
             $866 = (($863) + ($865))|0;
             $867 = $866 << 1;
             $868 = (($866) + 7)|0;
             $869 = $qsize$0$i$i >>> $868;
             $870 = $869 & 1;
             $871 = $870 | $867;
             $I7$0$i$i = $871;
            }
           } while(0);
           $872 = (10524 + ($I7$0$i$i<<2)|0);
           $$sum12$i$i = (($$sum$i19$i) + 28)|0;
           $873 = (($tbase$255$i) + ($$sum12$i$i)|0);
           HEAP32[$873>>2] = $I7$0$i$i;
           $$sum13$i$i = (($$sum$i19$i) + 16)|0;
           $874 = (($tbase$255$i) + ($$sum13$i$i)|0);
           $$sum14$i$i = (($$sum$i19$i) + 20)|0;
           $875 = (($tbase$255$i) + ($$sum14$i$i)|0);
           HEAP32[$875>>2] = 0;
           HEAP32[$874>>2] = 0;
           $876 = HEAP32[(10224)>>2]|0;
           $877 = 1 << $I7$0$i$i;
           $878 = $876 & $877;
           $879 = ($878|0)==(0);
           if ($879) {
            $880 = $876 | $877;
            HEAP32[(10224)>>2] = $880;
            HEAP32[$872>>2] = $717;
            $$sum15$i$i = (($$sum$i19$i) + 24)|0;
            $881 = (($tbase$255$i) + ($$sum15$i$i)|0);
            HEAP32[$881>>2] = $872;
            $$sum16$i$i = (($$sum$i19$i) + 12)|0;
            $882 = (($tbase$255$i) + ($$sum16$i$i)|0);
            HEAP32[$882>>2] = $717;
            $$sum17$i$i = (($$sum$i19$i) + 8)|0;
            $883 = (($tbase$255$i) + ($$sum17$i$i)|0);
            HEAP32[$883>>2] = $717;
            break;
           }
           $884 = HEAP32[$872>>2]|0;
           $885 = ((($884)) + 4|0);
           $886 = HEAP32[$885>>2]|0;
           $887 = $886 & -8;
           $888 = ($887|0)==($qsize$0$i$i|0);
           L385: do {
            if ($888) {
             $T$0$lcssa$i25$i = $884;
            } else {
             $889 = ($I7$0$i$i|0)==(31);
             $890 = $I7$0$i$i >>> 1;
             $891 = (25 - ($890))|0;
             $892 = $889 ? 0 : $891;
             $893 = $qsize$0$i$i << $892;
             $K8$051$i$i = $893;$T$050$i$i = $884;
             while(1) {
              $900 = $K8$051$i$i >>> 31;
              $901 = (((($T$050$i$i)) + 16|0) + ($900<<2)|0);
              $896 = HEAP32[$901>>2]|0;
              $902 = ($896|0)==(0|0);
              if ($902) {
               $$lcssa = $901;$T$050$i$i$lcssa = $T$050$i$i;
               break;
              }
              $894 = $K8$051$i$i << 1;
              $895 = ((($896)) + 4|0);
              $897 = HEAP32[$895>>2]|0;
              $898 = $897 & -8;
              $899 = ($898|0)==($qsize$0$i$i|0);
              if ($899) {
               $T$0$lcssa$i25$i = $896;
               break L385;
              } else {
               $K8$051$i$i = $894;$T$050$i$i = $896;
              }
             }
             $903 = HEAP32[(10236)>>2]|0;
             $904 = ($$lcssa>>>0)<($903>>>0);
             if ($904) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$$lcssa>>2] = $717;
              $$sum23$i$i = (($$sum$i19$i) + 24)|0;
              $905 = (($tbase$255$i) + ($$sum23$i$i)|0);
              HEAP32[$905>>2] = $T$050$i$i$lcssa;
              $$sum24$i$i = (($$sum$i19$i) + 12)|0;
              $906 = (($tbase$255$i) + ($$sum24$i$i)|0);
              HEAP32[$906>>2] = $717;
              $$sum25$i$i = (($$sum$i19$i) + 8)|0;
              $907 = (($tbase$255$i) + ($$sum25$i$i)|0);
              HEAP32[$907>>2] = $717;
              break L297;
             }
            }
           } while(0);
           $908 = ((($T$0$lcssa$i25$i)) + 8|0);
           $909 = HEAP32[$908>>2]|0;
           $910 = HEAP32[(10236)>>2]|0;
           $911 = ($909>>>0)>=($910>>>0);
           $not$$i26$i = ($T$0$lcssa$i25$i>>>0)>=($910>>>0);
           $912 = $911 & $not$$i26$i;
           if ($912) {
            $913 = ((($909)) + 12|0);
            HEAP32[$913>>2] = $717;
            HEAP32[$908>>2] = $717;
            $$sum20$i$i = (($$sum$i19$i) + 8)|0;
            $914 = (($tbase$255$i) + ($$sum20$i$i)|0);
            HEAP32[$914>>2] = $909;
            $$sum21$i$i = (($$sum$i19$i) + 12)|0;
            $915 = (($tbase$255$i) + ($$sum21$i$i)|0);
            HEAP32[$915>>2] = $T$0$lcssa$i25$i;
            $$sum22$i$i = (($$sum$i19$i) + 24)|0;
            $916 = (($tbase$255$i) + ($$sum22$i$i)|0);
            HEAP32[$916>>2] = 0;
            break;
           } else {
            _abort();
            // unreachable;
           }
          }
         } while(0);
         $$sum1819$i$i = $704 | 8;
         $917 = (($tbase$255$i) + ($$sum1819$i$i)|0);
         $mem$0 = $917;
         break L212;
        } else {
         $sp$0$i$i$i = (10668);
        }
       }
       while(1) {
        $918 = HEAP32[$sp$0$i$i$i>>2]|0;
        $919 = ($918>>>0)>($628>>>0);
        if (!($919)) {
         $920 = ((($sp$0$i$i$i)) + 4|0);
         $921 = HEAP32[$920>>2]|0;
         $922 = (($918) + ($921)|0);
         $923 = ($922>>>0)>($628>>>0);
         if ($923) {
          $$lcssa215 = $918;$$lcssa216 = $921;$$lcssa217 = $922;
          break;
         }
        }
        $924 = ((($sp$0$i$i$i)) + 8|0);
        $925 = HEAP32[$924>>2]|0;
        $sp$0$i$i$i = $925;
       }
       $$sum$i$i = (($$lcssa216) + -47)|0;
       $$sum1$i$i = (($$lcssa216) + -39)|0;
       $926 = (($$lcssa215) + ($$sum1$i$i)|0);
       $927 = $926;
       $928 = $927 & 7;
       $929 = ($928|0)==(0);
       $930 = (0 - ($927))|0;
       $931 = $930 & 7;
       $932 = $929 ? 0 : $931;
       $$sum2$i$i = (($$sum$i$i) + ($932))|0;
       $933 = (($$lcssa215) + ($$sum2$i$i)|0);
       $934 = ((($628)) + 16|0);
       $935 = ($933>>>0)<($934>>>0);
       $936 = $935 ? $628 : $933;
       $937 = ((($936)) + 8|0);
       $938 = (($tsize$254$i) + -40)|0;
       $939 = ((($tbase$255$i)) + 8|0);
       $940 = $939;
       $941 = $940 & 7;
       $942 = ($941|0)==(0);
       $943 = (0 - ($940))|0;
       $944 = $943 & 7;
       $945 = $942 ? 0 : $944;
       $946 = (($tbase$255$i) + ($945)|0);
       $947 = (($938) - ($945))|0;
       HEAP32[(10244)>>2] = $946;
       HEAP32[(10232)>>2] = $947;
       $948 = $947 | 1;
       $$sum$i$i$i = (($945) + 4)|0;
       $949 = (($tbase$255$i) + ($$sum$i$i$i)|0);
       HEAP32[$949>>2] = $948;
       $$sum2$i$i$i = (($tsize$254$i) + -36)|0;
       $950 = (($tbase$255$i) + ($$sum2$i$i$i)|0);
       HEAP32[$950>>2] = 40;
       $951 = HEAP32[(10708)>>2]|0;
       HEAP32[(10248)>>2] = $951;
       $952 = ((($936)) + 4|0);
       HEAP32[$952>>2] = 27;
       ;HEAP32[$937>>2]=HEAP32[(10668)>>2]|0;HEAP32[$937+4>>2]=HEAP32[(10668)+4>>2]|0;HEAP32[$937+8>>2]=HEAP32[(10668)+8>>2]|0;HEAP32[$937+12>>2]=HEAP32[(10668)+12>>2]|0;
       HEAP32[(10668)>>2] = $tbase$255$i;
       HEAP32[(10672)>>2] = $tsize$254$i;
       HEAP32[(10680)>>2] = 0;
       HEAP32[(10676)>>2] = $937;
       $953 = ((($936)) + 28|0);
       HEAP32[$953>>2] = 7;
       $954 = ((($936)) + 32|0);
       $955 = ($954>>>0)<($$lcssa217>>>0);
       if ($955) {
        $957 = $953;
        while(1) {
         $956 = ((($957)) + 4|0);
         HEAP32[$956>>2] = 7;
         $958 = ((($957)) + 8|0);
         $959 = ($958>>>0)<($$lcssa217>>>0);
         if ($959) {
          $957 = $956;
         } else {
          break;
         }
        }
       }
       $960 = ($936|0)==($628|0);
       if (!($960)) {
        $961 = $936;
        $962 = $628;
        $963 = (($961) - ($962))|0;
        $964 = HEAP32[$952>>2]|0;
        $965 = $964 & -2;
        HEAP32[$952>>2] = $965;
        $966 = $963 | 1;
        $967 = ((($628)) + 4|0);
        HEAP32[$967>>2] = $966;
        HEAP32[$936>>2] = $963;
        $968 = $963 >>> 3;
        $969 = ($963>>>0)<(256);
        if ($969) {
         $970 = $968 << 1;
         $971 = (10260 + ($970<<2)|0);
         $972 = HEAP32[10220>>2]|0;
         $973 = 1 << $968;
         $974 = $972 & $973;
         $975 = ($974|0)==(0);
         if ($975) {
          $976 = $972 | $973;
          HEAP32[10220>>2] = $976;
          $$pre$i$i = (($970) + 2)|0;
          $$pre14$i$i = (10260 + ($$pre$i$i<<2)|0);
          $$pre$phi$i$iZ2D = $$pre14$i$i;$F$0$i$i = $971;
         } else {
          $$sum4$i$i = (($970) + 2)|0;
          $977 = (10260 + ($$sum4$i$i<<2)|0);
          $978 = HEAP32[$977>>2]|0;
          $979 = HEAP32[(10236)>>2]|0;
          $980 = ($978>>>0)<($979>>>0);
          if ($980) {
           _abort();
           // unreachable;
          } else {
           $$pre$phi$i$iZ2D = $977;$F$0$i$i = $978;
          }
         }
         HEAP32[$$pre$phi$i$iZ2D>>2] = $628;
         $981 = ((($F$0$i$i)) + 12|0);
         HEAP32[$981>>2] = $628;
         $982 = ((($628)) + 8|0);
         HEAP32[$982>>2] = $F$0$i$i;
         $983 = ((($628)) + 12|0);
         HEAP32[$983>>2] = $971;
         break;
        }
        $984 = $963 >>> 8;
        $985 = ($984|0)==(0);
        if ($985) {
         $I1$0$i$i = 0;
        } else {
         $986 = ($963>>>0)>(16777215);
         if ($986) {
          $I1$0$i$i = 31;
         } else {
          $987 = (($984) + 1048320)|0;
          $988 = $987 >>> 16;
          $989 = $988 & 8;
          $990 = $984 << $989;
          $991 = (($990) + 520192)|0;
          $992 = $991 >>> 16;
          $993 = $992 & 4;
          $994 = $993 | $989;
          $995 = $990 << $993;
          $996 = (($995) + 245760)|0;
          $997 = $996 >>> 16;
          $998 = $997 & 2;
          $999 = $994 | $998;
          $1000 = (14 - ($999))|0;
          $1001 = $995 << $998;
          $1002 = $1001 >>> 15;
          $1003 = (($1000) + ($1002))|0;
          $1004 = $1003 << 1;
          $1005 = (($1003) + 7)|0;
          $1006 = $963 >>> $1005;
          $1007 = $1006 & 1;
          $1008 = $1007 | $1004;
          $I1$0$i$i = $1008;
         }
        }
        $1009 = (10524 + ($I1$0$i$i<<2)|0);
        $1010 = ((($628)) + 28|0);
        HEAP32[$1010>>2] = $I1$0$i$i;
        $1011 = ((($628)) + 20|0);
        HEAP32[$1011>>2] = 0;
        HEAP32[$934>>2] = 0;
        $1012 = HEAP32[(10224)>>2]|0;
        $1013 = 1 << $I1$0$i$i;
        $1014 = $1012 & $1013;
        $1015 = ($1014|0)==(0);
        if ($1015) {
         $1016 = $1012 | $1013;
         HEAP32[(10224)>>2] = $1016;
         HEAP32[$1009>>2] = $628;
         $1017 = ((($628)) + 24|0);
         HEAP32[$1017>>2] = $1009;
         $1018 = ((($628)) + 12|0);
         HEAP32[$1018>>2] = $628;
         $1019 = ((($628)) + 8|0);
         HEAP32[$1019>>2] = $628;
         break;
        }
        $1020 = HEAP32[$1009>>2]|0;
        $1021 = ((($1020)) + 4|0);
        $1022 = HEAP32[$1021>>2]|0;
        $1023 = $1022 & -8;
        $1024 = ($1023|0)==($963|0);
        L425: do {
         if ($1024) {
          $T$0$lcssa$i$i = $1020;
         } else {
          $1025 = ($I1$0$i$i|0)==(31);
          $1026 = $I1$0$i$i >>> 1;
          $1027 = (25 - ($1026))|0;
          $1028 = $1025 ? 0 : $1027;
          $1029 = $963 << $1028;
          $K2$07$i$i = $1029;$T$06$i$i = $1020;
          while(1) {
           $1036 = $K2$07$i$i >>> 31;
           $1037 = (((($T$06$i$i)) + 16|0) + ($1036<<2)|0);
           $1032 = HEAP32[$1037>>2]|0;
           $1038 = ($1032|0)==(0|0);
           if ($1038) {
            $$lcssa211 = $1037;$T$06$i$i$lcssa = $T$06$i$i;
            break;
           }
           $1030 = $K2$07$i$i << 1;
           $1031 = ((($1032)) + 4|0);
           $1033 = HEAP32[$1031>>2]|0;
           $1034 = $1033 & -8;
           $1035 = ($1034|0)==($963|0);
           if ($1035) {
            $T$0$lcssa$i$i = $1032;
            break L425;
           } else {
            $K2$07$i$i = $1030;$T$06$i$i = $1032;
           }
          }
          $1039 = HEAP32[(10236)>>2]|0;
          $1040 = ($$lcssa211>>>0)<($1039>>>0);
          if ($1040) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$$lcssa211>>2] = $628;
           $1041 = ((($628)) + 24|0);
           HEAP32[$1041>>2] = $T$06$i$i$lcssa;
           $1042 = ((($628)) + 12|0);
           HEAP32[$1042>>2] = $628;
           $1043 = ((($628)) + 8|0);
           HEAP32[$1043>>2] = $628;
           break L272;
          }
         }
        } while(0);
        $1044 = ((($T$0$lcssa$i$i)) + 8|0);
        $1045 = HEAP32[$1044>>2]|0;
        $1046 = HEAP32[(10236)>>2]|0;
        $1047 = ($1045>>>0)>=($1046>>>0);
        $not$$i$i = ($T$0$lcssa$i$i>>>0)>=($1046>>>0);
        $1048 = $1047 & $not$$i$i;
        if ($1048) {
         $1049 = ((($1045)) + 12|0);
         HEAP32[$1049>>2] = $628;
         HEAP32[$1044>>2] = $628;
         $1050 = ((($628)) + 8|0);
         HEAP32[$1050>>2] = $1045;
         $1051 = ((($628)) + 12|0);
         HEAP32[$1051>>2] = $T$0$lcssa$i$i;
         $1052 = ((($628)) + 24|0);
         HEAP32[$1052>>2] = 0;
         break;
        } else {
         _abort();
         // unreachable;
        }
       }
      }
     } while(0);
     $1053 = HEAP32[(10232)>>2]|0;
     $1054 = ($1053>>>0)>($nb$0>>>0);
     if ($1054) {
      $1055 = (($1053) - ($nb$0))|0;
      HEAP32[(10232)>>2] = $1055;
      $1056 = HEAP32[(10244)>>2]|0;
      $1057 = (($1056) + ($nb$0)|0);
      HEAP32[(10244)>>2] = $1057;
      $1058 = $1055 | 1;
      $$sum$i32 = (($nb$0) + 4)|0;
      $1059 = (($1056) + ($$sum$i32)|0);
      HEAP32[$1059>>2] = $1058;
      $1060 = $nb$0 | 3;
      $1061 = ((($1056)) + 4|0);
      HEAP32[$1061>>2] = $1060;
      $1062 = ((($1056)) + 8|0);
      $mem$0 = $1062;
      break;
     }
    }
    $1063 = (___errno_location()|0);
    HEAP32[$1063>>2] = 12;
    $mem$0 = 0;
   } else {
    $mem$0 = 0;
   }
  }
 } while(0);
 return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$lcssa = 0, $$pre = 0, $$pre$phi59Z2D = 0, $$pre$phi61Z2D = 0, $$pre$phiZ2D = 0, $$pre57 = 0, $$pre58 = 0, $$pre60 = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum1718 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0;
 var $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $K19$052 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0;
 var $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$051 = 0, $T$051$lcssa = 0, $cond = 0, $cond47 = 0, $not$ = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 L1: do {
  if (!($0)) {
   $1 = ((($mem)) + -8|0);
   $2 = HEAP32[(10236)>>2]|0;
   $3 = ($1>>>0)<($2>>>0);
   L3: do {
    if (!($3)) {
     $4 = ((($mem)) + -4|0);
     $5 = HEAP32[$4>>2]|0;
     $6 = $5 & 3;
     $7 = ($6|0)==(1);
     if (!($7)) {
      $8 = $5 & -8;
      $$sum = (($8) + -8)|0;
      $9 = (($mem) + ($$sum)|0);
      $10 = $5 & 1;
      $11 = ($10|0)==(0);
      do {
       if ($11) {
        $12 = HEAP32[$1>>2]|0;
        $13 = ($6|0)==(0);
        if ($13) {
         break L1;
        }
        $$sum2 = (-8 - ($12))|0;
        $14 = (($mem) + ($$sum2)|0);
        $15 = (($12) + ($8))|0;
        $16 = ($14>>>0)<($2>>>0);
        if ($16) {
         break L3;
        }
        $17 = HEAP32[(10240)>>2]|0;
        $18 = ($14|0)==($17|0);
        if ($18) {
         $$sum3 = (($8) + -4)|0;
         $103 = (($mem) + ($$sum3)|0);
         $104 = HEAP32[$103>>2]|0;
         $105 = $104 & 3;
         $106 = ($105|0)==(3);
         if (!($106)) {
          $p$0 = $14;$psize$0 = $15;
          break;
         }
         HEAP32[(10228)>>2] = $15;
         $107 = $104 & -2;
         HEAP32[$103>>2] = $107;
         $108 = $15 | 1;
         $$sum20 = (($$sum2) + 4)|0;
         $109 = (($mem) + ($$sum20)|0);
         HEAP32[$109>>2] = $108;
         HEAP32[$9>>2] = $15;
         break L1;
        }
        $19 = $12 >>> 3;
        $20 = ($12>>>0)<(256);
        if ($20) {
         $$sum30 = (($$sum2) + 8)|0;
         $21 = (($mem) + ($$sum30)|0);
         $22 = HEAP32[$21>>2]|0;
         $$sum31 = (($$sum2) + 12)|0;
         $23 = (($mem) + ($$sum31)|0);
         $24 = HEAP32[$23>>2]|0;
         $25 = $19 << 1;
         $26 = (10260 + ($25<<2)|0);
         $27 = ($22|0)==($26|0);
         do {
          if (!($27)) {
           $28 = ($22>>>0)<($2>>>0);
           if (!($28)) {
            $29 = ((($22)) + 12|0);
            $30 = HEAP32[$29>>2]|0;
            $31 = ($30|0)==($14|0);
            if ($31) {
             break;
            }
           }
           _abort();
           // unreachable;
          }
         } while(0);
         $32 = ($24|0)==($22|0);
         if ($32) {
          $33 = 1 << $19;
          $34 = $33 ^ -1;
          $35 = HEAP32[10220>>2]|0;
          $36 = $35 & $34;
          HEAP32[10220>>2] = $36;
          $p$0 = $14;$psize$0 = $15;
          break;
         }
         $37 = ($24|0)==($26|0);
         do {
          if ($37) {
           $$pre60 = ((($24)) + 8|0);
           $$pre$phi61Z2D = $$pre60;
          } else {
           $38 = ($24>>>0)<($2>>>0);
           if (!($38)) {
            $39 = ((($24)) + 8|0);
            $40 = HEAP32[$39>>2]|0;
            $41 = ($40|0)==($14|0);
            if ($41) {
             $$pre$phi61Z2D = $39;
             break;
            }
           }
           _abort();
           // unreachable;
          }
         } while(0);
         $42 = ((($22)) + 12|0);
         HEAP32[$42>>2] = $24;
         HEAP32[$$pre$phi61Z2D>>2] = $22;
         $p$0 = $14;$psize$0 = $15;
         break;
        }
        $$sum22 = (($$sum2) + 24)|0;
        $43 = (($mem) + ($$sum22)|0);
        $44 = HEAP32[$43>>2]|0;
        $$sum23 = (($$sum2) + 12)|0;
        $45 = (($mem) + ($$sum23)|0);
        $46 = HEAP32[$45>>2]|0;
        $47 = ($46|0)==($14|0);
        do {
         if ($47) {
          $$sum25 = (($$sum2) + 20)|0;
          $57 = (($mem) + ($$sum25)|0);
          $58 = HEAP32[$57>>2]|0;
          $59 = ($58|0)==(0|0);
          if ($59) {
           $$sum24 = (($$sum2) + 16)|0;
           $60 = (($mem) + ($$sum24)|0);
           $61 = HEAP32[$60>>2]|0;
           $62 = ($61|0)==(0|0);
           if ($62) {
            $R$1 = 0;
            break;
           } else {
            $R$0 = $61;$RP$0 = $60;
           }
          } else {
           $R$0 = $58;$RP$0 = $57;
          }
          while(1) {
           $63 = ((($R$0)) + 20|0);
           $64 = HEAP32[$63>>2]|0;
           $65 = ($64|0)==(0|0);
           if (!($65)) {
            $R$0 = $64;$RP$0 = $63;
            continue;
           }
           $66 = ((($R$0)) + 16|0);
           $67 = HEAP32[$66>>2]|0;
           $68 = ($67|0)==(0|0);
           if ($68) {
            $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
            break;
           } else {
            $R$0 = $67;$RP$0 = $66;
           }
          }
          $69 = ($RP$0$lcssa>>>0)<($2>>>0);
          if ($69) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$RP$0$lcssa>>2] = 0;
           $R$1 = $R$0$lcssa;
           break;
          }
         } else {
          $$sum29 = (($$sum2) + 8)|0;
          $48 = (($mem) + ($$sum29)|0);
          $49 = HEAP32[$48>>2]|0;
          $50 = ($49>>>0)<($2>>>0);
          if (!($50)) {
           $51 = ((($49)) + 12|0);
           $52 = HEAP32[$51>>2]|0;
           $53 = ($52|0)==($14|0);
           if ($53) {
            $54 = ((($46)) + 8|0);
            $55 = HEAP32[$54>>2]|0;
            $56 = ($55|0)==($14|0);
            if ($56) {
             HEAP32[$51>>2] = $46;
             HEAP32[$54>>2] = $49;
             $R$1 = $46;
             break;
            }
           }
          }
          _abort();
          // unreachable;
         }
        } while(0);
        $70 = ($44|0)==(0|0);
        if ($70) {
         $p$0 = $14;$psize$0 = $15;
        } else {
         $$sum26 = (($$sum2) + 28)|0;
         $71 = (($mem) + ($$sum26)|0);
         $72 = HEAP32[$71>>2]|0;
         $73 = (10524 + ($72<<2)|0);
         $74 = HEAP32[$73>>2]|0;
         $75 = ($14|0)==($74|0);
         if ($75) {
          HEAP32[$73>>2] = $R$1;
          $cond = ($R$1|0)==(0|0);
          if ($cond) {
           $76 = 1 << $72;
           $77 = $76 ^ -1;
           $78 = HEAP32[(10224)>>2]|0;
           $79 = $78 & $77;
           HEAP32[(10224)>>2] = $79;
           $p$0 = $14;$psize$0 = $15;
           break;
          }
         } else {
          $80 = HEAP32[(10236)>>2]|0;
          $81 = ($44>>>0)<($80>>>0);
          if ($81) {
           _abort();
           // unreachable;
          }
          $82 = ((($44)) + 16|0);
          $83 = HEAP32[$82>>2]|0;
          $84 = ($83|0)==($14|0);
          if ($84) {
           HEAP32[$82>>2] = $R$1;
          } else {
           $85 = ((($44)) + 20|0);
           HEAP32[$85>>2] = $R$1;
          }
          $86 = ($R$1|0)==(0|0);
          if ($86) {
           $p$0 = $14;$psize$0 = $15;
           break;
          }
         }
         $87 = HEAP32[(10236)>>2]|0;
         $88 = ($R$1>>>0)<($87>>>0);
         if ($88) {
          _abort();
          // unreachable;
         }
         $89 = ((($R$1)) + 24|0);
         HEAP32[$89>>2] = $44;
         $$sum27 = (($$sum2) + 16)|0;
         $90 = (($mem) + ($$sum27)|0);
         $91 = HEAP32[$90>>2]|0;
         $92 = ($91|0)==(0|0);
         do {
          if (!($92)) {
           $93 = ($91>>>0)<($87>>>0);
           if ($93) {
            _abort();
            // unreachable;
           } else {
            $94 = ((($R$1)) + 16|0);
            HEAP32[$94>>2] = $91;
            $95 = ((($91)) + 24|0);
            HEAP32[$95>>2] = $R$1;
            break;
           }
          }
         } while(0);
         $$sum28 = (($$sum2) + 20)|0;
         $96 = (($mem) + ($$sum28)|0);
         $97 = HEAP32[$96>>2]|0;
         $98 = ($97|0)==(0|0);
         if ($98) {
          $p$0 = $14;$psize$0 = $15;
         } else {
          $99 = HEAP32[(10236)>>2]|0;
          $100 = ($97>>>0)<($99>>>0);
          if ($100) {
           _abort();
           // unreachable;
          } else {
           $101 = ((($R$1)) + 20|0);
           HEAP32[$101>>2] = $97;
           $102 = ((($97)) + 24|0);
           HEAP32[$102>>2] = $R$1;
           $p$0 = $14;$psize$0 = $15;
           break;
          }
         }
        }
       } else {
        $p$0 = $1;$psize$0 = $8;
       }
      } while(0);
      $110 = ($p$0>>>0)<($9>>>0);
      if ($110) {
       $$sum19 = (($8) + -4)|0;
       $111 = (($mem) + ($$sum19)|0);
       $112 = HEAP32[$111>>2]|0;
       $113 = $112 & 1;
       $114 = ($113|0)==(0);
       if (!($114)) {
        $115 = $112 & 2;
        $116 = ($115|0)==(0);
        if ($116) {
         $117 = HEAP32[(10244)>>2]|0;
         $118 = ($9|0)==($117|0);
         if ($118) {
          $119 = HEAP32[(10232)>>2]|0;
          $120 = (($119) + ($psize$0))|0;
          HEAP32[(10232)>>2] = $120;
          HEAP32[(10244)>>2] = $p$0;
          $121 = $120 | 1;
          $122 = ((($p$0)) + 4|0);
          HEAP32[$122>>2] = $121;
          $123 = HEAP32[(10240)>>2]|0;
          $124 = ($p$0|0)==($123|0);
          if (!($124)) {
           break L1;
          }
          HEAP32[(10240)>>2] = 0;
          HEAP32[(10228)>>2] = 0;
          break L1;
         }
         $125 = HEAP32[(10240)>>2]|0;
         $126 = ($9|0)==($125|0);
         if ($126) {
          $127 = HEAP32[(10228)>>2]|0;
          $128 = (($127) + ($psize$0))|0;
          HEAP32[(10228)>>2] = $128;
          HEAP32[(10240)>>2] = $p$0;
          $129 = $128 | 1;
          $130 = ((($p$0)) + 4|0);
          HEAP32[$130>>2] = $129;
          $131 = (($p$0) + ($128)|0);
          HEAP32[$131>>2] = $128;
          break L1;
         }
         $132 = $112 & -8;
         $133 = (($132) + ($psize$0))|0;
         $134 = $112 >>> 3;
         $135 = ($112>>>0)<(256);
         do {
          if ($135) {
           $136 = (($mem) + ($8)|0);
           $137 = HEAP32[$136>>2]|0;
           $$sum1718 = $8 | 4;
           $138 = (($mem) + ($$sum1718)|0);
           $139 = HEAP32[$138>>2]|0;
           $140 = $134 << 1;
           $141 = (10260 + ($140<<2)|0);
           $142 = ($137|0)==($141|0);
           do {
            if (!($142)) {
             $143 = HEAP32[(10236)>>2]|0;
             $144 = ($137>>>0)<($143>>>0);
             if (!($144)) {
              $145 = ((($137)) + 12|0);
              $146 = HEAP32[$145>>2]|0;
              $147 = ($146|0)==($9|0);
              if ($147) {
               break;
              }
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $148 = ($139|0)==($137|0);
           if ($148) {
            $149 = 1 << $134;
            $150 = $149 ^ -1;
            $151 = HEAP32[10220>>2]|0;
            $152 = $151 & $150;
            HEAP32[10220>>2] = $152;
            break;
           }
           $153 = ($139|0)==($141|0);
           do {
            if ($153) {
             $$pre58 = ((($139)) + 8|0);
             $$pre$phi59Z2D = $$pre58;
            } else {
             $154 = HEAP32[(10236)>>2]|0;
             $155 = ($139>>>0)<($154>>>0);
             if (!($155)) {
              $156 = ((($139)) + 8|0);
              $157 = HEAP32[$156>>2]|0;
              $158 = ($157|0)==($9|0);
              if ($158) {
               $$pre$phi59Z2D = $156;
               break;
              }
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $159 = ((($137)) + 12|0);
           HEAP32[$159>>2] = $139;
           HEAP32[$$pre$phi59Z2D>>2] = $137;
          } else {
           $$sum5 = (($8) + 16)|0;
           $160 = (($mem) + ($$sum5)|0);
           $161 = HEAP32[$160>>2]|0;
           $$sum67 = $8 | 4;
           $162 = (($mem) + ($$sum67)|0);
           $163 = HEAP32[$162>>2]|0;
           $164 = ($163|0)==($9|0);
           do {
            if ($164) {
             $$sum9 = (($8) + 12)|0;
             $175 = (($mem) + ($$sum9)|0);
             $176 = HEAP32[$175>>2]|0;
             $177 = ($176|0)==(0|0);
             if ($177) {
              $$sum8 = (($8) + 8)|0;
              $178 = (($mem) + ($$sum8)|0);
              $179 = HEAP32[$178>>2]|0;
              $180 = ($179|0)==(0|0);
              if ($180) {
               $R7$1 = 0;
               break;
              } else {
               $R7$0 = $179;$RP9$0 = $178;
              }
             } else {
              $R7$0 = $176;$RP9$0 = $175;
             }
             while(1) {
              $181 = ((($R7$0)) + 20|0);
              $182 = HEAP32[$181>>2]|0;
              $183 = ($182|0)==(0|0);
              if (!($183)) {
               $R7$0 = $182;$RP9$0 = $181;
               continue;
              }
              $184 = ((($R7$0)) + 16|0);
              $185 = HEAP32[$184>>2]|0;
              $186 = ($185|0)==(0|0);
              if ($186) {
               $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
               break;
              } else {
               $R7$0 = $185;$RP9$0 = $184;
              }
             }
             $187 = HEAP32[(10236)>>2]|0;
             $188 = ($RP9$0$lcssa>>>0)<($187>>>0);
             if ($188) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP9$0$lcssa>>2] = 0;
              $R7$1 = $R7$0$lcssa;
              break;
             }
            } else {
             $165 = (($mem) + ($8)|0);
             $166 = HEAP32[$165>>2]|0;
             $167 = HEAP32[(10236)>>2]|0;
             $168 = ($166>>>0)<($167>>>0);
             if (!($168)) {
              $169 = ((($166)) + 12|0);
              $170 = HEAP32[$169>>2]|0;
              $171 = ($170|0)==($9|0);
              if ($171) {
               $172 = ((($163)) + 8|0);
               $173 = HEAP32[$172>>2]|0;
               $174 = ($173|0)==($9|0);
               if ($174) {
                HEAP32[$169>>2] = $163;
                HEAP32[$172>>2] = $166;
                $R7$1 = $163;
                break;
               }
              }
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $189 = ($161|0)==(0|0);
           if (!($189)) {
            $$sum12 = (($8) + 20)|0;
            $190 = (($mem) + ($$sum12)|0);
            $191 = HEAP32[$190>>2]|0;
            $192 = (10524 + ($191<<2)|0);
            $193 = HEAP32[$192>>2]|0;
            $194 = ($9|0)==($193|0);
            if ($194) {
             HEAP32[$192>>2] = $R7$1;
             $cond47 = ($R7$1|0)==(0|0);
             if ($cond47) {
              $195 = 1 << $191;
              $196 = $195 ^ -1;
              $197 = HEAP32[(10224)>>2]|0;
              $198 = $197 & $196;
              HEAP32[(10224)>>2] = $198;
              break;
             }
            } else {
             $199 = HEAP32[(10236)>>2]|0;
             $200 = ($161>>>0)<($199>>>0);
             if ($200) {
              _abort();
              // unreachable;
             }
             $201 = ((($161)) + 16|0);
             $202 = HEAP32[$201>>2]|0;
             $203 = ($202|0)==($9|0);
             if ($203) {
              HEAP32[$201>>2] = $R7$1;
             } else {
              $204 = ((($161)) + 20|0);
              HEAP32[$204>>2] = $R7$1;
             }
             $205 = ($R7$1|0)==(0|0);
             if ($205) {
              break;
             }
            }
            $206 = HEAP32[(10236)>>2]|0;
            $207 = ($R7$1>>>0)<($206>>>0);
            if ($207) {
             _abort();
             // unreachable;
            }
            $208 = ((($R7$1)) + 24|0);
            HEAP32[$208>>2] = $161;
            $$sum13 = (($8) + 8)|0;
            $209 = (($mem) + ($$sum13)|0);
            $210 = HEAP32[$209>>2]|0;
            $211 = ($210|0)==(0|0);
            do {
             if (!($211)) {
              $212 = ($210>>>0)<($206>>>0);
              if ($212) {
               _abort();
               // unreachable;
              } else {
               $213 = ((($R7$1)) + 16|0);
               HEAP32[$213>>2] = $210;
               $214 = ((($210)) + 24|0);
               HEAP32[$214>>2] = $R7$1;
               break;
              }
             }
            } while(0);
            $$sum14 = (($8) + 12)|0;
            $215 = (($mem) + ($$sum14)|0);
            $216 = HEAP32[$215>>2]|0;
            $217 = ($216|0)==(0|0);
            if (!($217)) {
             $218 = HEAP32[(10236)>>2]|0;
             $219 = ($216>>>0)<($218>>>0);
             if ($219) {
              _abort();
              // unreachable;
             } else {
              $220 = ((($R7$1)) + 20|0);
              HEAP32[$220>>2] = $216;
              $221 = ((($216)) + 24|0);
              HEAP32[$221>>2] = $R7$1;
              break;
             }
            }
           }
          }
         } while(0);
         $222 = $133 | 1;
         $223 = ((($p$0)) + 4|0);
         HEAP32[$223>>2] = $222;
         $224 = (($p$0) + ($133)|0);
         HEAP32[$224>>2] = $133;
         $225 = HEAP32[(10240)>>2]|0;
         $226 = ($p$0|0)==($225|0);
         if ($226) {
          HEAP32[(10228)>>2] = $133;
          break L1;
         } else {
          $psize$1 = $133;
         }
        } else {
         $227 = $112 & -2;
         HEAP32[$111>>2] = $227;
         $228 = $psize$0 | 1;
         $229 = ((($p$0)) + 4|0);
         HEAP32[$229>>2] = $228;
         $230 = (($p$0) + ($psize$0)|0);
         HEAP32[$230>>2] = $psize$0;
         $psize$1 = $psize$0;
        }
        $231 = $psize$1 >>> 3;
        $232 = ($psize$1>>>0)<(256);
        if ($232) {
         $233 = $231 << 1;
         $234 = (10260 + ($233<<2)|0);
         $235 = HEAP32[10220>>2]|0;
         $236 = 1 << $231;
         $237 = $235 & $236;
         $238 = ($237|0)==(0);
         if ($238) {
          $239 = $235 | $236;
          HEAP32[10220>>2] = $239;
          $$pre = (($233) + 2)|0;
          $$pre57 = (10260 + ($$pre<<2)|0);
          $$pre$phiZ2D = $$pre57;$F16$0 = $234;
         } else {
          $$sum11 = (($233) + 2)|0;
          $240 = (10260 + ($$sum11<<2)|0);
          $241 = HEAP32[$240>>2]|0;
          $242 = HEAP32[(10236)>>2]|0;
          $243 = ($241>>>0)<($242>>>0);
          if ($243) {
           _abort();
           // unreachable;
          } else {
           $$pre$phiZ2D = $240;$F16$0 = $241;
          }
         }
         HEAP32[$$pre$phiZ2D>>2] = $p$0;
         $244 = ((($F16$0)) + 12|0);
         HEAP32[$244>>2] = $p$0;
         $245 = ((($p$0)) + 8|0);
         HEAP32[$245>>2] = $F16$0;
         $246 = ((($p$0)) + 12|0);
         HEAP32[$246>>2] = $234;
         break L1;
        }
        $247 = $psize$1 >>> 8;
        $248 = ($247|0)==(0);
        if ($248) {
         $I18$0 = 0;
        } else {
         $249 = ($psize$1>>>0)>(16777215);
         if ($249) {
          $I18$0 = 31;
         } else {
          $250 = (($247) + 1048320)|0;
          $251 = $250 >>> 16;
          $252 = $251 & 8;
          $253 = $247 << $252;
          $254 = (($253) + 520192)|0;
          $255 = $254 >>> 16;
          $256 = $255 & 4;
          $257 = $256 | $252;
          $258 = $253 << $256;
          $259 = (($258) + 245760)|0;
          $260 = $259 >>> 16;
          $261 = $260 & 2;
          $262 = $257 | $261;
          $263 = (14 - ($262))|0;
          $264 = $258 << $261;
          $265 = $264 >>> 15;
          $266 = (($263) + ($265))|0;
          $267 = $266 << 1;
          $268 = (($266) + 7)|0;
          $269 = $psize$1 >>> $268;
          $270 = $269 & 1;
          $271 = $270 | $267;
          $I18$0 = $271;
         }
        }
        $272 = (10524 + ($I18$0<<2)|0);
        $273 = ((($p$0)) + 28|0);
        HEAP32[$273>>2] = $I18$0;
        $274 = ((($p$0)) + 16|0);
        $275 = ((($p$0)) + 20|0);
        HEAP32[$275>>2] = 0;
        HEAP32[$274>>2] = 0;
        $276 = HEAP32[(10224)>>2]|0;
        $277 = 1 << $I18$0;
        $278 = $276 & $277;
        $279 = ($278|0)==(0);
        L168: do {
         if ($279) {
          $280 = $276 | $277;
          HEAP32[(10224)>>2] = $280;
          HEAP32[$272>>2] = $p$0;
          $281 = ((($p$0)) + 24|0);
          HEAP32[$281>>2] = $272;
          $282 = ((($p$0)) + 12|0);
          HEAP32[$282>>2] = $p$0;
          $283 = ((($p$0)) + 8|0);
          HEAP32[$283>>2] = $p$0;
         } else {
          $284 = HEAP32[$272>>2]|0;
          $285 = ((($284)) + 4|0);
          $286 = HEAP32[$285>>2]|0;
          $287 = $286 & -8;
          $288 = ($287|0)==($psize$1|0);
          L171: do {
           if ($288) {
            $T$0$lcssa = $284;
           } else {
            $289 = ($I18$0|0)==(31);
            $290 = $I18$0 >>> 1;
            $291 = (25 - ($290))|0;
            $292 = $289 ? 0 : $291;
            $293 = $psize$1 << $292;
            $K19$052 = $293;$T$051 = $284;
            while(1) {
             $300 = $K19$052 >>> 31;
             $301 = (((($T$051)) + 16|0) + ($300<<2)|0);
             $296 = HEAP32[$301>>2]|0;
             $302 = ($296|0)==(0|0);
             if ($302) {
              $$lcssa = $301;$T$051$lcssa = $T$051;
              break;
             }
             $294 = $K19$052 << 1;
             $295 = ((($296)) + 4|0);
             $297 = HEAP32[$295>>2]|0;
             $298 = $297 & -8;
             $299 = ($298|0)==($psize$1|0);
             if ($299) {
              $T$0$lcssa = $296;
              break L171;
             } else {
              $K19$052 = $294;$T$051 = $296;
             }
            }
            $303 = HEAP32[(10236)>>2]|0;
            $304 = ($$lcssa>>>0)<($303>>>0);
            if ($304) {
             _abort();
             // unreachable;
            } else {
             HEAP32[$$lcssa>>2] = $p$0;
             $305 = ((($p$0)) + 24|0);
             HEAP32[$305>>2] = $T$051$lcssa;
             $306 = ((($p$0)) + 12|0);
             HEAP32[$306>>2] = $p$0;
             $307 = ((($p$0)) + 8|0);
             HEAP32[$307>>2] = $p$0;
             break L168;
            }
           }
          } while(0);
          $308 = ((($T$0$lcssa)) + 8|0);
          $309 = HEAP32[$308>>2]|0;
          $310 = HEAP32[(10236)>>2]|0;
          $311 = ($309>>>0)>=($310>>>0);
          $not$ = ($T$0$lcssa>>>0)>=($310>>>0);
          $312 = $311 & $not$;
          if ($312) {
           $313 = ((($309)) + 12|0);
           HEAP32[$313>>2] = $p$0;
           HEAP32[$308>>2] = $p$0;
           $314 = ((($p$0)) + 8|0);
           HEAP32[$314>>2] = $309;
           $315 = ((($p$0)) + 12|0);
           HEAP32[$315>>2] = $T$0$lcssa;
           $316 = ((($p$0)) + 24|0);
           HEAP32[$316>>2] = 0;
           break;
          } else {
           _abort();
           // unreachable;
          }
         }
        } while(0);
        $317 = HEAP32[(10252)>>2]|0;
        $318 = (($317) + -1)|0;
        HEAP32[(10252)>>2] = $318;
        $319 = ($318|0)==(0);
        if ($319) {
         $sp$0$in$i = (10676);
        } else {
         break L1;
        }
        while(1) {
         $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
         $320 = ($sp$0$i|0)==(0|0);
         $321 = ((($sp$0$i)) + 8|0);
         if ($320) {
          break;
         } else {
          $sp$0$in$i = $321;
         }
        }
        HEAP32[(10252)>>2] = -1;
        break L1;
       }
      }
     }
    }
   } while(0);
   _abort();
   // unreachable;
  }
 } while(0);
 return;
}
function _calloc($n_elements,$elem_size) {
 $n_elements = $n_elements|0;
 $elem_size = $elem_size|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $req$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n_elements|0)==(0);
 if ($0) {
  $req$0 = 0;
 } else {
  $1 = Math_imul($elem_size, $n_elements)|0;
  $2 = $elem_size | $n_elements;
  $3 = ($2>>>0)>(65535);
  if ($3) {
   $4 = (($1>>>0) / ($n_elements>>>0))&-1;
   $5 = ($4|0)==($elem_size|0);
   $$ = $5 ? $1 : -1;
   $req$0 = $$;
  } else {
   $req$0 = $1;
  }
 }
 $6 = (_malloc($req$0)|0);
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  $8 = ((($6)) + -4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $9 & 3;
  $11 = ($10|0)==(0);
  if (!($11)) {
   _memset(($6|0),0,($req$0|0))|0;
  }
 }
 return ($6|0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 switch ($4|0) {
 case 0:  {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  break;
 }
 case 2047:  {
  $$0 = $x;
  break;
 }
 default: {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
 }
 }
 return (+$$0);
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 return (+$0);
}
function ___errno_location() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[10176>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 10716;
 } else {
  $2 = (_pthread_self()|0);
  $3 = ((($2)) + 60|0);
  $4 = HEAP32[$3>>2]|0;
  $$0 = $4;
 }
 return ($$0|0);
}
function _strerror($e) {
 $e = $e|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$03 = 0, $i$03$lcssa = 0, $i$12 = 0, $s$0$lcssa = 0, $s$01 = 0, $s$1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $i$03 = 0;
 while(1) {
  $1 = (31498 + ($i$03)|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = $2&255;
  $4 = ($3|0)==($e|0);
  if ($4) {
   $i$03$lcssa = $i$03;
   label = 2;
   break;
  }
  $5 = (($i$03) + 1)|0;
  $6 = ($5|0)==(87);
  if ($6) {
   $i$12 = 87;$s$01 = 31586;
   label = 5;
   break;
  } else {
   $i$03 = $5;
  }
 }
 if ((label|0) == 2) {
  $0 = ($i$03$lcssa|0)==(0);
  if ($0) {
   $s$0$lcssa = 31586;
  } else {
   $i$12 = $i$03$lcssa;$s$01 = 31586;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $s$1 = $s$01;
   while(1) {
    $7 = HEAP8[$s$1>>0]|0;
    $8 = ($7<<24>>24)==(0);
    $9 = ((($s$1)) + 1|0);
    if ($8) {
     $$lcssa = $9;
     break;
    } else {
     $s$1 = $9;
    }
   }
   $10 = (($i$12) + -1)|0;
   $11 = ($10|0)==(0);
   if ($11) {
    $s$0$lcssa = $$lcssa;
    break;
   } else {
    $i$12 = $10;$s$01 = $$lcssa;
    label = 5;
   }
  }
 }
 return ($s$0$lcssa|0);
}
function ___mmap($start,$len,$prot,$flags,$fd,$off) {
 $start = $start|0;
 $len = $len|0;
 $prot = $prot|0;
 $flags = $flags|0;
 $fd = $fd|0;
 $off = $off|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
 var $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ($off|0)<(0);
 $1 = $0 << 31 >> 31;
 $2 = $off & 4095;
 $3 = $1 & -4096;
 $4 = ($2|0)==(0);
 $5 = ($3|0)==(0);
 $6 = $4 & $5;
 do {
  if ($6) {
   $8 = ($len>>>0)>(2147483646);
   if ($8) {
    $9 = (___errno_location()|0);
    HEAP32[$9>>2] = 12;
    $$0 = (-1);
    break;
   }
   $10 = $flags & 16;
   $11 = ($10|0)!=(0);
   if ($11) {
   }
   $12 = $off >> 12;
   HEAP32[$vararg_buffer>>2] = $start;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $len;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $prot;
   $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
   HEAP32[$vararg_ptr3>>2] = $flags;
   $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
   HEAP32[$vararg_ptr4>>2] = $fd;
   $vararg_ptr5 = ((($vararg_buffer)) + 20|0);
   HEAP32[$vararg_ptr5>>2] = $12;
   $13 = (___syscall192(192,($vararg_buffer|0))|0);
   $14 = (___syscall_ret($13)|0);
   $15 = $14;
   if ($11) {
    $$0 = $15;
   } else {
    $$0 = $15;
   }
  } else {
   $7 = (___errno_location()|0);
   HEAP32[$7>>2] = 22;
   $$0 = (-1);
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___munmap($start,$len) {
 $start = $start|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $start;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $len;
 $0 = (___syscall91(91,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _close($fd) {
 $fd = $fd|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $fd;
 $0 = (___syscall6(6,($vararg_buffer|0))|0);
 $1 = ($0|0)==(-4);
 $$ = $1 ? -115 : $0;
 $2 = (___syscall_ret($$)|0);
 STACKTOP = sp;return ($2|0);
}
function _open($filename,$flags,$varargs) {
 $filename = $filename|0;
 $flags = $flags|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap = 0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded2 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ap = sp + 16|0;
 HEAP32[$ap>>2] = $varargs;
 $arglist_current = HEAP32[$ap>>2]|0;
 $0 = $arglist_current;
 $1 = ((0) + 4|0);
 $expanded2 = $1;
 $expanded = (($expanded2) - 1)|0;
 $2 = (($0) + ($expanded))|0;
 $3 = ((0) + 4|0);
 $expanded6 = $3;
 $expanded5 = (($expanded6) - 1)|0;
 $expanded4 = $expanded5 ^ -1;
 $4 = $2 & $expanded4;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $arglist_next = ((($5)) + 4|0);
 HEAP32[$ap>>2] = $arglist_next;
 $7 = $flags | 32768;
 HEAP32[$vararg_buffer>>2] = $filename;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $7;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $6;
 $8 = (___syscall5(5,($vararg_buffer|0))|0);
 $9 = (___syscall_ret($8)|0);
 STACKTOP = sp;return ($9|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 do {
  if ($0) {
   $$0 = 1;
  } else {
   $1 = ($wc>>>0)<(128);
   if ($1) {
    $2 = $wc&255;
    HEAP8[$s>>0] = $2;
    $$0 = 1;
    break;
   }
   $3 = ($wc>>>0)<(2048);
   if ($3) {
    $4 = $wc >>> 6;
    $5 = $4 | 192;
    $6 = $5&255;
    $7 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $6;
    $8 = $wc & 63;
    $9 = $8 | 128;
    $10 = $9&255;
    HEAP8[$7>>0] = $10;
    $$0 = 2;
    break;
   }
   $11 = ($wc>>>0)<(55296);
   $12 = $wc & -8192;
   $13 = ($12|0)==(57344);
   $or$cond = $11 | $13;
   if ($or$cond) {
    $14 = $wc >>> 12;
    $15 = $14 | 224;
    $16 = $15&255;
    $17 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $16;
    $18 = $wc >>> 6;
    $19 = $18 & 63;
    $20 = $19 | 128;
    $21 = $20&255;
    $22 = ((($s)) + 2|0);
    HEAP8[$17>>0] = $21;
    $23 = $wc & 63;
    $24 = $23 | 128;
    $25 = $24&255;
    HEAP8[$22>>0] = $25;
    $$0 = 3;
    break;
   }
   $26 = (($wc) + -65536)|0;
   $27 = ($26>>>0)<(1048576);
   if ($27) {
    $28 = $wc >>> 18;
    $29 = $28 | 240;
    $30 = $29&255;
    $31 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $30;
    $32 = $wc >>> 12;
    $33 = $32 & 63;
    $34 = $33 | 128;
    $35 = $34&255;
    $36 = ((($s)) + 2|0);
    HEAP8[$31>>0] = $35;
    $37 = $wc >>> 6;
    $38 = $37 & 63;
    $39 = $38 | 128;
    $40 = $39&255;
    $41 = ((($s)) + 3|0);
    HEAP8[$36>>0] = $40;
    $42 = $wc & 63;
    $43 = $42 | 128;
    $44 = $43&255;
    HEAP8[$41>>0] = $44;
    $$0 = 4;
    break;
   } else {
    $45 = (___errno_location()|0);
    HEAP32[$45>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 return ($$0|0);
}
function _isupper($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -65)|0;
 $1 = ($0>>>0)<(26);
 $2 = $1&1;
 return ($2|0);
}
function _isspace($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(32);
 $1 = (($c) + -9)|0;
 $2 = ($1>>>0)<(5);
 $3 = $0 | $2;
 $4 = $3&1;
 return ($4|0);
}
function _tolower($c) {
 $c = $c|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isupper($c)|0);
 $1 = ($0|0)==(0);
 $2 = $c | 32;
 $$0 = $1 ? $c : $2;
 return ($$0|0);
}
function ___overflow($f,$_c) {
 $f = $f|0;
 $_c = $_c|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = $_c&255;
 HEAP8[$c>>0] = $0;
 $1 = ((($f)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = (___towrite($f)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $$pre = HEAP32[$1>>2]|0;
   $9 = $$pre;
   label = 4;
  } else {
   $$0 = -1;
  }
 } else {
  $9 = $2;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $6 = ((($f)) + 20|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7>>>0)<($9>>>0);
   if ($8) {
    $10 = $_c & 255;
    $11 = ((($f)) + 75|0);
    $12 = HEAP8[$11>>0]|0;
    $13 = $12 << 24 >> 24;
    $14 = ($10|0)==($13|0);
    if (!($14)) {
     $15 = ((($7)) + 1|0);
     HEAP32[$6>>2] = $15;
     HEAP8[$7>>0] = $0;
     $$0 = $10;
     break;
    }
   }
   $16 = ((($f)) + 36|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (FUNCTION_TABLE_iiii[$17 & 255]($f,$c,1)|0);
   $19 = ($18|0)==(1);
   if ($19) {
    $20 = HEAP8[$c>>0]|0;
    $21 = $20&255;
    $$0 = $21;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _fflush($f) {
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$012 = 0, $$014 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, $r$0$lcssa = 0, $r$03 = 0, $r$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($f|0)==(0|0);
 do {
  if ($0) {
   $7 = HEAP32[10168>>2]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $27 = 0;
   } else {
    $9 = HEAP32[10168>>2]|0;
    $10 = (_fflush($9)|0);
    $27 = $10;
   }
   ___lock(((10204)|0));
   $$012 = HEAP32[(10200)>>2]|0;
   $11 = ($$012|0)==(0|0);
   if ($11) {
    $r$0$lcssa = $27;
   } else {
    $$014 = $$012;$r$03 = $27;
    while(1) {
     $12 = ((($$014)) + 76|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ($13|0)>(-1);
     if ($14) {
      $15 = (___lockfile($$014)|0);
      $23 = $15;
     } else {
      $23 = 0;
     }
     $16 = ((($$014)) + 20|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = ((($$014)) + 28|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ($17>>>0)>($19>>>0);
     if ($20) {
      $21 = (___fflush_unlocked($$014)|0);
      $22 = $21 | $r$03;
      $r$1 = $22;
     } else {
      $r$1 = $r$03;
     }
     $24 = ($23|0)==(0);
     if (!($24)) {
      ___unlockfile($$014);
     }
     $25 = ((($$014)) + 56|0);
     $$01 = HEAP32[$25>>2]|0;
     $26 = ($$01|0)==(0|0);
     if ($26) {
      $r$0$lcssa = $r$1;
      break;
     } else {
      $$014 = $$01;$r$03 = $r$1;
     }
    }
   }
   ___unlock(((10204)|0));
   $$0 = $r$0$lcssa;
  } else {
   $1 = ((($f)) + 76|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = ($2|0)>(-1);
   if (!($3)) {
    $4 = (___fflush_unlocked($f)|0);
    $$0 = $4;
    break;
   }
   $5 = (___lockfile($f)|0);
   $phitmp = ($5|0)==(0);
   $6 = (___fflush_unlocked($f)|0);
   if ($phitmp) {
    $$0 = $6;
   } else {
    ___unlockfile($f);
    $$0 = $6;
   }
  }
 } while(0);
 return ($$0|0);
}
function _fprintf($f,$fmt,$varargs) {
 $f = $f|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vfprintf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function ___fdopen($fd,$mode) {
 $fd = $fd|0;
 $mode = $mode|0;
 var $$0 = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $tio = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $tio = sp + 52|0;
 $0 = HEAP8[$mode>>0]|0;
 $1 = $0 << 24 >> 24;
 $memchr = (_memchr(33390,$1,4)|0);
 $2 = ($memchr|0)==(0|0);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 22;
  $$0 = 0;
 } else {
  $4 = (_malloc(1144)|0);
  $5 = ($4|0)==(0|0);
  if ($5) {
   $$0 = 0;
  } else {
   dest=$4; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $6 = (_strchr($mode,43)|0);
   $7 = ($6|0)==(0|0);
   if ($7) {
    $8 = ($0<<24>>24)==(114);
    $9 = $8 ? 8 : 4;
    HEAP32[$4>>2] = $9;
   }
   $10 = (_strchr($mode,101)|0);
   $11 = ($10|0)==(0|0);
   if ($11) {
    $12 = $0;
   } else {
    HEAP32[$vararg_buffer>>2] = $fd;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 2;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 1;
    (___syscall221(221,($vararg_buffer|0))|0);
    $$pre = HEAP8[$mode>>0]|0;
    $12 = $$pre;
   }
   $13 = ($12<<24>>24)==(97);
   if ($13) {
    HEAP32[$vararg_buffer3>>2] = $fd;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 3;
    $14 = (___syscall221(221,($vararg_buffer3|0))|0);
    $15 = $14 & 1024;
    $16 = ($15|0)==(0);
    if ($16) {
     $17 = $14 | 1024;
     HEAP32[$vararg_buffer7>>2] = $fd;
     $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
     HEAP32[$vararg_ptr10>>2] = 4;
     $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
     HEAP32[$vararg_ptr11>>2] = $17;
     (___syscall221(221,($vararg_buffer7|0))|0);
    }
    $18 = HEAP32[$4>>2]|0;
    $19 = $18 | 128;
    HEAP32[$4>>2] = $19;
    $26 = $19;
   } else {
    $$pre1 = HEAP32[$4>>2]|0;
    $26 = $$pre1;
   }
   $20 = ((($4)) + 60|0);
   HEAP32[$20>>2] = $fd;
   $21 = ((($4)) + 120|0);
   $22 = ((($4)) + 44|0);
   HEAP32[$22>>2] = $21;
   $23 = ((($4)) + 48|0);
   HEAP32[$23>>2] = 1024;
   $24 = ((($4)) + 75|0);
   HEAP8[$24>>0] = -1;
   $25 = $26 & 8;
   $27 = ($25|0)==(0);
   if ($27) {
    HEAP32[$vararg_buffer12>>2] = $fd;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = 21505;
    $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
    HEAP32[$vararg_ptr16>>2] = $tio;
    $28 = (___syscall54(54,($vararg_buffer12|0))|0);
    $29 = ($28|0)==(0);
    if ($29) {
     HEAP8[$24>>0] = 10;
    }
   }
   $30 = ((($4)) + 32|0);
   HEAP32[$30>>2] = 242;
   $31 = ((($4)) + 36|0);
   HEAP32[$31>>2] = 156;
   $32 = ((($4)) + 40|0);
   HEAP32[$32>>2] = 155;
   $33 = ((($4)) + 12|0);
   HEAP32[$33>>2] = 153;
   $34 = HEAP32[(10180)>>2]|0;
   $35 = ($34|0)==(0);
   if ($35) {
    $36 = ((($4)) + 76|0);
    HEAP32[$36>>2] = -1;
   }
   ___lock(((10204)|0));
   $37 = HEAP32[(10200)>>2]|0;
   $38 = ((($4)) + 56|0);
   HEAP32[$38>>2] = $37;
   $39 = ($37|0)==(0);
   if (!($39)) {
    $40 = $37;
    $41 = ((($40)) + 52|0);
    HEAP32[$41>>2] = $4;
   }
   HEAP32[(10200)>>2] = $4;
   ___unlock(((10204)|0));
   $$0 = $4;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _snprintf($s,$n,$fmt,$varargs) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsnprintf($s,$n,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function ___stdout_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tio = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $tio = sp + 12|0;
 $0 = ((($f)) + 36|0);
 HEAP32[$0>>2] = 156;
 $1 = HEAP32[$f>>2]|0;
 $2 = $1 & 64;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($f)) + 60|0);
  $5 = HEAP32[$4>>2]|0;
  HEAP32[$vararg_buffer>>2] = $5;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21505;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $tio;
  $6 = (___syscall54(54,($vararg_buffer|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   $8 = ((($f)) + 75|0);
   HEAP8[$8>>0] = -1;
  }
 }
 $9 = (___stdio_write($f,$buf,$len)|0);
 STACKTOP = sp;return ($9|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa10 = 0;
 var $i$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___towrite($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   $$pre = HEAP32[$0>>2]|0;
   $7 = $$pre;
   label = 4;
  } else {
   $$0 = 0;
  }
 } else {
  $7 = $1;
  label = 4;
 }
 L4: do {
  if ((label|0) == 4) {
   $5 = ((($f)) + 20|0);
   $6 = HEAP32[$5>>2]|0;
   $8 = $7;
   $9 = $6;
   $10 = (($8) - ($9))|0;
   $11 = ($10>>>0)<($l>>>0);
   if ($11) {
    $12 = ((($f)) + 36|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (FUNCTION_TABLE_iiii[$13 & 255]($f,$s,$l)|0);
    $$0 = $14;
    break;
   }
   $15 = ((($f)) + 75|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = ($16<<24>>24)>(-1);
   L9: do {
    if ($17) {
     $i$0 = $l;
     while(1) {
      $18 = ($i$0|0)==(0);
      if ($18) {
       $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
       break L9;
      }
      $19 = (($i$0) + -1)|0;
      $20 = (($s) + ($19)|0);
      $21 = HEAP8[$20>>0]|0;
      $22 = ($21<<24>>24)==(10);
      if ($22) {
       $i$0$lcssa10 = $i$0;
       break;
      } else {
       $i$0 = $19;
      }
     }
     $23 = ((($f)) + 36|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (FUNCTION_TABLE_iiii[$24 & 255]($f,$s,$i$0$lcssa10)|0);
     $26 = ($25>>>0)<($i$0$lcssa10>>>0);
     if ($26) {
      $$0 = $i$0$lcssa10;
      break L4;
     }
     $27 = (($s) + ($i$0$lcssa10)|0);
     $28 = (($l) - ($i$0$lcssa10))|0;
     $$pre6 = HEAP32[$5>>2]|0;
     $$01 = $28;$$02 = $27;$29 = $$pre6;$i$1 = $i$0$lcssa10;
    } else {
     $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
    }
   } while(0);
   _memcpy(($29|0),($$02|0),($$01|0))|0;
   $30 = HEAP32[$5>>2]|0;
   $31 = (($30) + ($$01)|0);
   HEAP32[$5>>2] = $31;
   $32 = (($i$1) + ($$01))|0;
   $$0 = $32;
  }
 } while(0);
 return ($$0|0);
}
function _fwrite($src,$size,$nmemb,$f) {
 $src = $src|0;
 $size = $size|0;
 $nmemb = $nmemb|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = Math_imul($nmemb, $size)|0;
 $1 = ((($f)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $5 = (___lockfile($f)|0);
  $phitmp = ($5|0)==(0);
  $6 = (___fwritex($src,$0,$f)|0);
  if ($phitmp) {
   $7 = $6;
  } else {
   ___unlockfile($f);
   $7 = $6;
  }
 } else {
  $4 = (___fwritex($src,$0,$f)|0);
  $7 = $4;
 }
 $8 = ($7|0)==($0|0);
 if ($8) {
  $10 = $nmemb;
 } else {
  $9 = (($7>>>0) / ($size>>>0))&-1;
  $10 = $9;
 }
 return ($10|0);
}
function ___stdio_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $cnt$0 = 0, $iov = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $iov = sp + 32|0;
 HEAP32[$iov>>2] = $buf;
 $0 = ((($iov)) + 4|0);
 $1 = ((($f)) + 48|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0);
 $4 = $3&1;
 $5 = (($len) - ($4))|0;
 HEAP32[$0>>2] = $5;
 $6 = ((($iov)) + 8|0);
 $7 = ((($f)) + 44|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = ((($iov)) + 12|0);
 HEAP32[$9>>2] = $2;
 $10 = HEAP32[10176>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $16 = ((($f)) + 60|0);
  $17 = HEAP32[$16>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $17;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $iov;
  $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
  HEAP32[$vararg_ptr7>>2] = 2;
  $18 = (___syscall145(145,($vararg_buffer3|0))|0);
  $19 = (___syscall_ret($18)|0);
  $cnt$0 = $19;
 } else {
  _pthread_cleanup_push((243|0),($f|0));
  $12 = ((($f)) + 60|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $13;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $iov;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 2;
  $14 = (___syscall145(145,($vararg_buffer|0))|0);
  $15 = (___syscall_ret($14)|0);
  _pthread_cleanup_pop(0);
  $cnt$0 = $15;
 }
 $20 = ($cnt$0|0)<(1);
 if ($20) {
  $21 = $cnt$0 & 48;
  $22 = $21 ^ 16;
  $23 = HEAP32[$f>>2]|0;
  $24 = $23 | $22;
  HEAP32[$f>>2] = $24;
  $25 = ((($f)) + 8|0);
  HEAP32[$25>>2] = 0;
  $26 = ((($f)) + 4|0);
  HEAP32[$26>>2] = 0;
  $$0 = $cnt$0;
 } else {
  $27 = HEAP32[$0>>2]|0;
  $28 = ($cnt$0>>>0)>($27>>>0);
  if ($28) {
   $29 = (($cnt$0) - ($27))|0;
   $30 = HEAP32[$7>>2]|0;
   $31 = ((($f)) + 4|0);
   HEAP32[$31>>2] = $30;
   $32 = $30;
   $33 = (($32) + ($29)|0);
   $34 = ((($f)) + 8|0);
   HEAP32[$34>>2] = $33;
   $35 = HEAP32[$1>>2]|0;
   $36 = ($35|0)==(0);
   if ($36) {
    $$0 = $len;
   } else {
    $37 = ((($32)) + 1|0);
    HEAP32[$31>>2] = $37;
    $38 = HEAP8[$32>>0]|0;
    $39 = (($len) + -1)|0;
    $40 = (($buf) + ($39)|0);
    HEAP8[$40>>0] = $38;
    $$0 = $len;
   }
  } else {
   $$0 = $cnt$0;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___uflow($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = ((($f)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___toread($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $5 = ((($f)) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_iiii[$6 & 255]($f,$c,1)|0);
  $8 = ($7|0)==(1);
  if ($8) {
   $9 = HEAP8[$c>>0]|0;
   $10 = $9&255;
   $$0 = $10;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fmodeflags($mode) {
 $mode = $mode|0;
 var $$ = 0, $$flags$4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags$0 = 0, $flags$0$ = 0, $flags$2 = 0;
 var $flags$2$ = 0, $flags$4 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strchr($mode,43)|0);
 $1 = ($0|0)==(0|0);
 $2 = HEAP8[$mode>>0]|0;
 $not$ = ($2<<24>>24)!=(114);
 $$ = $not$&1;
 $flags$0 = $1 ? $$ : 2;
 $3 = (_strchr($mode,120)|0);
 $4 = ($3|0)==(0|0);
 $5 = $flags$0 | 128;
 $flags$0$ = $4 ? $flags$0 : $5;
 $6 = (_strchr($mode,101)|0);
 $7 = ($6|0)==(0|0);
 $8 = $flags$0$ | 524288;
 $flags$2 = $7 ? $flags$0$ : $8;
 $9 = ($2<<24>>24)==(114);
 $10 = $flags$2 | 64;
 $flags$2$ = $9 ? $flags$2 : $10;
 $11 = ($2<<24>>24)==(119);
 $12 = $flags$2$ | 512;
 $flags$4 = $11 ? $12 : $flags$2$;
 $13 = ($2<<24>>24)==(97);
 $14 = $flags$4 | 1024;
 $$flags$4 = $13 ? $14 : $flags$4;
 return ($$flags$4|0);
}
function _fread($destv,$size,$nmemb,$f) {
 $destv = $destv|0;
 $size = $size|0;
 $nmemb = $nmemb|0;
 $f = $f|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $dest$0$ph = 0, $dest$02 = 0, $l$0$ph = 0, $l$03 = 0, $l$03$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = Math_imul($nmemb, $size)|0;
 $1 = ((($f)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($f)|0);
  $31 = $4;
 } else {
  $31 = 0;
 }
 $5 = ((($f)) + 74|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 << 24 >> 24;
 $8 = (($7) + 255)|0;
 $9 = $8 | $7;
 $10 = $9&255;
 HEAP8[$5>>0] = $10;
 $11 = ((($f)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($f)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $12;
 $16 = $14;
 $17 = (($15) - ($16))|0;
 $18 = ($17|0)>(0);
 if ($18) {
  $19 = ($17>>>0)<($0>>>0);
  $$ = $19 ? $17 : $0;
  _memcpy(($destv|0),($14|0),($$|0))|0;
  $20 = (($14) + ($$)|0);
  HEAP32[$13>>2] = $20;
  $21 = (($destv) + ($$)|0);
  $22 = (($0) - ($$))|0;
  $dest$0$ph = $21;$l$0$ph = $22;
 } else {
  $dest$0$ph = $destv;$l$0$ph = $0;
 }
 $23 = ($l$0$ph|0)==(0);
 L7: do {
  if ($23) {
   label = 13;
  } else {
   $24 = ((($f)) + 32|0);
   $dest$02 = $dest$0$ph;$l$03 = $l$0$ph;
   while(1) {
    $25 = (___toread($f)|0);
    $26 = ($25|0)==(0);
    if (!($26)) {
     $l$03$lcssa = $l$03;
     break;
    }
    $27 = HEAP32[$24>>2]|0;
    $28 = (FUNCTION_TABLE_iiii[$27 & 255]($f,$dest$02,$l$03)|0);
    $29 = (($28) + 1)|0;
    $30 = ($29>>>0)<(2);
    if ($30) {
     $l$03$lcssa = $l$03;
     break;
    }
    $35 = (($l$03) - ($28))|0;
    $36 = (($dest$02) + ($28)|0);
    $37 = ($l$03|0)==($28|0);
    if ($37) {
     label = 13;
     break L7;
    } else {
     $dest$02 = $36;$l$03 = $35;
    }
   }
   $32 = ($31|0)==(0);
   if (!($32)) {
    ___unlockfile($f);
   }
   $33 = (($0) - ($l$03$lcssa))|0;
   $34 = (($33>>>0) / ($size>>>0))&-1;
   $$0 = $34;
  }
 } while(0);
 if ((label|0) == 13) {
  $38 = ($31|0)==(0);
  if ($38) {
   $$0 = $nmemb;
  } else {
   ___unlockfile($f);
   $$0 = $nmemb;
  }
 }
 return ($$0|0);
}
function ___stdio_seek($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ret = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ret = sp + 20|0;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $off;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $ret;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $whence;
 $2 = (___syscall140(140,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 $4 = ($3|0)<(0);
 if ($4) {
  HEAP32[$ret>>2] = -1;
  $5 = -1;
 } else {
  $$pre = HEAP32[$ret>>2]|0;
  $5 = $$pre;
 }
 STACKTOP = sp;return ($5|0);
}
function ___stdio_close($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (___syscall6(6,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 STACKTOP = sp;return ($3|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = ((($f)) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = ((($f)) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($f)) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($f)) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = ((($f)) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = $13;
  $17 = ((($f)) + 48|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + ($18)|0);
  $20 = ((($f)) + 16|0);
  HEAP32[$20>>2] = $19;
  $$0 = 0;
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
 }
 return ($$0|0);
}
function _printf($fmt,$varargs) {
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = HEAP32[10164>>2]|0;
 $1 = (_vfprintf($0,$fmt,$ap)|0);
 STACKTOP = sp;return ($1|0);
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = sp + 112|0;
 $f = sp;
 dest=$f; src=10720; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
   label = 4;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
  }
 } else {
  $$01 = $s;$$02 = $n;
  label = 4;
 }
 if ((label|0) == 4) {
  $4 = $$01;
  $5 = (-2 - ($4))|0;
  $6 = ($$02>>>0)>($5>>>0);
  $$$02 = $6 ? $5 : $$02;
  $7 = ((($f)) + 48|0);
  HEAP32[$7>>2] = $$$02;
  $8 = ((($f)) + 20|0);
  HEAP32[$8>>2] = $$01;
  $9 = ((($f)) + 44|0);
  HEAP32[$9>>2] = $$01;
  $10 = (($$01) + ($$$02)|0);
  $11 = ((($f)) + 16|0);
  HEAP32[$11>>2] = $10;
  $12 = ((($f)) + 28|0);
  HEAP32[$12>>2] = $10;
  $13 = (_vfprintf($f,$fmt,$ap)|0);
  $14 = ($$$02|0)==(0);
  if ($14) {
   $$0 = $13;
  } else {
   $15 = HEAP32[$8>>2]|0;
   $16 = HEAP32[$11>>2]|0;
   $17 = ($15|0)==($16|0);
   $18 = $17 << 31 >> 31;
   $19 = (($15) + ($18)|0);
   HEAP8[$19>>0] = 0;
   $$0 = $13;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _fclose($f) {
 $f = $f|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  (___lockfile($f)|0);
 }
 $3 = HEAP32[$f>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)!=(0);
 if (!($5)) {
  ___lock(((10204)|0));
  $6 = ((($f)) + 52|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  $9 = $7;
  $$pre = ((($f)) + 56|0);
  if (!($8)) {
   $10 = HEAP32[$$pre>>2]|0;
   $11 = ((($7)) + 56|0);
   HEAP32[$11>>2] = $10;
  }
  $12 = HEAP32[$$pre>>2]|0;
  $13 = ($12|0)==(0|0);
  $14 = $12;
  if (!($13)) {
   $15 = ((($12)) + 52|0);
   HEAP32[$15>>2] = $9;
  }
  $16 = HEAP32[(10200)>>2]|0;
  $17 = ($16|0)==($f|0);
  if ($17) {
   HEAP32[(10200)>>2] = $14;
  }
  ___unlock(((10204)|0));
 }
 $18 = (_fflush($f)|0);
 $19 = ((($f)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (FUNCTION_TABLE_ii[$20 & 255]($f)|0);
 $22 = $21 | $18;
 $23 = ((($f)) + 92|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0|0);
 if (!($25)) {
  _free($24);
 }
 if (!($5)) {
  _free($f);
 }
 return ($22|0);
}
function ___stdio_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$0 = 0, $cnt$1 = 0, $iov$0 = 0, $iov$0$lcssa11 = 0, $iov$1 = 0, $iovcnt$0 = 0;
 var $iovcnt$0$lcssa12 = 0, $iovcnt$1 = 0, $iovs = 0, $rem$0 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $iovs = sp + 32|0;
 $0 = ((($f)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$iovs>>2] = $1;
 $2 = ((($iovs)) + 4|0);
 $3 = ((($f)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4;
 $6 = (($5) - ($1))|0;
 HEAP32[$2>>2] = $6;
 $7 = ((($iovs)) + 8|0);
 HEAP32[$7>>2] = $buf;
 $8 = ((($iovs)) + 12|0);
 HEAP32[$8>>2] = $len;
 $9 = (($6) + ($len))|0;
 $10 = ((($f)) + 60|0);
 $11 = ((($f)) + 44|0);
 $iov$0 = $iovs;$iovcnt$0 = 2;$rem$0 = $9;
 while(1) {
  $12 = HEAP32[10176>>2]|0;
  $13 = ($12|0)==(0|0);
  if ($13) {
   $17 = HEAP32[$10>>2]|0;
   HEAP32[$vararg_buffer3>>2] = $17;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = $iov$0;
   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $iovcnt$0;
   $18 = (___syscall146(146,($vararg_buffer3|0))|0);
   $19 = (___syscall_ret($18)|0);
   $cnt$0 = $19;
  } else {
   _pthread_cleanup_push((244|0),($f|0));
   $14 = HEAP32[$10>>2]|0;
   HEAP32[$vararg_buffer>>2] = $14;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $iov$0;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $iovcnt$0;
   $15 = (___syscall146(146,($vararg_buffer|0))|0);
   $16 = (___syscall_ret($15)|0);
   _pthread_cleanup_pop(0);
   $cnt$0 = $16;
  }
  $20 = ($rem$0|0)==($cnt$0|0);
  if ($20) {
   label = 6;
   break;
  }
  $27 = ($cnt$0|0)<(0);
  if ($27) {
   $iov$0$lcssa11 = $iov$0;$iovcnt$0$lcssa12 = $iovcnt$0;
   label = 8;
   break;
  }
  $35 = (($rem$0) - ($cnt$0))|0;
  $36 = ((($iov$0)) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($cnt$0>>>0)>($37>>>0);
  if ($38) {
   $39 = HEAP32[$11>>2]|0;
   HEAP32[$0>>2] = $39;
   HEAP32[$3>>2] = $39;
   $40 = (($cnt$0) - ($37))|0;
   $41 = ((($iov$0)) + 8|0);
   $42 = (($iovcnt$0) + -1)|0;
   $$phi$trans$insert = ((($iov$0)) + 12|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $50 = $$pre;$cnt$1 = $40;$iov$1 = $41;$iovcnt$1 = $42;
  } else {
   $43 = ($iovcnt$0|0)==(2);
   if ($43) {
    $44 = HEAP32[$0>>2]|0;
    $45 = (($44) + ($cnt$0)|0);
    HEAP32[$0>>2] = $45;
    $50 = $37;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = 2;
   } else {
    $50 = $37;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = $iovcnt$0;
   }
  }
  $46 = HEAP32[$iov$1>>2]|0;
  $47 = (($46) + ($cnt$1)|0);
  HEAP32[$iov$1>>2] = $47;
  $48 = ((($iov$1)) + 4|0);
  $49 = (($50) - ($cnt$1))|0;
  HEAP32[$48>>2] = $49;
  $iov$0 = $iov$1;$iovcnt$0 = $iovcnt$1;$rem$0 = $35;
 }
 if ((label|0) == 6) {
  $21 = HEAP32[$11>>2]|0;
  $22 = ((($f)) + 48|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($21) + ($23)|0);
  $25 = ((($f)) + 16|0);
  HEAP32[$25>>2] = $24;
  $26 = $21;
  HEAP32[$0>>2] = $26;
  HEAP32[$3>>2] = $26;
  $$0 = $len;
 }
 else if ((label|0) == 8) {
  $28 = ((($f)) + 16|0);
  HEAP32[$28>>2] = 0;
  HEAP32[$0>>2] = 0;
  HEAP32[$3>>2] = 0;
  $29 = HEAP32[$f>>2]|0;
  $30 = $29 | 32;
  HEAP32[$f>>2] = $30;
  $31 = ($iovcnt$0$lcssa12|0)==(2);
  if ($31) {
   $$0 = 0;
  } else {
   $32 = ((($iov$0$lcssa11)) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (($len) - ($33))|0;
   $$0 = $34;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _fputc($c,$f) {
 $c = $c|0;
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (___lockfile($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $18 = ((($f)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = $19 << 24 >> 24;
   $21 = ($20|0)==($c|0);
   if ($21) {
    label = 10;
   } else {
    $22 = ((($f)) + 20|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($f)) + 16|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($23>>>0)<($25>>>0);
    if ($26) {
     $27 = $c&255;
     $28 = ((($23)) + 1|0);
     HEAP32[$22>>2] = $28;
     HEAP8[$23>>0] = $27;
     $29 = $c & 255;
     $31 = $29;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $30 = (___overflow($f,$c)|0);
    $31 = $30;
   }
   ___unlockfile($f);
   $$0 = $31;
  }
 }
 do {
  if ((label|0) == 3) {
   $5 = ((($f)) + 75|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = $6 << 24 >> 24;
   $8 = ($7|0)==($c|0);
   if (!($8)) {
    $9 = ((($f)) + 20|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ((($f)) + 16|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($10>>>0)<($12>>>0);
    if ($13) {
     $14 = $c&255;
     $15 = ((($10)) + 1|0);
     HEAP32[$9>>2] = $15;
     HEAP8[$10>>0] = $14;
     $16 = $c & 255;
     $$0 = $16;
     break;
    }
   }
   $17 = (___overflow($f,$c)|0);
   $$0 = $17;
  }
 } while(0);
 return ($$0|0);
}
function ___toread($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = ((($f)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($f)) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 if ($10) {
  $11 = ((($f)) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiii[$12 & 255]($f,0,0)|0);
 }
 $13 = ((($f)) + 16|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($f)) + 28|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$6>>2] = 0;
 $15 = HEAP32[$f>>2]|0;
 $16 = $15 & 20;
 $17 = ($16|0)==(0);
 if ($17) {
  $21 = HEAP32[$8>>2]|0;
  $22 = ((($f)) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = ((($f)) + 4|0);
  HEAP32[$23>>2] = $21;
  $$0 = 0;
 } else {
  $18 = $15 & 4;
  $19 = ($18|0)==(0);
  if ($19) {
   $$0 = -1;
  } else {
   $20 = $15 | 32;
   HEAP32[$f>>2] = $20;
   $$0 = -1;
  }
 }
 return ($$0|0);
}
function ___fseeko_unlocked($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($whence|0)==(1);
 if ($0) {
  $1 = ((($f)) + 8|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ((($f)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = $2;
  $6 = $4;
  $7 = (($off) - ($5))|0;
  $8 = (($7) + ($6))|0;
  $$01 = $8;
 } else {
  $$01 = $off;
 }
 $9 = ((($f)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($f)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($10>>>0)>($12>>>0);
 if ($13) {
  $14 = ((($f)) + 36|0);
  $15 = HEAP32[$14>>2]|0;
  (FUNCTION_TABLE_iiii[$15 & 255]($f,0,0)|0);
  $16 = HEAP32[$9>>2]|0;
  $17 = ($16|0)==(0|0);
  if ($17) {
   $$0 = -1;
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $18 = ((($f)) + 16|0);
  HEAP32[$18>>2] = 0;
  HEAP32[$11>>2] = 0;
  HEAP32[$9>>2] = 0;
  $19 = ((($f)) + 40|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (FUNCTION_TABLE_iiii[$20 & 255]($f,$$01,$whence)|0);
  $22 = ($21|0)<(0);
  if ($22) {
   $$0 = -1;
  } else {
   $23 = ((($f)) + 8|0);
   HEAP32[$23>>2] = 0;
   $24 = ((($f)) + 4|0);
   HEAP32[$24>>2] = 0;
   $25 = HEAP32[$f>>2]|0;
   $26 = $25 & -17;
   HEAP32[$f>>2] = $26;
   $$0 = 0;
  }
 }
 return ($$0|0);
}
function ___fseeko($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $4 = (___lockfile($f)|0);
  $phitmp = ($4|0)==(0);
  $5 = (___fseeko_unlocked($f,$off,$whence)|0);
  if ($phitmp) {
   $6 = $5;
  } else {
   ___unlockfile($f);
   $6 = $5;
  }
 } else {
  $3 = (___fseeko_unlocked($f,$off,$whence)|0);
  $6 = $3;
 }
 return ($6|0);
}
function _fseek($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___fseeko($f,$off,$whence)|0);
 return ($0|0);
}
function ___lockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___unlockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0;
 var $ret$1 = 0, $ret$1$ = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = ((($f)) + 76|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)>(-1);
  if ($4) {
   $5 = (___lockfile($f)|0);
   $32 = $5;
  } else {
   $32 = 0;
  }
  $6 = HEAP32[$f>>2]|0;
  $7 = $6 & 32;
  $8 = ((($f)) + 74|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = ($9<<24>>24)<(1);
  if ($10) {
   $11 = $6 & -33;
   HEAP32[$f>>2] = $11;
  }
  $12 = ((($f)) + 48|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0);
  if ($14) {
   $16 = ((($f)) + 44|0);
   $17 = HEAP32[$16>>2]|0;
   HEAP32[$16>>2] = $internal_buf;
   $18 = ((($f)) + 28|0);
   HEAP32[$18>>2] = $internal_buf;
   $19 = ((($f)) + 20|0);
   HEAP32[$19>>2] = $internal_buf;
   HEAP32[$12>>2] = 80;
   $20 = ((($internal_buf)) + 80|0);
   $21 = ((($f)) + 16|0);
   HEAP32[$21>>2] = $20;
   $22 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
   $23 = ($17|0)==(0|0);
   if ($23) {
    $ret$1 = $22;
   } else {
    $24 = ((($f)) + 36|0);
    $25 = HEAP32[$24>>2]|0;
    (FUNCTION_TABLE_iiii[$25 & 255]($f,0,0)|0);
    $26 = HEAP32[$19>>2]|0;
    $27 = ($26|0)==(0|0);
    $$ = $27 ? -1 : $22;
    HEAP32[$16>>2] = $17;
    HEAP32[$12>>2] = 0;
    HEAP32[$21>>2] = 0;
    HEAP32[$18>>2] = 0;
    HEAP32[$19>>2] = 0;
    $ret$1 = $$;
   }
  } else {
   $15 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
   $ret$1 = $15;
  }
  $28 = HEAP32[$f>>2]|0;
  $29 = $28 & 32;
  $30 = ($29|0)==(0);
  $ret$1$ = $30 ? $ret$1 : -1;
  $31 = $28 | $7;
  HEAP32[$f>>2] = $31;
  $33 = ($32|0)==(0);
  if (!($33)) {
   ___unlockfile($f);
  }
  $$0 = $ret$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _fopen($filename,$mode) {
 $filename = $filename|0;
 $mode = $mode|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP8[$mode>>0]|0;
 $1 = $0 << 24 >> 24;
 $memchr = (_memchr(33390,$1,4)|0);
 $2 = ($memchr|0)==(0|0);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 22;
  $$0 = 0;
 } else {
  $4 = (___fmodeflags($mode)|0);
  $5 = $4 | 32768;
  HEAP32[$vararg_buffer>>2] = $filename;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $5;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 438;
  $6 = (___syscall5(5,($vararg_buffer|0))|0);
  $7 = (___syscall_ret($6)|0);
  $8 = ($7|0)<(0);
  if ($8) {
   $$0 = 0;
  } else {
   $9 = (___fdopen($7,$mode)|0);
   $10 = ($9|0)==(0|0);
   if ($10) {
    HEAP32[$vararg_buffer3>>2] = $7;
    (___syscall6(6,($vararg_buffer3|0))|0);
    $$0 = 0;
   } else {
    $$0 = $9;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___ftello_unlocked($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$f>>2]|0;
 $3 = $2 & 128;
 $4 = ($3|0)==(0);
 if ($4) {
  $10 = 1;
 } else {
  $5 = ((($f)) + 20|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($f)) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($6>>>0)>($8>>>0);
  $phitmp = $9 ? 2 : 1;
  $10 = $phitmp;
 }
 $11 = (FUNCTION_TABLE_iiii[$1 & 255]($f,0,$10)|0);
 $12 = ($11|0)<(0);
 if ($12) {
  $$0 = $11;
 } else {
  $13 = ((($f)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($f)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $14;
  $18 = $16;
  $19 = ((($f)) + 20|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($f)) + 28|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $20;
  $24 = $22;
  $25 = (($11) - ($17))|0;
  $26 = (($25) + ($18))|0;
  $27 = (($26) + ($23))|0;
  $28 = (($27) - ($24))|0;
  $$0 = $28;
 }
 return ($$0|0);
}
function ___ftello($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $4 = (___lockfile($f)|0);
  $phitmp = ($4|0)==(0);
  $5 = (___ftello_unlocked($f)|0);
  if ($phitmp) {
   $6 = $5;
  } else {
   $6 = $5;
  }
 } else {
  $3 = (___ftello_unlocked($f)|0);
  $6 = $3;
 }
 return ($6|0);
}
function _ftell($f) {
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___ftello($f)|0);
 return ($0|0);
}
function _vsprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_vsnprintf($s,2147483647,$fmt,$ap)|0);
 return ($0|0);
}
function ___stpcpy($d,$s) {
 $d = $d|0;
 $s = $s|0;
 var $$0$lcssa = 0, $$01$lcssa = 0, $$0115 = 0, $$016 = 0, $$03 = 0, $$1$ph = 0, $$12$ph = 0, $$128 = 0, $$19 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $wd$0$lcssa = 0, $wd$010 = 0, $ws$0$lcssa = 0, $ws$011 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $d;
 $2 = $0 ^ $1;
 $3 = $2 & 3;
 $4 = ($3|0)==(0);
 L1: do {
  if ($4) {
   $5 = $0 & 3;
   $6 = ($5|0)==(0);
   if ($6) {
    $$0$lcssa = $s;$$01$lcssa = $d;
   } else {
    $$0115 = $d;$$016 = $s;
    while(1) {
     $7 = HEAP8[$$016>>0]|0;
     HEAP8[$$0115>>0] = $7;
     $8 = ($7<<24>>24)==(0);
     if ($8) {
      $$03 = $$0115;
      break L1;
     }
     $9 = ((($$016)) + 1|0);
     $10 = ((($$0115)) + 1|0);
     $11 = $9;
     $12 = $11 & 3;
     $13 = ($12|0)==(0);
     if ($13) {
      $$0$lcssa = $9;$$01$lcssa = $10;
      break;
     } else {
      $$0115 = $10;$$016 = $9;
     }
    }
   }
   $14 = HEAP32[$$0$lcssa>>2]|0;
   $15 = (($14) + -16843009)|0;
   $16 = $14 & -2139062144;
   $17 = $16 ^ -2139062144;
   $18 = $17 & $15;
   $19 = ($18|0)==(0);
   if ($19) {
    $22 = $14;$wd$010 = $$01$lcssa;$ws$011 = $$0$lcssa;
    while(1) {
     $20 = ((($ws$011)) + 4|0);
     $21 = ((($wd$010)) + 4|0);
     HEAP32[$wd$010>>2] = $22;
     $23 = HEAP32[$20>>2]|0;
     $24 = (($23) + -16843009)|0;
     $25 = $23 & -2139062144;
     $26 = $25 ^ -2139062144;
     $27 = $26 & $24;
     $28 = ($27|0)==(0);
     if ($28) {
      $22 = $23;$wd$010 = $21;$ws$011 = $20;
     } else {
      $wd$0$lcssa = $21;$ws$0$lcssa = $20;
      break;
     }
    }
   } else {
    $wd$0$lcssa = $$01$lcssa;$ws$0$lcssa = $$0$lcssa;
   }
   $$1$ph = $ws$0$lcssa;$$12$ph = $wd$0$lcssa;
   label = 8;
  } else {
   $$1$ph = $s;$$12$ph = $d;
   label = 8;
  }
 } while(0);
 if ((label|0) == 8) {
  $29 = HEAP8[$$1$ph>>0]|0;
  HEAP8[$$12$ph>>0] = $29;
  $30 = ($29<<24>>24)==(0);
  if ($30) {
   $$03 = $$12$ph;
  } else {
   $$128 = $$12$ph;$$19 = $$1$ph;
   while(1) {
    $31 = ((($$19)) + 1|0);
    $32 = ((($$128)) + 1|0);
    $33 = HEAP8[$31>>0]|0;
    HEAP8[$32>>0] = $33;
    $34 = ($33<<24>>24)==(0);
    if ($34) {
     $$03 = $32;
     break;
    } else {
     $$128 = $32;$$19 = $31;
    }
   }
  }
 }
 return ($$03|0);
}
function _strlen($s) {
 $s = $s|0;
 var $$0 = 0, $$01$lcssa = 0, $$014 = 0, $$1$lcssa = 0, $$lcssa20 = 0, $$pn = 0, $$pn15 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $w$0 = 0, $w$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $0 & 3;
 $2 = ($1|0)==(0);
 L1: do {
  if ($2) {
   $$01$lcssa = $s;
   label = 4;
  } else {
   $$014 = $s;$21 = $0;
   while(1) {
    $3 = HEAP8[$$014>>0]|0;
    $4 = ($3<<24>>24)==(0);
    if ($4) {
     $$pn = $21;
     break L1;
    }
    $5 = ((($$014)) + 1|0);
    $6 = $5;
    $7 = $6 & 3;
    $8 = ($7|0)==(0);
    if ($8) {
     $$01$lcssa = $5;
     label = 4;
     break;
    } else {
     $$014 = $5;$21 = $6;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $w$0 = $$01$lcssa;
  while(1) {
   $9 = HEAP32[$w$0>>2]|0;
   $10 = (($9) + -16843009)|0;
   $11 = $9 & -2139062144;
   $12 = $11 ^ -2139062144;
   $13 = $12 & $10;
   $14 = ($13|0)==(0);
   $15 = ((($w$0)) + 4|0);
   if ($14) {
    $w$0 = $15;
   } else {
    $$lcssa20 = $9;$w$0$lcssa = $w$0;
    break;
   }
  }
  $16 = $$lcssa20&255;
  $17 = ($16<<24>>24)==(0);
  if ($17) {
   $$1$lcssa = $w$0$lcssa;
  } else {
   $$pn15 = $w$0$lcssa;
   while(1) {
    $18 = ((($$pn15)) + 1|0);
    $$pre = HEAP8[$18>>0]|0;
    $19 = ($$pre<<24>>24)==(0);
    if ($19) {
     $$1$lcssa = $18;
     break;
    } else {
     $$pn15 = $18;
    }
   }
  }
  $20 = $$1$lcssa;
  $$pn = $20;
 }
 $$0 = (($$pn) - ($0))|0;
 return ($$0|0);
}
function _strncmp($_l,$_r,$n) {
 $_l = $_l|0;
 $_r = $_r|0;
 $n = $n|0;
 var $$03 = 0, $$08 = 0, $$08$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $l$06 = 0, $or$cond = 0, $or$cond4 = 0, $r$0$lcssa = 0, $r$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $$03 = 0;
 } else {
  $1 = HEAP8[$_l>>0]|0;
  $2 = ($1<<24>>24)==(0);
  L3: do {
   if ($2) {
    $13 = 0;$r$0$lcssa = $_r;
   } else {
    $$08$in = $n;$6 = $1;$l$06 = $_l;$r$07 = $_r;
    while(1) {
     $$08 = (($$08$in) + -1)|0;
     $3 = HEAP8[$r$07>>0]|0;
     $4 = ($3<<24>>24)!=(0);
     $5 = ($$08|0)!=(0);
     $or$cond = $5 & $4;
     $7 = ($6<<24>>24)==($3<<24>>24);
     $or$cond4 = $7 & $or$cond;
     if (!($or$cond4)) {
      $13 = $6;$r$0$lcssa = $r$07;
      break L3;
     }
     $8 = ((($l$06)) + 1|0);
     $9 = ((($r$07)) + 1|0);
     $10 = HEAP8[$8>>0]|0;
     $11 = ($10<<24>>24)==(0);
     if ($11) {
      $13 = 0;$r$0$lcssa = $9;
      break;
     } else {
      $$08$in = $$08;$6 = $10;$l$06 = $8;$r$07 = $9;
     }
    }
   }
  } while(0);
  $12 = $13&255;
  $14 = HEAP8[$r$0$lcssa>>0]|0;
  $15 = $14&255;
  $16 = (($12) - ($15))|0;
  $$03 = $16;
 }
 return ($$03|0);
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $$03 = 0, $$lcssa = 0, $$lcssa19 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$04 = 0, $r$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 L1: do {
  if ($0) {
   $11 = 0;
  } else {
   $$03 = $n;$l$04 = $vl;$r$05 = $vr;
   while(1) {
    $1 = HEAP8[$l$04>>0]|0;
    $2 = HEAP8[$r$05>>0]|0;
    $3 = ($1<<24>>24)==($2<<24>>24);
    if (!($3)) {
     $$lcssa = $1;$$lcssa19 = $2;
     break;
    }
    $4 = (($$03) + -1)|0;
    $5 = ((($l$04)) + 1|0);
    $6 = ((($r$05)) + 1|0);
    $7 = ($4|0)==(0);
    if ($7) {
     $11 = 0;
     break L1;
    } else {
     $$03 = $4;$l$04 = $5;$r$05 = $6;
    }
   }
   $8 = $$lcssa&255;
   $9 = $$lcssa19&255;
   $10 = (($8) - ($9))|0;
   $11 = $10;
  }
 } while(0);
 return ($11|0);
}
function _strrchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($s)|0);
 $1 = (($0) + 1)|0;
 $2 = (___memrchr($s,$c,$1)|0);
 return ($2|0);
}
function _strcpy($dest,$src) {
 $dest = $dest|0;
 $src = $src|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpcpy($dest,$src)|0);
 return ($dest|0);
}
function ___strdup($s) {
 $s = $s|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($s)|0);
 $1 = (($0) + 1)|0;
 $2 = (_malloc($1)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
 } else {
  _memcpy(($2|0),($s|0),($1|0))|0;
  $$0 = $2;
 }
 return ($$0|0);
}
function _strstr($h,$n) {
 $h = $h|0;
 $n = $n|0;
 var $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$0$lcssa$i11 = 0, $$01$i = 0, $$02$i = 0, $$02$i7 = 0, $$03$i = 0, $$lcssa$i = 0, $$lcssa$i10 = 0, $$lcssa$i4 = 0, $$lcssa281 = 0, $$lcssa284 = 0, $$lcssa287 = 0, $$lcssa301 = 0, $$lcssa304 = 0, $$lcssa307 = 0, $$lcssa322 = 0, $$pr$i = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $233$phi = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $byteset$i = 0, $div$i = 0, $div4$i = 0, $hw$0$in2$i = 0, $hw$03$i = 0, $hw$03$i6 = 0, $ip$0$ph$lcssa$i = 0, $ip$0$ph$lcssa143$i = 0, $ip$0$ph76$i = 0, $ip$1$ip$0$$i = 0, $ip$1$ip$0$i = 0, $ip$1$ph$lcssa$i = 0, $ip$1$ph55$i = 0, $jp$0$ph13$ph70$i = 0, $jp$0$ph1365$i = 0, $jp$0$ph1365$i$lcssa = 0, $jp$0$ph1365$i$lcssa$lcssa = 0, $jp$0$ph77$i = 0, $jp$1$ph56$i = 0, $jp$1$ph9$ph49$i = 0;
 var $jp$1$ph944$i = 0, $jp$1$ph944$i$lcssa = 0, $jp$1$ph944$i$lcssa$lcssa = 0, $k$059$i = 0, $k$139$i = 0, $k$2$i = 0, $k$338$i = 0, $k$338$i$lcssa = 0, $k$4$i = 0, $l$080$i = 0, $l$080$i$lcssa321 = 0, $mem$0$i = 0, $mem0$0$i = 0, $or$cond$i = 0, $or$cond$i2 = 0, $or$cond$i8 = 0, $or$cond5$i = 0, $p$0$ph$ph$lcssa32$i = 0, $p$0$ph$ph$lcssa32147$i = 0, $p$0$ph$ph71$i = 0;
 var $p$1$p$0$i = 0, $p$1$ph$ph$lcssa23$i = 0, $p$1$ph$ph50$i = 0, $p$3$i = 0, $shift$i = 0, $z$0$i = 0, $z$1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $byteset$i = sp + 1024|0;
 $shift$i = sp;
 $0 = HEAP8[$n>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $$0 = $h;
  } else {
   $2 = $0 << 24 >> 24;
   $3 = (_strchr($h,$2)|0);
   $4 = ($3|0)==(0|0);
   if ($4) {
    $$0 = 0;
   } else {
    $5 = ((($n)) + 1|0);
    $6 = HEAP8[$5>>0]|0;
    $7 = ($6<<24>>24)==(0);
    if ($7) {
     $$0 = $3;
    } else {
     $8 = ((($3)) + 1|0);
     $9 = HEAP8[$8>>0]|0;
     $10 = ($9<<24>>24)==(0);
     if ($10) {
      $$0 = 0;
     } else {
      $11 = ((($n)) + 2|0);
      $12 = HEAP8[$11>>0]|0;
      $13 = ($12<<24>>24)==(0);
      if ($13) {
       $14 = $0&255;
       $15 = $14 << 8;
       $16 = $6&255;
       $17 = $16 | $15;
       $18 = HEAP8[$3>>0]|0;
       $19 = $18&255;
       $20 = $19 << 8;
       $21 = $9&255;
       $22 = $20 | $21;
       $$01$i = $8;$232 = $9;$233 = $3;$hw$0$in2$i = $22;
       while(1) {
        $23 = $hw$0$in2$i & 65535;
        $24 = ($23|0)==($17|0);
        if ($24) {
         $$lcssa$i = $233;$31 = $232;
         break;
        }
        $25 = $23 << 8;
        $26 = ((($$01$i)) + 1|0);
        $27 = HEAP8[$26>>0]|0;
        $28 = $27&255;
        $29 = $28 | $25;
        $30 = ($27<<24>>24)==(0);
        if ($30) {
         $$lcssa$i = $$01$i;$31 = 0;
         break;
        } else {
         $233$phi = $$01$i;$$01$i = $26;$232 = $27;$hw$0$in2$i = $29;$233 = $233$phi;
        }
       }
       $32 = ($31<<24>>24)!=(0);
       $33 = $32 ? $$lcssa$i : 0;
       $$0 = $33;
       break;
      }
      $34 = ((($3)) + 2|0);
      $35 = HEAP8[$34>>0]|0;
      $36 = ($35<<24>>24)==(0);
      if ($36) {
       $$0 = 0;
      } else {
       $37 = ((($n)) + 3|0);
       $38 = HEAP8[$37>>0]|0;
       $39 = ($38<<24>>24)==(0);
       if ($39) {
        $40 = $0&255;
        $41 = $40 << 24;
        $42 = $6&255;
        $43 = $42 << 16;
        $44 = $43 | $41;
        $45 = $12&255;
        $46 = $45 << 8;
        $47 = $44 | $46;
        $48 = HEAP8[$3>>0]|0;
        $49 = $48&255;
        $50 = $49 << 24;
        $51 = $9&255;
        $52 = $51 << 16;
        $53 = $35&255;
        $54 = $53 << 8;
        $55 = $54 | $52;
        $56 = $55 | $50;
        $57 = ($56|0)==($47|0);
        if ($57) {
         $$0$lcssa$i = $34;$$lcssa$i4 = $35;
        } else {
         $$02$i = $34;$hw$03$i = $56;
         while(1) {
          $58 = ((($$02$i)) + 1|0);
          $59 = HEAP8[$58>>0]|0;
          $60 = $59&255;
          $61 = $60 | $hw$03$i;
          $62 = $61 << 8;
          $63 = ($59<<24>>24)==(0);
          $64 = ($62|0)==($47|0);
          $or$cond$i2 = $63 | $64;
          if ($or$cond$i2) {
           $$0$lcssa$i = $58;$$lcssa$i4 = $59;
           break;
          } else {
           $$02$i = $58;$hw$03$i = $62;
          }
         }
        }
        $65 = ($$lcssa$i4<<24>>24)!=(0);
        $66 = ((($$0$lcssa$i)) + -2|0);
        $67 = $65 ? $66 : 0;
        $$0 = $67;
        break;
       }
       $68 = ((($3)) + 3|0);
       $69 = HEAP8[$68>>0]|0;
       $70 = ($69<<24>>24)==(0);
       if ($70) {
        $$0 = 0;
       } else {
        $71 = ((($n)) + 4|0);
        $72 = HEAP8[$71>>0]|0;
        $73 = ($72<<24>>24)==(0);
        if ($73) {
         $74 = $0&255;
         $75 = $74 << 24;
         $76 = $6&255;
         $77 = $76 << 16;
         $78 = $77 | $75;
         $79 = $12&255;
         $80 = $79 << 8;
         $81 = $78 | $80;
         $82 = $38&255;
         $83 = $81 | $82;
         $84 = HEAP8[$3>>0]|0;
         $85 = $84&255;
         $86 = $85 << 24;
         $87 = $9&255;
         $88 = $87 << 16;
         $89 = $35&255;
         $90 = $89 << 8;
         $91 = $69&255;
         $92 = $90 | $88;
         $93 = $92 | $91;
         $94 = $93 | $86;
         $95 = ($94|0)==($83|0);
         if ($95) {
          $$0$lcssa$i11 = $68;$$lcssa$i10 = $69;
         } else {
          $$02$i7 = $68;$hw$03$i6 = $94;
          while(1) {
           $96 = $hw$03$i6 << 8;
           $97 = ((($$02$i7)) + 1|0);
           $98 = HEAP8[$97>>0]|0;
           $99 = $98&255;
           $100 = $99 | $96;
           $101 = ($98<<24>>24)==(0);
           $102 = ($100|0)==($83|0);
           $or$cond$i8 = $101 | $102;
           if ($or$cond$i8) {
            $$0$lcssa$i11 = $97;$$lcssa$i10 = $98;
            break;
           } else {
            $$02$i7 = $97;$hw$03$i6 = $100;
           }
          }
         }
         $103 = ($$lcssa$i10<<24>>24)!=(0);
         $104 = ((($$0$lcssa$i11)) + -3|0);
         $105 = $103 ? $104 : 0;
         $$0 = $105;
         break;
        }
        ;HEAP32[$byteset$i>>2]=0|0;HEAP32[$byteset$i+4>>2]=0|0;HEAP32[$byteset$i+8>>2]=0|0;HEAP32[$byteset$i+12>>2]=0|0;HEAP32[$byteset$i+16>>2]=0|0;HEAP32[$byteset$i+20>>2]=0|0;HEAP32[$byteset$i+24>>2]=0|0;HEAP32[$byteset$i+28>>2]=0|0;
        $110 = $0;$l$080$i = 0;
        while(1) {
         $106 = (($3) + ($l$080$i)|0);
         $107 = HEAP8[$106>>0]|0;
         $108 = ($107<<24>>24)==(0);
         if ($108) {
          $$0$i = 0;
          break;
         }
         $109 = $110 & 31;
         $111 = $109&255;
         $112 = 1 << $111;
         $div4$i = ($110&255) >>> 5;
         $113 = $div4$i&255;
         $114 = (($byteset$i) + ($113<<2)|0);
         $115 = HEAP32[$114>>2]|0;
         $116 = $115 | $112;
         HEAP32[$114>>2] = $116;
         $117 = (($l$080$i) + 1)|0;
         $118 = $110&255;
         $119 = (($shift$i) + ($118<<2)|0);
         HEAP32[$119>>2] = $117;
         $120 = (($n) + ($117)|0);
         $121 = HEAP8[$120>>0]|0;
         $122 = ($121<<24>>24)==(0);
         if ($122) {
          $$lcssa322 = $117;$l$080$i$lcssa321 = $l$080$i;
          label = 23;
          break;
         } else {
          $110 = $121;$l$080$i = $117;
         }
        }
        L32: do {
         if ((label|0) == 23) {
          $123 = ($$lcssa322>>>0)>(1);
          L34: do {
           if ($123) {
            $234 = 1;$ip$0$ph76$i = -1;$jp$0$ph77$i = 0;
            L35: while(1) {
             $235 = $234;$jp$0$ph13$ph70$i = $jp$0$ph77$i;$p$0$ph$ph71$i = 1;
             while(1) {
              $236 = $235;$jp$0$ph1365$i = $jp$0$ph13$ph70$i;
              L39: while(1) {
               $133 = $236;$k$059$i = 1;
               while(1) {
                $129 = (($k$059$i) + ($ip$0$ph76$i))|0;
                $130 = (($n) + ($129)|0);
                $131 = HEAP8[$130>>0]|0;
                $132 = (($n) + ($133)|0);
                $134 = HEAP8[$132>>0]|0;
                $135 = ($131<<24>>24)==($134<<24>>24);
                if (!($135)) {
                 $$lcssa301 = $133;$$lcssa304 = $131;$$lcssa307 = $134;$jp$0$ph1365$i$lcssa = $jp$0$ph1365$i;
                 break L39;
                }
                $136 = ($k$059$i|0)==($p$0$ph$ph71$i|0);
                $127 = (($k$059$i) + 1)|0;
                if ($136) {
                 break;
                }
                $126 = (($127) + ($jp$0$ph1365$i))|0;
                $128 = ($126>>>0)<($$lcssa322>>>0);
                if ($128) {
                 $133 = $126;$k$059$i = $127;
                } else {
                 $ip$0$ph$lcssa$i = $ip$0$ph76$i;$p$0$ph$ph$lcssa32$i = $p$0$ph$ph71$i;
                 break L35;
                }
               }
               $137 = (($jp$0$ph1365$i) + ($p$0$ph$ph71$i))|0;
               $138 = (($137) + 1)|0;
               $139 = ($138>>>0)<($$lcssa322>>>0);
               if ($139) {
                $236 = $138;$jp$0$ph1365$i = $137;
               } else {
                $ip$0$ph$lcssa$i = $ip$0$ph76$i;$p$0$ph$ph$lcssa32$i = $p$0$ph$ph71$i;
                break L35;
               }
              }
              $140 = ($$lcssa304&255)>($$lcssa307&255);
              $141 = (($$lcssa301) - ($ip$0$ph76$i))|0;
              if (!($140)) {
               $jp$0$ph1365$i$lcssa$lcssa = $jp$0$ph1365$i$lcssa;
               break;
              }
              $124 = (($$lcssa301) + 1)|0;
              $125 = ($124>>>0)<($$lcssa322>>>0);
              if ($125) {
               $235 = $124;$jp$0$ph13$ph70$i = $$lcssa301;$p$0$ph$ph71$i = $141;
              } else {
               $ip$0$ph$lcssa$i = $ip$0$ph76$i;$p$0$ph$ph$lcssa32$i = $141;
               break L35;
              }
             }
             $142 = (($jp$0$ph1365$i$lcssa$lcssa) + 1)|0;
             $143 = (($jp$0$ph1365$i$lcssa$lcssa) + 2)|0;
             $144 = ($143>>>0)<($$lcssa322>>>0);
             if ($144) {
              $234 = $143;$ip$0$ph76$i = $jp$0$ph1365$i$lcssa$lcssa;$jp$0$ph77$i = $142;
             } else {
              $ip$0$ph$lcssa$i = $jp$0$ph1365$i$lcssa$lcssa;$p$0$ph$ph$lcssa32$i = 1;
              break;
             }
            }
            $237 = 1;$ip$1$ph55$i = -1;$jp$1$ph56$i = 0;
            while(1) {
             $239 = $237;$jp$1$ph9$ph49$i = $jp$1$ph56$i;$p$1$ph$ph50$i = 1;
             while(1) {
              $238 = $239;$jp$1$ph944$i = $jp$1$ph9$ph49$i;
              L54: while(1) {
               $152 = $238;$k$139$i = 1;
               while(1) {
                $148 = (($k$139$i) + ($ip$1$ph55$i))|0;
                $149 = (($n) + ($148)|0);
                $150 = HEAP8[$149>>0]|0;
                $151 = (($n) + ($152)|0);
                $153 = HEAP8[$151>>0]|0;
                $154 = ($150<<24>>24)==($153<<24>>24);
                if (!($154)) {
                 $$lcssa281 = $152;$$lcssa284 = $150;$$lcssa287 = $153;$jp$1$ph944$i$lcssa = $jp$1$ph944$i;
                 break L54;
                }
                $155 = ($k$139$i|0)==($p$1$ph$ph50$i|0);
                $146 = (($k$139$i) + 1)|0;
                if ($155) {
                 break;
                }
                $145 = (($146) + ($jp$1$ph944$i))|0;
                $147 = ($145>>>0)<($$lcssa322>>>0);
                if ($147) {
                 $152 = $145;$k$139$i = $146;
                } else {
                 $ip$0$ph$lcssa143$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $ip$1$ph55$i;$p$0$ph$ph$lcssa32147$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = $p$1$ph$ph50$i;
                 break L34;
                }
               }
               $156 = (($jp$1$ph944$i) + ($p$1$ph$ph50$i))|0;
               $157 = (($156) + 1)|0;
               $158 = ($157>>>0)<($$lcssa322>>>0);
               if ($158) {
                $238 = $157;$jp$1$ph944$i = $156;
               } else {
                $ip$0$ph$lcssa143$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $ip$1$ph55$i;$p$0$ph$ph$lcssa32147$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = $p$1$ph$ph50$i;
                break L34;
               }
              }
              $159 = ($$lcssa284&255)<($$lcssa287&255);
              $160 = (($$lcssa281) - ($ip$1$ph55$i))|0;
              if (!($159)) {
               $jp$1$ph944$i$lcssa$lcssa = $jp$1$ph944$i$lcssa;
               break;
              }
              $164 = (($$lcssa281) + 1)|0;
              $165 = ($164>>>0)<($$lcssa322>>>0);
              if ($165) {
               $239 = $164;$jp$1$ph9$ph49$i = $$lcssa281;$p$1$ph$ph50$i = $160;
              } else {
               $ip$0$ph$lcssa143$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $ip$1$ph55$i;$p$0$ph$ph$lcssa32147$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = $160;
               break L34;
              }
             }
             $161 = (($jp$1$ph944$i$lcssa$lcssa) + 1)|0;
             $162 = (($jp$1$ph944$i$lcssa$lcssa) + 2)|0;
             $163 = ($162>>>0)<($$lcssa322>>>0);
             if ($163) {
              $237 = $162;$ip$1$ph55$i = $jp$1$ph944$i$lcssa$lcssa;$jp$1$ph56$i = $161;
             } else {
              $ip$0$ph$lcssa143$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $jp$1$ph944$i$lcssa$lcssa;$p$0$ph$ph$lcssa32147$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = 1;
              break;
             }
            }
           } else {
            $ip$0$ph$lcssa143$i = -1;$ip$1$ph$lcssa$i = -1;$p$0$ph$ph$lcssa32147$i = 1;$p$1$ph$ph$lcssa23$i = 1;
           }
          } while(0);
          $166 = (($ip$1$ph$lcssa$i) + 1)|0;
          $167 = (($ip$0$ph$lcssa143$i) + 1)|0;
          $168 = ($166>>>0)>($167>>>0);
          $p$1$p$0$i = $168 ? $p$1$ph$ph$lcssa23$i : $p$0$ph$ph$lcssa32147$i;
          $ip$1$ip$0$i = $168 ? $ip$1$ph$lcssa$i : $ip$0$ph$lcssa143$i;
          $169 = (($n) + ($p$1$p$0$i)|0);
          $170 = (($ip$1$ip$0$i) + 1)|0;
          $171 = (_memcmp($n,$169,$170)|0);
          $172 = ($171|0)==(0);
          if ($172) {
           $177 = (($$lcssa322) - ($p$1$p$0$i))|0;
           $mem0$0$i = $177;$p$3$i = $p$1$p$0$i;
          } else {
           $173 = (($$lcssa322) - ($ip$1$ip$0$i))|0;
           $174 = (($173) + -1)|0;
           $175 = ($ip$1$ip$0$i>>>0)>($174>>>0);
           $ip$1$ip$0$$i = $175 ? $ip$1$ip$0$i : $174;
           $176 = (($ip$1$ip$0$$i) + 1)|0;
           $mem0$0$i = 0;$p$3$i = $176;
          }
          $178 = $$lcssa322 | 63;
          $179 = ($mem0$0$i|0)!=(0);
          $180 = (($$lcssa322) - ($p$3$i))|0;
          $$03$i = $3;$mem$0$i = 0;$z$0$i = $3;
          L69: while(1) {
           $181 = $z$0$i;
           $182 = $$03$i;
           $183 = (($181) - ($182))|0;
           $184 = ($183>>>0)<($$lcssa322>>>0);
           do {
            if ($184) {
             $185 = (_memchr($z$0$i,0,$178)|0);
             $186 = ($185|0)==(0|0);
             if ($186) {
              $190 = (($z$0$i) + ($178)|0);
              $z$1$i = $190;
              break;
             } else {
              $187 = $185;
              $188 = (($187) - ($182))|0;
              $189 = ($188>>>0)<($$lcssa322>>>0);
              if ($189) {
               $$0$i = 0;
               break L32;
              } else {
               $z$1$i = $185;
               break;
              }
             }
            } else {
             $z$1$i = $z$0$i;
            }
           } while(0);
           $191 = (($$03$i) + ($l$080$i$lcssa321)|0);
           $192 = HEAP8[$191>>0]|0;
           $div$i = ($192&255) >>> 5;
           $193 = $div$i&255;
           $194 = (($byteset$i) + ($193<<2)|0);
           $195 = HEAP32[$194>>2]|0;
           $196 = $192 & 31;
           $197 = $196&255;
           $198 = 1 << $197;
           $199 = $198 & $195;
           $200 = ($199|0)==(0);
           if ($200) {
            $209 = (($$03$i) + ($$lcssa322)|0);
            $$03$i = $209;$mem$0$i = 0;$z$0$i = $z$1$i;
            continue;
           }
           $201 = $192&255;
           $202 = (($shift$i) + ($201<<2)|0);
           $203 = HEAP32[$202>>2]|0;
           $204 = (($$lcssa322) - ($203))|0;
           $205 = ($$lcssa322|0)==($203|0);
           if (!($205)) {
            $206 = ($mem$0$i|0)!=(0);
            $or$cond$i = $179 & $206;
            $207 = ($204>>>0)<($p$3$i>>>0);
            $or$cond5$i = $or$cond$i & $207;
            $k$2$i = $or$cond5$i ? $180 : $204;
            $208 = (($$03$i) + ($k$2$i)|0);
            $$03$i = $208;$mem$0$i = 0;$z$0$i = $z$1$i;
            continue;
           }
           $210 = ($170>>>0)>($mem$0$i>>>0);
           $211 = $210 ? $170 : $mem$0$i;
           $212 = (($n) + ($211)|0);
           $213 = HEAP8[$212>>0]|0;
           $214 = ($213<<24>>24)==(0);
           L83: do {
            if ($214) {
             $k$4$i = $170;
            } else {
             $$pr$i = $213;$k$338$i = $211;
             while(1) {
              $215 = (($$03$i) + ($k$338$i)|0);
              $216 = HEAP8[$215>>0]|0;
              $217 = ($$pr$i<<24>>24)==($216<<24>>24);
              if (!($217)) {
               $k$338$i$lcssa = $k$338$i;
               break;
              }
              $218 = (($k$338$i) + 1)|0;
              $219 = (($n) + ($218)|0);
              $220 = HEAP8[$219>>0]|0;
              $221 = ($220<<24>>24)==(0);
              if ($221) {
               $k$4$i = $170;
               break L83;
              } else {
               $$pr$i = $220;$k$338$i = $218;
              }
             }
             $222 = (($k$338$i$lcssa) - ($ip$1$ip$0$i))|0;
             $223 = (($$03$i) + ($222)|0);
             $$03$i = $223;$mem$0$i = 0;$z$0$i = $z$1$i;
             continue L69;
            }
           } while(0);
           while(1) {
            $224 = ($k$4$i>>>0)>($mem$0$i>>>0);
            if (!($224)) {
             $$0$i = $$03$i;
             break L32;
            }
            $225 = (($k$4$i) + -1)|0;
            $226 = (($n) + ($225)|0);
            $227 = HEAP8[$226>>0]|0;
            $228 = (($$03$i) + ($225)|0);
            $229 = HEAP8[$228>>0]|0;
            $230 = ($227<<24>>24)==($229<<24>>24);
            if ($230) {
             $k$4$i = $225;
            } else {
             break;
            }
           }
           $231 = (($$03$i) + ($p$3$i)|0);
           $$03$i = $231;$mem$0$i = $mem0$0$i;$z$0$i = $z$1$i;
          }
         }
        } while(0);
        $$0 = $$0$i;
       }
      }
     }
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___strchrnul($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$02$lcssa = 0, $$0211 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond5 = 0, $w$0$lcssa = 0, $w$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = ($0|0)==(0);
 L1: do {
  if ($1) {
   $6 = (_strlen($s)|0);
   $7 = (($s) + ($6)|0);
   $$0 = $7;
  } else {
   $2 = $s;
   $3 = $2 & 3;
   $4 = ($3|0)==(0);
   if ($4) {
    $$02$lcssa = $s;
   } else {
    $5 = $c&255;
    $$0211 = $s;
    while(1) {
     $8 = HEAP8[$$0211>>0]|0;
     $9 = ($8<<24>>24)==(0);
     $10 = ($8<<24>>24)==($5<<24>>24);
     $or$cond = $9 | $10;
     if ($or$cond) {
      $$0 = $$0211;
      break L1;
     }
     $11 = ((($$0211)) + 1|0);
     $12 = $11;
     $13 = $12 & 3;
     $14 = ($13|0)==(0);
     if ($14) {
      $$02$lcssa = $11;
      break;
     } else {
      $$0211 = $11;
     }
    }
   }
   $15 = Math_imul($0, 16843009)|0;
   $16 = HEAP32[$$02$lcssa>>2]|0;
   $17 = (($16) + -16843009)|0;
   $18 = $16 & -2139062144;
   $19 = $18 ^ -2139062144;
   $20 = $19 & $17;
   $21 = ($20|0)==(0);
   L10: do {
    if ($21) {
     $23 = $16;$w$08 = $$02$lcssa;
     while(1) {
      $22 = $23 ^ $15;
      $24 = (($22) + -16843009)|0;
      $25 = $22 & -2139062144;
      $26 = $25 ^ -2139062144;
      $27 = $26 & $24;
      $28 = ($27|0)==(0);
      if (!($28)) {
       $w$0$lcssa = $w$08;
       break L10;
      }
      $29 = ((($w$08)) + 4|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($30) + -16843009)|0;
      $32 = $30 & -2139062144;
      $33 = $32 ^ -2139062144;
      $34 = $33 & $31;
      $35 = ($34|0)==(0);
      if ($35) {
       $23 = $30;$w$08 = $29;
      } else {
       $w$0$lcssa = $29;
       break;
      }
     }
    } else {
     $w$0$lcssa = $$02$lcssa;
    }
   } while(0);
   $36 = $c&255;
   $$1 = $w$0$lcssa;
   while(1) {
    $37 = HEAP8[$$1>>0]|0;
    $38 = ($37<<24>>24)==(0);
    $39 = ($37<<24>>24)==($36<<24>>24);
    $or$cond5 = $38 | $39;
    $40 = ((($$1)) + 1|0);
    if ($or$cond5) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $40;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _strncasecmp($_l,$_r,$n) {
 $_l = $_l|0;
 $_r = $_r|0;
 $n = $n|0;
 var $$04 = 0, $$08 = 0, $$08$in = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$06 = 0, $l$06$lcssa28 = 0, $or$cond = 0, $r$0$lcssa = 0, $r$07 = 0, $r$07$lcssa27 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $$04 = 0;
 } else {
  $1 = HEAP8[$_l>>0]|0;
  $2 = ($1<<24>>24)==(0);
  L3: do {
   if ($2) {
    $21 = 0;$r$0$lcssa = $_r;
   } else {
    $3 = $1&255;
    $$08$in = $n;$7 = $1;$9 = $3;$l$06 = $_l;$r$07 = $_r;
    while(1) {
     $$08 = (($$08$in) + -1)|0;
     $4 = HEAP8[$r$07>>0]|0;
     $5 = ($4<<24>>24)!=(0);
     $6 = ($$08|0)!=(0);
     $or$cond = $6 & $5;
     if (!($or$cond)) {
      $21 = $7;$r$0$lcssa = $r$07;
      break L3;
     }
     $8 = ($7<<24>>24)==($4<<24>>24);
     if (!($8)) {
      $10 = (_tolower($9)|0);
      $11 = HEAP8[$r$07>>0]|0;
      $12 = $11&255;
      $13 = (_tolower($12)|0);
      $14 = ($10|0)==($13|0);
      if (!($14)) {
       $l$06$lcssa28 = $l$06;$r$07$lcssa27 = $r$07;
       break;
      }
     }
     $15 = ((($l$06)) + 1|0);
     $16 = ((($r$07)) + 1|0);
     $17 = HEAP8[$15>>0]|0;
     $18 = $17&255;
     $19 = ($17<<24>>24)==(0);
     if ($19) {
      $21 = 0;$r$0$lcssa = $16;
      break L3;
     } else {
      $$08$in = $$08;$7 = $17;$9 = $18;$l$06 = $15;$r$07 = $16;
     }
    }
    $$pre = HEAP8[$l$06$lcssa28>>0]|0;
    $21 = $$pre;$r$0$lcssa = $r$07$lcssa27;
   }
  } while(0);
  $20 = $21&255;
  $22 = (_tolower($20)|0);
  $23 = HEAP8[$r$0$lcssa>>0]|0;
  $24 = $23&255;
  $25 = (_tolower($24)|0);
  $26 = (($22) - ($25))|0;
  $$04 = $26;
 }
 return ($$04|0);
}
function _strcmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$014 = 0, $$05 = 0, $$lcssa = 0, $$lcssa2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $2 = ($0<<24>>24)!=($1<<24>>24);
 $3 = ($0<<24>>24)==(0);
 $or$cond3 = $3 | $2;
 if ($or$cond3) {
  $$lcssa = $0;$$lcssa2 = $1;
 } else {
  $$014 = $l;$$05 = $r;
  while(1) {
   $4 = ((($$014)) + 1|0);
   $5 = ((($$05)) + 1|0);
   $6 = HEAP8[$4>>0]|0;
   $7 = HEAP8[$5>>0]|0;
   $8 = ($6<<24>>24)!=($7<<24>>24);
   $9 = ($6<<24>>24)==(0);
   $or$cond = $9 | $8;
   if ($or$cond) {
    $$lcssa = $6;$$lcssa2 = $7;
    break;
   } else {
    $$014 = $4;$$05 = $5;
   }
  }
 }
 $10 = $$lcssa&255;
 $11 = $$lcssa2&255;
 $12 = (($10) - ($11))|0;
 return ($12|0);
}
function _strcasecmp($_l,$_r) {
 $_l = $_l|0;
 $_r = $_r|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$03 = 0, $l$03$lcssa24 = 0, $r$0$lcssa = 0, $r$04 = 0, $r$04$lcssa23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$_l>>0]|0;
 $1 = ($0<<24>>24)==(0);
 L1: do {
  if ($1) {
   $19 = 0;$r$0$lcssa = $_r;
  } else {
   $2 = $0&255;
   $5 = $0;$7 = $2;$l$03 = $_l;$r$04 = $_r;
   while(1) {
    $3 = HEAP8[$r$04>>0]|0;
    $4 = ($3<<24>>24)==(0);
    if ($4) {
     $19 = $5;$r$0$lcssa = $r$04;
     break L1;
    }
    $6 = ($5<<24>>24)==($3<<24>>24);
    if (!($6)) {
     $8 = (_tolower($7)|0);
     $9 = HEAP8[$r$04>>0]|0;
     $10 = $9&255;
     $11 = (_tolower($10)|0);
     $12 = ($8|0)==($11|0);
     if (!($12)) {
      $l$03$lcssa24 = $l$03;$r$04$lcssa23 = $r$04;
      break;
     }
    }
    $13 = ((($l$03)) + 1|0);
    $14 = ((($r$04)) + 1|0);
    $15 = HEAP8[$13>>0]|0;
    $16 = $15&255;
    $17 = ($15<<24>>24)==(0);
    if ($17) {
     $19 = 0;$r$0$lcssa = $14;
     break L1;
    } else {
     $5 = $15;$7 = $16;$l$03 = $13;$r$04 = $14;
    }
   }
   $$pre = HEAP8[$l$03$lcssa24>>0]|0;
   $19 = $$pre;$r$0$lcssa = $r$04$lcssa23;
  }
 } while(0);
 $18 = $19&255;
 $20 = (_tolower($18)|0);
 $21 = HEAP8[$r$0$lcssa>>0]|0;
 $22 = $21&255;
 $23 = (_tolower($22)|0);
 $24 = (($20) - ($23))|0;
 return ($24|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa44 = 0, $$019 = 0, $$1$lcssa = 0, $$110 = 0, $$110$lcssa = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond18 = 0, $s$0$lcssa = 0, $s$0$lcssa43 = 0, $s$020 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$011 = 0, $w$011$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)!=(0);
 $4 = ($n|0)!=(0);
 $or$cond18 = $4 & $3;
 L1: do {
  if ($or$cond18) {
   $5 = $c&255;
   $$019 = $n;$s$020 = $src;
   while(1) {
    $6 = HEAP8[$s$020>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa44 = $$019;$s$0$lcssa43 = $s$020;
     label = 6;
     break L1;
    }
    $8 = ((($s$020)) + 1|0);
    $9 = (($$019) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)!=(0);
    $13 = ($9|0)!=(0);
    $or$cond = $13 & $12;
    if ($or$cond) {
     $$019 = $9;$s$020 = $8;
    } else {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    }
   }
  } else {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$0$lcssa44 = $$0$lcssa;$s$0$lcssa43 = $s$0$lcssa;
   label = 6;
  } else {
   $$3 = 0;$s$2 = $s$0$lcssa;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa43>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa44;$s$2 = $s$0$lcssa43;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa44>>>0)>(3);
    L11: do {
     if ($18) {
      $$110 = $$0$lcssa44;$w$011 = $s$0$lcssa43;
      while(1) {
       $19 = HEAP32[$w$011>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$110$lcssa = $$110;$w$011$lcssa = $w$011;
        break;
       }
       $26 = ((($w$011)) + 4|0);
       $27 = (($$110) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$110 = $27;$w$011 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        label = 11;
        break L11;
       }
      }
      $$24 = $$110$lcssa;$s$15 = $w$011$lcssa;
     } else {
      $$1$lcssa = $$0$lcssa44;$w$0$lcssa = $s$0$lcssa43;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $29 = ($$1$lcssa|0)==(0);
     if ($29) {
      $$3 = 0;$s$2 = $w$0$lcssa;
      break;
     } else {
      $$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
     }
    }
    while(1) {
     $30 = HEAP8[$s$15>>0]|0;
     $31 = ($30<<24>>24)==($15<<24>>24);
     if ($31) {
      $$3 = $$24;$s$2 = $s$15;
      break L8;
     }
     $32 = ((($s$15)) + 1|0);
     $33 = (($$24) + -1)|0;
     $34 = ($33|0)==(0);
     if ($34) {
      $$3 = 0;$s$2 = $32;
      break;
     } else {
      $$24 = $33;$s$15 = $32;
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 return ($36|0);
}
function ___memrchr($m,$c,$n) {
 $m = $m|0;
 $c = $c|0;
 $n = $n|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c&255;
 $$01 = $n;
 while(1) {
  $1 = (($$01) + -1)|0;
  $2 = ($$01|0)==(0);
  if ($2) {
   $$0 = 0;
   break;
  }
  $3 = (($m) + ($1)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==($0<<24>>24);
  if ($5) {
   $$0 = $3;
   break;
  } else {
   $$01 = $1;
  }
 }
 return ($$0|0);
}
function _strchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___strchrnul($s,$c)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $c&255;
 $3 = ($1<<24>>24)==($2<<24>>24);
 $4 = $3 ? $0 : 0;
 return ($4|0);
}
function ___syscall_ret($r) {
 $r = $r|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($r>>>0)>(4294963200);
 if ($0) {
  $1 = (0 - ($r))|0;
  $2 = (___errno_location()|0);
  HEAP32[$2>>2] = $1;
  $$0 = -1;
 } else {
  $$0 = $r;
 }
 return ($$0|0);
}
function ___shlim($f,$lim) {
 $f = $f|0;
 $lim = $lim|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 104|0);
 HEAP32[$0>>2] = $lim;
 $1 = ((($f)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($f)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = ((($f)) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($lim|0)!=(0);
 $10 = ($7|0)>($lim|0);
 $or$cond = $9 & $10;
 if ($or$cond) {
  $11 = (($4) + ($lim)|0);
  $12 = ((($f)) + 100|0);
  HEAP32[$12>>2] = $11;
 } else {
  $13 = ((($f)) + 100|0);
  HEAP32[$13>>2] = $5;
 }
 return;
}
function ___shgetc($f) {
 $f = $f|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert3 = 0, $$pre = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  label = 3;
 } else {
  $3 = ((($f)) + 108|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)<($1|0);
  if ($5) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $6 = (___uflow($f)|0);
  $7 = ($6|0)<(0);
  if ($7) {
   label = 4;
  } else {
   $9 = HEAP32[$0>>2]|0;
   $10 = ($9|0)==(0);
   $$phi$trans$insert = ((($f)) + 8|0);
   if ($10) {
    $$pre = HEAP32[$$phi$trans$insert>>2]|0;
    $11 = $$pre;
    $26 = $$pre;$41 = $11;
    label = 9;
   } else {
    $12 = HEAP32[$$phi$trans$insert>>2]|0;
    $13 = ((($f)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $12;
    $16 = $14;
    $17 = (($15) - ($16))|0;
    $18 = ((($f)) + 108|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (($9) - ($19))|0;
    $21 = (($20) + -1)|0;
    $22 = ($17|0)>($21|0);
    if ($22) {
     $23 = (($14) + ($21)|0);
     $24 = ((($f)) + 100|0);
     HEAP32[$24>>2] = $23;
     $27 = $12;
    } else {
     $26 = $15;$41 = $12;
     label = 9;
    }
   }
   if ((label|0) == 9) {
    $25 = ((($f)) + 100|0);
    HEAP32[$25>>2] = $26;
    $27 = $41;
   }
   $28 = ($27|0)==(0|0);
   $$phi$trans$insert3 = ((($f)) + 4|0);
   $$pre4 = HEAP32[$$phi$trans$insert3>>2]|0;
   if (!($28)) {
    $29 = $27;
    $30 = $$pre4;
    $31 = ((($f)) + 108|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (($29) + 1)|0;
    $34 = (($33) - ($30))|0;
    $35 = (($34) + ($32))|0;
    HEAP32[$31>>2] = $35;
   }
   $36 = ((($$pre4)) + -1|0);
   $37 = HEAP8[$36>>0]|0;
   $38 = $37&255;
   $39 = ($38|0)==($6|0);
   if ($39) {
    $$0 = $6;
   } else {
    $40 = $6&255;
    HEAP8[$36>>0] = $40;
    $$0 = $6;
   }
  }
 }
 if ((label|0) == 4) {
  $8 = ((($f)) + 100|0);
  HEAP32[$8>>2] = 0;
  $$0 = -1;
 }
 return ($$0|0);
}
function ___intscan($f,$base,$pok,$0,$1) {
 $f = $f|0;
 $base = $base|0;
 $pok = $pok|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $$122 = 0, $$123 = 0, $$base21 = 0, $$lcssa = 0, $$lcssa130 = 0, $$lcssa131 = 0, $$lcssa132 = 0, $$lcssa133 = 0, $$lcssa134 = 0, $$lcssa135 = 0, $$sum = 0, $$sum14 = 0, $$sum1445 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum1865 = 0, $$sum19 = 0;
 var $$sum20 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$0 = 0, $c$1 = 0, $c$124 = 0, $c$2$be = 0, $c$2$be$lcssa = 0;
 var $c$2$lcssa = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$371 = 0, $c$4$be = 0, $c$4$be$lcssa = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$6$be = 0, $c$6$be$lcssa = 0, $c$6$lcssa = 0, $c$7$be = 0, $c$753 = 0, $c$8 = 0, $c$9$be = 0, $neg$0 = 0, $neg$0$ = 0, $neg$1 = 0, $or$cond = 0, $or$cond12 = 0;
 var $or$cond40 = 0, $or$cond5 = 0, $or$cond7 = 0, $x$082 = 0, $x$146 = 0, $x$266 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($base>>>0)>(36);
 L1: do {
  if ($2) {
   $5 = (___errno_location()|0);
   HEAP32[$5>>2] = 22;
   $286 = 0;$287 = 0;
  } else {
   $3 = ((($f)) + 4|0);
   $4 = ((($f)) + 100|0);
   while(1) {
    $6 = HEAP32[$3>>2]|0;
    $7 = HEAP32[$4>>2]|0;
    $8 = ($6>>>0)<($7>>>0);
    if ($8) {
     $9 = ((($6)) + 1|0);
     HEAP32[$3>>2] = $9;
     $10 = HEAP8[$6>>0]|0;
     $11 = $10&255;
     $13 = $11;
    } else {
     $12 = (___shgetc($f)|0);
     $13 = $12;
    }
    $14 = (_isspace($13)|0);
    $15 = ($14|0)==(0);
    if ($15) {
     $$lcssa135 = $13;
     break;
    }
   }
   $16 = ($$lcssa135|0)==(45);
   L11: do {
    switch ($$lcssa135|0) {
    case 43: case 45:  {
     $17 = $16 << 31 >> 31;
     $18 = HEAP32[$3>>2]|0;
     $19 = HEAP32[$4>>2]|0;
     $20 = ($18>>>0)<($19>>>0);
     if ($20) {
      $21 = ((($18)) + 1|0);
      HEAP32[$3>>2] = $21;
      $22 = HEAP8[$18>>0]|0;
      $23 = $22&255;
      $c$0 = $23;$neg$0 = $17;
      break L11;
     } else {
      $24 = (___shgetc($f)|0);
      $c$0 = $24;$neg$0 = $17;
      break L11;
     }
     break;
    }
    default: {
     $c$0 = $$lcssa135;$neg$0 = 0;
    }
    }
   } while(0);
   $25 = ($base|0)==(0);
   $26 = $base & -17;
   $27 = ($26|0)==(0);
   $28 = ($c$0|0)==(48);
   $or$cond5 = $27 & $28;
   do {
    if ($or$cond5) {
     $29 = HEAP32[$3>>2]|0;
     $30 = HEAP32[$4>>2]|0;
     $31 = ($29>>>0)<($30>>>0);
     if ($31) {
      $32 = ((($29)) + 1|0);
      HEAP32[$3>>2] = $32;
      $33 = HEAP8[$29>>0]|0;
      $34 = $33&255;
      $37 = $34;
     } else {
      $35 = (___shgetc($f)|0);
      $37 = $35;
     }
     $36 = $37 | 32;
     $38 = ($36|0)==(120);
     if (!($38)) {
      if ($25) {
       $$123 = 8;$c$124 = $37;
       label = 46;
       break;
      } else {
       $$1 = $base;$c$1 = $37;
       label = 32;
       break;
      }
     }
     $39 = HEAP32[$3>>2]|0;
     $40 = HEAP32[$4>>2]|0;
     $41 = ($39>>>0)<($40>>>0);
     if ($41) {
      $42 = ((($39)) + 1|0);
      HEAP32[$3>>2] = $42;
      $43 = HEAP8[$39>>0]|0;
      $44 = $43&255;
      $46 = $44;
     } else {
      $45 = (___shgetc($f)|0);
      $46 = $45;
     }
     $$sum20 = (($46) + 1)|0;
     $47 = (33394 + ($$sum20)|0);
     $48 = HEAP8[$47>>0]|0;
     $49 = ($48&255)>(15);
     if ($49) {
      $50 = HEAP32[$4>>2]|0;
      $51 = ($50|0)==(0|0);
      if (!($51)) {
       $52 = HEAP32[$3>>2]|0;
       $53 = ((($52)) + -1|0);
       HEAP32[$3>>2] = $53;
      }
      $54 = ($pok|0)==(0);
      if ($54) {
       ___shlim($f,0);
       $286 = 0;$287 = 0;
       break L1;
      }
      if ($51) {
       $286 = 0;$287 = 0;
       break L1;
      }
      $55 = HEAP32[$3>>2]|0;
      $56 = ((($55)) + -1|0);
      HEAP32[$3>>2] = $56;
      $286 = 0;$287 = 0;
      break L1;
     } else {
      $$123 = 16;$c$124 = $46;
      label = 46;
     }
    } else {
     $$base21 = $25 ? 10 : $base;
     $$sum = (($c$0) + 1)|0;
     $57 = (33394 + ($$sum)|0);
     $58 = HEAP8[$57>>0]|0;
     $59 = $58&255;
     $60 = ($59>>>0)<($$base21>>>0);
     if ($60) {
      $$1 = $$base21;$c$1 = $c$0;
      label = 32;
     } else {
      $61 = HEAP32[$4>>2]|0;
      $62 = ($61|0)==(0|0);
      if (!($62)) {
       $63 = HEAP32[$3>>2]|0;
       $64 = ((($63)) + -1|0);
       HEAP32[$3>>2] = $64;
      }
      ___shlim($f,0);
      $65 = (___errno_location()|0);
      HEAP32[$65>>2] = 22;
      $286 = 0;$287 = 0;
      break L1;
     }
    }
   } while(0);
   if ((label|0) == 32) {
    $66 = ($$1|0)==(10);
    if ($66) {
     $67 = (($c$1) + -48)|0;
     $68 = ($67>>>0)<(10);
     if ($68) {
      $71 = $67;$x$082 = 0;
      while(1) {
       $69 = ($x$082*10)|0;
       $70 = (($69) + ($71))|0;
       $72 = HEAP32[$3>>2]|0;
       $73 = HEAP32[$4>>2]|0;
       $74 = ($72>>>0)<($73>>>0);
       if ($74) {
        $75 = ((($72)) + 1|0);
        HEAP32[$3>>2] = $75;
        $76 = HEAP8[$72>>0]|0;
        $77 = $76&255;
        $c$2$be = $77;
       } else {
        $78 = (___shgetc($f)|0);
        $c$2$be = $78;
       }
       $79 = (($c$2$be) + -48)|0;
       $80 = ($79>>>0)<(10);
       $81 = ($70>>>0)<(429496729);
       $82 = $80 & $81;
       if ($82) {
        $71 = $79;$x$082 = $70;
       } else {
        $$lcssa134 = $70;$c$2$be$lcssa = $c$2$be;
        break;
       }
      }
      $288 = $$lcssa134;$289 = 0;$c$2$lcssa = $c$2$be$lcssa;
     } else {
      $288 = 0;$289 = 0;$c$2$lcssa = $c$1;
     }
     $83 = (($c$2$lcssa) + -48)|0;
     $84 = ($83>>>0)<(10);
     if ($84) {
      $85 = $288;$86 = $289;$89 = $83;$c$371 = $c$2$lcssa;
      while(1) {
       $87 = (___muldi3(($85|0),($86|0),10,0)|0);
       $88 = tempRet0;
       $90 = ($89|0)<(0);
       $91 = $90 << 31 >> 31;
       $92 = $89 ^ -1;
       $93 = $91 ^ -1;
       $94 = ($88>>>0)>($93>>>0);
       $95 = ($87>>>0)>($92>>>0);
       $96 = ($88|0)==($93|0);
       $97 = $96 & $95;
       $98 = $94 | $97;
       if ($98) {
        $$lcssa = $89;$290 = $85;$291 = $86;$c$3$lcssa = $c$371;
        break;
       }
       $99 = (_i64Add(($87|0),($88|0),($89|0),($91|0))|0);
       $100 = tempRet0;
       $101 = HEAP32[$3>>2]|0;
       $102 = HEAP32[$4>>2]|0;
       $103 = ($101>>>0)<($102>>>0);
       if ($103) {
        $104 = ((($101)) + 1|0);
        HEAP32[$3>>2] = $104;
        $105 = HEAP8[$101>>0]|0;
        $106 = $105&255;
        $c$3$be = $106;
       } else {
        $107 = (___shgetc($f)|0);
        $c$3$be = $107;
       }
       $108 = (($c$3$be) + -48)|0;
       $109 = ($108>>>0)<(10);
       $110 = ($100>>>0)<(429496729);
       $111 = ($99>>>0)<(2576980378);
       $112 = ($100|0)==(429496729);
       $113 = $112 & $111;
       $114 = $110 | $113;
       $or$cond7 = $109 & $114;
       if ($or$cond7) {
        $85 = $99;$86 = $100;$89 = $108;$c$371 = $c$3$be;
       } else {
        $$lcssa = $108;$290 = $99;$291 = $100;$c$3$lcssa = $c$3$be;
        break;
       }
      }
      $115 = ($$lcssa>>>0)>(9);
      if ($115) {
       $259 = $291;$261 = $290;$neg$1 = $neg$0;
      } else {
       $$122 = 10;$292 = $290;$293 = $291;$c$8 = $c$3$lcssa;
       label = 72;
      }
     } else {
      $259 = $289;$261 = $288;$neg$1 = $neg$0;
     }
    } else {
     $$123 = $$1;$c$124 = $c$1;
     label = 46;
    }
   }
   L63: do {
    if ((label|0) == 46) {
     $116 = (($$123) + -1)|0;
     $117 = $116 & $$123;
     $118 = ($117|0)==(0);
     if ($118) {
      $123 = ($$123*23)|0;
      $124 = $123 >>> 5;
      $125 = $124 & 7;
      $126 = (33651 + ($125)|0);
      $127 = HEAP8[$126>>0]|0;
      $128 = $127 << 24 >> 24;
      $$sum1445 = (($c$124) + 1)|0;
      $129 = (33394 + ($$sum1445)|0);
      $130 = HEAP8[$129>>0]|0;
      $131 = $130&255;
      $132 = ($131>>>0)<($$123>>>0);
      if ($132) {
       $135 = $131;$x$146 = 0;
       while(1) {
        $133 = $x$146 << $128;
        $134 = $135 | $133;
        $136 = HEAP32[$3>>2]|0;
        $137 = HEAP32[$4>>2]|0;
        $138 = ($136>>>0)<($137>>>0);
        if ($138) {
         $139 = ((($136)) + 1|0);
         HEAP32[$3>>2] = $139;
         $140 = HEAP8[$136>>0]|0;
         $141 = $140&255;
         $c$4$be = $141;
        } else {
         $142 = (___shgetc($f)|0);
         $c$4$be = $142;
        }
        $$sum14 = (($c$4$be) + 1)|0;
        $143 = (33394 + ($$sum14)|0);
        $144 = HEAP8[$143>>0]|0;
        $145 = $144&255;
        $146 = ($145>>>0)<($$123>>>0);
        $147 = ($134>>>0)<(134217728);
        $148 = $147 & $146;
        if ($148) {
         $135 = $145;$x$146 = $134;
        } else {
         $$lcssa130 = $134;$$lcssa131 = $144;$c$4$be$lcssa = $c$4$be;
         break;
        }
       }
       $152 = $$lcssa131;$154 = 0;$156 = $$lcssa130;$c$4$lcssa = $c$4$be$lcssa;
      } else {
       $152 = $130;$154 = 0;$156 = 0;$c$4$lcssa = $c$124;
      }
      $149 = (_bitshift64Lshr(-1,-1,($128|0))|0);
      $150 = tempRet0;
      $151 = $152&255;
      $153 = ($151>>>0)>=($$123>>>0);
      $155 = ($154>>>0)>($150>>>0);
      $157 = ($156>>>0)>($149>>>0);
      $158 = ($154|0)==($150|0);
      $159 = $158 & $157;
      $160 = $155 | $159;
      $or$cond40 = $153 | $160;
      if ($or$cond40) {
       $$122 = $$123;$292 = $156;$293 = $154;$c$8 = $c$4$lcssa;
       label = 72;
       break;
      } else {
       $161 = $156;$162 = $154;$166 = $152;
      }
      while(1) {
       $163 = (_bitshift64Shl(($161|0),($162|0),($128|0))|0);
       $164 = tempRet0;
       $165 = $166&255;
       $167 = $165 | $163;
       $168 = HEAP32[$3>>2]|0;
       $169 = HEAP32[$4>>2]|0;
       $170 = ($168>>>0)<($169>>>0);
       if ($170) {
        $171 = ((($168)) + 1|0);
        HEAP32[$3>>2] = $171;
        $172 = HEAP8[$168>>0]|0;
        $173 = $172&255;
        $c$5$be = $173;
       } else {
        $174 = (___shgetc($f)|0);
        $c$5$be = $174;
       }
       $$sum15 = (($c$5$be) + 1)|0;
       $175 = (33394 + ($$sum15)|0);
       $176 = HEAP8[$175>>0]|0;
       $177 = $176&255;
       $178 = ($177>>>0)>=($$123>>>0);
       $179 = ($164>>>0)>($150>>>0);
       $180 = ($167>>>0)>($149>>>0);
       $181 = ($164|0)==($150|0);
       $182 = $181 & $180;
       $183 = $179 | $182;
       $or$cond = $178 | $183;
       if ($or$cond) {
        $$122 = $$123;$292 = $167;$293 = $164;$c$8 = $c$5$be;
        label = 72;
        break L63;
       } else {
        $161 = $167;$162 = $164;$166 = $176;
       }
      }
     }
     $$sum1865 = (($c$124) + 1)|0;
     $119 = (33394 + ($$sum1865)|0);
     $120 = HEAP8[$119>>0]|0;
     $121 = $120&255;
     $122 = ($121>>>0)<($$123>>>0);
     if ($122) {
      $186 = $121;$x$266 = 0;
      while(1) {
       $184 = Math_imul($x$266, $$123)|0;
       $185 = (($186) + ($184))|0;
       $187 = HEAP32[$3>>2]|0;
       $188 = HEAP32[$4>>2]|0;
       $189 = ($187>>>0)<($188>>>0);
       if ($189) {
        $190 = ((($187)) + 1|0);
        HEAP32[$3>>2] = $190;
        $191 = HEAP8[$187>>0]|0;
        $192 = $191&255;
        $c$6$be = $192;
       } else {
        $193 = (___shgetc($f)|0);
        $c$6$be = $193;
       }
       $$sum18 = (($c$6$be) + 1)|0;
       $194 = (33394 + ($$sum18)|0);
       $195 = HEAP8[$194>>0]|0;
       $196 = $195&255;
       $197 = ($196>>>0)<($$123>>>0);
       $198 = ($185>>>0)<(119304647);
       $199 = $198 & $197;
       if ($199) {
        $186 = $196;$x$266 = $185;
       } else {
        $$lcssa132 = $185;$$lcssa133 = $195;$c$6$be$lcssa = $c$6$be;
        break;
       }
      }
      $201 = $$lcssa133;$294 = $$lcssa132;$295 = 0;$c$6$lcssa = $c$6$be$lcssa;
     } else {
      $201 = $120;$294 = 0;$295 = 0;$c$6$lcssa = $c$124;
     }
     $200 = $201&255;
     $202 = ($200>>>0)<($$123>>>0);
     if ($202) {
      $203 = (___udivdi3(-1,-1,($$123|0),0)|0);
      $204 = tempRet0;
      $205 = $295;$207 = $294;$215 = $201;$c$753 = $c$6$lcssa;
      while(1) {
       $206 = ($205>>>0)>($204>>>0);
       $208 = ($207>>>0)>($203>>>0);
       $209 = ($205|0)==($204|0);
       $210 = $209 & $208;
       $211 = $206 | $210;
       if ($211) {
        $$122 = $$123;$292 = $207;$293 = $205;$c$8 = $c$753;
        label = 72;
        break L63;
       }
       $212 = (___muldi3(($207|0),($205|0),($$123|0),0)|0);
       $213 = tempRet0;
       $214 = $215&255;
       $216 = $214 ^ -1;
       $217 = ($213>>>0)>(4294967295);
       $218 = ($212>>>0)>($216>>>0);
       $219 = ($213|0)==(-1);
       $220 = $219 & $218;
       $221 = $217 | $220;
       if ($221) {
        $$122 = $$123;$292 = $207;$293 = $205;$c$8 = $c$753;
        label = 72;
        break L63;
       }
       $222 = (_i64Add(($214|0),0,($212|0),($213|0))|0);
       $223 = tempRet0;
       $224 = HEAP32[$3>>2]|0;
       $225 = HEAP32[$4>>2]|0;
       $226 = ($224>>>0)<($225>>>0);
       if ($226) {
        $227 = ((($224)) + 1|0);
        HEAP32[$3>>2] = $227;
        $228 = HEAP8[$224>>0]|0;
        $229 = $228&255;
        $c$7$be = $229;
       } else {
        $230 = (___shgetc($f)|0);
        $c$7$be = $230;
       }
       $$sum19 = (($c$7$be) + 1)|0;
       $231 = (33394 + ($$sum19)|0);
       $232 = HEAP8[$231>>0]|0;
       $233 = $232&255;
       $234 = ($233>>>0)<($$123>>>0);
       if ($234) {
        $205 = $223;$207 = $222;$215 = $232;$c$753 = $c$7$be;
       } else {
        $$122 = $$123;$292 = $222;$293 = $223;$c$8 = $c$7$be;
        label = 72;
        break;
       }
      }
     } else {
      $$122 = $$123;$292 = $294;$293 = $295;$c$8 = $c$6$lcssa;
      label = 72;
     }
    }
   } while(0);
   if ((label|0) == 72) {
    $$sum16 = (($c$8) + 1)|0;
    $235 = (33394 + ($$sum16)|0);
    $236 = HEAP8[$235>>0]|0;
    $237 = $236&255;
    $238 = ($237>>>0)<($$122>>>0);
    if ($238) {
     while(1) {
      $239 = HEAP32[$3>>2]|0;
      $240 = HEAP32[$4>>2]|0;
      $241 = ($239>>>0)<($240>>>0);
      if ($241) {
       $242 = ((($239)) + 1|0);
       HEAP32[$3>>2] = $242;
       $243 = HEAP8[$239>>0]|0;
       $244 = $243&255;
       $c$9$be = $244;
      } else {
       $245 = (___shgetc($f)|0);
       $c$9$be = $245;
      }
      $$sum17 = (($c$9$be) + 1)|0;
      $246 = (33394 + ($$sum17)|0);
      $247 = HEAP8[$246>>0]|0;
      $248 = $247&255;
      $249 = ($248>>>0)<($$122>>>0);
      if (!($249)) {
       break;
      }
     }
     $250 = (___errno_location()|0);
     HEAP32[$250>>2] = 34;
     $251 = $0 & 1;
     $252 = ($251|0)==(0);
     $253 = (0)==(0);
     $254 = $252 & $253;
     $neg$0$ = $254 ? $neg$0 : 0;
     $259 = $1;$261 = $0;$neg$1 = $neg$0$;
    } else {
     $259 = $293;$261 = $292;$neg$1 = $neg$0;
    }
   }
   $255 = HEAP32[$4>>2]|0;
   $256 = ($255|0)==(0|0);
   if (!($256)) {
    $257 = HEAP32[$3>>2]|0;
    $258 = ((($257)) + -1|0);
    HEAP32[$3>>2] = $258;
   }
   $260 = ($259>>>0)<($1>>>0);
   $262 = ($261>>>0)<($0>>>0);
   $263 = ($259|0)==($1|0);
   $264 = $263 & $262;
   $265 = $260 | $264;
   if (!($265)) {
    $266 = $0 & 1;
    $267 = ($266|0)!=(0);
    $268 = (0)!=(0);
    $269 = $267 | $268;
    $270 = ($neg$1|0)!=(0);
    $or$cond12 = $269 | $270;
    if (!($or$cond12)) {
     $271 = (___errno_location()|0);
     HEAP32[$271>>2] = 34;
     $272 = (_i64Add(($0|0),($1|0),-1,-1)|0);
     $273 = tempRet0;
     $286 = $273;$287 = $272;
     break;
    }
    $274 = ($259>>>0)>($1>>>0);
    $275 = ($261>>>0)>($0>>>0);
    $276 = ($259|0)==($1|0);
    $277 = $276 & $275;
    $278 = $274 | $277;
    if ($278) {
     $279 = (___errno_location()|0);
     HEAP32[$279>>2] = 34;
     $286 = $1;$287 = $0;
     break;
    }
   }
   $280 = ($neg$1|0)<(0);
   $281 = $280 << 31 >> 31;
   $282 = $261 ^ $neg$1;
   $283 = $259 ^ $281;
   $284 = (_i64Subtract(($282|0),($283|0),($neg$1|0),($281|0))|0);
   $285 = tempRet0;
   $286 = $285;$287 = $284;
  }
 } while(0);
 tempRet0 = ($286);
 return ($287|0);
}
function _stat($path,$buf) {
 $path = $path|0;
 $buf = $buf|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $path;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $buf;
 $0 = (___syscall195(195,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _atoi($s) {
 $s = $s|0;
 var $$0 = 0, $$0$lcssa = 0, $$1$ph = 0, $$13 = 0, $$lcssa9 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit2 = 0, $isdigittmp = 0, $isdigittmp1 = 0, $isdigittmp5 = 0, $n$0$lcssa = 0, $n$04 = 0, $neg$0 = 0, $neg$1$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $s;
 while(1) {
  $0 = HEAP8[$$0>>0]|0;
  $1 = $0 << 24 >> 24;
  $2 = (_isspace($1)|0);
  $3 = ($2|0)==(0);
  $4 = ((($$0)) + 1|0);
  if ($3) {
   $$0$lcssa = $$0;$$lcssa9 = $4;
   break;
  } else {
   $$0 = $4;
  }
 }
 $5 = HEAP8[$$0$lcssa>>0]|0;
 $6 = $5 << 24 >> 24;
 switch ($6|0) {
 case 45:  {
  $neg$0 = 1;
  label = 5;
  break;
 }
 case 43:  {
  $neg$0 = 0;
  label = 5;
  break;
 }
 default: {
  $$1$ph = $$0$lcssa;$8 = $5;$neg$1$ph = 0;
 }
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$$lcssa9>>0]|0;
  $$1$ph = $$lcssa9;$8 = $$pre;$neg$1$ph = $neg$0;
 }
 $7 = $8 << 24 >> 24;
 $isdigittmp1 = (($7) + -48)|0;
 $isdigit2 = ($isdigittmp1>>>0)<(10);
 if ($isdigit2) {
  $$13 = $$1$ph;$isdigittmp5 = $isdigittmp1;$n$04 = 0;
  while(1) {
   $9 = ($n$04*10)|0;
   $10 = ((($$13)) + 1|0);
   $11 = (($9) - ($isdigittmp5))|0;
   $12 = HEAP8[$10>>0]|0;
   $13 = $12 << 24 >> 24;
   $isdigittmp = (($13) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   if ($isdigit) {
    $$13 = $10;$isdigittmp5 = $isdigittmp;$n$04 = $11;
   } else {
    $n$0$lcssa = $11;
    break;
   }
  }
 } else {
  $n$0$lcssa = 0;
 }
 $14 = ($neg$1$ph|0)!=(0);
 $15 = (0 - ($n$0$lcssa))|0;
 $16 = $14 ? $n$0$lcssa : $15;
 return ($16|0);
}
function _strtol($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtox($s,$p,$base,-2147483648,0)|0);
 $1 = tempRet0;
 return ($0|0);
}
function _init_mparams() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[10692>>2]|0;
 $1 = ($0|0)==(0);
 do {
  if ($1) {
   $2 = (_sysconf(30)|0);
   $3 = (($2) + -1)|0;
   $4 = $3 & $2;
   $5 = ($4|0)==(0);
   if ($5) {
    HEAP32[(10700)>>2] = $2;
    HEAP32[(10696)>>2] = $2;
    HEAP32[(10704)>>2] = -1;
    HEAP32[(10708)>>2] = -1;
    HEAP32[(10712)>>2] = 0;
    HEAP32[(10664)>>2] = 0;
    $6 = (_time((0|0))|0);
    $7 = $6 & -16;
    $8 = $7 ^ 1431655768;
    HEAP32[10692>>2] = $8;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 return;
}
function ___fflush_unlocked($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)>($3>>>0);
 if ($4) {
  $5 = ((($f)) + 36|0);
  $6 = HEAP32[$5>>2]|0;
  (FUNCTION_TABLE_iiii[$6 & 255]($f,0,0)|0);
  $7 = HEAP32[$0>>2]|0;
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $9 = ((($f)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($f)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($10>>>0)<($12>>>0);
  if ($13) {
   $14 = ((($f)) + 40|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $10;
   $17 = $12;
   $18 = (($16) - ($17))|0;
   (FUNCTION_TABLE_iiii[$15 & 255]($f,$18,1)|0);
  }
  $19 = ((($f)) + 16|0);
  HEAP32[$19>>2] = 0;
  HEAP32[$2>>2] = 0;
  HEAP32[$0>>2] = 0;
  HEAP32[$11>>2] = 0;
  HEAP32[$9>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _cleanup367($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  ___unlockfile($p);
 }
 return;
}
function _cleanup425($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  ___unlockfile($p);
 }
 return;
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$012$i = 0, $$013$i = 0, $$03$i33 = 0, $$07$i = 0.0, $$1$i = 0.0, $$114$i = 0, $$2$i = 0.0, $$20$i = 0.0, $$21$i = 0, $$210$$22$i = 0, $$210$$24$i = 0, $$210$i = 0, $$23$i = 0, $$3$i = 0.0, $$31$i = 0;
 var $$311$i = 0, $$4$i = 0.0, $$412$lcssa$i = 0, $$41276$i = 0, $$43 = 0, $$5$lcssa$i = 0, $$587$i = 0, $$a$3$i = 0, $$a$3185$i = 0, $$a$3186$i = 0, $$fl$4 = 0, $$l10n$0 = 0, $$lcssa159$i = 0, $$lcssa321 = 0, $$lcssa322 = 0, $$lcssa326 = 0, $$lcssa328 = 0, $$lcssa329 = 0, $$lcssa330 = 0, $$lcssa331 = 0;
 var $$lcssa332 = 0, $$lcssa334 = 0, $$lcssa344 = 0, $$lcssa347 = 0.0, $$lcssa349 = 0, $$lcssa52 = 0, $$neg52$i = 0, $$neg53$i = 0, $$p$$i = 0, $$p$0 = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0, $$pr47$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi184$iZ2D = 0, $$pre179$i = 0, $$pre182$i = 0;
 var $$pre183$i = 0, $$pre190 = 0, $$sum$i = 0, $$sum15$i = 0, $$sum16$i = 0, $$z$3$i = 0, $$z$4$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
 var $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0;
 var $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0;
 var $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0;
 var $362 = 0, $363 = 0, $364 = 0.0, $365 = 0, $366 = 0, $367 = 0, $368 = 0.0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0;
 var $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0.0, $397 = 0.0, $398 = 0;
 var $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0.0, $413 = 0, $414 = 0, $415 = 0;
 var $416 = 0.0, $417 = 0.0, $418 = 0.0, $419 = 0.0, $42 = 0, $420 = 0.0, $421 = 0.0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0;
 var $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0.0, $448 = 0.0, $449 = 0.0, $45 = 0, $450 = 0, $451 = 0;
 var $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0;
 var $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0.0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0;
 var $489 = 0, $49 = 0, $490 = 0.0, $491 = 0.0, $492 = 0.0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0;
 var $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0;
 var $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0;
 var $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0;
 var $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0;
 var $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0;
 var $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0.0, $602 = 0.0, $603 = 0, $604 = 0.0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0;
 var $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0;
 var $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0;
 var $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0;
 var $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0;
 var $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0;
 var $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0;
 var $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0;
 var $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0;
 var $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0;
 var $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0;
 var $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1147$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3134$i = 0, $a$5$lcssa$i = 0, $a$5109$i = 0;
 var $a$6$i = 0, $a$7$i = 0, $a$8$ph$i = 0, $arg = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0140$i = 0, $carry3$0128$i = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$1$lcssa = 0, $d$0$i = 0, $d$0139$i = 0, $d$0141$i = 0;
 var $d$1127$i = 0, $d$2$lcssa$i = 0, $d$2108$i = 0, $d$3$i = 0, $d$482$i = 0, $d$575$i = 0, $d$686$i = 0, $e$0123$i = 0, $e$1$i = 0, $e$2104$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$193$i = 0, $estr$2$i = 0, $exitcond$i = 0, $expanded = 0;
 var $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $fl$0103 = 0, $fl$056 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $i$0$lcssa = 0, $i$0$lcssa197 = 0, $i$0108 = 0, $i$0122$i = 0;
 var $i$03$i = 0, $i$03$i25 = 0, $i$1$lcssa$i = 0, $i$1116$i = 0, $i$1119 = 0, $i$2103$i = 0, $i$295 = 0, $i$295$lcssa = 0, $i$393 = 0, $i$399$i = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i27 = 0, $isdigit10 = 0, $isdigit12 = 0, $isdigit2$i = 0, $isdigit2$i23 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0;
 var $isdigittmp$i26 = 0, $isdigittmp1$i = 0, $isdigittmp1$i22 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i24 = 0, $isdigittmp9 = 0, $j$0$i = 0, $j$0115$i = 0, $j$0117$i = 0, $j$1100$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1107 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$lcssa = 0, $l10n$0$phi = 0;
 var $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $notlhs$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond20 = 0, $or$cond239 = 0, $or$cond29$i = 0, $or$cond3$not$i = 0, $or$cond6$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$3 = 0;
 var $p$4195 = 0, $p$5 = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$169$i = 0, $round$068$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$1$i = 0, $s$1$i$lcssa = 0, $s1$0$i = 0;
 var $s7$079$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$070$i = 0, $s9$0$i = 0, $s9$183$i = 0, $s9$2$i = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $st$0$lcssa327 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge8102 = 0, $storemerge854 = 0, $sum = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0;
 var $w$1 = 0, $w$2 = 0, $w$30$i = 0, $wc = 0, $ws$0109 = 0, $ws$1120 = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$096 = 0, $z$1 = 0, $z$1$lcssa$i = 0, $z$1146$i = 0, $z$2 = 0, $z$2$i = 0, $z$2$i$lcssa = 0, $z$3$lcssa$i = 0, $z$3133$i = 0, $z$4$i = 0, $z$6$$i = 0, $z$6$i = 0;
 var $z$6$i$lcssa = 0, $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $big$i = sp + 24|0;
 $e2$i = sp + 16|0;
 $buf$i = sp + 588|0;
 $ebuf0$i = sp + 576|0;
 $arg = sp;
 $buf = sp + 536|0;
 $wc = sp + 8|0;
 $mb = sp + 528|0;
 $0 = ($f|0)!=(0|0);
 $1 = ((($buf)) + 40|0);
 $2 = $1;
 $3 = ((($buf)) + 39|0);
 $4 = ((($wc)) + 4|0);
 $5 = ((($ebuf0$i)) + 12|0);
 $6 = ((($ebuf0$i)) + 11|0);
 $7 = $buf$i;
 $8 = $5;
 $9 = (($8) - ($7))|0;
 $10 = (-2 - ($7))|0;
 $11 = (($8) + 2)|0;
 $12 = ((($big$i)) + 288|0);
 $13 = ((($buf$i)) + 9|0);
 $14 = $13;
 $15 = ((($buf$i)) + 8|0);
 $22 = $fmt;$cnt$0 = 0;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $16 = ($cnt$0|0)>(-1);
  do {
   if ($16) {
    $17 = (2147483647 - ($cnt$0))|0;
    $18 = ($l$0|0)>($17|0);
    if ($18) {
     $19 = (___errno_location()|0);
     HEAP32[$19>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $20 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $20;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $21 = HEAP8[$22>>0]|0;
  $23 = ($21<<24>>24)==(0);
  if ($23) {
   $cnt$1$lcssa = $cnt$1;$l10n$0$lcssa = $l10n$0;
   label = 245;
   break;
  } else {
   $24 = $21;$26 = $22;
  }
  L9: while(1) {
   switch ($24<<24>>24) {
   case 37:  {
    $28 = $26;$z$096 = $26;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $$lcssa52 = $26;$z$0$lcssa = $26;
    break L9;
    break;
   }
   default: {
   }
   }
   $25 = ((($26)) + 1|0);
   $$pre = HEAP8[$25>>0]|0;
   $24 = $$pre;$26 = $25;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $27 = ((($28)) + 1|0);
     $29 = HEAP8[$27>>0]|0;
     $30 = ($29<<24>>24)==(37);
     if (!($30)) {
      $$lcssa52 = $28;$z$0$lcssa = $z$096;
      break L12;
     }
     $31 = ((($z$096)) + 1|0);
     $32 = ((($28)) + 2|0);
     $33 = HEAP8[$32>>0]|0;
     $34 = ($33<<24>>24)==(37);
     if ($34) {
      $28 = $32;$z$096 = $31;
      label = 9;
     } else {
      $$lcssa52 = $32;$z$0$lcssa = $31;
      break;
     }
    }
   }
  } while(0);
  $35 = $z$0$lcssa;
  $36 = $22;
  $37 = (($35) - ($36))|0;
  if ($0) {
   $38 = HEAP32[$f>>2]|0;
   $39 = $38 & 32;
   $40 = ($39|0)==(0);
   if ($40) {
    (___fwritex($22,$37,$f)|0);
   }
  }
  $41 = ($z$0$lcssa|0)==($22|0);
  if (!($41)) {
   $l10n$0$phi = $l10n$0;$22 = $$lcssa52;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$0$phi;
   continue;
  }
  $42 = ((($$lcssa52)) + 1|0);
  $43 = HEAP8[$42>>0]|0;
  $44 = $43 << 24 >> 24;
  $isdigittmp = (($44) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $45 = ((($$lcssa52)) + 2|0);
   $46 = HEAP8[$45>>0]|0;
   $47 = ($46<<24>>24)==(36);
   $48 = ((($$lcssa52)) + 3|0);
   $$43 = $47 ? $48 : $42;
   $$l10n$0 = $47 ? 1 : $l10n$0;
   $isdigittmp$ = $47 ? $isdigittmp : -1;
   $$pre190 = HEAP8[$$43>>0]|0;
   $50 = $$pre190;$argpos$0 = $isdigittmp$;$l10n$1 = $$l10n$0;$storemerge = $$43;
  } else {
   $50 = $43;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $42;
  }
  $49 = $50 << 24 >> 24;
  $51 = $49 & -32;
  $52 = ($51|0)==(32);
  L25: do {
   if ($52) {
    $54 = $49;$59 = $50;$fl$0103 = 0;$storemerge8102 = $storemerge;
    while(1) {
     $53 = (($54) + -32)|0;
     $55 = 1 << $53;
     $56 = $55 & 75913;
     $57 = ($56|0)==(0);
     if ($57) {
      $68 = $59;$fl$056 = $fl$0103;$storemerge854 = $storemerge8102;
      break L25;
     }
     $58 = $59 << 24 >> 24;
     $60 = (($58) + -32)|0;
     $61 = 1 << $60;
     $62 = $61 | $fl$0103;
     $63 = ((($storemerge8102)) + 1|0);
     $64 = HEAP8[$63>>0]|0;
     $65 = $64 << 24 >> 24;
     $66 = $65 & -32;
     $67 = ($66|0)==(32);
     if ($67) {
      $54 = $65;$59 = $64;$fl$0103 = $62;$storemerge8102 = $63;
     } else {
      $68 = $64;$fl$056 = $62;$storemerge854 = $63;
      break;
     }
    }
   } else {
    $68 = $50;$fl$056 = 0;$storemerge854 = $storemerge;
   }
  } while(0);
  $69 = ($68<<24>>24)==(42);
  do {
   if ($69) {
    $70 = ((($storemerge854)) + 1|0);
    $71 = HEAP8[$70>>0]|0;
    $72 = $71 << 24 >> 24;
    $isdigittmp11 = (($72) + -48)|0;
    $isdigit12 = ($isdigittmp11>>>0)<(10);
    if ($isdigit12) {
     $73 = ((($storemerge854)) + 2|0);
     $74 = HEAP8[$73>>0]|0;
     $75 = ($74<<24>>24)==(36);
     if ($75) {
      $76 = (($nl_type) + ($isdigittmp11<<2)|0);
      HEAP32[$76>>2] = 10;
      $77 = HEAP8[$70>>0]|0;
      $78 = $77 << 24 >> 24;
      $79 = (($78) + -48)|0;
      $80 = (($nl_arg) + ($79<<3)|0);
      $81 = $80;
      $82 = $81;
      $83 = HEAP32[$82>>2]|0;
      $84 = (($81) + 4)|0;
      $85 = $84;
      $86 = HEAP32[$85>>2]|0;
      $87 = ((($storemerge854)) + 3|0);
      $l10n$2 = 1;$storemerge13 = $87;$w$0 = $83;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $88 = ($l10n$1|0)==(0);
     if (!($88)) {
      $$0 = -1;
      break L1;
     }
     if (!($0)) {
      $108 = $70;$fl$1 = $fl$056;$l10n$3 = 0;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $89 = $arglist_current;
     $90 = ((0) + 4|0);
     $expanded4 = $90;
     $expanded = (($expanded4) - 1)|0;
     $91 = (($89) + ($expanded))|0;
     $92 = ((0) + 4|0);
     $expanded8 = $92;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $93 = $91 & $expanded6;
     $94 = $93;
     $95 = HEAP32[$94>>2]|0;
     $arglist_next = ((($94)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge13 = $70;$w$0 = $95;
    }
    $96 = ($w$0|0)<(0);
    if ($96) {
     $97 = $fl$056 | 8192;
     $98 = (0 - ($w$0))|0;
     $108 = $storemerge13;$fl$1 = $97;$l10n$3 = $l10n$2;$w$1 = $98;
    } else {
     $108 = $storemerge13;$fl$1 = $fl$056;$l10n$3 = $l10n$2;$w$1 = $w$0;
    }
   } else {
    $99 = $68 << 24 >> 24;
    $isdigittmp1$i = (($99) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    if ($isdigit2$i) {
     $103 = $storemerge854;$i$03$i = 0;$isdigittmp4$i = $isdigittmp1$i;
     while(1) {
      $100 = ($i$03$i*10)|0;
      $101 = (($100) + ($isdigittmp4$i))|0;
      $102 = ((($103)) + 1|0);
      $104 = HEAP8[$102>>0]|0;
      $105 = $104 << 24 >> 24;
      $isdigittmp$i = (($105) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $103 = $102;$i$03$i = $101;$isdigittmp4$i = $isdigittmp$i;
      } else {
       $$lcssa321 = $101;$$lcssa322 = $102;
       break;
      }
     }
     $106 = ($$lcssa321|0)<(0);
     if ($106) {
      $$0 = -1;
      break L1;
     } else {
      $108 = $$lcssa322;$fl$1 = $fl$056;$l10n$3 = $l10n$1;$w$1 = $$lcssa321;
     }
    } else {
     $108 = $storemerge854;$fl$1 = $fl$056;$l10n$3 = $l10n$1;$w$1 = 0;
    }
   }
  } while(0);
  $107 = HEAP8[$108>>0]|0;
  $109 = ($107<<24>>24)==(46);
  L46: do {
   if ($109) {
    $110 = ((($108)) + 1|0);
    $111 = HEAP8[$110>>0]|0;
    $112 = ($111<<24>>24)==(42);
    if (!($112)) {
     $139 = $111 << 24 >> 24;
     $isdigittmp1$i22 = (($139) + -48)|0;
     $isdigit2$i23 = ($isdigittmp1$i22>>>0)<(10);
     if ($isdigit2$i23) {
      $143 = $110;$i$03$i25 = 0;$isdigittmp4$i24 = $isdigittmp1$i22;
     } else {
      $802 = $110;$p$0 = 0;
      break;
     }
     while(1) {
      $140 = ($i$03$i25*10)|0;
      $141 = (($140) + ($isdigittmp4$i24))|0;
      $142 = ((($143)) + 1|0);
      $144 = HEAP8[$142>>0]|0;
      $145 = $144 << 24 >> 24;
      $isdigittmp$i26 = (($145) + -48)|0;
      $isdigit$i27 = ($isdigittmp$i26>>>0)<(10);
      if ($isdigit$i27) {
       $143 = $142;$i$03$i25 = $141;$isdigittmp4$i24 = $isdigittmp$i26;
      } else {
       $802 = $142;$p$0 = $141;
       break L46;
      }
     }
    }
    $113 = ((($108)) + 2|0);
    $114 = HEAP8[$113>>0]|0;
    $115 = $114 << 24 >> 24;
    $isdigittmp9 = (($115) + -48)|0;
    $isdigit10 = ($isdigittmp9>>>0)<(10);
    if ($isdigit10) {
     $116 = ((($108)) + 3|0);
     $117 = HEAP8[$116>>0]|0;
     $118 = ($117<<24>>24)==(36);
     if ($118) {
      $119 = (($nl_type) + ($isdigittmp9<<2)|0);
      HEAP32[$119>>2] = 10;
      $120 = HEAP8[$113>>0]|0;
      $121 = $120 << 24 >> 24;
      $122 = (($121) + -48)|0;
      $123 = (($nl_arg) + ($122<<3)|0);
      $124 = $123;
      $125 = $124;
      $126 = HEAP32[$125>>2]|0;
      $127 = (($124) + 4)|0;
      $128 = $127;
      $129 = HEAP32[$128>>2]|0;
      $130 = ((($108)) + 4|0);
      $802 = $130;$p$0 = $126;
      break;
     }
    }
    $131 = ($l10n$3|0)==(0);
    if (!($131)) {
     $$0 = -1;
     break L1;
    }
    if ($0) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $132 = $arglist_current2;
     $133 = ((0) + 4|0);
     $expanded11 = $133;
     $expanded10 = (($expanded11) - 1)|0;
     $134 = (($132) + ($expanded10))|0;
     $135 = ((0) + 4|0);
     $expanded15 = $135;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $136 = $134 & $expanded13;
     $137 = $136;
     $138 = HEAP32[$137>>2]|0;
     $arglist_next3 = ((($137)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $802 = $113;$p$0 = $138;
    } else {
     $802 = $113;$p$0 = 0;
    }
   } else {
    $802 = $108;$p$0 = -1;
   }
  } while(0);
  $147 = $802;$st$0 = 0;
  while(1) {
   $146 = HEAP8[$147>>0]|0;
   $148 = $146 << 24 >> 24;
   $149 = (($148) + -65)|0;
   $150 = ($149>>>0)>(57);
   if ($150) {
    $$0 = -1;
    break L1;
   }
   $151 = ((($147)) + 1|0);
   $152 = ((34700 + (($st$0*58)|0)|0) + ($149)|0);
   $153 = HEAP8[$152>>0]|0;
   $154 = $153&255;
   $155 = (($154) + -1)|0;
   $156 = ($155>>>0)<(8);
   if ($156) {
    $147 = $151;$st$0 = $154;
   } else {
    $$lcssa326 = $147;$$lcssa328 = $151;$$lcssa329 = $153;$$lcssa330 = $154;$st$0$lcssa327 = $st$0;
    break;
   }
  }
  $157 = ($$lcssa329<<24>>24)==(0);
  if ($157) {
   $$0 = -1;
   break;
  }
  $158 = ($$lcssa329<<24>>24)==(19);
  $159 = ($argpos$0|0)>(-1);
  do {
   if ($158) {
    if ($159) {
     $$0 = -1;
     break L1;
    } else {
     label = 52;
    }
   } else {
    if ($159) {
     $160 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$160>>2] = $$lcssa330;
     $161 = (($nl_arg) + ($argpos$0<<3)|0);
     $162 = $161;
     $163 = $162;
     $164 = HEAP32[$163>>2]|0;
     $165 = (($162) + 4)|0;
     $166 = $165;
     $167 = HEAP32[$166>>2]|0;
     $168 = $arg;
     $169 = $168;
     HEAP32[$169>>2] = $164;
     $170 = (($168) + 4)|0;
     $171 = $170;
     HEAP32[$171>>2] = $167;
     label = 52;
     break;
    }
    if (!($0)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg443($arg,$$lcssa330,$ap);
   }
  } while(0);
  if ((label|0) == 52) {
   label = 0;
   if (!($0)) {
    $22 = $$lcssa328;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
    continue;
   }
  }
  $172 = HEAP8[$$lcssa326>>0]|0;
  $173 = $172 << 24 >> 24;
  $174 = ($st$0$lcssa327|0)!=(0);
  $175 = $173 & 15;
  $176 = ($175|0)==(3);
  $or$cond15 = $174 & $176;
  $177 = $173 & -33;
  $t$0 = $or$cond15 ? $177 : $173;
  $178 = $fl$1 & 8192;
  $179 = ($178|0)==(0);
  $180 = $fl$1 & -65537;
  $fl$1$ = $179 ? $fl$1 : $180;
  L75: do {
   switch ($t$0|0) {
   case 110:  {
    switch ($st$0$lcssa327|0) {
    case 0:  {
     $187 = HEAP32[$arg>>2]|0;
     HEAP32[$187>>2] = $cnt$1;
     $22 = $$lcssa328;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 1:  {
     $188 = HEAP32[$arg>>2]|0;
     HEAP32[$188>>2] = $cnt$1;
     $22 = $$lcssa328;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 2:  {
     $189 = ($cnt$1|0)<(0);
     $190 = $189 << 31 >> 31;
     $191 = HEAP32[$arg>>2]|0;
     $192 = $191;
     $193 = $192;
     HEAP32[$193>>2] = $cnt$1;
     $194 = (($192) + 4)|0;
     $195 = $194;
     HEAP32[$195>>2] = $190;
     $22 = $$lcssa328;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 3:  {
     $196 = $cnt$1&65535;
     $197 = HEAP32[$arg>>2]|0;
     HEAP16[$197>>1] = $196;
     $22 = $$lcssa328;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 4:  {
     $198 = $cnt$1&255;
     $199 = HEAP32[$arg>>2]|0;
     HEAP8[$199>>0] = $198;
     $22 = $$lcssa328;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 6:  {
     $200 = HEAP32[$arg>>2]|0;
     HEAP32[$200>>2] = $cnt$1;
     $22 = $$lcssa328;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 7:  {
     $201 = ($cnt$1|0)<(0);
     $202 = $201 << 31 >> 31;
     $203 = HEAP32[$arg>>2]|0;
     $204 = $203;
     $205 = $204;
     HEAP32[$205>>2] = $cnt$1;
     $206 = (($204) + 4)|0;
     $207 = $206;
     HEAP32[$207>>2] = $202;
     $22 = $$lcssa328;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    default: {
     $22 = $$lcssa328;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $208 = ($p$0>>>0)>(8);
    $209 = $208 ? $p$0 : 8;
    $210 = $fl$1$ | 8;
    $fl$3 = $210;$p$1 = $209;$t$1 = 120;
    label = 64;
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 64;
    break;
   }
   case 111:  {
    $248 = $arg;
    $249 = $248;
    $250 = HEAP32[$249>>2]|0;
    $251 = (($248) + 4)|0;
    $252 = $251;
    $253 = HEAP32[$252>>2]|0;
    $254 = ($250|0)==(0);
    $255 = ($253|0)==(0);
    $256 = $254 & $255;
    if ($256) {
     $$0$lcssa$i = $1;
    } else {
     $$03$i33 = $1;$258 = $250;$262 = $253;
     while(1) {
      $257 = $258 & 7;
      $259 = $257 | 48;
      $260 = $259&255;
      $261 = ((($$03$i33)) + -1|0);
      HEAP8[$261>>0] = $260;
      $263 = (_bitshift64Lshr(($258|0),($262|0),3)|0);
      $264 = tempRet0;
      $265 = ($263|0)==(0);
      $266 = ($264|0)==(0);
      $267 = $265 & $266;
      if ($267) {
       $$0$lcssa$i = $261;
       break;
      } else {
       $$03$i33 = $261;$258 = $263;$262 = $264;
      }
     }
    }
    $268 = $fl$1$ & 8;
    $269 = ($268|0)==(0);
    if ($269) {
     $a$0 = $$0$lcssa$i;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = 0;$prefix$1 = 35180;
     label = 77;
    } else {
     $270 = $$0$lcssa$i;
     $271 = (($2) - ($270))|0;
     $272 = (($271) + 1)|0;
     $273 = ($p$0|0)<($272|0);
     $$p$0 = $273 ? $272 : $p$0;
     $a$0 = $$0$lcssa$i;$fl$4 = $fl$1$;$p$2 = $$p$0;$pl$1 = 0;$prefix$1 = 35180;
     label = 77;
    }
    break;
   }
   case 105: case 100:  {
    $274 = $arg;
    $275 = $274;
    $276 = HEAP32[$275>>2]|0;
    $277 = (($274) + 4)|0;
    $278 = $277;
    $279 = HEAP32[$278>>2]|0;
    $280 = ($279|0)<(0);
    if ($280) {
     $281 = (_i64Subtract(0,0,($276|0),($279|0))|0);
     $282 = tempRet0;
     $283 = $arg;
     $284 = $283;
     HEAP32[$284>>2] = $281;
     $285 = (($283) + 4)|0;
     $286 = $285;
     HEAP32[$286>>2] = $282;
     $291 = $281;$292 = $282;$pl$0 = 1;$prefix$0 = 35180;
     label = 76;
     break L75;
    }
    $287 = $fl$1$ & 2048;
    $288 = ($287|0)==(0);
    if ($288) {
     $289 = $fl$1$ & 1;
     $290 = ($289|0)==(0);
     $$ = $290 ? 35180 : (35182);
     $291 = $276;$292 = $279;$pl$0 = $289;$prefix$0 = $$;
     label = 76;
    } else {
     $291 = $276;$292 = $279;$pl$0 = 1;$prefix$0 = (35181);
     label = 76;
    }
    break;
   }
   case 117:  {
    $181 = $arg;
    $182 = $181;
    $183 = HEAP32[$182>>2]|0;
    $184 = (($181) + 4)|0;
    $185 = $184;
    $186 = HEAP32[$185>>2]|0;
    $291 = $183;$292 = $186;$pl$0 = 0;$prefix$0 = 35180;
    label = 76;
    break;
   }
   case 99:  {
    $312 = $arg;
    $313 = $312;
    $314 = HEAP32[$313>>2]|0;
    $315 = (($312) + 4)|0;
    $316 = $315;
    $317 = HEAP32[$316>>2]|0;
    $318 = $314&255;
    HEAP8[$3>>0] = $318;
    $a$2 = $3;$fl$6 = $180;$p$5 = 1;$pl$2 = 0;$prefix$2 = 35180;$z$2 = $1;
    break;
   }
   case 109:  {
    $319 = (___errno_location()|0);
    $320 = HEAP32[$319>>2]|0;
    $321 = (_strerror($320)|0);
    $a$1 = $321;
    label = 82;
    break;
   }
   case 115:  {
    $322 = HEAP32[$arg>>2]|0;
    $323 = ($322|0)!=(0|0);
    $324 = $323 ? $322 : 35190;
    $a$1 = $324;
    label = 82;
    break;
   }
   case 67:  {
    $331 = $arg;
    $332 = $331;
    $333 = HEAP32[$332>>2]|0;
    $334 = (($331) + 4)|0;
    $335 = $334;
    $336 = HEAP32[$335>>2]|0;
    HEAP32[$wc>>2] = $333;
    HEAP32[$4>>2] = 0;
    HEAP32[$arg>>2] = $wc;
    $p$4195 = -1;
    label = 86;
    break;
   }
   case 83:  {
    $337 = ($p$0|0)==(0);
    if ($337) {
     _pad($f,32,$w$1,0,$fl$1$);
     $i$0$lcssa197 = 0;
     label = 98;
    } else {
     $p$4195 = $p$0;
     label = 86;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $364 = +HEAPF64[$arg>>3];
    HEAP32[$e2$i>>2] = 0;
    HEAPF64[tempDoublePtr>>3] = $364;$365 = HEAP32[tempDoublePtr>>2]|0;
    $366 = HEAP32[tempDoublePtr+4>>2]|0;
    $367 = ($366|0)<(0);
    if ($367) {
     $368 = -$364;
     $$07$i = $368;$pl$0$i = 1;$prefix$0$i = 35197;
    } else {
     $369 = $fl$1$ & 2048;
     $370 = ($369|0)==(0);
     if ($370) {
      $371 = $fl$1$ & 1;
      $372 = ($371|0)==(0);
      $$$i = $372 ? (35198) : (35203);
      $$07$i = $364;$pl$0$i = $371;$prefix$0$i = $$$i;
     } else {
      $$07$i = $364;$pl$0$i = 1;$prefix$0$i = (35200);
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$07$i;$373 = HEAP32[tempDoublePtr>>2]|0;
    $374 = HEAP32[tempDoublePtr+4>>2]|0;
    $375 = $374 & 2146435072;
    $376 = ($375>>>0)<(2146435072);
    $377 = (0)<(0);
    $378 = ($375|0)==(2146435072);
    $379 = $378 & $377;
    $380 = $376 | $379;
    do {
     if ($380) {
      $396 = (+_frexpl($$07$i,$e2$i));
      $397 = $396 * 2.0;
      $398 = $397 != 0.0;
      if ($398) {
       $399 = HEAP32[$e2$i>>2]|0;
       $400 = (($399) + -1)|0;
       HEAP32[$e2$i>>2] = $400;
      }
      $401 = $t$0 | 32;
      $402 = ($401|0)==(97);
      if ($402) {
       $403 = $t$0 & 32;
       $404 = ($403|0)==(0);
       $405 = ((($prefix$0$i)) + 9|0);
       $prefix$0$$i = $404 ? $prefix$0$i : $405;
       $406 = $pl$0$i | 2;
       $407 = ($p$0>>>0)>(11);
       $408 = (12 - ($p$0))|0;
       $409 = ($408|0)==(0);
       $410 = $407 | $409;
       do {
        if ($410) {
         $$1$i = $397;
        } else {
         $re$169$i = $408;$round$068$i = 8.0;
         while(1) {
          $411 = (($re$169$i) + -1)|0;
          $412 = $round$068$i * 16.0;
          $413 = ($411|0)==(0);
          if ($413) {
           $$lcssa347 = $412;
           break;
          } else {
           $re$169$i = $411;$round$068$i = $412;
          }
         }
         $414 = HEAP8[$prefix$0$$i>>0]|0;
         $415 = ($414<<24>>24)==(45);
         if ($415) {
          $416 = -$397;
          $417 = $416 - $$lcssa347;
          $418 = $$lcssa347 + $417;
          $419 = -$418;
          $$1$i = $419;
          break;
         } else {
          $420 = $397 + $$lcssa347;
          $421 = $420 - $$lcssa347;
          $$1$i = $421;
          break;
         }
        }
       } while(0);
       $422 = HEAP32[$e2$i>>2]|0;
       $423 = ($422|0)<(0);
       $424 = (0 - ($422))|0;
       $425 = $423 ? $424 : $422;
       $426 = ($425|0)<(0);
       $427 = $426 << 31 >> 31;
       $428 = (_fmt_u($425,$427,$5)|0);
       $429 = ($428|0)==($5|0);
       if ($429) {
        HEAP8[$6>>0] = 48;
        $estr$0$i = $6;
       } else {
        $estr$0$i = $428;
       }
       $430 = $422 >> 31;
       $431 = $430 & 2;
       $432 = (($431) + 43)|0;
       $433 = $432&255;
       $434 = ((($estr$0$i)) + -1|0);
       HEAP8[$434>>0] = $433;
       $435 = (($t$0) + 15)|0;
       $436 = $435&255;
       $437 = ((($estr$0$i)) + -2|0);
       HEAP8[$437>>0] = $436;
       $notrhs$i = ($p$0|0)<(1);
       $438 = $fl$1$ & 8;
       $439 = ($438|0)==(0);
       $$2$i = $$1$i;$s$0$i = $buf$i;
       while(1) {
        $440 = (~~(($$2$i)));
        $441 = (35164 + ($440)|0);
        $442 = HEAP8[$441>>0]|0;
        $443 = $442&255;
        $444 = $443 | $403;
        $445 = $444&255;
        $446 = ((($s$0$i)) + 1|0);
        HEAP8[$s$0$i>>0] = $445;
        $447 = (+($440|0));
        $448 = $$2$i - $447;
        $449 = $448 * 16.0;
        $450 = $446;
        $451 = (($450) - ($7))|0;
        $452 = ($451|0)==(1);
        do {
         if ($452) {
          $notlhs$i = $449 == 0.0;
          $or$cond3$not$i = $notrhs$i & $notlhs$i;
          $or$cond$i = $439 & $or$cond3$not$i;
          if ($or$cond$i) {
           $s$1$i = $446;
           break;
          }
          $453 = ((($s$0$i)) + 2|0);
          HEAP8[$446>>0] = 46;
          $s$1$i = $453;
         } else {
          $s$1$i = $446;
         }
        } while(0);
        $454 = $449 != 0.0;
        if ($454) {
         $$2$i = $449;$s$0$i = $s$1$i;
        } else {
         $s$1$i$lcssa = $s$1$i;
         break;
        }
       }
       $455 = ($p$0|0)!=(0);
       $$pre182$i = $s$1$i$lcssa;
       $456 = (($10) + ($$pre182$i))|0;
       $457 = ($456|0)<($p$0|0);
       $or$cond239 = $455 & $457;
       $458 = $437;
       $459 = (($11) + ($p$0))|0;
       $460 = (($459) - ($458))|0;
       $461 = $437;
       $462 = (($9) - ($461))|0;
       $463 = (($462) + ($$pre182$i))|0;
       $l$0$i = $or$cond239 ? $460 : $463;
       $464 = (($l$0$i) + ($406))|0;
       _pad($f,32,$w$1,$464,$fl$1$);
       $465 = HEAP32[$f>>2]|0;
       $466 = $465 & 32;
       $467 = ($466|0)==(0);
       if ($467) {
        (___fwritex($prefix$0$$i,$406,$f)|0);
       }
       $468 = $fl$1$ ^ 65536;
       _pad($f,48,$w$1,$464,$468);
       $469 = (($$pre182$i) - ($7))|0;
       $470 = HEAP32[$f>>2]|0;
       $471 = $470 & 32;
       $472 = ($471|0)==(0);
       if ($472) {
        (___fwritex($buf$i,$469,$f)|0);
       }
       $473 = $437;
       $474 = (($8) - ($473))|0;
       $sum = (($469) + ($474))|0;
       $475 = (($l$0$i) - ($sum))|0;
       _pad($f,48,$475,0,0);
       $476 = HEAP32[$f>>2]|0;
       $477 = $476 & 32;
       $478 = ($477|0)==(0);
       if ($478) {
        (___fwritex($437,$474,$f)|0);
       }
       $479 = $fl$1$ ^ 8192;
       _pad($f,32,$w$1,$464,$479);
       $480 = ($464|0)<($w$1|0);
       $w$$i = $480 ? $w$1 : $464;
       $$0$i = $w$$i;
       break;
      }
      $481 = ($p$0|0)<(0);
      $$p$i = $481 ? 6 : $p$0;
      if ($398) {
       $482 = $397 * 268435456.0;
       $483 = HEAP32[$e2$i>>2]|0;
       $484 = (($483) + -28)|0;
       HEAP32[$e2$i>>2] = $484;
       $$3$i = $482;$485 = $484;
      } else {
       $$pre179$i = HEAP32[$e2$i>>2]|0;
       $$3$i = $397;$485 = $$pre179$i;
      }
      $486 = ($485|0)<(0);
      $$31$i = $486 ? $big$i : $12;
      $487 = $$31$i;
      $$4$i = $$3$i;$z$0$i = $$31$i;
      while(1) {
       $488 = (~~(($$4$i))>>>0);
       HEAP32[$z$0$i>>2] = $488;
       $489 = ((($z$0$i)) + 4|0);
       $490 = (+($488>>>0));
       $491 = $$4$i - $490;
       $492 = $491 * 1.0E+9;
       $493 = $492 != 0.0;
       if ($493) {
        $$4$i = $492;$z$0$i = $489;
       } else {
        $$lcssa331 = $489;
        break;
       }
      }
      $$pr$i = HEAP32[$e2$i>>2]|0;
      $494 = ($$pr$i|0)>(0);
      if ($494) {
       $495 = $$pr$i;$a$1147$i = $$31$i;$z$1146$i = $$lcssa331;
       while(1) {
        $496 = ($495|0)>(29);
        $497 = $496 ? 29 : $495;
        $d$0139$i = ((($z$1146$i)) + -4|0);
        $498 = ($d$0139$i>>>0)<($a$1147$i>>>0);
        do {
         if ($498) {
          $a$2$ph$i = $a$1147$i;
         } else {
          $carry$0140$i = 0;$d$0141$i = $d$0139$i;
          while(1) {
           $499 = HEAP32[$d$0141$i>>2]|0;
           $500 = (_bitshift64Shl(($499|0),0,($497|0))|0);
           $501 = tempRet0;
           $502 = (_i64Add(($500|0),($501|0),($carry$0140$i|0),0)|0);
           $503 = tempRet0;
           $504 = (___uremdi3(($502|0),($503|0),1000000000,0)|0);
           $505 = tempRet0;
           HEAP32[$d$0141$i>>2] = $504;
           $506 = (___udivdi3(($502|0),($503|0),1000000000,0)|0);
           $507 = tempRet0;
           $d$0$i = ((($d$0141$i)) + -4|0);
           $508 = ($d$0$i>>>0)<($a$1147$i>>>0);
           if ($508) {
            $$lcssa332 = $506;
            break;
           } else {
            $carry$0140$i = $506;$d$0141$i = $d$0$i;
           }
          }
          $509 = ($$lcssa332|0)==(0);
          if ($509) {
           $a$2$ph$i = $a$1147$i;
           break;
          }
          $510 = ((($a$1147$i)) + -4|0);
          HEAP32[$510>>2] = $$lcssa332;
          $a$2$ph$i = $510;
         }
        } while(0);
        $z$2$i = $z$1146$i;
        while(1) {
         $511 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
         if (!($511)) {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
         $512 = ((($z$2$i)) + -4|0);
         $513 = HEAP32[$512>>2]|0;
         $514 = ($513|0)==(0);
         if ($514) {
          $z$2$i = $512;
         } else {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
        }
        $515 = HEAP32[$e2$i>>2]|0;
        $516 = (($515) - ($497))|0;
        HEAP32[$e2$i>>2] = $516;
        $517 = ($516|0)>(0);
        if ($517) {
         $495 = $516;$a$1147$i = $a$2$ph$i;$z$1146$i = $z$2$i$lcssa;
        } else {
         $$pr47$i = $516;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i$lcssa;
         break;
        }
       }
      } else {
       $$pr47$i = $$pr$i;$a$1$lcssa$i = $$31$i;$z$1$lcssa$i = $$lcssa331;
      }
      $518 = ($$pr47$i|0)<(0);
      if ($518) {
       $519 = (($$p$i) + 25)|0;
       $520 = (($519|0) / 9)&-1;
       $521 = (($520) + 1)|0;
       $522 = ($401|0)==(102);
       $524 = $$pr47$i;$a$3134$i = $a$1$lcssa$i;$z$3133$i = $z$1$lcssa$i;
       while(1) {
        $523 = (0 - ($524))|0;
        $525 = ($523|0)>(9);
        $526 = $525 ? 9 : $523;
        $527 = ($a$3134$i>>>0)<($z$3133$i>>>0);
        do {
         if ($527) {
          $531 = 1 << $526;
          $532 = (($531) + -1)|0;
          $533 = 1000000000 >>> $526;
          $carry3$0128$i = 0;$d$1127$i = $a$3134$i;
          while(1) {
           $534 = HEAP32[$d$1127$i>>2]|0;
           $535 = $534 & $532;
           $536 = $534 >>> $526;
           $537 = (($536) + ($carry3$0128$i))|0;
           HEAP32[$d$1127$i>>2] = $537;
           $538 = Math_imul($535, $533)|0;
           $539 = ((($d$1127$i)) + 4|0);
           $540 = ($539>>>0)<($z$3133$i>>>0);
           if ($540) {
            $carry3$0128$i = $538;$d$1127$i = $539;
           } else {
            $$lcssa334 = $538;
            break;
           }
          }
          $541 = HEAP32[$a$3134$i>>2]|0;
          $542 = ($541|0)==(0);
          $543 = ((($a$3134$i)) + 4|0);
          $$a$3$i = $542 ? $543 : $a$3134$i;
          $544 = ($$lcssa334|0)==(0);
          if ($544) {
           $$a$3186$i = $$a$3$i;$z$4$i = $z$3133$i;
           break;
          }
          $545 = ((($z$3133$i)) + 4|0);
          HEAP32[$z$3133$i>>2] = $$lcssa334;
          $$a$3186$i = $$a$3$i;$z$4$i = $545;
         } else {
          $528 = HEAP32[$a$3134$i>>2]|0;
          $529 = ($528|0)==(0);
          $530 = ((($a$3134$i)) + 4|0);
          $$a$3185$i = $529 ? $530 : $a$3134$i;
          $$a$3186$i = $$a$3185$i;$z$4$i = $z$3133$i;
         }
        } while(0);
        $546 = $522 ? $$31$i : $$a$3186$i;
        $547 = $z$4$i;
        $548 = $546;
        $549 = (($547) - ($548))|0;
        $550 = $549 >> 2;
        $551 = ($550|0)>($521|0);
        $552 = (($546) + ($521<<2)|0);
        $$z$4$i = $551 ? $552 : $z$4$i;
        $553 = HEAP32[$e2$i>>2]|0;
        $554 = (($553) + ($526))|0;
        HEAP32[$e2$i>>2] = $554;
        $555 = ($554|0)<(0);
        if ($555) {
         $524 = $554;$a$3134$i = $$a$3186$i;$z$3133$i = $$z$4$i;
        } else {
         $a$3$lcssa$i = $$a$3186$i;$z$3$lcssa$i = $$z$4$i;
         break;
        }
       }
      } else {
       $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
      }
      $556 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
      do {
       if ($556) {
        $557 = $a$3$lcssa$i;
        $558 = (($487) - ($557))|0;
        $559 = $558 >> 2;
        $560 = ($559*9)|0;
        $561 = HEAP32[$a$3$lcssa$i>>2]|0;
        $562 = ($561>>>0)<(10);
        if ($562) {
         $e$1$i = $560;
         break;
        } else {
         $e$0123$i = $560;$i$0122$i = 10;
        }
        while(1) {
         $563 = ($i$0122$i*10)|0;
         $564 = (($e$0123$i) + 1)|0;
         $565 = ($561>>>0)<($563>>>0);
         if ($565) {
          $e$1$i = $564;
          break;
         } else {
          $e$0123$i = $564;$i$0122$i = $563;
         }
        }
       } else {
        $e$1$i = 0;
       }
      } while(0);
      $566 = ($401|0)!=(102);
      $567 = $566 ? $e$1$i : 0;
      $568 = (($$p$i) - ($567))|0;
      $569 = ($401|0)==(103);
      $570 = ($$p$i|0)!=(0);
      $571 = $570 & $569;
      $$neg52$i = $571 << 31 >> 31;
      $572 = (($568) + ($$neg52$i))|0;
      $573 = $z$3$lcssa$i;
      $574 = (($573) - ($487))|0;
      $575 = $574 >> 2;
      $576 = ($575*9)|0;
      $577 = (($576) + -9)|0;
      $578 = ($572|0)<($577|0);
      if ($578) {
       $579 = (($572) + 9216)|0;
       $580 = (($579|0) / 9)&-1;
       $$sum$i = (($580) + -1023)|0;
       $581 = (($$31$i) + ($$sum$i<<2)|0);
       $582 = (($579|0) % 9)&-1;
       $j$0115$i = (($582) + 1)|0;
       $583 = ($j$0115$i|0)<(9);
       if ($583) {
        $i$1116$i = 10;$j$0117$i = $j$0115$i;
        while(1) {
         $584 = ($i$1116$i*10)|0;
         $j$0$i = (($j$0117$i) + 1)|0;
         $exitcond$i = ($j$0$i|0)==(9);
         if ($exitcond$i) {
          $i$1$lcssa$i = $584;
          break;
         } else {
          $i$1116$i = $584;$j$0117$i = $j$0$i;
         }
        }
       } else {
        $i$1$lcssa$i = 10;
       }
       $585 = HEAP32[$581>>2]|0;
       $586 = (($585>>>0) % ($i$1$lcssa$i>>>0))&-1;
       $587 = ($586|0)==(0);
       if ($587) {
        $$sum15$i = (($580) + -1022)|0;
        $588 = (($$31$i) + ($$sum15$i<<2)|0);
        $589 = ($588|0)==($z$3$lcssa$i|0);
        if ($589) {
         $a$7$i = $a$3$lcssa$i;$d$3$i = $581;$e$3$i = $e$1$i;
        } else {
         label = 163;
        }
       } else {
        label = 163;
       }
       do {
        if ((label|0) == 163) {
         label = 0;
         $590 = (($585>>>0) / ($i$1$lcssa$i>>>0))&-1;
         $591 = $590 & 1;
         $592 = ($591|0)==(0);
         $$20$i = $592 ? 9007199254740992.0 : 9007199254740994.0;
         $593 = (($i$1$lcssa$i|0) / 2)&-1;
         $594 = ($586>>>0)<($593>>>0);
         do {
          if ($594) {
           $small$0$i = 0.5;
          } else {
           $595 = ($586|0)==($593|0);
           if ($595) {
            $$sum16$i = (($580) + -1022)|0;
            $596 = (($$31$i) + ($$sum16$i<<2)|0);
            $597 = ($596|0)==($z$3$lcssa$i|0);
            if ($597) {
             $small$0$i = 1.0;
             break;
            }
           }
           $small$0$i = 1.5;
          }
         } while(0);
         $598 = ($pl$0$i|0)==(0);
         do {
          if ($598) {
           $round6$1$i = $$20$i;$small$1$i = $small$0$i;
          } else {
           $599 = HEAP8[$prefix$0$i>>0]|0;
           $600 = ($599<<24>>24)==(45);
           if (!($600)) {
            $round6$1$i = $$20$i;$small$1$i = $small$0$i;
            break;
           }
           $601 = -$$20$i;
           $602 = -$small$0$i;
           $round6$1$i = $601;$small$1$i = $602;
          }
         } while(0);
         $603 = (($585) - ($586))|0;
         HEAP32[$581>>2] = $603;
         $604 = $round6$1$i + $small$1$i;
         $605 = $604 != $round6$1$i;
         if (!($605)) {
          $a$7$i = $a$3$lcssa$i;$d$3$i = $581;$e$3$i = $e$1$i;
          break;
         }
         $606 = (($603) + ($i$1$lcssa$i))|0;
         HEAP32[$581>>2] = $606;
         $607 = ($606>>>0)>(999999999);
         if ($607) {
          $a$5109$i = $a$3$lcssa$i;$d$2108$i = $581;
          while(1) {
           $608 = ((($d$2108$i)) + -4|0);
           HEAP32[$d$2108$i>>2] = 0;
           $609 = ($608>>>0)<($a$5109$i>>>0);
           if ($609) {
            $610 = ((($a$5109$i)) + -4|0);
            HEAP32[$610>>2] = 0;
            $a$6$i = $610;
           } else {
            $a$6$i = $a$5109$i;
           }
           $611 = HEAP32[$608>>2]|0;
           $612 = (($611) + 1)|0;
           HEAP32[$608>>2] = $612;
           $613 = ($612>>>0)>(999999999);
           if ($613) {
            $a$5109$i = $a$6$i;$d$2108$i = $608;
           } else {
            $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $608;
            break;
           }
          }
         } else {
          $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $581;
         }
         $614 = $a$5$lcssa$i;
         $615 = (($487) - ($614))|0;
         $616 = $615 >> 2;
         $617 = ($616*9)|0;
         $618 = HEAP32[$a$5$lcssa$i>>2]|0;
         $619 = ($618>>>0)<(10);
         if ($619) {
          $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $617;
          break;
         } else {
          $e$2104$i = $617;$i$2103$i = 10;
         }
         while(1) {
          $620 = ($i$2103$i*10)|0;
          $621 = (($e$2104$i) + 1)|0;
          $622 = ($618>>>0)<($620>>>0);
          if ($622) {
           $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $621;
           break;
          } else {
           $e$2104$i = $621;$i$2103$i = $620;
          }
         }
        }
       } while(0);
       $623 = ((($d$3$i)) + 4|0);
       $624 = ($z$3$lcssa$i>>>0)>($623>>>0);
       $$z$3$i = $624 ? $623 : $z$3$lcssa$i;
       $a$8$ph$i = $a$7$i;$e$4$ph$i = $e$3$i;$z$6$ph$i = $$z$3$i;
      } else {
       $a$8$ph$i = $a$3$lcssa$i;$e$4$ph$i = $e$1$i;$z$6$ph$i = $z$3$lcssa$i;
      }
      $625 = (0 - ($e$4$ph$i))|0;
      $z$6$i = $z$6$ph$i;
      while(1) {
       $626 = ($z$6$i>>>0)>($a$8$ph$i>>>0);
       if (!($626)) {
        $$lcssa159$i = 0;$z$6$i$lcssa = $z$6$i;
        break;
       }
       $627 = ((($z$6$i)) + -4|0);
       $628 = HEAP32[$627>>2]|0;
       $629 = ($628|0)==(0);
       if ($629) {
        $z$6$i = $627;
       } else {
        $$lcssa159$i = 1;$z$6$i$lcssa = $z$6$i;
        break;
       }
      }
      do {
       if ($569) {
        $630 = $570&1;
        $631 = $630 ^ 1;
        $$p$$i = (($631) + ($$p$i))|0;
        $632 = ($$p$$i|0)>($e$4$ph$i|0);
        $633 = ($e$4$ph$i|0)>(-5);
        $or$cond6$i = $632 & $633;
        if ($or$cond6$i) {
         $634 = (($t$0) + -1)|0;
         $$neg53$i = (($$p$$i) + -1)|0;
         $635 = (($$neg53$i) - ($e$4$ph$i))|0;
         $$013$i = $634;$$210$i = $635;
        } else {
         $636 = (($t$0) + -2)|0;
         $637 = (($$p$$i) + -1)|0;
         $$013$i = $636;$$210$i = $637;
        }
        $638 = $fl$1$ & 8;
        $639 = ($638|0)==(0);
        if (!($639)) {
         $$114$i = $$013$i;$$311$i = $$210$i;$$pre$phi184$iZ2D = $638;
         break;
        }
        do {
         if ($$lcssa159$i) {
          $640 = ((($z$6$i$lcssa)) + -4|0);
          $641 = HEAP32[$640>>2]|0;
          $642 = ($641|0)==(0);
          if ($642) {
           $j$2$i = 9;
           break;
          }
          $643 = (($641>>>0) % 10)&-1;
          $644 = ($643|0)==(0);
          if ($644) {
           $i$399$i = 10;$j$1100$i = 0;
          } else {
           $j$2$i = 0;
           break;
          }
          while(1) {
           $645 = ($i$399$i*10)|0;
           $646 = (($j$1100$i) + 1)|0;
           $647 = (($641>>>0) % ($645>>>0))&-1;
           $648 = ($647|0)==(0);
           if ($648) {
            $i$399$i = $645;$j$1100$i = $646;
           } else {
            $j$2$i = $646;
            break;
           }
          }
         } else {
          $j$2$i = 9;
         }
        } while(0);
        $649 = $$013$i | 32;
        $650 = ($649|0)==(102);
        $651 = $z$6$i$lcssa;
        $652 = (($651) - ($487))|0;
        $653 = $652 >> 2;
        $654 = ($653*9)|0;
        $655 = (($654) + -9)|0;
        if ($650) {
         $656 = (($655) - ($j$2$i))|0;
         $657 = ($656|0)<(0);
         $$21$i = $657 ? 0 : $656;
         $658 = ($$210$i|0)<($$21$i|0);
         $$210$$22$i = $658 ? $$210$i : $$21$i;
         $$114$i = $$013$i;$$311$i = $$210$$22$i;$$pre$phi184$iZ2D = 0;
         break;
        } else {
         $659 = (($655) + ($e$4$ph$i))|0;
         $660 = (($659) - ($j$2$i))|0;
         $661 = ($660|0)<(0);
         $$23$i = $661 ? 0 : $660;
         $662 = ($$210$i|0)<($$23$i|0);
         $$210$$24$i = $662 ? $$210$i : $$23$i;
         $$114$i = $$013$i;$$311$i = $$210$$24$i;$$pre$phi184$iZ2D = 0;
         break;
        }
       } else {
        $$pre183$i = $fl$1$ & 8;
        $$114$i = $t$0;$$311$i = $$p$i;$$pre$phi184$iZ2D = $$pre183$i;
       }
      } while(0);
      $663 = $$311$i | $$pre$phi184$iZ2D;
      $664 = ($663|0)!=(0);
      $665 = $664&1;
      $666 = $$114$i | 32;
      $667 = ($666|0)==(102);
      if ($667) {
       $668 = ($e$4$ph$i|0)>(0);
       $669 = $668 ? $e$4$ph$i : 0;
       $$pn$i = $669;$estr$2$i = 0;
      } else {
       $670 = ($e$4$ph$i|0)<(0);
       $671 = $670 ? $625 : $e$4$ph$i;
       $672 = ($671|0)<(0);
       $673 = $672 << 31 >> 31;
       $674 = (_fmt_u($671,$673,$5)|0);
       $675 = $674;
       $676 = (($8) - ($675))|0;
       $677 = ($676|0)<(2);
       if ($677) {
        $estr$193$i = $674;
        while(1) {
         $678 = ((($estr$193$i)) + -1|0);
         HEAP8[$678>>0] = 48;
         $679 = $678;
         $680 = (($8) - ($679))|0;
         $681 = ($680|0)<(2);
         if ($681) {
          $estr$193$i = $678;
         } else {
          $estr$1$lcssa$i = $678;
          break;
         }
        }
       } else {
        $estr$1$lcssa$i = $674;
       }
       $682 = $e$4$ph$i >> 31;
       $683 = $682 & 2;
       $684 = (($683) + 43)|0;
       $685 = $684&255;
       $686 = ((($estr$1$lcssa$i)) + -1|0);
       HEAP8[$686>>0] = $685;
       $687 = $$114$i&255;
       $688 = ((($estr$1$lcssa$i)) + -2|0);
       HEAP8[$688>>0] = $687;
       $689 = $688;
       $690 = (($8) - ($689))|0;
       $$pn$i = $690;$estr$2$i = $688;
      }
      $691 = (($pl$0$i) + 1)|0;
      $692 = (($691) + ($$311$i))|0;
      $l$1$i = (($692) + ($665))|0;
      $693 = (($l$1$i) + ($$pn$i))|0;
      _pad($f,32,$w$1,$693,$fl$1$);
      $694 = HEAP32[$f>>2]|0;
      $695 = $694 & 32;
      $696 = ($695|0)==(0);
      if ($696) {
       (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
      }
      $697 = $fl$1$ ^ 65536;
      _pad($f,48,$w$1,$693,$697);
      do {
       if ($667) {
        $698 = ($a$8$ph$i>>>0)>($$31$i>>>0);
        $r$0$a$8$i = $698 ? $$31$i : $a$8$ph$i;
        $d$482$i = $r$0$a$8$i;
        while(1) {
         $699 = HEAP32[$d$482$i>>2]|0;
         $700 = (_fmt_u($699,0,$13)|0);
         $701 = ($d$482$i|0)==($r$0$a$8$i|0);
         do {
          if ($701) {
           $705 = ($700|0)==($13|0);
           if (!($705)) {
            $s7$1$i = $700;
            break;
           }
           HEAP8[$15>>0] = 48;
           $s7$1$i = $15;
          } else {
           $702 = ($700>>>0)>($buf$i>>>0);
           if ($702) {
            $s7$079$i = $700;
           } else {
            $s7$1$i = $700;
            break;
           }
           while(1) {
            $703 = ((($s7$079$i)) + -1|0);
            HEAP8[$703>>0] = 48;
            $704 = ($703>>>0)>($buf$i>>>0);
            if ($704) {
             $s7$079$i = $703;
            } else {
             $s7$1$i = $703;
             break;
            }
           }
          }
         } while(0);
         $706 = HEAP32[$f>>2]|0;
         $707 = $706 & 32;
         $708 = ($707|0)==(0);
         if ($708) {
          $709 = $s7$1$i;
          $710 = (($14) - ($709))|0;
          (___fwritex($s7$1$i,$710,$f)|0);
         }
         $711 = ((($d$482$i)) + 4|0);
         $712 = ($711>>>0)>($$31$i>>>0);
         if ($712) {
          $$lcssa344 = $711;
          break;
         } else {
          $d$482$i = $711;
         }
        }
        $713 = ($663|0)==(0);
        do {
         if (!($713)) {
          $714 = HEAP32[$f>>2]|0;
          $715 = $714 & 32;
          $716 = ($715|0)==(0);
          if (!($716)) {
           break;
          }
          (___fwritex(35232,1,$f)|0);
         }
        } while(0);
        $717 = ($$lcssa344>>>0)<($z$6$i$lcssa>>>0);
        $718 = ($$311$i|0)>(0);
        $719 = $718 & $717;
        if ($719) {
         $$41276$i = $$311$i;$d$575$i = $$lcssa344;
         while(1) {
          $720 = HEAP32[$d$575$i>>2]|0;
          $721 = (_fmt_u($720,0,$13)|0);
          $722 = ($721>>>0)>($buf$i>>>0);
          if ($722) {
           $s8$070$i = $721;
           while(1) {
            $723 = ((($s8$070$i)) + -1|0);
            HEAP8[$723>>0] = 48;
            $724 = ($723>>>0)>($buf$i>>>0);
            if ($724) {
             $s8$070$i = $723;
            } else {
             $s8$0$lcssa$i = $723;
             break;
            }
           }
          } else {
           $s8$0$lcssa$i = $721;
          }
          $725 = HEAP32[$f>>2]|0;
          $726 = $725 & 32;
          $727 = ($726|0)==(0);
          if ($727) {
           $728 = ($$41276$i|0)>(9);
           $729 = $728 ? 9 : $$41276$i;
           (___fwritex($s8$0$lcssa$i,$729,$f)|0);
          }
          $730 = ((($d$575$i)) + 4|0);
          $731 = (($$41276$i) + -9)|0;
          $732 = ($730>>>0)<($z$6$i$lcssa>>>0);
          $733 = ($$41276$i|0)>(9);
          $734 = $733 & $732;
          if ($734) {
           $$41276$i = $731;$d$575$i = $730;
          } else {
           $$412$lcssa$i = $731;
           break;
          }
         }
        } else {
         $$412$lcssa$i = $$311$i;
        }
        $735 = (($$412$lcssa$i) + 9)|0;
        _pad($f,48,$735,9,0);
       } else {
        $736 = ((($a$8$ph$i)) + 4|0);
        $z$6$$i = $$lcssa159$i ? $z$6$i$lcssa : $736;
        $737 = ($$311$i|0)>(-1);
        if ($737) {
         $738 = ($$pre$phi184$iZ2D|0)==(0);
         $$587$i = $$311$i;$d$686$i = $a$8$ph$i;
         while(1) {
          $739 = HEAP32[$d$686$i>>2]|0;
          $740 = (_fmt_u($739,0,$13)|0);
          $741 = ($740|0)==($13|0);
          if ($741) {
           HEAP8[$15>>0] = 48;
           $s9$0$i = $15;
          } else {
           $s9$0$i = $740;
          }
          $742 = ($d$686$i|0)==($a$8$ph$i|0);
          do {
           if ($742) {
            $746 = ((($s9$0$i)) + 1|0);
            $747 = HEAP32[$f>>2]|0;
            $748 = $747 & 32;
            $749 = ($748|0)==(0);
            if ($749) {
             (___fwritex($s9$0$i,1,$f)|0);
            }
            $750 = ($$587$i|0)<(1);
            $or$cond29$i = $738 & $750;
            if ($or$cond29$i) {
             $s9$2$i = $746;
             break;
            }
            $751 = HEAP32[$f>>2]|0;
            $752 = $751 & 32;
            $753 = ($752|0)==(0);
            if (!($753)) {
             $s9$2$i = $746;
             break;
            }
            (___fwritex(35232,1,$f)|0);
            $s9$2$i = $746;
           } else {
            $743 = ($s9$0$i>>>0)>($buf$i>>>0);
            if ($743) {
             $s9$183$i = $s9$0$i;
            } else {
             $s9$2$i = $s9$0$i;
             break;
            }
            while(1) {
             $744 = ((($s9$183$i)) + -1|0);
             HEAP8[$744>>0] = 48;
             $745 = ($744>>>0)>($buf$i>>>0);
             if ($745) {
              $s9$183$i = $744;
             } else {
              $s9$2$i = $744;
              break;
             }
            }
           }
          } while(0);
          $754 = $s9$2$i;
          $755 = (($14) - ($754))|0;
          $756 = HEAP32[$f>>2]|0;
          $757 = $756 & 32;
          $758 = ($757|0)==(0);
          if ($758) {
           $759 = ($$587$i|0)>($755|0);
           $760 = $759 ? $755 : $$587$i;
           (___fwritex($s9$2$i,$760,$f)|0);
          }
          $761 = (($$587$i) - ($755))|0;
          $762 = ((($d$686$i)) + 4|0);
          $763 = ($762>>>0)<($z$6$$i>>>0);
          $764 = ($761|0)>(-1);
          $765 = $763 & $764;
          if ($765) {
           $$587$i = $761;$d$686$i = $762;
          } else {
           $$5$lcssa$i = $761;
           break;
          }
         }
        } else {
         $$5$lcssa$i = $$311$i;
        }
        $766 = (($$5$lcssa$i) + 18)|0;
        _pad($f,48,$766,18,0);
        $767 = HEAP32[$f>>2]|0;
        $768 = $767 & 32;
        $769 = ($768|0)==(0);
        if (!($769)) {
         break;
        }
        $770 = $estr$2$i;
        $771 = (($8) - ($770))|0;
        (___fwritex($estr$2$i,$771,$f)|0);
       }
      } while(0);
      $772 = $fl$1$ ^ 8192;
      _pad($f,32,$w$1,$693,$772);
      $773 = ($693|0)<($w$1|0);
      $w$30$i = $773 ? $w$1 : $693;
      $$0$i = $w$30$i;
     } else {
      $381 = $t$0 & 32;
      $382 = ($381|0)!=(0);
      $383 = $382 ? 35216 : 35220;
      $384 = ($$07$i != $$07$i) | (0.0 != 0.0);
      $385 = $382 ? 35224 : 35228;
      $pl$1$i = $384 ? 0 : $pl$0$i;
      $s1$0$i = $384 ? $385 : $383;
      $386 = (($pl$1$i) + 3)|0;
      _pad($f,32,$w$1,$386,$180);
      $387 = HEAP32[$f>>2]|0;
      $388 = $387 & 32;
      $389 = ($388|0)==(0);
      if ($389) {
       (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
       $$pre$i = HEAP32[$f>>2]|0;
       $391 = $$pre$i;
      } else {
       $391 = $387;
      }
      $390 = $391 & 32;
      $392 = ($390|0)==(0);
      if ($392) {
       (___fwritex($s1$0$i,3,$f)|0);
      }
      $393 = $fl$1$ ^ 8192;
      _pad($f,32,$w$1,$386,$393);
      $394 = ($386|0)<($w$1|0);
      $395 = $394 ? $w$1 : $386;
      $$0$i = $395;
     }
    } while(0);
    $22 = $$lcssa328;$cnt$0 = $cnt$1;$l$0 = $$0$i;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   default: {
    $a$2 = $22;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 35180;$z$2 = $1;
   }
   }
  } while(0);
  L313: do {
   if ((label|0) == 64) {
    label = 0;
    $211 = $arg;
    $212 = $211;
    $213 = HEAP32[$212>>2]|0;
    $214 = (($211) + 4)|0;
    $215 = $214;
    $216 = HEAP32[$215>>2]|0;
    $217 = $t$1 & 32;
    $218 = ($213|0)==(0);
    $219 = ($216|0)==(0);
    $220 = $218 & $219;
    if ($220) {
     $a$0 = $1;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 35180;
     label = 77;
    } else {
     $$012$i = $1;$222 = $213;$229 = $216;
     while(1) {
      $221 = $222 & 15;
      $223 = (35164 + ($221)|0);
      $224 = HEAP8[$223>>0]|0;
      $225 = $224&255;
      $226 = $225 | $217;
      $227 = $226&255;
      $228 = ((($$012$i)) + -1|0);
      HEAP8[$228>>0] = $227;
      $230 = (_bitshift64Lshr(($222|0),($229|0),4)|0);
      $231 = tempRet0;
      $232 = ($230|0)==(0);
      $233 = ($231|0)==(0);
      $234 = $232 & $233;
      if ($234) {
       $$lcssa349 = $228;
       break;
      } else {
       $$012$i = $228;$222 = $230;$229 = $231;
      }
     }
     $235 = $arg;
     $236 = $235;
     $237 = HEAP32[$236>>2]|0;
     $238 = (($235) + 4)|0;
     $239 = $238;
     $240 = HEAP32[$239>>2]|0;
     $241 = ($237|0)==(0);
     $242 = ($240|0)==(0);
     $243 = $241 & $242;
     $244 = $fl$3 & 8;
     $245 = ($244|0)==(0);
     $or$cond17 = $245 | $243;
     if ($or$cond17) {
      $a$0 = $$lcssa349;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 35180;
      label = 77;
     } else {
      $246 = $t$1 >> 4;
      $247 = (35180 + ($246)|0);
      $a$0 = $$lcssa349;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $247;
      label = 77;
     }
    }
   }
   else if ((label|0) == 76) {
    label = 0;
    $293 = (_fmt_u($291,$292,$1)|0);
    $a$0 = $293;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
    label = 77;
   }
   else if ((label|0) == 82) {
    label = 0;
    $325 = (_memchr($a$1,0,$p$0)|0);
    $326 = ($325|0)==(0|0);
    $327 = $325;
    $328 = $a$1;
    $329 = (($327) - ($328))|0;
    $330 = (($a$1) + ($p$0)|0);
    $z$1 = $326 ? $330 : $325;
    $p$3 = $326 ? $p$0 : $329;
    $a$2 = $a$1;$fl$6 = $180;$p$5 = $p$3;$pl$2 = 0;$prefix$2 = 35180;$z$2 = $z$1;
   }
   else if ((label|0) == 86) {
    label = 0;
    $338 = HEAP32[$arg>>2]|0;
    $i$0108 = 0;$l$1107 = 0;$ws$0109 = $338;
    while(1) {
     $339 = HEAP32[$ws$0109>>2]|0;
     $340 = ($339|0)==(0);
     if ($340) {
      $i$0$lcssa = $i$0108;$l$2 = $l$1107;
      break;
     }
     $341 = (_wctomb($mb,$339)|0);
     $342 = ($341|0)<(0);
     $343 = (($p$4195) - ($i$0108))|0;
     $344 = ($341>>>0)>($343>>>0);
     $or$cond20 = $342 | $344;
     if ($or$cond20) {
      $i$0$lcssa = $i$0108;$l$2 = $341;
      break;
     }
     $345 = ((($ws$0109)) + 4|0);
     $346 = (($341) + ($i$0108))|0;
     $347 = ($p$4195>>>0)>($346>>>0);
     if ($347) {
      $i$0108 = $346;$l$1107 = $341;$ws$0109 = $345;
     } else {
      $i$0$lcssa = $346;$l$2 = $341;
      break;
     }
    }
    $348 = ($l$2|0)<(0);
    if ($348) {
     $$0 = -1;
     break L1;
    }
    _pad($f,32,$w$1,$i$0$lcssa,$fl$1$);
    $349 = ($i$0$lcssa|0)==(0);
    if ($349) {
     $i$0$lcssa197 = 0;
     label = 98;
    } else {
     $350 = HEAP32[$arg>>2]|0;
     $i$1119 = 0;$ws$1120 = $350;
     while(1) {
      $351 = HEAP32[$ws$1120>>2]|0;
      $352 = ($351|0)==(0);
      if ($352) {
       $i$0$lcssa197 = $i$0$lcssa;
       label = 98;
       break L313;
      }
      $353 = ((($ws$1120)) + 4|0);
      $354 = (_wctomb($mb,$351)|0);
      $355 = (($354) + ($i$1119))|0;
      $356 = ($355|0)>($i$0$lcssa|0);
      if ($356) {
       $i$0$lcssa197 = $i$0$lcssa;
       label = 98;
       break L313;
      }
      $357 = HEAP32[$f>>2]|0;
      $358 = $357 & 32;
      $359 = ($358|0)==(0);
      if ($359) {
       (___fwritex($mb,$354,$f)|0);
      }
      $360 = ($355>>>0)<($i$0$lcssa>>>0);
      if ($360) {
       $i$1119 = $355;$ws$1120 = $353;
      } else {
       $i$0$lcssa197 = $i$0$lcssa;
       label = 98;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 98) {
   label = 0;
   $361 = $fl$1$ ^ 8192;
   _pad($f,32,$w$1,$i$0$lcssa197,$361);
   $362 = ($w$1|0)>($i$0$lcssa197|0);
   $363 = $362 ? $w$1 : $i$0$lcssa197;
   $22 = $$lcssa328;$cnt$0 = $cnt$1;$l$0 = $363;$l10n$0 = $l10n$3;
   continue;
  }
  if ((label|0) == 77) {
   label = 0;
   $294 = ($p$2|0)>(-1);
   $295 = $fl$4 & -65537;
   $$fl$4 = $294 ? $295 : $fl$4;
   $296 = $arg;
   $297 = $296;
   $298 = HEAP32[$297>>2]|0;
   $299 = (($296) + 4)|0;
   $300 = $299;
   $301 = HEAP32[$300>>2]|0;
   $302 = ($298|0)!=(0);
   $303 = ($301|0)!=(0);
   $304 = $302 | $303;
   $305 = ($p$2|0)!=(0);
   $or$cond = $305 | $304;
   if ($or$cond) {
    $306 = $a$0;
    $307 = (($2) - ($306))|0;
    $308 = $304&1;
    $309 = $308 ^ 1;
    $310 = (($309) + ($307))|0;
    $311 = ($p$2|0)>($310|0);
    $p$2$ = $311 ? $p$2 : $310;
    $a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $1;
   } else {
    $a$2 = $1;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $1;
   }
  }
  $774 = $z$2;
  $775 = $a$2;
  $776 = (($774) - ($775))|0;
  $777 = ($p$5|0)<($776|0);
  $$p$5 = $777 ? $776 : $p$5;
  $778 = (($pl$2) + ($$p$5))|0;
  $779 = ($w$1|0)<($778|0);
  $w$2 = $779 ? $778 : $w$1;
  _pad($f,32,$w$2,$778,$fl$6);
  $780 = HEAP32[$f>>2]|0;
  $781 = $780 & 32;
  $782 = ($781|0)==(0);
  if ($782) {
   (___fwritex($prefix$2,$pl$2,$f)|0);
  }
  $783 = $fl$6 ^ 65536;
  _pad($f,48,$w$2,$778,$783);
  _pad($f,48,$$p$5,$776,0);
  $784 = HEAP32[$f>>2]|0;
  $785 = $784 & 32;
  $786 = ($785|0)==(0);
  if ($786) {
   (___fwritex($a$2,$776,$f)|0);
  }
  $787 = $fl$6 ^ 8192;
  _pad($f,32,$w$2,$778,$787);
  $22 = $$lcssa328;$cnt$0 = $cnt$1;$l$0 = $w$2;$l10n$0 = $l10n$3;
 }
 L348: do {
  if ((label|0) == 245) {
   $788 = ($f|0)==(0|0);
   if ($788) {
    $789 = ($l10n$0$lcssa|0)==(0);
    if ($789) {
     $$0 = 0;
    } else {
     $i$295 = 1;
     while(1) {
      $790 = (($nl_type) + ($i$295<<2)|0);
      $791 = HEAP32[$790>>2]|0;
      $792 = ($791|0)==(0);
      if ($792) {
       $i$295$lcssa = $i$295;
       break;
      }
      $794 = (($nl_arg) + ($i$295<<3)|0);
      _pop_arg443($794,$791,$ap);
      $795 = (($i$295) + 1)|0;
      $796 = ($795|0)<(10);
      if ($796) {
       $i$295 = $795;
      } else {
       $$0 = 1;
       break L348;
      }
     }
     $793 = ($i$295$lcssa|0)<(10);
     if ($793) {
      $i$393 = $i$295$lcssa;
      while(1) {
       $799 = (($nl_type) + ($i$393<<2)|0);
       $800 = HEAP32[$799>>2]|0;
       $801 = ($800|0)==(0);
       $797 = (($i$393) + 1)|0;
       if (!($801)) {
        $$0 = -1;
        break L348;
       }
       $798 = ($797|0)<(10);
       if ($798) {
        $i$393 = $797;
       } else {
        $$0 = 1;
        break;
       }
      }
     } else {
      $$0 = 1;
     }
    }
   } else {
    $$0 = $cnt$1$lcssa;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _strtox($s,$p,$base,$0,$1) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f = sp;
 HEAP32[$f>>2] = 0;
 $2 = ((($f)) + 4|0);
 HEAP32[$2>>2] = $s;
 $3 = ((($f)) + 44|0);
 HEAP32[$3>>2] = $s;
 $4 = ($s|0)<(0|0);
 $5 = ((($s)) + 2147483647|0);
 $$sink = $4 ? (-1) : $5;
 $6 = ((($f)) + 8|0);
 HEAP32[$6>>2] = $$sink;
 $7 = ((($f)) + 76|0);
 HEAP32[$7>>2] = -1;
 ___shlim($f,0);
 $8 = (___intscan($f,$base,1,$0,$1)|0);
 $9 = tempRet0;
 $10 = ($p|0)==(0|0);
 if (!($10)) {
  $11 = ((($f)) + 108|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = HEAP32[$6>>2]|0;
  $15 = $13;
  $16 = $14;
  $17 = (($15) + ($12))|0;
  $18 = (($17) - ($16))|0;
  $19 = (($s) + ($18)|0);
  HEAP32[$p>>2] = $19;
 }
 tempRet0 = ($9);
 STACKTOP = sp;return ($8|0);
}
function _dummy1($x) {
 $x = $x|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _dummy0() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _pop_arg443($arg,$type,$ap) {
 $arg = $arg|0;
 $type = $type|0;
 $ap = $ap|0;
 var $$mask = 0, $$mask1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type>>>0)>(20);
 L1: do {
  if (!($0)) {
   do {
    switch ($type|0) {
    case 9:  {
     $arglist_current = HEAP32[$ap>>2]|0;
     $1 = $arglist_current;
     $2 = ((0) + 4|0);
     $expanded28 = $2;
     $expanded = (($expanded28) - 1)|0;
     $3 = (($1) + ($expanded))|0;
     $4 = ((0) + 4|0);
     $expanded32 = $4;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $5 = $3 & $expanded30;
     $6 = $5;
     $7 = HEAP32[$6>>2]|0;
     $arglist_next = ((($6)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     HEAP32[$arg>>2] = $7;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $8 = $arglist_current2;
     $9 = ((0) + 4|0);
     $expanded35 = $9;
     $expanded34 = (($expanded35) - 1)|0;
     $10 = (($8) + ($expanded34))|0;
     $11 = ((0) + 4|0);
     $expanded39 = $11;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $12 = $10 & $expanded37;
     $13 = $12;
     $14 = HEAP32[$13>>2]|0;
     $arglist_next3 = ((($13)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $15 = ($14|0)<(0);
     $16 = $15 << 31 >> 31;
     $17 = $arg;
     $18 = $17;
     HEAP32[$18>>2] = $14;
     $19 = (($17) + 4)|0;
     $20 = $19;
     HEAP32[$20>>2] = $16;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$ap>>2]|0;
     $21 = $arglist_current5;
     $22 = ((0) + 4|0);
     $expanded42 = $22;
     $expanded41 = (($expanded42) - 1)|0;
     $23 = (($21) + ($expanded41))|0;
     $24 = ((0) + 4|0);
     $expanded46 = $24;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $25 = $23 & $expanded44;
     $26 = $25;
     $27 = HEAP32[$26>>2]|0;
     $arglist_next6 = ((($26)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next6;
     $28 = $arg;
     $29 = $28;
     HEAP32[$29>>2] = $27;
     $30 = (($28) + 4)|0;
     $31 = $30;
     HEAP32[$31>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$ap>>2]|0;
     $32 = $arglist_current8;
     $33 = ((0) + 8|0);
     $expanded49 = $33;
     $expanded48 = (($expanded49) - 1)|0;
     $34 = (($32) + ($expanded48))|0;
     $35 = ((0) + 8|0);
     $expanded53 = $35;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $36 = $34 & $expanded51;
     $37 = $36;
     $38 = $37;
     $39 = $38;
     $40 = HEAP32[$39>>2]|0;
     $41 = (($38) + 4)|0;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $arglist_next9 = ((($37)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next9;
     $44 = $arg;
     $45 = $44;
     HEAP32[$45>>2] = $40;
     $46 = (($44) + 4)|0;
     $47 = $46;
     HEAP32[$47>>2] = $43;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$ap>>2]|0;
     $48 = $arglist_current11;
     $49 = ((0) + 4|0);
     $expanded56 = $49;
     $expanded55 = (($expanded56) - 1)|0;
     $50 = (($48) + ($expanded55))|0;
     $51 = ((0) + 4|0);
     $expanded60 = $51;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $52 = $50 & $expanded58;
     $53 = $52;
     $54 = HEAP32[$53>>2]|0;
     $arglist_next12 = ((($53)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next12;
     $55 = $54&65535;
     $56 = $55 << 16 >> 16;
     $57 = ($56|0)<(0);
     $58 = $57 << 31 >> 31;
     $59 = $arg;
     $60 = $59;
     HEAP32[$60>>2] = $56;
     $61 = (($59) + 4)|0;
     $62 = $61;
     HEAP32[$62>>2] = $58;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$ap>>2]|0;
     $63 = $arglist_current14;
     $64 = ((0) + 4|0);
     $expanded63 = $64;
     $expanded62 = (($expanded63) - 1)|0;
     $65 = (($63) + ($expanded62))|0;
     $66 = ((0) + 4|0);
     $expanded67 = $66;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $67 = $65 & $expanded65;
     $68 = $67;
     $69 = HEAP32[$68>>2]|0;
     $arglist_next15 = ((($68)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next15;
     $$mask1 = $69 & 65535;
     $70 = $arg;
     $71 = $70;
     HEAP32[$71>>2] = $$mask1;
     $72 = (($70) + 4)|0;
     $73 = $72;
     HEAP32[$73>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$ap>>2]|0;
     $74 = $arglist_current17;
     $75 = ((0) + 4|0);
     $expanded70 = $75;
     $expanded69 = (($expanded70) - 1)|0;
     $76 = (($74) + ($expanded69))|0;
     $77 = ((0) + 4|0);
     $expanded74 = $77;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $78 = $76 & $expanded72;
     $79 = $78;
     $80 = HEAP32[$79>>2]|0;
     $arglist_next18 = ((($79)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next18;
     $81 = $80&255;
     $82 = $81 << 24 >> 24;
     $83 = ($82|0)<(0);
     $84 = $83 << 31 >> 31;
     $85 = $arg;
     $86 = $85;
     HEAP32[$86>>2] = $82;
     $87 = (($85) + 4)|0;
     $88 = $87;
     HEAP32[$88>>2] = $84;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$ap>>2]|0;
     $89 = $arglist_current20;
     $90 = ((0) + 4|0);
     $expanded77 = $90;
     $expanded76 = (($expanded77) - 1)|0;
     $91 = (($89) + ($expanded76))|0;
     $92 = ((0) + 4|0);
     $expanded81 = $92;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $93 = $91 & $expanded79;
     $94 = $93;
     $95 = HEAP32[$94>>2]|0;
     $arglist_next21 = ((($94)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next21;
     $$mask = $95 & 255;
     $96 = $arg;
     $97 = $96;
     HEAP32[$97>>2] = $$mask;
     $98 = (($96) + 4)|0;
     $99 = $98;
     HEAP32[$99>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$ap>>2]|0;
     $100 = $arglist_current23;
     $101 = ((0) + 8|0);
     $expanded84 = $101;
     $expanded83 = (($expanded84) - 1)|0;
     $102 = (($100) + ($expanded83))|0;
     $103 = ((0) + 8|0);
     $expanded88 = $103;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $104 = $102 & $expanded86;
     $105 = $104;
     $106 = +HEAPF64[$105>>3];
     $arglist_next24 = ((($105)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next24;
     HEAPF64[$arg>>3] = $106;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$ap>>2]|0;
     $107 = $arglist_current26;
     $108 = ((0) + 8|0);
     $expanded91 = $108;
     $expanded90 = (($expanded91) - 1)|0;
     $109 = (($107) + ($expanded90))|0;
     $110 = ((0) + 8|0);
     $expanded95 = $110;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $111 = $109 & $expanded93;
     $112 = $111;
     $113 = +HEAPF64[$112>>3];
     $arglist_next27 = ((($112)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next27;
     HEAPF64[$arg>>3] = $113;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_u($0,$1,$s) {
 $0 = $0|0;
 $1 = $1|0;
 $s = $s|0;
 var $$0$lcssa = 0, $$01$lcssa$off0 = 0, $$05 = 0, $$1$lcssa = 0, $$12 = 0, $$lcssa20 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $y$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(0);
 $3 = ($0>>>0)>(4294967295);
 $4 = ($1|0)==(0);
 $5 = $4 & $3;
 $6 = $2 | $5;
 if ($6) {
  $$05 = $s;$7 = $0;$8 = $1;
  while(1) {
   $9 = (___uremdi3(($7|0),($8|0),10,0)|0);
   $10 = tempRet0;
   $11 = $9 | 48;
   $12 = $11&255;
   $13 = ((($$05)) + -1|0);
   HEAP8[$13>>0] = $12;
   $14 = (___udivdi3(($7|0),($8|0),10,0)|0);
   $15 = tempRet0;
   $16 = ($8>>>0)>(9);
   $17 = ($7>>>0)>(4294967295);
   $18 = ($8|0)==(9);
   $19 = $18 & $17;
   $20 = $16 | $19;
   if ($20) {
    $$05 = $13;$7 = $14;$8 = $15;
   } else {
    $$lcssa20 = $13;$28 = $14;$29 = $15;
    break;
   }
  }
  $$0$lcssa = $$lcssa20;$$01$lcssa$off0 = $28;
 } else {
  $$0$lcssa = $s;$$01$lcssa$off0 = $0;
 }
 $21 = ($$01$lcssa$off0|0)==(0);
 if ($21) {
  $$1$lcssa = $$0$lcssa;
 } else {
  $$12 = $$0$lcssa;$y$03 = $$01$lcssa$off0;
  while(1) {
   $22 = (($y$03>>>0) % 10)&-1;
   $23 = $22 | 48;
   $24 = $23&255;
   $25 = ((($$12)) + -1|0);
   HEAP8[$25>>0] = $24;
   $26 = (($y$03>>>0) / 10)&-1;
   $27 = ($y$03>>>0)<(10);
   if ($27) {
    $$1$lcssa = $25;
    break;
   } else {
    $$12 = $25;$y$03 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _pad($f,$c,$w,$l,$fl) {
 $f = $f|0;
 $c = $c|0;
 $w = $w|0;
 $l = $l|0;
 $fl = $fl|0;
 var $$0$lcssa6 = 0, $$02 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, $pad = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pad = sp;
 $0 = $fl & 73728;
 $1 = ($0|0)==(0);
 $2 = ($w|0)>($l|0);
 $or$cond = $2 & $1;
 do {
  if ($or$cond) {
   $3 = (($w) - ($l))|0;
   $4 = ($3>>>0)>(256);
   $5 = $4 ? 256 : $3;
   _memset(($pad|0),($c|0),($5|0))|0;
   $6 = ($3>>>0)>(255);
   $7 = HEAP32[$f>>2]|0;
   $8 = $7 & 32;
   $9 = ($8|0)==(0);
   if ($6) {
    $10 = (($w) - ($l))|0;
    $$02 = $3;$17 = $7;$18 = $9;
    while(1) {
     if ($18) {
      (___fwritex($pad,256,$f)|0);
      $$pre = HEAP32[$f>>2]|0;
      $14 = $$pre;
     } else {
      $14 = $17;
     }
     $11 = (($$02) + -256)|0;
     $12 = ($11>>>0)>(255);
     $13 = $14 & 32;
     $15 = ($13|0)==(0);
     if ($12) {
      $$02 = $11;$17 = $14;$18 = $15;
     } else {
      break;
     }
    }
    $16 = $10 & 255;
    if ($15) {
     $$0$lcssa6 = $16;
    } else {
     break;
    }
   } else {
    if ($9) {
     $$0$lcssa6 = $3;
    } else {
     break;
    }
   }
   (___fwritex($pad,$$0$lcssa6,$f)|0);
  }
 } while(0);
 STACKTOP = sp;return;
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)>($l>>>0);
 $l$ = $7 ? $l : $6;
 _memcpy(($3|0),($s|0),($l$|0))|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + ($l$)|0);
 HEAP32[$2>>2] = $9;
 return ($l|0);
}
function runPostSets() {

}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _llvm_bswap_i32(x) {
    x = x|0;
    return (((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24))|0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return $10$0 | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return $1$0 | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



  
function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&255](a1|0,a2|0,a3|0)|0;
}


function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&255](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_i(index) {
  index = index|0;
  
  return FUNCTION_TABLE_i[index&255]()|0;
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&255](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&255](a1|0,a2|0);
}


function dynCall_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return FUNCTION_TABLE_iiiiiii[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&255](a1|0)|0;
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&255](a1|0,a2|0,a3|0);
}


function dynCall_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
  FUNCTION_TABLE_viiiiiiii[index&127](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0);
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&255]();
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&255](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&255](a1|0,a2|0)|0;
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&255](a1|0,a2|0,a3|0,a4|0);
}

function b0(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(0);return 0; }
function b1(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(1); }
function b2() { ; nullFunc_i(2);return 0; }
function b3(p0) { p0 = p0|0; nullFunc_vi(3); }
function b4(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(4); }
function b5(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iiiiiii(5);return 0; }
function b6(p0) { p0 = p0|0; nullFunc_ii(6);return 0; }
function b7(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(7); }
function b8(p0,p1,p2,p3,p4,p5,p6,p7) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; nullFunc_viiiiiiii(8); }
function b9() { ; nullFunc_v(9); }
function ___cxa_pure_virtual__wrapper() { ; ___cxa_pure_virtual(); }
function ___cxa_end_catch__wrapper() { ; ___cxa_end_catch(); }
function b10(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(10);return 0; }
function b11(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(11); }
function b12(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(12);return 0; }
function b13(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(13); }
function ___assert_fail__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; ___assert_fail(p0|0,p1|0,p2|0,p3|0); }

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiii = [b0,b0,b0,b0,b0,b0,b0,__ZN10File_stdio4openEPKcS1_,b0,b0,b0,b0,__ZN10File_stdio4readEPvj,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b0,b0,b0,b0
,b0,b0,b0,_sn_write,b0,___stdout_write,___stdio_seek,___stdio_write,b0,b0,b0,b0,b0,b0,__ZN4File4readEPvj,b0,b0,b0,b0,b0,b0,b0,_open,b0,b0,b0,b0,b0,b0,b0
,__ZN4File4openEPKcS1_,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,__ZN4Game8derefBoxEii,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,_zcalloc,b0,b0,b0
,b0,b0,b0,___stdio_read,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0];
var FUNCTION_TABLE_viiiii = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,__ZN14SystemStub_SDL10darkenRectEiiii,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1
,b1,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,__ZN4GameC2EP10SystemStubPKcS3_S3_,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_i = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZL9loadInt16v,b2,__ZL9loadInt32v,b2,b2,b2,b2,b2,b2,b2
,b2,___cxa_get_globals_fast,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_vi = [b3,__ZN22MemoryMappedFile_POSIXD2Ev,__ZN22MemoryMappedFile_POSIXD0Ev,__ZN21MemoryMappedFile_implD2Ev,__ZN21MemoryMappedFile_implD0Ev,__ZN10File_stdioD2Ev,__ZN10File_stdioD0Ev,b3,__ZN10File_stdio5closeEv,b3,b3,b3,b3,b3,__ZN9File_implD2Ev,__ZN9File_implD0Ev,b3,__ZN16FileSystem_POSIXD2Ev,__ZN16FileSystem_POSIXD0Ev,b3,__ZN15FileSystem_implD2Ev,__ZN15FileSystem_implD0Ev,__ZN8MixerSDLD2Ev,__ZN8MixerSDLD0Ev,__ZN8MixerSDL4openEv,__ZN8MixerSDL5closeEv,b3,b3,b3
,b3,__ZN8MixerSDL7stopAllEv,b3,__ZN5MixerD2Ev,__ZN5MixerD0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,__ZN4Game20oop_initializeObjectEv,__ZN4Game22oop_evalCurrentObjectXEv,__ZN4Game22oop_evalCurrentObjectYEv,__ZN4Game15oop_evalObjectXEv,__ZN4Game15oop_evalObjectYEv,__ZN4Game15oop_evalObjectZEv,__ZN4Game17oop_setObjectFlipEv,__ZN4Game26oop_adjustObjectPos_vv0000Ev,__ZN4Game26oop_adjustObjectPos_vv1v00Ev,__ZN4Game26oop_adjustObjectPos_vv1v1vEv,__ZN4Game22oop_setupObjectPos_121Ev,__ZN4Game22oop_setupObjectPos_122Ev,__ZN4Game22oop_setupObjectPos_123Ev,__ZN4Game26oop_adjustObjectPos_1v0000Ev,__ZN4Game26oop_adjustObjectPos_1v1v1vEv,__ZN4Game22oop_setupObjectPos_021Ev,__ZN4Game22oop_setupObjectPos_022Ev,__ZN4Game22oop_setupObjectPos_023Ev,__ZN4Game17oop_evalObjectVarEv,__ZN4Game23oop_translateObjectXPosEv,__ZN4Game23oop_translateObjectYPosEv,__ZN4Game17oop_setObjectModeEv
,__ZN4Game20oop_setObjectInitPosEv,__ZN4Game29oop_setObjectTransformInitPosEv,__ZN4Game19oop_evalObjectXInitEv,__ZN4Game19oop_evalObjectYInitEv,__ZN4Game19oop_evalObjectZInitEv,__ZN4Game21oop_setObjectFlipInitEv,__ZN4Game16oop_setObjectCelEv,__ZN4Game18oop_resetObjectCelEv,__ZN4Game11oop_evalVarEv,__ZN4Game23oop_getSceneNumberInVarEv,__ZN4Game14oop_disableBoxEv,__ZN4Game13oop_enableBoxEv,__ZN4Game17oop_evalBoxesXPosEv,__ZN4Game17oop_evalBoxesYPosEv,__ZN4Game18oop_setBoxToObjectEv,__ZN4Game13oop_clipBoxesEv,__ZN4Game20oop_saveObjectStatusEv,__ZN4Game18oop_addObjectToBagEv,__ZN4Game23oop_removeObjectFromBagEv,__ZN4Game31oop_playSoundLowerEqualPriorityEv,__ZN4Game26oop_playSoundLowerPriorityEv,__ZN4Game17oop_startDialogueEv,__ZN4Game25oop_switchSceneClearBoxesEv,__ZN4Game24oop_switchSceneCopyBoxesEv,__ZN14SystemStub_SDLD2Ev,__ZN14SystemStub_SDLD0Ev,b3,__ZN14SystemStub_SDL7destroyEv,b3,b3
,b3,b3,__ZN14SystemStub_SDL12updateScreenEv,b3,b3,__ZN14SystemStub_SDL9unlockYUVEv,__ZN14SystemStub_SDL13processEventsEv,b3,b3,__ZN14SystemStub_SDL9lockAudioEv,__ZN14SystemStub_SDL11unlockAudioEv,b3,__ZN14SystemStub_SDL9stopAudioEv,b3,b3,__ZN10SystemStubD2Ev,__ZN10SystemStubD0Ev,b3,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,b3,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,b3,b3,b3,b3,__ZN10__cxxabiv120__si_class_type_infoD0Ev
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN10FileHolderD2Ev,b3,b3,b3,b3,__Z19stringStripCommentsPc,__ZN4Game8parseDLGEv,b3,__ZN10File_stdioC2Ev,b3,b3,b3,b3,b3,b3,b3,__ZN16FileSystem_POSIXC2Ev,__ZN4FileD2Ev,__ZN4FileC2Ev
,b3,b3,__ZN15RandomGeneratorC2Ev,__ZN4Game13detectVersionEv,__ZN10FileSystemD2Ev,b3,b3,__ZN8MixerSDLC2Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,_free,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,__Z17stringToLowerCasePc,b3,b3,__ZL9saveInt16i,b3,b3,__ZL22saveOrLoad_sceneObjectR11SceneObject,__ZL14saveOrLoad_boxR3Box,__ZL28saveOrLoad_sceneObjectStatusR17SceneObjectStatus,b3,__ZL9saveInt32i,__ZN4Game9stopMusicEv,b3,b3,b3,__ZN14SystemStub_SDLC2Ev,b3,b3,b3,b3,b3,b3
,b3,b3,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b3,_cleanup367,_cleanup425,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_vii = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN16FileSystem_POSIX26buildFileListFromDirectoryEPKc,b4,b4,b4,b4,b4,b4,b4,b4,b4
,__ZN8MixerSDL9stopSoundEi,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,__ZN14SystemStub_SDL5sleepEi,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__Z5errorPKcz,b4,b4,b4,b4,b4,b4,b4,__ZN4Game11setupDialogEPKc,b4,b4,__ZN22MemoryMappedFile_POSIXC2EPKc,b4,b4,b4,b4,b4,b4,b4,b4
,b4,__ZN4FileC2EP9File_impl,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN4Game14clearSceneDataEi,b4,__ZN4Game7loadMOVEPKc,__ZL15parse_BagObjectPPcP4Game,__ZL20parse_SceneConditionPPcP4Game,__ZL12parse_ObjectPPcP4Game,__ZL20parse_BoxDescriptionPPcP4Game,__ZL17parseToken_ScreenPPcP4Game,__ZL16getNextToken_IntPPcPi,__ZL15parseToken_MidiPPcP4Game,__ZL17parseToken_ObjectPPcP4Game,__ZL14parseToken_BagPPcP4Game,b4,b4,b4,b4,b4,b4,b4
,b4,__ZN4Game7loadWGPEPKc,b4,b4,b4,b4,b4,b4,b4,b4,__Z7warningPKcz,b4,b4,__ZL13saveOrLoadStrPcs,b4,b4,b4,__ZL15save_bagObjectsP9BagObjecti,b4,b4,b4,__ZL15load_bagObjectsP9BagObjectRi,b4,b4,b4,b4,b4,_zcfree,b4,_abort_message
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_iiiiiii = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,___mmap,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5];
var FUNCTION_TABLE_ii = [b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN10File_stdio4sizeEv,__ZN10File_stdio4tellEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,__ZN4Game8cop_trueEv,__ZN4Game19cop_isInRandomRangeEv,__ZN4Game16cop_isKeyPressedEv,__ZN4Game19cop_isKeyNotPressedEv,__ZN4Game20cop_testMouseButtonsEv,__ZN4Game19cop_isObjectInSceneEv,__ZN4Game23cop_testObjectPrevStateEv,__ZN4Game19cop_testObjectStateEv,__ZN4Game18cop_isObjectInRectEv,__ZN4Game31cop_testPrevObjectTransformXPosEv,__ZN4Game27cop_testObjectTransformXPosEv,__ZN4Game31cop_testPrevObjectTransformYPosEv,__ZN4Game27cop_testObjectTransformYPosEv,__ZN4Game22cop_testObjectPrevFlipEv,__ZN4Game18cop_testObjectFlipEv,__ZN4Game26cop_testObjectPrevFrameNumEv,__ZN4Game22cop_testObjectFrameNumEv,__ZN4Game21cop_testPrevMotionNumEv,__ZN4Game17cop_testMotionNumEv,__ZN4Game17cop_testObjectVarEv,__ZN4Game27cop_testObjectAndObjectXPosEv,__ZN4Game27cop_testObjectAndObjectYPosEv,__ZN4Game24cop_testObjectMotionYPosEv,__ZN4Game11cop_testVarEv,__ZN4Game22cop_isCurrentBagActionEv
,__ZN4Game17cop_isObjectInBoxEv,__ZN4Game20cop_isObjectNotInBoxEv,__ZN4Game30cop_isObjectNotIntersectingBoxEv,__ZN4Game22cop_isCurrentBagObjectEv,__ZN4Game22cop_isLifeBarDisplayedEv,__ZN4Game25cop_isLifeBarNotDisplayedEv,__ZN4Game20cop_testLastDialogueEv,__ZN4Game15cop_isNextSceneEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,__ZN14SystemStub_SDL12getTimeStampEv,b6,b6,b6,b6,__ZN14SystemStub_SDL19getOutputSampleRateEv,__ZN14SystemStub_SDL8getMixerEv,b6,b6,b6,b6,b6,__ZNKSt9bad_alloc4whatEv,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,___stdio_close,b6,b6,b6,__ZN10FileHolderptEv,__ZN4File12readUint16LEEv,b6,b6,b6,_malloc,b6,__ZN4File4sizeEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_close,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,__ZL12getNextTokenPPc199,b6,__Z18stringNextTokenEOLPPc,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN4File12readUint32LEEv,b6,__ZNK4File5ioErrEv,b6,b6,__Z14READ_LE_UINT32PKv
,b6,b6,b6,b6,__ZN4File8readByteEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__Z16Mixer_SDL_createP10SystemStub,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_viii = [b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZN10File_stdio4seekEii,b7,__ZN10File_stdio5writeEPvj,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZN8MixerSDL9playSoundEP4FilePi,__ZN8MixerSDL9playMusicEP4FilePi,b7
,b7,b7,__ZN8MixerSDL11setMusicMixEPvPFvS0_PhiE,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZN14SystemStub_SDL10setPaletteEPKhi,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZN14SystemStub_SDL10startAudioEPFvPvPhiES0_,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZN10File_stdioC2Ejj,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZN4File4seekEii,b7,b7,b7,b7
,__Z5debugtPKcz,b7,b7,b7,b7,b7,b7,__ZN4Game7loadSPREPKcP14SceneAnimation,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7];
var FUNCTION_TABLE_viiiiiiii = [b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,__ZN14SystemStub_SDL8copyRectEiiiiPKhib,b8,b8,b8,b8,b8,b8,b8,b8];
var FUNCTION_TABLE_v = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,___cxa_pure_virtual__wrapper,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZL25default_terminate_handlerv,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,__ZL8mainLoopv,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b9
,___cxa_end_catch__wrapper,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9];
var FUNCTION_TABLE_iiiii = [b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,_snprintf,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10];
var FUNCTION_TABLE_viiiiii = [b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZN14SystemStub_SDL8fillRectEiiiih
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b11,b11,b11
,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11];
var FUNCTION_TABLE_iii = [b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZN8MixerSDL14isSoundPlayingEi
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,__ZN14SystemStub_SDL7lockYUVEPi,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,_stat,b12,___munmap,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZL23parseToken_GlobalMemoryPPcP4Game,b12,b12,_strcasecmp,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__Z10decodeLzssPKhPh,__Z10decodeZlibPKhPh,b12
,b12,b12,_strcpy,b12,b12,_strcmp,_strrchr,b12,b12,b12,b12,b12,_strchr,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZL12eventHandlerPvP9SDL_Event,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12];
var FUNCTION_TABLE_viiii = [b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZN14SystemStub_SDL4initEPKcii,b13,b13,b13
,b13,b13,b13,__ZN14SystemStub_SDL6setYUVEbii,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b13
,b13,b13,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b13,b13,b13,b13,b13,b13,b13,b13,b13,___assert_fail__wrapper,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13];

  return { ___cxa_can_catch: ___cxa_can_catch, _free: _free, _main: _main, ___cxa_is_pointer_type: ___cxa_is_pointer_type, _i64Add: _i64Add, _memmove: _memmove, _i64Subtract: _i64Subtract, _memset: _memset, _malloc: _malloc, _memcpy: _memcpy, _llvm_bswap_i32: _llvm_bswap_i32, _bitshift64Lshr: _bitshift64Lshr, ___errno_location: ___errno_location, _bitshift64Shl: _bitshift64Shl, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii, dynCall_viiiii: dynCall_viiiii, dynCall_i: dynCall_i, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_ii: dynCall_ii, dynCall_viii: dynCall_viii, dynCall_viiiiiiii: dynCall_viiiiiiii, dynCall_v: dynCall_v, dynCall_iiiii: dynCall_iiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_iii: dynCall_iii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_can_catch.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_is_pointer_type.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memmove.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__malloc.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____errno_location.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__llvm_bswap_i32.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var _free = Module["_free"] = asm["_free"];
var _main = Module["_main"] = asm["_main"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiiiiiii = Module["dynCall_viiiiiiii"] = asm["dynCall_viiiiiiii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===


function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = Runtime.stackSave();

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      Runtime.stackRestore(initialStackTop);
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



